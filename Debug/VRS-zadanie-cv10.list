
VRS-zadanie-cv10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008008  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  08008198  08008198  00018198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008724  08008724  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008724  08008724  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008724  08008724  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008724  08008724  00018724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008728  08008728  00018728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800872c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          0000010c  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e8  200002e8  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a614  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f3c  00000000  00000000  0002a820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000910  00000000  00000000  0002c760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000828  00000000  00000000  0002d070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001844b  00000000  00000000  0002d898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000750d  00000000  00000000  00045ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b507  00000000  00000000  0004d1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c86f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a14  00000000  00000000  000c874c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008180 	.word	0x08008180

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008180 	.word	0x08008180

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <__NVIC_GetPriorityGrouping+0x18>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	f003 0307 	and.w	r3, r3, #7
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	db0b      	blt.n	8000d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	f003 021f 	and.w	r2, r3, #31
 8000d28:	4907      	ldr	r1, [pc, #28]	; (8000d48 <__NVIC_EnableIRQ+0x38>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	095b      	lsrs	r3, r3, #5
 8000d30:	2001      	movs	r0, #1
 8000d32:	fa00 f202 	lsl.w	r2, r0, r2
 8000d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db0a      	blt.n	8000d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	490c      	ldr	r1, [pc, #48]	; (8000d98 <__NVIC_SetPriority+0x4c>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d74:	e00a      	b.n	8000d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4908      	ldr	r1, [pc, #32]	; (8000d9c <__NVIC_SetPriority+0x50>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	3b04      	subs	r3, #4
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	761a      	strb	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f1c3 0307 	rsb	r3, r3, #7
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2304      	movcs	r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d902      	bls.n	8000dd0 <NVIC_EncodePriority+0x30>
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3b03      	subs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <NVIC_EncodePriority+0x32>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43d9      	mvns	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4313      	orrs	r3, r2
         );
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3724      	adds	r7, #36	; 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e12:	695a      	ldr	r2, [r3, #20]
 8000e14:	4907      	ldr	r1, [pc, #28]	; (8000e34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e1e:	695a      	ldr	r2, [r3, #20]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4013      	ands	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	40021000 	.word	0x40021000

08000e38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff ffe3 	bl	8000e08 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e42:	f7ff ff57 	bl	8000cf4 <__NVIC_GetPriorityGrouping>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ffa7 	bl	8000da0 <NVIC_EncodePriority>
 8000e52:	4603      	mov	r3, r0
 8000e54:	4619      	mov	r1, r3
 8000e56:	2010      	movs	r0, #16
 8000e58:	f7ff ff78 	bl	8000d4c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000e5c:	2010      	movs	r0, #16
 8000e5e:	f7ff ff57 	bl	8000d10 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e62:	f7ff ff47 	bl	8000cf4 <__NVIC_GetPriorityGrouping>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff97 	bl	8000da0 <NVIC_EncodePriority>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4619      	mov	r1, r3
 8000e76:	2011      	movs	r0, #17
 8000e78:	f7ff ff68 	bl	8000d4c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000e7c:	2011      	movs	r0, #17
 8000e7e:	f7ff ff47 	bl	8000d10 <__NVIC_EnableIRQ>

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <LL_AHB1_GRP1_EnableClock>:
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e92:	695a      	ldr	r2, [r3, #20]
 8000e94:	4907      	ldr	r1, [pc, #28]	; (8000eb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e9e:	695a      	ldr	r2, [r3, #20]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000ebc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ec0:	f7ff ffe2 	bl	8000e88 <LL_AHB1_GRP1_EnableClock>

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <__NVIC_SetPriorityGrouping>:
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_GetPriorityGrouping>:
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_SetPriority>:
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	db0a      	blt.n	8000f56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	490c      	ldr	r1, [pc, #48]	; (8000f78 <__NVIC_SetPriority+0x4c>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	0112      	lsls	r2, r2, #4
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f54:	e00a      	b.n	8000f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4908      	ldr	r1, [pc, #32]	; (8000f7c <__NVIC_SetPriority+0x50>)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	3b04      	subs	r3, #4
 8000f64:	0112      	lsls	r2, r2, #4
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	440b      	add	r3, r1
 8000f6a:	761a      	strb	r2, [r3, #24]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <NVIC_EncodePriority>:
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	; 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f1c3 0307 	rsb	r3, r3, #7
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	bf28      	it	cs
 8000f9e:	2304      	movcs	r3, #4
 8000fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d902      	bls.n	8000fb0 <NVIC_EncodePriority+0x30>
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b03      	subs	r3, #3
 8000fae:	e000      	b.n	8000fb2 <NVIC_EncodePriority+0x32>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43d9      	mvns	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	4313      	orrs	r3, r2
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3724      	adds	r7, #36	; 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <LL_RCC_HSI_Enable+0x1c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <LL_RCC_HSI_Enable+0x1c>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000

08001008 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <LL_RCC_HSI_IsReady+0x20>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b02      	cmp	r3, #2
 8001016:	bf0c      	ite	eq
 8001018:	2301      	moveq	r3, #1
 800101a:	2300      	movne	r3, #0
 800101c:	b2db      	uxtb	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	40021000 	.word	0x40021000

0800102c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4904      	ldr	r1, [pc, #16]	; (8001054 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001042:	4313      	orrs	r3, r2
 8001044:	600b      	str	r3, [r1, #0]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000

08001058 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <LL_RCC_SetSysClkSource+0x24>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f023 0203 	bic.w	r2, r3, #3
 8001068:	4904      	ldr	r1, [pc, #16]	; (800107c <LL_RCC_SetSysClkSource+0x24>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4313      	orrs	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40021000 	.word	0x40021000

08001080 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <LL_RCC_GetSysClkSource+0x18>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 030c 	and.w	r3, r3, #12
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000

0800109c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <LL_RCC_SetAHBPrescaler+0x24>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ac:	4904      	ldr	r1, [pc, #16]	; (80010c0 <LL_RCC_SetAHBPrescaler+0x24>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	604b      	str	r3, [r1, #4]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	40021000 	.word	0x40021000

080010c4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010d4:	4904      	ldr	r1, [pc, #16]	; (80010e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4313      	orrs	r3, r2
 80010da:	604b      	str	r3, [r1, #4]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	40021000 	.word	0x40021000

080010ec <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <LL_RCC_SetAPB2Prescaler+0x24>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80010fc:	4904      	ldr	r1, [pc, #16]	; (8001110 <LL_RCC_SetAPB2Prescaler+0x24>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4313      	orrs	r3, r2
 8001102:	604b      	str	r3, [r1, #4]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	40021000 	.word	0x40021000

08001114 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <LL_APB1_GRP1_EnableClock+0x2c>)
 800111e:	69da      	ldr	r2, [r3, #28]
 8001120:	4907      	ldr	r1, [pc, #28]	; (8001140 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4313      	orrs	r3, r2
 8001126:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <LL_APB1_GRP1_EnableClock+0x2c>)
 800112a:	69da      	ldr	r2, [r3, #28]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4013      	ands	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	40021000 	.word	0x40021000

08001144 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <LL_APB2_GRP1_EnableClock+0x2c>)
 800114e:	699a      	ldr	r2, [r3, #24]
 8001150:	4907      	ldr	r1, [pc, #28]	; (8001170 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4313      	orrs	r3, r2
 8001156:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <LL_APB2_GRP1_EnableClock+0x2c>)
 800115a:	699a      	ldr	r2, [r3, #24]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4013      	ands	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001162:	68fb      	ldr	r3, [r7, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	40021000 	.word	0x40021000

08001174 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <LL_FLASH_SetLatency+0x24>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f023 0207 	bic.w	r2, r3, #7
 8001184:	4904      	ldr	r1, [pc, #16]	; (8001198 <LL_FLASH_SetLatency+0x24>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4313      	orrs	r3, r2
 800118a:	600b      	str	r3, [r1, #0]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	40022000 	.word	0x40022000

0800119c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <LL_FLASH_GetLatency+0x18>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0307 	and.w	r3, r3, #7
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40022000 	.word	0x40022000

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b0df      	sub	sp, #380	; 0x17c
 80011bc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
 	USART2_RegisterCallback(proccesDmaData);
 80011be:	4835      	ldr	r0, [pc, #212]	; (8001294 <main+0xdc>)
 80011c0:	f001 fa9e 	bl	8002700 <USART2_RegisterCallback>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f7ff ffbd 	bl	8001144 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80011ca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80011ce:	f7ff ffa1 	bl	8001114 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d2:	2003      	movs	r0, #3
 80011d4:	f7ff fe78 	bl	8000ec8 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80011d8:	f7ff fe9a 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 80011dc:	4603      	mov	r3, r0
 80011de:	2200      	movs	r2, #0
 80011e0:	210f      	movs	r1, #15
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fecc 	bl	8000f80 <NVIC_EncodePriority>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4619      	mov	r1, r3
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f7ff fe9c 	bl	8000f2c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f4:	f000 f856 	bl	80012a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f8:	f7ff fe5e 	bl	8000eb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80011fc:	f7ff fe1c 	bl	8000e38 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001200:	f001 f994 	bl	800252c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001204:	f000 fcc2 	bl	8001b8c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  char data_to_send[100];
  char actual_data_buffer[256];
  strcpy(actual_data_buffer,"");
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  setDutyCycle(99);
 800120e:	2063      	movs	r0, #99	; 0x63
 8001210:	f000 fd5c 	bl	8001ccc <setDutyCycle>
	  LL_mDelay(1000);
 8001214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001218:	f002 fb24 	bl	8003864 <LL_mDelay>
	  setDutyCycle(30);
 800121c:	201e      	movs	r0, #30
 800121e:	f000 fd55 	bl	8001ccc <setDutyCycle>
	  //Sending info about buffer capacity status
	  	  uint16_t buffer_state = getBufferState();
 8001222:	f001 f977 	bl	8002514 <getBufferState>
 8001226:	4603      	mov	r3, r0
 8001228:	f8a7 316e 	strh.w	r3, [r7, #366]	; 0x16e
	  	  float buffer_percentage = (float) (buffer_state) / (float) (DMA_USART2_BUFFER_SIZE)*100;
 800122c:	f8b7 316e 	ldrh.w	r3, [r7, #366]	; 0x16e
 8001230:	ee07 3a90 	vmov	s15, r3
 8001234:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001238:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001298 <main+0xe0>
 800123c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001240:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800129c <main+0xe4>
 8001244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001248:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168
	  	  sprintf(data_to_send, "Buffer capacity: %d bytes, occupied memory: %d bytes, load [in %%]:%.2f%%\r\n", DMA_USART2_BUFFER_SIZE, buffer_state, buffer_percentage);
 800124c:	f8b7 416e 	ldrh.w	r4, [r7, #366]	; 0x16e
 8001250:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 8001254:	f7ff f978 	bl	8000548 <__aeabi_f2d>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8001260:	e9cd 2300 	strd	r2, r3, [sp]
 8001264:	4623      	mov	r3, r4
 8001266:	22c8      	movs	r2, #200	; 0xc8
 8001268:	490d      	ldr	r1, [pc, #52]	; (80012a0 <main+0xe8>)
 800126a:	f003 f9e3 	bl	8004634 <siprintf>

	  	  USART2_PutBuffer((uint8_t *) data_to_send, strlen(data_to_send));
 800126e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001272:	4618      	mov	r0, r3
 8001274:	f7fe ffac 	bl	80001d0 <strlen>
 8001278:	4603      	mov	r3, r0
 800127a:	b2da      	uxtb	r2, r3
 800127c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fa4e 	bl	8002724 <USART2_PutBuffer>
	  	  LL_mDelay(1000);
 8001288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800128c:	f002 faea 	bl	8003864 <LL_mDelay>
  {
 8001290:	e7bd      	b.n	800120e <main+0x56>
 8001292:	bf00      	nop
 8001294:	08001309 	.word	0x08001309
 8001298:	43480000 	.word	0x43480000
 800129c:	42c80000 	.word	0x42c80000
 80012a0:	08008198 	.word	0x08008198

080012a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff ff63 	bl	8001174 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80012ae:	bf00      	nop
 80012b0:	f7ff ff74 	bl	800119c <LL_FLASH_GetLatency>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1fa      	bne.n	80012b0 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80012ba:	f7ff fe95 	bl	8000fe8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80012be:	bf00      	nop
 80012c0:	f7ff fea2 	bl	8001008 <LL_RCC_HSI_IsReady>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d1fa      	bne.n	80012c0 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80012ca:	2010      	movs	r0, #16
 80012cc:	f7ff feae 	bl	800102c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff fee3 	bl	800109c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff fef4 	bl	80010c4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff ff05 	bl	80010ec <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f7ff feb8 	bl	8001058 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80012e8:	bf00      	nop
 80012ea:	f7ff fec9 	bl	8001080 <LL_RCC_GetSysClkSource>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1fa      	bne.n	80012ea <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80012f4:	4803      	ldr	r0, [pc, #12]	; (8001304 <SystemClock_Config+0x60>)
 80012f6:	f002 faa7 	bl	8003848 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80012fa:	4802      	ldr	r0, [pc, #8]	; (8001304 <SystemClock_Config+0x60>)
 80012fc:	f002 fad8 	bl	80038b0 <LL_SetSystemCoreClock>
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	007a1200 	.word	0x007a1200

08001308 <proccesDmaData>:

/* USER CODE BEGIN 4 */
void proccesDmaData(uint8_t sign)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b09c      	sub	sp, #112	; 0x70
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
	static uint8_t lowercase_char = 0;
	static uint8_t uppercase_char = 0;

		// type your algorithm here:
	char data_number_to_send[100];
	if(sign == '\r') return; //filtering endline character from PuTTY
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b0d      	cmp	r3, #13
 8001316:	d066      	beq.n	80013e6 <proccesDmaData+0xde>


	if(sign == '#' && allow == 0){ //zapneme povolenie pre citanie znakov, startovaci znak je prijaty len raz
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	2b23      	cmp	r3, #35	; 0x23
 800131c:	d10f      	bne.n	800133e <proccesDmaData+0x36>
 800131e:	4b34      	ldr	r3, [pc, #208]	; (80013f0 <proccesDmaData+0xe8>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10b      	bne.n	800133e <proccesDmaData+0x36>
		allow = 1;
 8001326:	4b32      	ldr	r3, [pc, #200]	; (80013f0 <proccesDmaData+0xe8>)
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]
		calculate_sign = 0;
 800132c:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <proccesDmaData+0xec>)
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
		lowercase_char = 0;
 8001332:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <proccesDmaData+0xf0>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
		uppercase_char = 0;
 8001338:	4b30      	ldr	r3, [pc, #192]	; (80013fc <proccesDmaData+0xf4>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
	}
	if(sign == '$' && allow == 1){ // po prijati ukoncovacieho znaku vypneme povolenie a vypiseme data
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	2b24      	cmp	r3, #36	; 0x24
 8001342:	d11d      	bne.n	8001380 <proccesDmaData+0x78>
 8001344:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <proccesDmaData+0xe8>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d119      	bne.n	8001380 <proccesDmaData+0x78>
		allow = 0;
 800134c:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <proccesDmaData+0xe8>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
		sprintf(data_number_to_send, "Number of lowercase characters: %d , Number of uppercase characters: %d\r\n", lowercase_char,uppercase_char);
 8001352:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <proccesDmaData+0xf0>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	4b28      	ldr	r3, [pc, #160]	; (80013fc <proccesDmaData+0xf4>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	f107 000c 	add.w	r0, r7, #12
 8001360:	4927      	ldr	r1, [pc, #156]	; (8001400 <proccesDmaData+0xf8>)
 8001362:	f003 f967 	bl	8004634 <siprintf>
		USART2_PutBuffer((uint8_t *) data_number_to_send, strlen(data_number_to_send));
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	4618      	mov	r0, r3
 800136c:	f7fe ff30 	bl	80001d0 <strlen>
 8001370:	4603      	mov	r3, r0
 8001372:	b2da      	uxtb	r2, r3
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4611      	mov	r1, r2
 800137a:	4618      	mov	r0, r3
 800137c:	f001 f9d2 	bl	8002724 <USART2_PutBuffer>
	}
	if(calculate_sign > 35){//ak sme prekrocili pocet znakov o 35, prestaneme znaky ratat a zahodime data
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <proccesDmaData+0xec>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b23      	cmp	r3, #35	; 0x23
 8001386:	d90b      	bls.n	80013a0 <proccesDmaData+0x98>
		allow = 0;
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <proccesDmaData+0xe8>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
		calculate_sign = 0;
 800138e:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <proccesDmaData+0xec>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
		lowercase_char = 0;
 8001394:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <proccesDmaData+0xf0>)
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
		uppercase_char = 0;
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <proccesDmaData+0xf4>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
	}
	if (allow == 1){//ratanie malych/velkych pismen
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <proccesDmaData+0xe8>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d11f      	bne.n	80013e8 <proccesDmaData+0xe0>
		calculate_sign++;
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <proccesDmaData+0xec>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <proccesDmaData+0xec>)
 80013b2:	701a      	strb	r2, [r3, #0]
		if(sign >= 'a' && sign <= 'z'){
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	2b60      	cmp	r3, #96	; 0x60
 80013b8:	d908      	bls.n	80013cc <proccesDmaData+0xc4>
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b7a      	cmp	r3, #122	; 0x7a
 80013be:	d805      	bhi.n	80013cc <proccesDmaData+0xc4>
			lowercase_char++;
 80013c0:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <proccesDmaData+0xf0>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <proccesDmaData+0xf0>)
 80013ca:	701a      	strb	r2, [r3, #0]
		}
		if(sign >= 'A' && sign <= 'Z'){
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2b40      	cmp	r3, #64	; 0x40
 80013d0:	d90a      	bls.n	80013e8 <proccesDmaData+0xe0>
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b5a      	cmp	r3, #90	; 0x5a
 80013d6:	d807      	bhi.n	80013e8 <proccesDmaData+0xe0>
			uppercase_char++;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <proccesDmaData+0xf4>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	3301      	adds	r3, #1
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <proccesDmaData+0xf4>)
 80013e2:	701a      	strb	r2, [r3, #0]
 80013e4:	e000      	b.n	80013e8 <proccesDmaData+0xe0>
	if(sign == '\r') return; //filtering endline character from PuTTY
 80013e6:	bf00      	nop
		}

	}

}
 80013e8:	3770      	adds	r7, #112	; 0x70
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000000 	.word	0x20000000
 80013f4:	200001f8 	.word	0x200001f8
 80013f8:	200001f9 	.word	0x200001f9
 80013fc:	200001fa 	.word	0x200001fa
 8001400:	080081e4 	.word	0x080081e4

08001404 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	3b01      	subs	r3, #1
 8001412:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <LL_DMA_DisableChannel+0x3c>)
 8001414:	5cd3      	ldrb	r3, [r2, r3]
 8001416:	461a      	mov	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	3a01      	subs	r2, #1
 8001422:	4907      	ldr	r1, [pc, #28]	; (8001440 <LL_DMA_DisableChannel+0x3c>)
 8001424:	5c8a      	ldrb	r2, [r1, r2]
 8001426:	4611      	mov	r1, r2
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	440a      	add	r2, r1
 800142c:	f023 0301 	bic.w	r3, r3, #1
 8001430:	6013      	str	r3, [r2, #0]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	08008230 	.word	0x08008230

08001444 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001454:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001458:	bf0c      	ite	eq
 800145a:	2301      	moveq	r3, #1
 800145c:	2300      	movne	r3, #0
 800145e:	b2db      	uxtb	r3, r3
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001480:	bf0c      	ite	eq
 8001482:	2301      	moveq	r3, #1
 8001484:	2300      	movne	r3, #0
 8001486:	b2db      	uxtb	r3, r3
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014a8:	bf0c      	ite	eq
 80014aa:	2301      	moveq	r3, #1
 80014ac:	2300      	movne	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014ca:	605a      	str	r2, [r3, #4]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014e6:	605a      	str	r2, [r3, #4]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001502:	605a      	str	r2, [r3, #4]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	2b10      	cmp	r3, #16
 8001522:	d101      	bne.n	8001528 <LL_USART_IsActiveFlag_IDLE+0x18>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <LL_USART_IsActiveFlag_IDLE+0x1a>
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001546:	2b40      	cmp	r3, #64	; 0x40
 8001548:	d101      	bne.n	800154e <LL_USART_IsActiveFlag_TC+0x18>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <LL_USART_IsActiveFlag_TC+0x1a>
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2210      	movs	r2, #16
 8001568:	621a      	str	r2, [r3, #32]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800157a:	e7fe      	b.n	800157a <NMI_Handler+0x4>

0800157c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <HardFault_Handler+0x4>

08001582 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <MemManage_Handler+0x4>

08001588 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <BusFault_Handler+0x4>

0800158e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <UsageFault_Handler+0x4>

08001594 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <DMA1_Channel6_IRQHandler+0x38>)
 80015d2:	f7ff ff37 	bl	8001444 <LL_DMA_IsActiveFlag_TC6>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <DMA1_Channel6_IRQHandler+0x1c>
		{
			USART2_CheckDmaReception();
 80015dc:	f001 f8c2 	bl	8002764 <USART2_CheckDmaReception>
			LL_DMA_ClearFlag_TC6(DMA1);
 80015e0:	4808      	ldr	r0, [pc, #32]	; (8001604 <DMA1_Channel6_IRQHandler+0x38>)
 80015e2:	f7ff ff6b 	bl	80014bc <LL_DMA_ClearFlag_TC6>
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80015e6:	e00a      	b.n	80015fe <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 80015e8:	4806      	ldr	r0, [pc, #24]	; (8001604 <DMA1_Channel6_IRQHandler+0x38>)
 80015ea:	f7ff ff53 	bl	8001494 <LL_DMA_IsActiveFlag_HT6>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d104      	bne.n	80015fe <DMA1_Channel6_IRQHandler+0x32>
			USART2_CheckDmaReception();
 80015f4:	f001 f8b6 	bl	8002764 <USART2_CheckDmaReception>
			LL_DMA_ClearFlag_HT6(DMA1);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <DMA1_Channel6_IRQHandler+0x38>)
 80015fa:	f7ff ff7b 	bl	80014f4 <LL_DMA_ClearFlag_HT6>
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40020000 	.word	0x40020000

08001608 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 800160c:	480a      	ldr	r0, [pc, #40]	; (8001638 <DMA1_Channel7_IRQHandler+0x30>)
 800160e:	f7ff ff2d 	bl	800146c <LL_DMA_IsActiveFlag_TC7>
 8001612:	4603      	mov	r3, r0
 8001614:	2b01      	cmp	r3, #1
 8001616:	d10d      	bne.n	8001634 <DMA1_Channel7_IRQHandler+0x2c>
		{
			LL_DMA_ClearFlag_TC7(DMA1);
 8001618:	4807      	ldr	r0, [pc, #28]	; (8001638 <DMA1_Channel7_IRQHandler+0x30>)
 800161a:	f7ff ff5d 	bl	80014d8 <LL_DMA_ClearFlag_TC7>

			while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 800161e:	bf00      	nop
 8001620:	4806      	ldr	r0, [pc, #24]	; (800163c <DMA1_Channel7_IRQHandler+0x34>)
 8001622:	f7ff ff88 	bl	8001536 <LL_USART_IsActiveFlag_TC>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f9      	beq.n	8001620 <DMA1_Channel7_IRQHandler+0x18>
			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 800162c:	2107      	movs	r1, #7
 800162e:	4802      	ldr	r0, [pc, #8]	; (8001638 <DMA1_Channel7_IRQHandler+0x30>)
 8001630:	f7ff fee8 	bl	8001404 <LL_DMA_DisableChannel>
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40020000 	.word	0x40020000
 800163c:	40004400 	.word	0x40004400

08001640 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8001654:	4806      	ldr	r0, [pc, #24]	; (8001670 <USART2_IRQHandler+0x20>)
 8001656:	f7ff ff5b 	bl	8001510 <LL_USART_IsActiveFlag_IDLE>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d004      	beq.n	800166a <USART2_IRQHandler+0x1a>
		{
			USART2_CheckDmaReception();
 8001660:	f001 f880 	bl	8002764 <USART2_CheckDmaReception>
			LL_USART_ClearFlag_IDLE(USART2);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <USART2_IRQHandler+0x20>)
 8001666:	f7ff ff79 	bl	800155c <LL_USART_ClearFlag_IDLE>
		}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40004400 	.word	0x40004400

08001674 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
	return 1;
 8001678:	2301      	movs	r3, #1
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <_kill>:

int _kill(int pid, int sig)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800168e:	f002 f91f 	bl	80038d0 <__errno>
 8001692:	4603      	mov	r3, r0
 8001694:	2216      	movs	r2, #22
 8001696:	601a      	str	r2, [r3, #0]
	return -1;
 8001698:	f04f 33ff 	mov.w	r3, #4294967295
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_exit>:

void _exit (int status)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ffe7 	bl	8001684 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016b6:	e7fe      	b.n	80016b6 <_exit+0x12>

080016b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	e00a      	b.n	80016e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016ca:	f3af 8000 	nop.w
 80016ce:	4601      	mov	r1, r0
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	1c5a      	adds	r2, r3, #1
 80016d4:	60ba      	str	r2, [r7, #8]
 80016d6:	b2ca      	uxtb	r2, r1
 80016d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	3301      	adds	r3, #1
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	dbf0      	blt.n	80016ca <_read+0x12>
	}

return len;
 80016e8:	687b      	ldr	r3, [r7, #4]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	e009      	b.n	8001718 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	60ba      	str	r2, [r7, #8]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	429a      	cmp	r2, r3
 800171e:	dbf1      	blt.n	8001704 <_write+0x12>
	}
	return len;
 8001720:	687b      	ldr	r3, [r7, #4]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <_close>:

int _close(int file)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
	return -1;
 8001732:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001752:	605a      	str	r2, [r3, #4]
	return 0;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <_isatty>:

int _isatty(int file)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
	return 1;
 800176a:	2301      	movs	r3, #1
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
	return 0;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800179c:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <_sbrk+0x5c>)
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <_sbrk+0x60>)
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <_sbrk+0x64>)
 80017b2:	4a12      	ldr	r2, [pc, #72]	; (80017fc <_sbrk+0x68>)
 80017b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d207      	bcs.n	80017d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c4:	f002 f884 	bl	80038d0 <__errno>
 80017c8:	4603      	mov	r3, r0
 80017ca:	220c      	movs	r2, #12
 80017cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
 80017d2:	e009      	b.n	80017e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <_sbrk+0x64>)
 80017e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017e6:	68fb      	ldr	r3, [r7, #12]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20003000 	.word	0x20003000
 80017f4:	00000400 	.word	0x00000400
 80017f8:	200001fc 	.word	0x200001fc
 80017fc:	200002e8 	.word	0x200002e8

08001800 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <SystemInit+0x20>)
 8001806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <SystemInit+0x20>)
 800180c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_GetPriorityGrouping>:
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <__NVIC_GetPriorityGrouping+0x18>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	f003 0307 	and.w	r3, r3, #7
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_EnableIRQ>:
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	2b00      	cmp	r3, #0
 8001850:	db0b      	blt.n	800186a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	f003 021f 	and.w	r2, r3, #31
 8001858:	4907      	ldr	r1, [pc, #28]	; (8001878 <__NVIC_EnableIRQ+0x38>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	2001      	movs	r0, #1
 8001862:	fa00 f202 	lsl.w	r2, r0, r2
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000e100 	.word	0xe000e100

0800187c <__NVIC_SetPriority>:
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	db0a      	blt.n	80018a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	490c      	ldr	r1, [pc, #48]	; (80018c8 <__NVIC_SetPriority+0x4c>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018a4:	e00a      	b.n	80018bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4908      	ldr	r1, [pc, #32]	; (80018cc <__NVIC_SetPriority+0x50>)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	3b04      	subs	r3, #4
 80018b4:	0112      	lsls	r2, r2, #4
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	761a      	strb	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000e100 	.word	0xe000e100
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <NVIC_EncodePriority>:
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43d9      	mvns	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	4313      	orrs	r3, r2
}
 800192a:	4618      	mov	r0, r3
 800192c:	3724      	adds	r7, #36	; 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <LL_AHB1_GRP1_EnableClock>:
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001942:	695a      	ldr	r2, [r3, #20]
 8001944:	4907      	ldr	r1, [pc, #28]	; (8001964 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4313      	orrs	r3, r2
 800194a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800194e:	695a      	ldr	r2, [r3, #20]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4013      	ands	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	40021000 	.word	0x40021000

08001968 <LL_APB1_GRP1_EnableClock>:
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001972:	69da      	ldr	r2, [r3, #28]
 8001974:	4907      	ldr	r1, [pc, #28]	; (8001994 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4313      	orrs	r3, r2
 800197a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <LL_APB1_GRP1_EnableClock+0x2c>)
 800197e:	69da      	ldr	r2, [r3, #28]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4013      	ands	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	40021000 	.word	0x40021000

08001998 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f043 0201 	orr.w	r2, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	601a      	str	r2, [r3, #0]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	601a      	str	r2, [r3, #0]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <LL_TIM_OC_DisableFast>:
  * @note   OC5FE and OC6FE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d028      	beq.n	8001a3a <LL_TIM_OC_DisableFast+0x62>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d023      	beq.n	8001a36 <LL_TIM_OC_DisableFast+0x5e>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	2b10      	cmp	r3, #16
 80019f2:	d01e      	beq.n	8001a32 <LL_TIM_OC_DisableFast+0x5a>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	2b40      	cmp	r3, #64	; 0x40
 80019f8:	d019      	beq.n	8001a2e <LL_TIM_OC_DisableFast+0x56>
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a00:	d013      	beq.n	8001a2a <LL_TIM_OC_DisableFast+0x52>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a08:	d00d      	beq.n	8001a26 <LL_TIM_OC_DisableFast+0x4e>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a10:	d007      	beq.n	8001a22 <LL_TIM_OC_DisableFast+0x4a>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a18:	d101      	bne.n	8001a1e <LL_TIM_OC_DisableFast+0x46>
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	e00e      	b.n	8001a3c <LL_TIM_OC_DisableFast+0x64>
 8001a1e:	2308      	movs	r3, #8
 8001a20:	e00c      	b.n	8001a3c <LL_TIM_OC_DisableFast+0x64>
 8001a22:	2306      	movs	r3, #6
 8001a24:	e00a      	b.n	8001a3c <LL_TIM_OC_DisableFast+0x64>
 8001a26:	2305      	movs	r3, #5
 8001a28:	e008      	b.n	8001a3c <LL_TIM_OC_DisableFast+0x64>
 8001a2a:	2304      	movs	r3, #4
 8001a2c:	e006      	b.n	8001a3c <LL_TIM_OC_DisableFast+0x64>
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e004      	b.n	8001a3c <LL_TIM_OC_DisableFast+0x64>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e002      	b.n	8001a3c <LL_TIM_OC_DisableFast+0x64>
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <LL_TIM_OC_DisableFast+0x64>
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3318      	adds	r3, #24
 8001a42:	4619      	mov	r1, r3
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <LL_TIM_OC_DisableFast+0x9c>)
 8001a48:	5cd3      	ldrb	r3, [r2, r3]
 8001a4a:	440b      	add	r3, r1
 8001a4c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	4908      	ldr	r1, [pc, #32]	; (8001a78 <LL_TIM_OC_DisableFast+0xa0>)
 8001a56:	5ccb      	ldrb	r3, [r1, r3]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	408b      	lsls	r3, r1
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	401a      	ands	r2, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	601a      	str	r2, [r3, #0]

}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	08008250 	.word	0x08008250
 8001a78:	0800825c 	.word	0x0800825c

08001a7c <LL_TIM_OC_EnablePreload>:
  * @note   OC5PE and OC6PE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d028      	beq.n	8001ade <LL_TIM_OC_EnablePreload+0x62>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d023      	beq.n	8001ada <LL_TIM_OC_EnablePreload+0x5e>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	2b10      	cmp	r3, #16
 8001a96:	d01e      	beq.n	8001ad6 <LL_TIM_OC_EnablePreload+0x5a>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2b40      	cmp	r3, #64	; 0x40
 8001a9c:	d019      	beq.n	8001ad2 <LL_TIM_OC_EnablePreload+0x56>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aa4:	d013      	beq.n	8001ace <LL_TIM_OC_EnablePreload+0x52>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aac:	d00d      	beq.n	8001aca <LL_TIM_OC_EnablePreload+0x4e>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ab4:	d007      	beq.n	8001ac6 <LL_TIM_OC_EnablePreload+0x4a>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001abc:	d101      	bne.n	8001ac2 <LL_TIM_OC_EnablePreload+0x46>
 8001abe:	2307      	movs	r3, #7
 8001ac0:	e00e      	b.n	8001ae0 <LL_TIM_OC_EnablePreload+0x64>
 8001ac2:	2308      	movs	r3, #8
 8001ac4:	e00c      	b.n	8001ae0 <LL_TIM_OC_EnablePreload+0x64>
 8001ac6:	2306      	movs	r3, #6
 8001ac8:	e00a      	b.n	8001ae0 <LL_TIM_OC_EnablePreload+0x64>
 8001aca:	2305      	movs	r3, #5
 8001acc:	e008      	b.n	8001ae0 <LL_TIM_OC_EnablePreload+0x64>
 8001ace:	2304      	movs	r3, #4
 8001ad0:	e006      	b.n	8001ae0 <LL_TIM_OC_EnablePreload+0x64>
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e004      	b.n	8001ae0 <LL_TIM_OC_EnablePreload+0x64>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e002      	b.n	8001ae0 <LL_TIM_OC_EnablePreload+0x64>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <LL_TIM_OC_EnablePreload+0x64>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3318      	adds	r3, #24
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <LL_TIM_OC_EnablePreload+0x98>)
 8001aec:	5cd3      	ldrb	r3, [r2, r3]
 8001aee:	440b      	add	r3, r1
 8001af0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	4907      	ldr	r1, [pc, #28]	; (8001b18 <LL_TIM_OC_EnablePreload+0x9c>)
 8001afa:	5ccb      	ldrb	r3, [r1, r3]
 8001afc:	4619      	mov	r1, r3
 8001afe:	2308      	movs	r3, #8
 8001b00:	408b      	lsls	r3, r1
 8001b02:	431a      	orrs	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	601a      	str	r2, [r3, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	08008250 	.word	0x08008250
 8001b18:	0800825c 	.word	0x0800825c

08001b1c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001b2e:	f023 0307 	bic.w	r3, r3, #7
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	609a      	str	r2, [r3, #8]
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	605a      	str	r2, [r3, #4]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b094      	sub	sp, #80	; 0x50
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001b92:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]
 8001ba0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f001 feba 	bl	8003924 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
 8001bbc:	611a      	str	r2, [r3, #16]
 8001bbe:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f7ff fed1 	bl	8001968 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001bc6:	f7ff fe2d 	bl	8001824 <__NVIC_GetPriorityGrouping>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fe7d 	bl	80018d0 <NVIC_EncodePriority>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4619      	mov	r1, r3
 8001bda:	201c      	movs	r0, #28
 8001bdc:	f7ff fe4e 	bl	800187c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8001be0:	201c      	movs	r0, #28
 8001be2:	f7ff fe2d 	bl	8001840 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8001be6:	f240 331f 	movw	r3, #799	; 0x31f
 8001bea:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001bec:	2300      	movs	r3, #0
 8001bee:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 99;
 8001bf0:	2363      	movs	r3, #99	; 0x63
 8001bf2:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001bf8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c02:	f001 f9c1 	bl	8002f88 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001c06:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c0a:	f7ff fed5 	bl	80019b8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001c0e:	2100      	movs	r1, #0
 8001c10:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c14:	f7ff ff82 	bl	8001b1c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001c18:	2101      	movs	r1, #1
 8001c1a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c1e:	f7ff ff2d 	bl	8001a7c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001c22:	2360      	movs	r3, #96	; 0x60
 8001c24:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c42:	f001 fa13 	bl	800306c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8001c46:	2101      	movs	r1, #1
 8001c48:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c4c:	f7ff fec4 	bl	80019d8 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	461a      	mov	r2, r3
 8001c5a:	2110      	movs	r1, #16
 8001c5c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c60:	f001 fa04 	bl	800306c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8001c64:	2110      	movs	r1, #16
 8001c66:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c6a:	f7ff feb5 	bl	80019d8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001c6e:	2100      	movs	r1, #0
 8001c70:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c74:	f7ff ff67 	bl	8001b46 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001c78:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c7c:	f7ff ff76 	bl	8001b6c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
  LL_TIM_EnableCounter(TIM2);
 8001c80:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c84:	f7ff fe88 	bl	8001998 <LL_TIM_EnableCounter>
  TIM2->CCER|=0x00000001;
 8001c88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6213      	str	r3, [r2, #32]
  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001c98:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001c9c:	f7ff fe4c 	bl	8001938 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001ca0:	2320      	movs	r3, #32
 8001ca2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc0:	f000 feba 	bl	8002a38 <LL_GPIO_Init>

}
 8001cc4:	bf00      	nop
 8001cc6:	3750      	adds	r7, #80	; 0x50
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <setDutyCycle>:

/* USER CODE BEGIN 1 */
void setDutyCycle(uint8_t D) {
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
	TIM2->CCR1 = D;
 8001cd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <__NVIC_GetPriorityGrouping>:
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	f003 0307 	and.w	r3, r3, #7
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_EnableIRQ>:
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	db0b      	blt.n	8001d32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	4907      	ldr	r1, [pc, #28]	; (8001d40 <__NVIC_EnableIRQ+0x38>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2001      	movs	r0, #1
 8001d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000e100 	.word	0xe000e100

08001d44 <__NVIC_SetPriority>:
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	db0a      	blt.n	8001d6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	490c      	ldr	r1, [pc, #48]	; (8001d90 <__NVIC_SetPriority+0x4c>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	0112      	lsls	r2, r2, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	440b      	add	r3, r1
 8001d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d6c:	e00a      	b.n	8001d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4908      	ldr	r1, [pc, #32]	; (8001d94 <__NVIC_SetPriority+0x50>)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	3b04      	subs	r3, #4
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	440b      	add	r3, r1
 8001d82:	761a      	strb	r2, [r3, #24]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000e100 	.word	0xe000e100
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <NVIC_EncodePriority>:
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f1c3 0307 	rsb	r3, r3, #7
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	bf28      	it	cs
 8001db6:	2304      	movcs	r3, #4
 8001db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d902      	bls.n	8001dc8 <NVIC_EncodePriority+0x30>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3b03      	subs	r3, #3
 8001dc6:	e000      	b.n	8001dca <NVIC_EncodePriority+0x32>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	401a      	ands	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	43d9      	mvns	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	4313      	orrs	r3, r2
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3724      	adds	r7, #36	; 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <LL_DMA_EnableChannel>:
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <LL_DMA_EnableChannel+0x3c>)
 8001e10:	5cd3      	ldrb	r3, [r2, r3]
 8001e12:	461a      	mov	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4413      	add	r3, r2
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	3a01      	subs	r2, #1
 8001e1e:	4907      	ldr	r1, [pc, #28]	; (8001e3c <LL_DMA_EnableChannel+0x3c>)
 8001e20:	5c8a      	ldrb	r2, [r1, r2]
 8001e22:	4611      	mov	r1, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	440a      	add	r2, r1
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6013      	str	r3, [r2, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	08008268 	.word	0x08008268

08001e40 <LL_DMA_DisableChannel>:
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	4a0b      	ldr	r2, [pc, #44]	; (8001e7c <LL_DMA_DisableChannel+0x3c>)
 8001e50:	5cd3      	ldrb	r3, [r2, r3]
 8001e52:	461a      	mov	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4413      	add	r3, r2
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	3a01      	subs	r2, #1
 8001e5e:	4907      	ldr	r1, [pc, #28]	; (8001e7c <LL_DMA_DisableChannel+0x3c>)
 8001e60:	5c8a      	ldrb	r2, [r1, r2]
 8001e62:	4611      	mov	r1, r2
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	440a      	add	r2, r1
 8001e68:	f023 0301 	bic.w	r3, r3, #1
 8001e6c:	6013      	str	r3, [r2, #0]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	08008268 	.word	0x08008268

08001e80 <LL_DMA_SetDataTransferDirection>:
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	4a0d      	ldr	r2, [pc, #52]	; (8001ec8 <LL_DMA_SetDataTransferDirection+0x48>)
 8001e92:	5cd3      	ldrb	r3, [r2, r3]
 8001e94:	461a      	mov	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4413      	add	r3, r2
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ea0:	f023 0310 	bic.w	r3, r3, #16
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	3a01      	subs	r2, #1
 8001ea8:	4907      	ldr	r1, [pc, #28]	; (8001ec8 <LL_DMA_SetDataTransferDirection+0x48>)
 8001eaa:	5c8a      	ldrb	r2, [r1, r2]
 8001eac:	4611      	mov	r1, r2
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	440a      	add	r2, r1
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]
}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	08008268 	.word	0x08008268

08001ecc <LL_DMA_GetDataTransferDirection>:
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <LL_DMA_GetDataTransferDirection+0x2c>)
 8001edc:	5cd3      	ldrb	r3, [r2, r3]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	f244 0310 	movw	r3, #16400	; 0x4010
 8001eea:	4013      	ands	r3, r2
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	08008268 	.word	0x08008268

08001efc <LL_DMA_SetMode>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	4a0c      	ldr	r2, [pc, #48]	; (8001f40 <LL_DMA_SetMode+0x44>)
 8001f0e:	5cd3      	ldrb	r3, [r2, r3]
 8001f10:	461a      	mov	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4413      	add	r3, r2
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 0220 	bic.w	r2, r3, #32
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	4907      	ldr	r1, [pc, #28]	; (8001f40 <LL_DMA_SetMode+0x44>)
 8001f22:	5ccb      	ldrb	r3, [r1, r3]
 8001f24:	4619      	mov	r1, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	440b      	add	r3, r1
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	08008268 	.word	0x08008268

08001f44 <LL_DMA_SetPeriphIncMode>:
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	4a0c      	ldr	r2, [pc, #48]	; (8001f88 <LL_DMA_SetPeriphIncMode+0x44>)
 8001f56:	5cd3      	ldrb	r3, [r2, r3]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	4907      	ldr	r1, [pc, #28]	; (8001f88 <LL_DMA_SetPeriphIncMode+0x44>)
 8001f6a:	5ccb      	ldrb	r3, [r1, r3]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	440b      	add	r3, r1
 8001f72:	4619      	mov	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	08008268 	.word	0x08008268

08001f8c <LL_DMA_SetMemoryIncMode>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	4a0c      	ldr	r2, [pc, #48]	; (8001fd0 <LL_DMA_SetMemoryIncMode+0x44>)
 8001f9e:	5cd3      	ldrb	r3, [r2, r3]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	4907      	ldr	r1, [pc, #28]	; (8001fd0 <LL_DMA_SetMemoryIncMode+0x44>)
 8001fb2:	5ccb      	ldrb	r3, [r1, r3]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	440b      	add	r3, r1
 8001fba:	4619      	mov	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]
}
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	08008268 	.word	0x08008268

08001fd4 <LL_DMA_SetPeriphSize>:
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <LL_DMA_SetPeriphSize+0x44>)
 8001fe6:	5cd3      	ldrb	r3, [r2, r3]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4413      	add	r3, r2
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	4907      	ldr	r1, [pc, #28]	; (8002018 <LL_DMA_SetPeriphSize+0x44>)
 8001ffa:	5ccb      	ldrb	r3, [r1, r3]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	440b      	add	r3, r1
 8002002:	4619      	mov	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	08008268 	.word	0x08008268

0800201c <LL_DMA_SetMemorySize>:
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	3b01      	subs	r3, #1
 800202c:	4a0c      	ldr	r2, [pc, #48]	; (8002060 <LL_DMA_SetMemorySize+0x44>)
 800202e:	5cd3      	ldrb	r3, [r2, r3]
 8002030:	461a      	mov	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4413      	add	r3, r2
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	3b01      	subs	r3, #1
 8002040:	4907      	ldr	r1, [pc, #28]	; (8002060 <LL_DMA_SetMemorySize+0x44>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	4619      	mov	r1, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	440b      	add	r3, r1
 800204a:	4619      	mov	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]
}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	08008268 	.word	0x08008268

08002064 <LL_DMA_SetChannelPriorityLevel>:
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	3b01      	subs	r3, #1
 8002074:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002076:	5cd3      	ldrb	r3, [r2, r3]
 8002078:	461a      	mov	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4413      	add	r3, r2
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	3b01      	subs	r3, #1
 8002088:	4907      	ldr	r1, [pc, #28]	; (80020a8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800208a:	5ccb      	ldrb	r3, [r1, r3]
 800208c:	4619      	mov	r1, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	440b      	add	r3, r1
 8002092:	4619      	mov	r1, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	08008268 	.word	0x08008268

080020ac <LL_DMA_SetDataLength>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <LL_DMA_SetDataLength+0x44>)
 80020be:	5cd3      	ldrb	r3, [r2, r3]
 80020c0:	461a      	mov	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4413      	add	r3, r2
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	0c1b      	lsrs	r3, r3, #16
 80020ca:	041b      	lsls	r3, r3, #16
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	3a01      	subs	r2, #1
 80020d0:	4907      	ldr	r1, [pc, #28]	; (80020f0 <LL_DMA_SetDataLength+0x44>)
 80020d2:	5c8a      	ldrb	r2, [r1, r2]
 80020d4:	4611      	mov	r1, r2
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	440a      	add	r2, r1
 80020da:	4611      	mov	r1, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4313      	orrs	r3, r2
 80020e0:	604b      	str	r3, [r1, #4]
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	08008268 	.word	0x08008268

080020f4 <LL_DMA_GetDataLength>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	3b01      	subs	r3, #1
 8002102:	4a06      	ldr	r2, [pc, #24]	; (800211c <LL_DMA_GetDataLength+0x28>)
 8002104:	5cd3      	ldrb	r3, [r2, r3]
 8002106:	461a      	mov	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4413      	add	r3, r2
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	b29b      	uxth	r3, r3
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	08008268 	.word	0x08008268

08002120 <LL_DMA_ConfigAddresses>:
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b10      	cmp	r3, #16
 8002132:	d114      	bne.n	800215e <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	3b01      	subs	r3, #1
 8002138:	4a16      	ldr	r2, [pc, #88]	; (8002194 <LL_DMA_ConfigAddresses+0x74>)
 800213a:	5cd3      	ldrb	r3, [r2, r3]
 800213c:	461a      	mov	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4413      	add	r3, r2
 8002142:	461a      	mov	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	3b01      	subs	r3, #1
 800214c:	4a11      	ldr	r2, [pc, #68]	; (8002194 <LL_DMA_ConfigAddresses+0x74>)
 800214e:	5cd3      	ldrb	r3, [r2, r3]
 8002150:	461a      	mov	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4413      	add	r3, r2
 8002156:	461a      	mov	r2, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	6093      	str	r3, [r2, #8]
}
 800215c:	e013      	b.n	8002186 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	3b01      	subs	r3, #1
 8002162:	4a0c      	ldr	r2, [pc, #48]	; (8002194 <LL_DMA_ConfigAddresses+0x74>)
 8002164:	5cd3      	ldrb	r3, [r2, r3]
 8002166:	461a      	mov	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	461a      	mov	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	3b01      	subs	r3, #1
 8002176:	4a07      	ldr	r2, [pc, #28]	; (8002194 <LL_DMA_ConfigAddresses+0x74>)
 8002178:	5cd3      	ldrb	r3, [r2, r3]
 800217a:	461a      	mov	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4413      	add	r3, r2
 8002180:	461a      	mov	r2, r3
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	60d3      	str	r3, [r2, #12]
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	08008268 	.word	0x08008268

08002198 <LL_DMA_SetMemoryAddress>:
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	4a06      	ldr	r2, [pc, #24]	; (80021c4 <LL_DMA_SetMemoryAddress+0x2c>)
 80021aa:	5cd3      	ldrb	r3, [r2, r3]
 80021ac:	461a      	mov	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4413      	add	r3, r2
 80021b2:	461a      	mov	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	60d3      	str	r3, [r2, #12]
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	08008268 	.word	0x08008268

080021c8 <LL_DMA_SetPeriphAddress>:
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	4a06      	ldr	r2, [pc, #24]	; (80021f4 <LL_DMA_SetPeriphAddress+0x2c>)
 80021da:	5cd3      	ldrb	r3, [r2, r3]
 80021dc:	461a      	mov	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4413      	add	r3, r2
 80021e2:	461a      	mov	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6093      	str	r3, [r2, #8]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	08008268 	.word	0x08008268

080021f8 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	3b01      	subs	r3, #1
 8002206:	4a0b      	ldr	r2, [pc, #44]	; (8002234 <LL_DMA_EnableIT_TC+0x3c>)
 8002208:	5cd3      	ldrb	r3, [r2, r3]
 800220a:	461a      	mov	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4413      	add	r3, r2
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	3a01      	subs	r2, #1
 8002216:	4907      	ldr	r1, [pc, #28]	; (8002234 <LL_DMA_EnableIT_TC+0x3c>)
 8002218:	5c8a      	ldrb	r2, [r1, r2]
 800221a:	4611      	mov	r1, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	440a      	add	r2, r1
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	6013      	str	r3, [r2, #0]
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	08008268 	.word	0x08008268

08002238 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	3b01      	subs	r3, #1
 8002246:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <LL_DMA_EnableIT_HT+0x3c>)
 8002248:	5cd3      	ldrb	r3, [r2, r3]
 800224a:	461a      	mov	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4413      	add	r3, r2
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	3a01      	subs	r2, #1
 8002256:	4907      	ldr	r1, [pc, #28]	; (8002274 <LL_DMA_EnableIT_HT+0x3c>)
 8002258:	5c8a      	ldrb	r2, [r1, r2]
 800225a:	4611      	mov	r1, r2
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	440a      	add	r2, r1
 8002260:	f043 0304 	orr.w	r3, r3, #4
 8002264:	6013      	str	r3, [r2, #0]
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	08008268 	.word	0x08008268

08002278 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	3b01      	subs	r3, #1
 8002286:	4a0b      	ldr	r2, [pc, #44]	; (80022b4 <LL_DMA_EnableIT_TE+0x3c>)
 8002288:	5cd3      	ldrb	r3, [r2, r3]
 800228a:	461a      	mov	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	3a01      	subs	r2, #1
 8002296:	4907      	ldr	r1, [pc, #28]	; (80022b4 <LL_DMA_EnableIT_TE+0x3c>)
 8002298:	5c8a      	ldrb	r2, [r1, r2]
 800229a:	4611      	mov	r1, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	440a      	add	r2, r1
 80022a0:	f043 0308 	orr.w	r3, r3, #8
 80022a4:	6013      	str	r3, [r2, #0]
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	08008268 	.word	0x08008268

080022b8 <LL_AHB1_GRP1_EnableClock>:
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	4907      	ldr	r1, [pc, #28]	; (80022e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80022cc:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4013      	ands	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022d6:	68fb      	ldr	r3, [r7, #12]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40021000 	.word	0x40021000

080022e8 <LL_APB1_GRP1_EnableClock>:
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <LL_APB1_GRP1_EnableClock+0x2c>)
 80022f2:	69da      	ldr	r2, [r3, #28]
 80022f4:	4907      	ldr	r1, [pc, #28]	; (8002314 <LL_APB1_GRP1_EnableClock+0x2c>)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <LL_APB1_GRP1_EnableClock+0x2c>)
 80022fe:	69da      	ldr	r2, [r3, #28]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4013      	ands	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002306:	68fb      	ldr	r3, [r7, #12]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	40021000 	.word	0x40021000

08002318 <LL_USART_Enable>:
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f043 0201 	orr.w	r2, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	601a      	str	r2, [r3, #0]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_USART_ConfigAsyncMode>:
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	609a      	str	r2, [r3, #8]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	; 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	e853 3f00 	ldrex	r3, [r3]
 8002376:	60bb      	str	r3, [r7, #8]
   return(result);
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f043 0310 	orr.w	r3, r3, #16
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	61ba      	str	r2, [r7, #24]
 8002386:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002388:	6979      	ldr	r1, [r7, #20]
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	e841 2300 	strex	r3, r2, [r1]
 8002390:	613b      	str	r3, [r7, #16]
   return(result);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1e9      	bne.n	800236c <LL_USART_EnableIT_IDLE+0x8>
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3724      	adds	r7, #36	; 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b089      	sub	sp, #36	; 0x24
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3308      	adds	r3, #8
 80023b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	e853 3f00 	ldrex	r3, [r3]
 80023ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3308      	adds	r3, #8
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	61ba      	str	r2, [r7, #24]
 80023cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ce:	6979      	ldr	r1, [r7, #20]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	e841 2300 	strex	r3, r2, [r1]
 80023d6:	613b      	str	r3, [r7, #16]
   return(result);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1e7      	bne.n	80023ae <LL_USART_DisableIT_CTS+0x8>
}
 80023de:	bf00      	nop
 80023e0:	bf00      	nop
 80023e2:	3724      	adds	r7, #36	; 0x24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3308      	adds	r3, #8
 80023f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	e853 3f00 	ldrex	r3, [r3]
 8002400:	60bb      	str	r3, [r7, #8]
   return(result);
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3308      	adds	r3, #8
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	61ba      	str	r2, [r7, #24]
 8002412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002414:	6979      	ldr	r1, [r7, #20]
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	e841 2300 	strex	r3, r2, [r1]
 800241c:	613b      	str	r3, [r7, #16]
   return(result);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1e7      	bne.n	80023f4 <LL_USART_EnableDMAReq_RX+0x8>
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	3724      	adds	r7, #36	; 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002432:	b480      	push	{r7}
 8002434:	b089      	sub	sp, #36	; 0x24
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3308      	adds	r3, #8
 800243e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	e853 3f00 	ldrex	r3, [r3]
 8002446:	60bb      	str	r3, [r7, #8]
   return(result);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800244e:	61fb      	str	r3, [r7, #28]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3308      	adds	r3, #8
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	61ba      	str	r2, [r7, #24]
 8002458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800245a:	6979      	ldr	r1, [r7, #20]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	e841 2300 	strex	r3, r2, [r1]
 8002462:	613b      	str	r3, [r7, #16]
   return(result);
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1e7      	bne.n	800243a <LL_USART_EnableDMAReq_TX+0x8>
}
 800246a:	bf00      	nop
 800246c:	bf00      	nop
 800246e:	3724      	adds	r7, #36	; 0x24
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d103      	bne.n	8002490 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3328      	adds	r3, #40	; 0x28
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	e002      	b.n	8002496 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3324      	adds	r3, #36	; 0x24
 8002494:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8002496:	68fb      	ldr	r3, [r7, #12]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <reinitializeBuffer>:

uint8_t bufferUSART2dma[DMA_USART2_BUFFER_SIZE];
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(uint8_t data) = 0;

void reinitializeBuffer() {
 80024a4:	b5b0      	push	{r4, r5, r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af02      	add	r7, sp, #8
	memset(bufferUSART2dma,0,DMA_USART2_BUFFER_SIZE); //set buffer memory to zeros
 80024aa:	22c8      	movs	r2, #200	; 0xc8
 80024ac:	2100      	movs	r1, #0
 80024ae:	4815      	ldr	r0, [pc, #84]	; (8002504 <reinitializeBuffer+0x60>)
 80024b0:	f001 fa38 	bl	8003924 <memset>
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);  //disabling DMA channel
 80024b4:	2106      	movs	r1, #6
 80024b6:	4814      	ldr	r0, [pc, #80]	; (8002508 <reinitializeBuffer+0x64>)
 80024b8:	f7ff fcc2 	bl	8001e40 <LL_DMA_DisableChannel>
	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6,  //reconfiguring DMA
 80024bc:	2101      	movs	r1, #1
 80024be:	4813      	ldr	r0, [pc, #76]	; (800250c <reinitializeBuffer+0x68>)
 80024c0:	f7ff ffda 	bl	8002478 <LL_USART_DMA_GetRegAddr>
 80024c4:	4604      	mov	r4, r0
 80024c6:	4d0f      	ldr	r5, [pc, #60]	; (8002504 <reinitializeBuffer+0x60>)
 80024c8:	2106      	movs	r1, #6
 80024ca:	480f      	ldr	r0, [pc, #60]	; (8002508 <reinitializeBuffer+0x64>)
 80024cc:	f7ff fcfe 	bl	8001ecc <LL_DMA_GetDataTransferDirection>
 80024d0:	4603      	mov	r3, r0
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	462b      	mov	r3, r5
 80024d6:	4622      	mov	r2, r4
 80024d8:	2106      	movs	r1, #6
 80024da:	480b      	ldr	r0, [pc, #44]	; (8002508 <reinitializeBuffer+0x64>)
 80024dc:	f7ff fe20 	bl	8002120 <LL_DMA_ConfigAddresses>
	 						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
	 							(uint32_t)bufferUSART2dma,
	 							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 80024e0:	22c8      	movs	r2, #200	; 0xc8
 80024e2:	2106      	movs	r1, #6
 80024e4:	4808      	ldr	r0, [pc, #32]	; (8002508 <reinitializeBuffer+0x64>)
 80024e6:	f7ff fde1 	bl	80020ac <LL_DMA_SetDataLength>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80024ea:	2106      	movs	r1, #6
 80024ec:	4806      	ldr	r0, [pc, #24]	; (8002508 <reinitializeBuffer+0x64>)
 80024ee:	f7ff fc87 	bl	8001e00 <LL_DMA_EnableChannel>
	LL_USART_EnableDMAReq_RX(USART2);
 80024f2:	4806      	ldr	r0, [pc, #24]	; (800250c <reinitializeBuffer+0x68>)
 80024f4:	f7ff ff7a 	bl	80023ec <LL_USART_EnableDMAReq_RX>
	old_pos = 0; //set last reading position to start of buffer
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <reinitializeBuffer+0x6c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	801a      	strh	r2, [r3, #0]
}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	bdb0      	pop	{r4, r5, r7, pc}
 8002504:	20000210 	.word	0x20000210
 8002508:	40020000 	.word	0x40020000
 800250c:	40004400 	.word	0x40004400
 8002510:	20000200 	.word	0x20000200

08002514 <getBufferState>:

uint16_t getBufferState() {
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
	return old_pos;
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <getBufferState+0x14>)
 800251a:	881b      	ldrh	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000200 	.word	0x20000200

0800252c <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800252c:	b5b0      	push	{r4, r5, r7, lr}
 800252e:	b090      	sub	sp, #64	; 0x40
 8002530:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002532:	f107 031c 	add.w	r3, r7, #28
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	60da      	str	r2, [r3, #12]
 8002540:	611a      	str	r2, [r3, #16]
 8002542:	615a      	str	r2, [r3, #20]
 8002544:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
 8002554:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002556:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800255a:	f7ff fec5 	bl	80022e8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800255e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002562:	f7ff fea9 	bl	80022b8 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8002566:	f248 0304 	movw	r3, #32772	; 0x8004
 800256a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800256c:	2302      	movs	r3, #2
 800256e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002570:	2303      	movs	r3, #3
 8002572:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800257c:	2307      	movs	r3, #7
 800257e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002580:	1d3b      	adds	r3, r7, #4
 8002582:	4619      	mov	r1, r3
 8002584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002588:	f000 fa56 	bl	8002a38 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800258c:	2200      	movs	r2, #0
 800258e:	2106      	movs	r1, #6
 8002590:	4858      	ldr	r0, [pc, #352]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 8002592:	f7ff fc75 	bl	8001e80 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8002596:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800259a:	2106      	movs	r1, #6
 800259c:	4855      	ldr	r0, [pc, #340]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 800259e:	f7ff fd61 	bl	8002064 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2106      	movs	r1, #6
 80025a6:	4853      	ldr	r0, [pc, #332]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 80025a8:	f7ff fca8 	bl	8001efc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80025ac:	2200      	movs	r2, #0
 80025ae:	2106      	movs	r1, #6
 80025b0:	4850      	ldr	r0, [pc, #320]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 80025b2:	f7ff fcc7 	bl	8001f44 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80025b6:	2280      	movs	r2, #128	; 0x80
 80025b8:	2106      	movs	r1, #6
 80025ba:	484e      	ldr	r0, [pc, #312]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 80025bc:	f7ff fce6 	bl	8001f8c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80025c0:	2200      	movs	r2, #0
 80025c2:	2106      	movs	r1, #6
 80025c4:	484b      	ldr	r0, [pc, #300]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 80025c6:	f7ff fd05 	bl	8001fd4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2106      	movs	r1, #6
 80025ce:	4849      	ldr	r0, [pc, #292]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 80025d0:	f7ff fd24 	bl	800201c <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80025d4:	2210      	movs	r2, #16
 80025d6:	2107      	movs	r1, #7
 80025d8:	4846      	ldr	r0, [pc, #280]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 80025da:	f7ff fc51 	bl	8001e80 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 80025de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025e2:	2107      	movs	r1, #7
 80025e4:	4843      	ldr	r0, [pc, #268]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 80025e6:	f7ff fd3d 	bl	8002064 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2107      	movs	r1, #7
 80025ee:	4841      	ldr	r0, [pc, #260]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 80025f0:	f7ff fc84 	bl	8001efc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2107      	movs	r1, #7
 80025f8:	483e      	ldr	r0, [pc, #248]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 80025fa:	f7ff fca3 	bl	8001f44 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 80025fe:	2280      	movs	r2, #128	; 0x80
 8002600:	2107      	movs	r1, #7
 8002602:	483c      	ldr	r0, [pc, #240]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 8002604:	f7ff fcc2 	bl	8001f8c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8002608:	2200      	movs	r2, #0
 800260a:	2107      	movs	r1, #7
 800260c:	4839      	ldr	r0, [pc, #228]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 800260e:	f7ff fce1 	bl	8001fd4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002612:	2200      	movs	r2, #0
 8002614:	2107      	movs	r1, #7
 8002616:	4837      	ldr	r0, [pc, #220]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 8002618:	f7ff fd00 	bl	800201c <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800261c:	f7ff fb66 	bl	8001cec <__NVIC_GetPriorityGrouping>
 8002620:	4603      	mov	r3, r0
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fbb6 	bl	8001d98 <NVIC_EncodePriority>
 800262c:	4603      	mov	r3, r0
 800262e:	4619      	mov	r1, r3
 8002630:	2026      	movs	r0, #38	; 0x26
 8002632:	f7ff fb87 	bl	8001d44 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002636:	2026      	movs	r0, #38	; 0x26
 8002638:	f7ff fb66 	bl	8001d08 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 800263c:	2106      	movs	r1, #6
 800263e:	482d      	ldr	r0, [pc, #180]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 8002640:	f7ff fdda 	bl	80021f8 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 8002644:	2106      	movs	r1, #6
 8002646:	482b      	ldr	r0, [pc, #172]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 8002648:	f7ff fdf6 	bl	8002238 <LL_DMA_EnableIT_HT>
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 800264c:	2107      	movs	r1, #7
 800264e:	4829      	ldr	r0, [pc, #164]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 8002650:	f7ff fe12 	bl	8002278 <LL_DMA_EnableIT_TE>

  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6,  //configuring DMA
 8002654:	2101      	movs	r1, #1
 8002656:	4828      	ldr	r0, [pc, #160]	; (80026f8 <MX_USART2_UART_Init+0x1cc>)
 8002658:	f7ff ff0e 	bl	8002478 <LL_USART_DMA_GetRegAddr>
 800265c:	4604      	mov	r4, r0
 800265e:	4d27      	ldr	r5, [pc, #156]	; (80026fc <MX_USART2_UART_Init+0x1d0>)
 8002660:	2106      	movs	r1, #6
 8002662:	4824      	ldr	r0, [pc, #144]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 8002664:	f7ff fc32 	bl	8001ecc <LL_DMA_GetDataTransferDirection>
 8002668:	4603      	mov	r3, r0
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	462b      	mov	r3, r5
 800266e:	4622      	mov	r2, r4
 8002670:	2106      	movs	r1, #6
 8002672:	4820      	ldr	r0, [pc, #128]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 8002674:	f7ff fd54 	bl	8002120 <LL_DMA_ConfigAddresses>
  	 						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
  	 							(uint32_t)bufferUSART2dma,
  	 							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002678:	22c8      	movs	r2, #200	; 0xc8
 800267a:	2106      	movs	r1, #6
 800267c:	481d      	ldr	r0, [pc, #116]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 800267e:	f7ff fd15 	bl	80020ac <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002682:	2106      	movs	r1, #6
 8002684:	481b      	ldr	r0, [pc, #108]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 8002686:	f7ff fbbb 	bl	8001e00 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 800268a:	481b      	ldr	r0, [pc, #108]	; (80026f8 <MX_USART2_UART_Init+0x1cc>)
 800268c:	f7ff feae 	bl	80023ec <LL_USART_EnableDMAReq_RX>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8002690:	2100      	movs	r1, #0
 8002692:	4819      	ldr	r0, [pc, #100]	; (80026f8 <MX_USART2_UART_Init+0x1cc>)
 8002694:	f7ff fef0 	bl	8002478 <LL_USART_DMA_GetRegAddr>
 8002698:	4603      	mov	r3, r0
 800269a:	461a      	mov	r2, r3
 800269c:	2107      	movs	r1, #7
 800269e:	4815      	ldr	r0, [pc, #84]	; (80026f4 <MX_USART2_UART_Init+0x1c8>)
 80026a0:	f7ff fd92 	bl	80021c8 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 80026a4:	4814      	ldr	r0, [pc, #80]	; (80026f8 <MX_USART2_UART_Init+0x1cc>)
 80026a6:	f7ff fec4 	bl	8002432 <LL_USART_EnableDMAReq_TX>
  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80026aa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80026ae:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80026b0:	2300      	movs	r3, #0
 80026b2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80026b4:	2300      	movs	r3, #0
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80026b8:	2300      	movs	r3, #0
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80026bc:	230c      	movs	r3, #12
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80026c4:	2300      	movs	r3, #0
 80026c6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80026c8:	f107 031c 	add.w	r3, r7, #28
 80026cc:	4619      	mov	r1, r3
 80026ce:	480a      	ldr	r0, [pc, #40]	; (80026f8 <MX_USART2_UART_Init+0x1cc>)
 80026d0:	f001 f834 	bl	800373c <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 80026d4:	4808      	ldr	r0, [pc, #32]	; (80026f8 <MX_USART2_UART_Init+0x1cc>)
 80026d6:	f7ff fe66 	bl	80023a6 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 80026da:	4807      	ldr	r0, [pc, #28]	; (80026f8 <MX_USART2_UART_Init+0x1cc>)
 80026dc:	f7ff fe2c 	bl	8002338 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80026e0:	4805      	ldr	r0, [pc, #20]	; (80026f8 <MX_USART2_UART_Init+0x1cc>)
 80026e2:	f7ff fe19 	bl	8002318 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  LL_USART_EnableIT_IDLE(USART2);
 80026e6:	4804      	ldr	r0, [pc, #16]	; (80026f8 <MX_USART2_UART_Init+0x1cc>)
 80026e8:	f7ff fe3c 	bl	8002364 <LL_USART_EnableIT_IDLE>
  /* USER CODE END USART2_Init 2 */

}
 80026ec:	bf00      	nop
 80026ee:	3738      	adds	r7, #56	; 0x38
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bdb0      	pop	{r4, r5, r7, pc}
 80026f4:	40020000 	.word	0x40020000
 80026f8:	40004400 	.word	0x40004400
 80026fc:	20000210 	.word	0x20000210

08002700 <USART2_RegisterCallback>:

/* USER CODE BEGIN 1 */
/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a03      	ldr	r2, [pc, #12]	; (8002720 <USART2_RegisterCallback+0x20>)
 8002712:	6013      	str	r3, [r2, #0]
	}
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	20000204 	.word	0x20000204

08002724 <USART2_PutBuffer>:

// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	461a      	mov	r2, r3
 8002734:	2107      	movs	r1, #7
 8002736:	480a      	ldr	r0, [pc, #40]	; (8002760 <USART2_PutBuffer+0x3c>)
 8002738:	f7ff fd2e 	bl	8002198 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 800273c:	78fb      	ldrb	r3, [r7, #3]
 800273e:	461a      	mov	r2, r3
 8002740:	2107      	movs	r1, #7
 8002742:	4807      	ldr	r0, [pc, #28]	; (8002760 <USART2_PutBuffer+0x3c>)
 8002744:	f7ff fcb2 	bl	80020ac <LL_DMA_SetDataLength>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8002748:	2107      	movs	r1, #7
 800274a:	4805      	ldr	r0, [pc, #20]	; (8002760 <USART2_PutBuffer+0x3c>)
 800274c:	f7ff fd54 	bl	80021f8 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002750:	2107      	movs	r1, #7
 8002752:	4803      	ldr	r0, [pc, #12]	; (8002760 <USART2_PutBuffer+0x3c>)
 8002754:	f7ff fb54 	bl	8001e00 <LL_DMA_EnableChannel>
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40020000 	.word	0x40020000

08002764 <USART2_CheckDmaReception>:

// Receive data from DMA
void USART2_CheckDmaReception(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
	//type your implementation here
	if(USART2_ProcessData == 0) return;
 800276a:	4b18      	ldr	r3, [pc, #96]	; (80027cc <USART2_CheckDmaReception+0x68>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d027      	beq.n	80027c2 <USART2_CheckDmaReception+0x5e>

	//uint16_t test = LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8002772:	2106      	movs	r1, #6
 8002774:	4816      	ldr	r0, [pc, #88]	; (80027d0 <USART2_CheckDmaReception+0x6c>)
 8002776:	f7ff fcbd 	bl	80020f4 <LL_DMA_GetDataLength>
 800277a:	4603      	mov	r3, r0
 800277c:	b29b      	uxth	r3, r3
 800277e:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8002782:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = old_pos; i < pos; i++) { //reading from buffer from old_pos to pos, sending each char to callback function
 8002784:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <USART2_CheckDmaReception+0x70>)
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	80fb      	strh	r3, [r7, #6]
 800278a:	e009      	b.n	80027a0 <USART2_CheckDmaReception+0x3c>
		USART2_ProcessData(bufferUSART2dma[i]);
 800278c:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <USART2_CheckDmaReception+0x68>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	88fa      	ldrh	r2, [r7, #6]
 8002792:	4911      	ldr	r1, [pc, #68]	; (80027d8 <USART2_CheckDmaReception+0x74>)
 8002794:	5c8a      	ldrb	r2, [r1, r2]
 8002796:	4610      	mov	r0, r2
 8002798:	4798      	blx	r3
	for (uint16_t i = old_pos; i < pos; i++) { //reading from buffer from old_pos to pos, sending each char to callback function
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	3301      	adds	r3, #1
 800279e:	80fb      	strh	r3, [r7, #6]
 80027a0:	88fa      	ldrh	r2, [r7, #6]
 80027a2:	88bb      	ldrh	r3, [r7, #4]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d3f1      	bcc.n	800278c <USART2_CheckDmaReception+0x28>
	}

	old_pos = pos;
 80027a8:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <USART2_CheckDmaReception+0x70>)
 80027aa:	88bb      	ldrh	r3, [r7, #4]
 80027ac:	8013      	strh	r3, [r2, #0]

	if(LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6) <= 20) { //if remaining buffer capacity is less than 20 characters
 80027ae:	2106      	movs	r1, #6
 80027b0:	4807      	ldr	r0, [pc, #28]	; (80027d0 <USART2_CheckDmaReception+0x6c>)
 80027b2:	f7ff fc9f 	bl	80020f4 <LL_DMA_GetDataLength>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b14      	cmp	r3, #20
 80027ba:	d803      	bhi.n	80027c4 <USART2_CheckDmaReception+0x60>
		reinitializeBuffer();
 80027bc:	f7ff fe72 	bl	80024a4 <reinitializeBuffer>
 80027c0:	e000      	b.n	80027c4 <USART2_CheckDmaReception+0x60>
	if(USART2_ProcessData == 0) return;
 80027c2:	bf00      	nop
	}
}
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000204 	.word	0x20000204
 80027d0:	40020000 	.word	0x40020000
 80027d4:	20000200 	.word	0x20000200
 80027d8:	20000210 	.word	0x20000210

080027dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80027dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002814 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027e0:	480d      	ldr	r0, [pc, #52]	; (8002818 <LoopForever+0x6>)
  ldr r1, =_edata
 80027e2:	490e      	ldr	r1, [pc, #56]	; (800281c <LoopForever+0xa>)
  ldr r2, =_sidata
 80027e4:	4a0e      	ldr	r2, [pc, #56]	; (8002820 <LoopForever+0xe>)
  movs r3, #0
 80027e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027e8:	e002      	b.n	80027f0 <LoopCopyDataInit>

080027ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ee:	3304      	adds	r3, #4

080027f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f4:	d3f9      	bcc.n	80027ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027f6:	4a0b      	ldr	r2, [pc, #44]	; (8002824 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027f8:	4c0b      	ldr	r4, [pc, #44]	; (8002828 <LoopForever+0x16>)
  movs r3, #0
 80027fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027fc:	e001      	b.n	8002802 <LoopFillZerobss>

080027fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002800:	3204      	adds	r2, #4

08002802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002804:	d3fb      	bcc.n	80027fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002806:	f7fe fffb 	bl	8001800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800280a:	f001 f867 	bl	80038dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800280e:	f7fe fcd3 	bl	80011b8 <main>

08002812 <LoopForever>:

LoopForever:
    b LoopForever
 8002812:	e7fe      	b.n	8002812 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002814:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800281c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002820:	0800872c 	.word	0x0800872c
  ldr r2, =_sbss
 8002824:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002828:	200002e8 	.word	0x200002e8

0800282c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800282c:	e7fe      	b.n	800282c <ADC1_2_IRQHandler>

0800282e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800282e:	b480      	push	{r7}
 8002830:	b089      	sub	sp, #36	; 0x24
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	fa93 f3a3 	rbit	r3, r3
 8002848:	613b      	str	r3, [r7, #16]
  return result;
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	fab3 f383 	clz	r3, r3
 8002850:	b2db      	uxtb	r3, r3
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	2103      	movs	r1, #3
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	401a      	ands	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	fa93 f3a3 	rbit	r3, r3
 8002868:	61bb      	str	r3, [r7, #24]
  return result;
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	fa01 f303 	lsl.w	r3, r1, r3
 800287a:	431a      	orrs	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	601a      	str	r2, [r3, #0]
}
 8002880:	bf00      	nop
 8002882:	3724      	adds	r7, #36	; 0x24
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	43db      	mvns	r3, r3
 80028a0:	401a      	ands	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	431a      	orrs	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	605a      	str	r2, [r3, #4]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80028bc:	b480      	push	{r7}
 80028be:	b089      	sub	sp, #36	; 0x24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	613b      	str	r3, [r7, #16]
  return result;
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2103      	movs	r1, #3
 80028e4:	fa01 f303 	lsl.w	r3, r1, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	401a      	ands	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	61bb      	str	r3, [r7, #24]
  return result;
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	fa01 f303 	lsl.w	r3, r1, r3
 8002908:	431a      	orrs	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800290e:	bf00      	nop
 8002910:	3724      	adds	r7, #36	; 0x24
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800291a:	b480      	push	{r7}
 800291c:	b089      	sub	sp, #36	; 0x24
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	613b      	str	r3, [r7, #16]
  return result;
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	fab3 f383 	clz	r3, r3
 800293c:	b2db      	uxtb	r3, r3
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	2103      	movs	r1, #3
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	401a      	ands	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	61bb      	str	r3, [r7, #24]
  return result;
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	fab3 f383 	clz	r3, r3
 800295c:	b2db      	uxtb	r3, r3
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	fa01 f303 	lsl.w	r3, r1, r3
 8002966:	431a      	orrs	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	60da      	str	r2, [r3, #12]
}
 800296c:	bf00      	nop
 800296e:	3724      	adds	r7, #36	; 0x24
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002978:	b480      	push	{r7}
 800297a:	b089      	sub	sp, #36	; 0x24
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a1a      	ldr	r2, [r3, #32]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	613b      	str	r3, [r7, #16]
  return result;
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	210f      	movs	r1, #15
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	401a      	ands	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	fa93 f3a3 	rbit	r3, r3
 80029b2:	61bb      	str	r3, [r7, #24]
  return result;
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	431a      	orrs	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80029ca:	bf00      	nop
 80029cc:	3724      	adds	r7, #36	; 0x24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b089      	sub	sp, #36	; 0x24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	0a1b      	lsrs	r3, r3, #8
 80029ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	613b      	str	r3, [r7, #16]
  return result;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	210f      	movs	r1, #15
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	401a      	ands	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	0a1b      	lsrs	r3, r3, #8
 8002a0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	61bb      	str	r3, [r7, #24]
  return result;
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	fab3 f383 	clz	r3, r3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
 8002a26:	431a      	orrs	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002a2c:	bf00      	nop
 8002a2e:	3724      	adds	r7, #36	; 0x24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	613b      	str	r3, [r7, #16]
  return result;
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002a5a:	e051      	b.n	8002b00 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	2101      	movs	r1, #1
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	fa01 f303 	lsl.w	r3, r1, r3
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d043      	beq.n	8002afa <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d003      	beq.n	8002a82 <LL_GPIO_Init+0x4a>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d10e      	bne.n	8002aa0 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	461a      	mov	r2, r3
 8002a88:	69b9      	ldr	r1, [r7, #24]
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ff16 	bl	80028bc <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	6819      	ldr	r1, [r3, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7ff fef6 	bl	800288c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	69b9      	ldr	r1, [r7, #24]
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ff36 	bl	800291a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d11a      	bne.n	8002aec <LL_GPIO_Init+0xb4>
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	60bb      	str	r3, [r7, #8]
  return result;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002ac4:	fab3 f383 	clz	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b07      	cmp	r3, #7
 8002acc:	d807      	bhi.n	8002ade <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	69b9      	ldr	r1, [r7, #24]
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ff4e 	bl	8002978 <LL_GPIO_SetAFPin_0_7>
 8002adc:	e006      	b.n	8002aec <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	69b9      	ldr	r1, [r7, #24]
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff ff75 	bl	80029d6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	461a      	mov	r2, r3
 8002af2:	69b9      	ldr	r1, [r7, #24]
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff fe9a 	bl	800282e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3301      	adds	r3, #1
 8002afe:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1a6      	bne.n	8002a5c <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3720      	adds	r7, #32
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <LL_RCC_HSI_IsReady>:
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <LL_RCC_HSI_IsReady+0x20>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	40021000 	.word	0x40021000

08002b3c <LL_RCC_LSE_IsReady>:
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002b40:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <LL_RCC_LSE_IsReady+0x20>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	40021000 	.word	0x40021000

08002b60 <LL_RCC_GetSysClkSource>:
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b64:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <LL_RCC_GetSysClkSource+0x18>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 030c 	and.w	r3, r3, #12
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000

08002b7c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b80:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <LL_RCC_GetAHBPrescaler+0x18>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000

08002b98 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002b9c:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000

08002bb4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <LL_RCC_GetAPB2Prescaler+0x18>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000

08002bd0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8002bd8:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <LL_RCC_GetUSARTClockSource+0x28>)
 8002bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bdc:	2103      	movs	r1, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	fa01 f303 	lsl.w	r3, r1, r3
 8002be4:	401a      	ands	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	061b      	lsls	r3, r3, #24
 8002bea:	4313      	orrs	r3, r2
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	40021000 	.word	0x40021000

08002bfc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002c00:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <LL_RCC_PLL_GetMainSource+0x18>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40021000 	.word	0x40021000

08002c18 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002c1c:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000

08002c34 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <LL_RCC_PLL_GetPrediv+0x18>)
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	f003 030f 	and.w	r3, r3, #15
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40021000 	.word	0x40021000

08002c50 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002c58:	f000 f864 	bl	8002d24 <RCC_GetSystemClockFreq>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f882 	bl	8002d70 <RCC_GetHCLKClockFreq>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 f890 	bl	8002d9c <RCC_GetPCLK1ClockFreq>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f89c 	bl	8002dc4 <RCC_GetPCLK2ClockFreq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	60da      	str	r2, [r3, #12]
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d12d      	bne.n	8002d0a <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff ff8e 	bl	8002bd0 <LL_RCC_GetUSARTClockSource>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d00a      	beq.n	8002cd0 <LL_RCC_GetUSARTClockFreq+0x34>
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	d819      	bhi.n	8002cf2 <LL_RCC_GetUSARTClockFreq+0x56>
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d002      	beq.n	8002cc8 <LL_RCC_GetUSARTClockFreq+0x2c>
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d00c      	beq.n	8002ce0 <LL_RCC_GetUSARTClockFreq+0x44>
 8002cc6:	e014      	b.n	8002cf2 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002cc8:	f000 f82c 	bl	8002d24 <RCC_GetSystemClockFreq>
 8002ccc:	60f8      	str	r0, [r7, #12]
        break;
 8002cce:	e021      	b.n	8002d14 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002cd0:	f7ff ff22 	bl	8002b18 <LL_RCC_HSI_IsReady>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d019      	beq.n	8002d0e <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <LL_RCC_GetUSARTClockFreq+0x84>)
 8002cdc:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002cde:	e016      	b.n	8002d0e <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002ce0:	f7ff ff2c 	bl	8002b3c <LL_RCC_LSE_IsReady>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d013      	beq.n	8002d12 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8002cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cee:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002cf0:	e00f      	b.n	8002d12 <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002cf2:	f000 f817 	bl	8002d24 <RCC_GetSystemClockFreq>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 f839 	bl	8002d70 <RCC_GetHCLKClockFreq>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 f84b 	bl	8002d9c <RCC_GetPCLK1ClockFreq>
 8002d06:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8002d08:	e004      	b.n	8002d14 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 8002d0a:	bf00      	nop
 8002d0c:	e002      	b.n	8002d14 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002d0e:	bf00      	nop
 8002d10:	e000      	b.n	8002d14 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002d12:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002d14:	68fb      	ldr	r3, [r7, #12]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	007a1200 	.word	0x007a1200

08002d24 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002d2e:	f7ff ff17 	bl	8002b60 <LL_RCC_GetSysClkSource>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d00c      	beq.n	8002d52 <RCC_GetSystemClockFreq+0x2e>
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d80e      	bhi.n	8002d5a <RCC_GetSystemClockFreq+0x36>
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <RCC_GetSystemClockFreq+0x22>
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d003      	beq.n	8002d4c <RCC_GetSystemClockFreq+0x28>
 8002d44:	e009      	b.n	8002d5a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <RCC_GetSystemClockFreq+0x48>)
 8002d48:	607b      	str	r3, [r7, #4]
      break;
 8002d4a:	e009      	b.n	8002d60 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002d4c:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <RCC_GetSystemClockFreq+0x48>)
 8002d4e:	607b      	str	r3, [r7, #4]
      break;
 8002d50:	e006      	b.n	8002d60 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002d52:	f000 f84b 	bl	8002dec <RCC_PLL_GetFreqDomain_SYS>
 8002d56:	6078      	str	r0, [r7, #4]
      break;
 8002d58:	e002      	b.n	8002d60 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002d5a:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <RCC_GetSystemClockFreq+0x48>)
 8002d5c:	607b      	str	r3, [r7, #4]
      break;
 8002d5e:	bf00      	nop
  }

  return frequency;
 8002d60:	687b      	ldr	r3, [r7, #4]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	007a1200 	.word	0x007a1200

08002d70 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002d78:	f7ff ff00 	bl	8002b7c <LL_RCC_GetAHBPrescaler>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	4a04      	ldr	r2, [pc, #16]	; (8002d98 <RCC_GetHCLKClockFreq+0x28>)
 8002d86:	5cd3      	ldrb	r3, [r2, r3]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	40d3      	lsrs	r3, r2
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	08008238 	.word	0x08008238

08002d9c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002da4:	f7ff fef8 	bl	8002b98 <LL_RCC_GetAPB1Prescaler>
 8002da8:	4603      	mov	r3, r0
 8002daa:	0a1b      	lsrs	r3, r3, #8
 8002dac:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <RCC_GetPCLK1ClockFreq+0x24>)
 8002dae:	5cd3      	ldrb	r3, [r2, r3]
 8002db0:	461a      	mov	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	40d3      	lsrs	r3, r2
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	08008248 	.word	0x08008248

08002dc4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002dcc:	f7ff fef2 	bl	8002bb4 <LL_RCC_GetAPB2Prescaler>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	0adb      	lsrs	r3, r3, #11
 8002dd4:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <RCC_GetPCLK2ClockFreq+0x24>)
 8002dd6:	5cd3      	ldrb	r3, [r2, r3]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	40d3      	lsrs	r3, r2
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	08008248 	.word	0x08008248

08002dec <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002dfa:	f7ff feff 	bl	8002bfc <LL_RCC_PLL_GetMainSource>
 8002dfe:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d004      	beq.n	8002e10 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e0c:	d003      	beq.n	8002e16 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002e0e:	e005      	b.n	8002e1c <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002e10:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002e12:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002e14:	e005      	b.n	8002e22 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002e16:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002e18:	60fb      	str	r3, [r7, #12]
      break;
 8002e1a:	e002      	b.n	8002e22 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8002e1c:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002e1e:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002e20:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002e22:	f7ff ff07 	bl	8002c34 <LL_RCC_PLL_GetPrediv>
 8002e26:	4603      	mov	r3, r0
 8002e28:	3301      	adds	r3, #1
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	fbb2 f4f3 	udiv	r4, r2, r3
 8002e30:	f7ff fef2 	bl	8002c18 <LL_RCC_PLL_GetMultiplicator>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e3a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002e3e:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	fa92 f2a2 	rbit	r2, r2
 8002e46:	603a      	str	r2, [r7, #0]
  return result;
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	fab2 f282 	clz	r2, r2
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	40d3      	lsrs	r3, r2
 8002e52:	3302      	adds	r3, #2
 8002e54:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd90      	pop	{r4, r7, pc}
 8002e60:	003d0900 	.word	0x003d0900
 8002e64:	007a1200 	.word	0x007a1200

08002e68 <LL_TIM_SetPrescaler>:
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_TIM_SetAutoReload>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <LL_TIM_SetRepetitionCounter>:
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <LL_TIM_OC_SetCompareCH1>:
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <LL_TIM_OC_SetCompareCH2>:
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_TIM_OC_SetCompareCH3>:
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <LL_TIM_OC_SetCompareCH4>:
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <LL_TIM_OC_SetCompareCH5>:
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <LL_TIM_OC_SetCompareCH6>:
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f043 0201 	orr.w	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	615a      	str	r2, [r3, #20]
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a2f      	ldr	r2, [pc, #188]	; (8003058 <LL_TIM_Init+0xd0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d007      	beq.n	8002fb0 <LL_TIM_Init+0x28>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa6:	d003      	beq.n	8002fb0 <LL_TIM_Init+0x28>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a2c      	ldr	r2, [pc, #176]	; (800305c <LL_TIM_Init+0xd4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d106      	bne.n	8002fbe <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a25      	ldr	r2, [pc, #148]	; (8003058 <LL_TIM_Init+0xd0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <LL_TIM_Init+0x66>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fcc:	d00f      	beq.n	8002fee <LL_TIM_Init+0x66>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a22      	ldr	r2, [pc, #136]	; (800305c <LL_TIM_Init+0xd4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00b      	beq.n	8002fee <LL_TIM_Init+0x66>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a21      	ldr	r2, [pc, #132]	; (8003060 <LL_TIM_Init+0xd8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d007      	beq.n	8002fee <LL_TIM_Init+0x66>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a20      	ldr	r2, [pc, #128]	; (8003064 <LL_TIM_Init+0xdc>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d003      	beq.n	8002fee <LL_TIM_Init+0x66>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a1f      	ldr	r2, [pc, #124]	; (8003068 <LL_TIM_Init+0xe0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d106      	bne.n	8002ffc <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	4619      	mov	r1, r3
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff ff3b 	bl	8002e84 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	4619      	mov	r1, r3
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff ff27 	bl	8002e68 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a0e      	ldr	r2, [pc, #56]	; (8003058 <LL_TIM_Init+0xd0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00b      	beq.n	800303a <LL_TIM_Init+0xb2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a0e      	ldr	r2, [pc, #56]	; (8003060 <LL_TIM_Init+0xd8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d007      	beq.n	800303a <LL_TIM_Init+0xb2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a0d      	ldr	r2, [pc, #52]	; (8003064 <LL_TIM_Init+0xdc>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d003      	beq.n	800303a <LL_TIM_Init+0xb2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a0c      	ldr	r2, [pc, #48]	; (8003068 <LL_TIM_Init+0xe0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d105      	bne.n	8003046 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	4619      	mov	r1, r3
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff ff2d 	bl	8002ea0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff ff8e 	bl	8002f68 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40012c00 	.word	0x40012c00
 800305c:	40000400 	.word	0x40000400
 8003060:	40014000 	.word	0x40014000
 8003064:	40014400 	.word	0x40014400
 8003068:	40014800 	.word	0x40014800

0800306c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003082:	d045      	beq.n	8003110 <LL_TIM_OC_Init+0xa4>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800308a:	d848      	bhi.n	800311e <LL_TIM_OC_Init+0xb2>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003092:	d036      	beq.n	8003102 <LL_TIM_OC_Init+0x96>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309a:	d840      	bhi.n	800311e <LL_TIM_OC_Init+0xb2>
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a2:	d027      	beq.n	80030f4 <LL_TIM_OC_Init+0x88>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030aa:	d838      	bhi.n	800311e <LL_TIM_OC_Init+0xb2>
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b2:	d018      	beq.n	80030e6 <LL_TIM_OC_Init+0x7a>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ba:	d830      	bhi.n	800311e <LL_TIM_OC_Init+0xb2>
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d003      	beq.n	80030ca <LL_TIM_OC_Init+0x5e>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b10      	cmp	r3, #16
 80030c6:	d007      	beq.n	80030d8 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80030c8:	e029      	b.n	800311e <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 f82d 	bl	800312c <OC1Config>
 80030d2:	4603      	mov	r3, r0
 80030d4:	75fb      	strb	r3, [r7, #23]
      break;
 80030d6:	e023      	b.n	8003120 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f8a0 	bl	8003220 <OC2Config>
 80030e0:	4603      	mov	r3, r0
 80030e2:	75fb      	strb	r3, [r7, #23]
      break;
 80030e4:	e01c      	b.n	8003120 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f917 	bl	800331c <OC3Config>
 80030ee:	4603      	mov	r3, r0
 80030f0:	75fb      	strb	r3, [r7, #23]
      break;
 80030f2:	e015      	b.n	8003120 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f98e 	bl	8003418 <OC4Config>
 80030fc:	4603      	mov	r3, r0
 80030fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003100:	e00e      	b.n	8003120 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f9ed 	bl	80034e4 <OC5Config>
 800310a:	4603      	mov	r3, r0
 800310c:	75fb      	strb	r3, [r7, #23]
      break;
 800310e:	e007      	b.n	8003120 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fa44 	bl	80035a0 <OC6Config>
 8003118:	4603      	mov	r3, r0
 800311a:	75fb      	strb	r3, [r7, #23]
      break;
 800311c:	e000      	b.n	8003120 <LL_TIM_OC_Init+0xb4>
      break;
 800311e:	bf00      	nop
  }

  return result;
 8003120:	7dfb      	ldrb	r3, [r7, #23]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	f023 0201 	bic.w	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0303 	bic.w	r3, r3, #3
 800315a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f023 0202 	bic.w	r2, r3, #2
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f023 0201 	bic.w	r2, r3, #1
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4313      	orrs	r3, r2
 8003188:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a20      	ldr	r2, [pc, #128]	; (8003210 <OC1Config+0xe4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d00b      	beq.n	80031aa <OC1Config+0x7e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a1f      	ldr	r2, [pc, #124]	; (8003214 <OC1Config+0xe8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d007      	beq.n	80031aa <OC1Config+0x7e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a1e      	ldr	r2, [pc, #120]	; (8003218 <OC1Config+0xec>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d003      	beq.n	80031aa <OC1Config+0x7e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a1d      	ldr	r2, [pc, #116]	; (800321c <OC1Config+0xf0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d11e      	bne.n	80031e8 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f023 0208 	bic.w	r2, r3, #8
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f023 0204 	bic.w	r2, r3, #4
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	4619      	mov	r1, r3
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff fe5e 	bl	8002ebc <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40012c00 	.word	0x40012c00
 8003214:	40014000 	.word	0x40014000
 8003218:	40014400 	.word	0x40014400
 800321c:	40014800 	.word	0x40014800

08003220 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	f023 0210 	bic.w	r2, r3, #16
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800324e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	0212      	lsls	r2, r2, #8
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f023 0220 	bic.w	r2, r3, #32
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	4313      	orrs	r3, r2
 8003272:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f023 0210 	bic.w	r2, r3, #16
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	4313      	orrs	r3, r2
 8003282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a21      	ldr	r2, [pc, #132]	; (800330c <OC2Config+0xec>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00b      	beq.n	80032a4 <OC2Config+0x84>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a20      	ldr	r2, [pc, #128]	; (8003310 <OC2Config+0xf0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d007      	beq.n	80032a4 <OC2Config+0x84>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a1f      	ldr	r2, [pc, #124]	; (8003314 <OC2Config+0xf4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d003      	beq.n	80032a4 <OC2Config+0x84>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a1e      	ldr	r2, [pc, #120]	; (8003318 <OC2Config+0xf8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d11f      	bne.n	80032e4 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	019b      	lsls	r3, r3, #6
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	019b      	lsls	r3, r3, #6
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4313      	orrs	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4619      	mov	r1, r3
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff fdee 	bl	8002ed8 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40012c00 	.word	0x40012c00
 8003310:	40014000 	.word	0x40014000
 8003314:	40014400 	.word	0x40014400
 8003318:	40014800 	.word	0x40014800

0800331c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0303 	bic.w	r3, r3, #3
 800334a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	4313      	orrs	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a21      	ldr	r2, [pc, #132]	; (8003408 <OC3Config+0xec>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00b      	beq.n	800339e <OC3Config+0x82>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a20      	ldr	r2, [pc, #128]	; (800340c <OC3Config+0xf0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d007      	beq.n	800339e <OC3Config+0x82>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a1f      	ldr	r2, [pc, #124]	; (8003410 <OC3Config+0xf4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d003      	beq.n	800339e <OC3Config+0x82>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a1e      	ldr	r2, [pc, #120]	; (8003414 <OC3Config+0xf8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d11f      	bne.n	80033de <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	029b      	lsls	r3, r3, #10
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	029b      	lsls	r3, r3, #10
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	015b      	lsls	r3, r3, #5
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	4619      	mov	r1, r3
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff fd7f 	bl	8002ef4 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40012c00 	.word	0x40012c00
 800340c:	40014000 	.word	0x40014000
 8003410:	40014400 	.word	0x40014400
 8003414:	40014800 	.word	0x40014800

08003418 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800344e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	0212      	lsls	r2, r2, #8
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	031b      	lsls	r3, r3, #12
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	031b      	lsls	r3, r3, #12
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a15      	ldr	r2, [pc, #84]	; (80034d4 <OC4Config+0xbc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d00b      	beq.n	800349c <OC4Config+0x84>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a14      	ldr	r2, [pc, #80]	; (80034d8 <OC4Config+0xc0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d007      	beq.n	800349c <OC4Config+0x84>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a13      	ldr	r2, [pc, #76]	; (80034dc <OC4Config+0xc4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d003      	beq.n	800349c <OC4Config+0x84>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a12      	ldr	r2, [pc, #72]	; (80034e0 <OC4Config+0xc8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d107      	bne.n	80034ac <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	019b      	lsls	r3, r3, #6
 80034a8:	4313      	orrs	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	4619      	mov	r1, r3
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff fd26 	bl	8002f10 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40012c00 	.word	0x40012c00
 80034d8:	40014000 	.word	0x40014000
 80034dc:	40014400 	.word	0x40014400
 80034e0:	40014800 	.word	0x40014800

080034e4 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	4313      	orrs	r3, r2
 8003516:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	041b      	lsls	r3, r3, #16
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	041b      	lsls	r3, r3, #16
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a15      	ldr	r2, [pc, #84]	; (8003590 <OC5Config+0xac>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d00b      	beq.n	8003558 <OC5Config+0x74>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a14      	ldr	r2, [pc, #80]	; (8003594 <OC5Config+0xb0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d007      	beq.n	8003558 <OC5Config+0x74>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a13      	ldr	r2, [pc, #76]	; (8003598 <OC5Config+0xb4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d003      	beq.n	8003558 <OC5Config+0x74>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a12      	ldr	r2, [pc, #72]	; (800359c <OC5Config+0xb8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d109      	bne.n	800356c <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	4619      	mov	r1, r3
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff fcd7 	bl	8002f2c <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40012c00 	.word	0x40012c00
 8003594:	40014000 	.word	0x40014000
 8003598:	40014400 	.word	0x40014400
 800359c:	40014800 	.word	0x40014800

080035a0 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	0212      	lsls	r2, r2, #8
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	051b      	lsls	r3, r3, #20
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	051b      	lsls	r3, r3, #20
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a14      	ldr	r2, [pc, #80]	; (800364c <OC6Config+0xac>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00b      	beq.n	8003616 <OC6Config+0x76>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a13      	ldr	r2, [pc, #76]	; (8003650 <OC6Config+0xb0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d007      	beq.n	8003616 <OC6Config+0x76>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a12      	ldr	r2, [pc, #72]	; (8003654 <OC6Config+0xb4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d003      	beq.n	8003616 <OC6Config+0x76>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a11      	ldr	r2, [pc, #68]	; (8003658 <OC6Config+0xb8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d109      	bne.n	800362a <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	029b      	lsls	r3, r3, #10
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4619      	mov	r1, r3
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff fc88 	bl	8002f4c <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40012c00 	.word	0x40012c00
 8003650:	40014000 	.word	0x40014000
 8003654:	40014400 	.word	0x40014400
 8003658:	40014800 	.word	0x40014800

0800365c <LL_USART_IsEnabled>:
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <LL_USART_IsEnabled+0x18>
 8003670:	2301      	movs	r3, #1
 8003672:	e000      	b.n	8003676 <LL_USART_IsEnabled+0x1a>
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <LL_USART_SetStopBitsLength>:
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	605a      	str	r2, [r3, #4]
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <LL_USART_SetHWFlowCtrl>:
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	609a      	str	r2, [r3, #8]
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <LL_USART_SetBaudRate>:
{
 80036ce:	b480      	push	{r7}
 80036d0:	b087      	sub	sp, #28
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	607a      	str	r2, [r7, #4]
 80036da:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036e2:	d11a      	bne.n	800371a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	005a      	lsls	r2, r3, #1
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	085b      	lsrs	r3, r3, #1
 80036ec:	441a      	add	r2, r3
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80036fe:	4013      	ands	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	085b      	lsrs	r3, r3, #1
 8003706:	b29b      	uxth	r3, r3
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	60da      	str	r2, [r3, #12]
}
 8003718:	e00a      	b.n	8003730 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	085a      	lsrs	r2, r3, #1
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	441a      	add	r2, r3
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	fbb2 f3f3 	udiv	r3, r2, r3
 8003728:	b29b      	uxth	r3, r3
 800372a:	461a      	mov	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	60da      	str	r2, [r3, #12]
}
 8003730:	bf00      	nop
 8003732:	371c      	adds	r7, #28
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800374a:	2300      	movs	r3, #0
 800374c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff ff84 	bl	800365c <LL_USART_IsEnabled>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d14e      	bne.n	80037f8 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	4b29      	ldr	r3, [pc, #164]	; (8003804 <LL_USART_Init+0xc8>)
 8003760:	4013      	ands	r3, r2
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	6851      	ldr	r1, [r2, #4]
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	68d2      	ldr	r2, [r2, #12]
 800376a:	4311      	orrs	r1, r2
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	6912      	ldr	r2, [r2, #16]
 8003770:	4311      	orrs	r1, r2
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	6992      	ldr	r2, [r2, #24]
 8003776:	430a      	orrs	r2, r1
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	4619      	mov	r1, r3
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff ff7c 	bl	8003682 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	4619      	mov	r1, r3
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff ff89 	bl	80036a8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a1b      	ldr	r2, [pc, #108]	; (8003808 <LL_USART_Init+0xcc>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d104      	bne.n	80037a8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800379e:	2000      	movs	r0, #0
 80037a0:	f7ff fa7c 	bl	8002c9c <LL_RCC_GetUSARTClockFreq>
 80037a4:	61b8      	str	r0, [r7, #24]
 80037a6:	e016      	b.n	80037d6 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a18      	ldr	r2, [pc, #96]	; (800380c <LL_USART_Init+0xd0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d107      	bne.n	80037c0 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80037b0:	f107 0308 	add.w	r3, r7, #8
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff fa4b 	bl	8002c50 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	e00a      	b.n	80037d6 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a13      	ldr	r2, [pc, #76]	; (8003810 <LL_USART_Init+0xd4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d106      	bne.n	80037d6 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80037c8:	f107 0308 	add.w	r3, r7, #8
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff fa3f 	bl	8002c50 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00d      	beq.n	80037f8 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d009      	beq.n	80037f8 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80037e4:	2300      	movs	r3, #0
 80037e6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	699a      	ldr	r2, [r3, #24]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69b9      	ldr	r1, [r7, #24]
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff ff6b 	bl	80036ce <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80037f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	efff69f3 	.word	0xefff69f3
 8003808:	40013800 	.word	0x40013800
 800380c:	40004400 	.word	0x40004400
 8003810:	40004800 	.word	0x40004800

08003814 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	fbb2 f3f3 	udiv	r3, r2, r3
 8003826:	4a07      	ldr	r2, [pc, #28]	; (8003844 <LL_InitTick+0x30>)
 8003828:	3b01      	subs	r3, #1
 800382a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800382c:	4b05      	ldr	r3, [pc, #20]	; (8003844 <LL_InitTick+0x30>)
 800382e:	2200      	movs	r2, #0
 8003830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003832:	4b04      	ldr	r3, [pc, #16]	; (8003844 <LL_InitTick+0x30>)
 8003834:	2205      	movs	r2, #5
 8003836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	e000e010 	.word	0xe000e010

08003848 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003850:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff ffdd 	bl	8003814 <LL_InitTick>
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800386c:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <LL_mDelay+0x48>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003872:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387a:	d00c      	beq.n	8003896 <LL_mDelay+0x32>
  {
    Delay++;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3301      	adds	r3, #1
 8003880:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003882:	e008      	b.n	8003896 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003884:	4b09      	ldr	r3, [pc, #36]	; (80038ac <LL_mDelay+0x48>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <LL_mDelay+0x32>
    {
      Delay--;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3b01      	subs	r3, #1
 8003894:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f3      	bne.n	8003884 <LL_mDelay+0x20>
    }
  }
}
 800389c:	bf00      	nop
 800389e:	bf00      	nop
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	e000e010 	.word	0xe000e010

080038b0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80038b8:	4a04      	ldr	r2, [pc, #16]	; (80038cc <LL_SetSystemCoreClock+0x1c>)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6013      	str	r3, [r2, #0]
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20000004 	.word	0x20000004

080038d0 <__errno>:
 80038d0:	4b01      	ldr	r3, [pc, #4]	; (80038d8 <__errno+0x8>)
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20000008 	.word	0x20000008

080038dc <__libc_init_array>:
 80038dc:	b570      	push	{r4, r5, r6, lr}
 80038de:	4d0d      	ldr	r5, [pc, #52]	; (8003914 <__libc_init_array+0x38>)
 80038e0:	4c0d      	ldr	r4, [pc, #52]	; (8003918 <__libc_init_array+0x3c>)
 80038e2:	1b64      	subs	r4, r4, r5
 80038e4:	10a4      	asrs	r4, r4, #2
 80038e6:	2600      	movs	r6, #0
 80038e8:	42a6      	cmp	r6, r4
 80038ea:	d109      	bne.n	8003900 <__libc_init_array+0x24>
 80038ec:	4d0b      	ldr	r5, [pc, #44]	; (800391c <__libc_init_array+0x40>)
 80038ee:	4c0c      	ldr	r4, [pc, #48]	; (8003920 <__libc_init_array+0x44>)
 80038f0:	f004 fc46 	bl	8008180 <_init>
 80038f4:	1b64      	subs	r4, r4, r5
 80038f6:	10a4      	asrs	r4, r4, #2
 80038f8:	2600      	movs	r6, #0
 80038fa:	42a6      	cmp	r6, r4
 80038fc:	d105      	bne.n	800390a <__libc_init_array+0x2e>
 80038fe:	bd70      	pop	{r4, r5, r6, pc}
 8003900:	f855 3b04 	ldr.w	r3, [r5], #4
 8003904:	4798      	blx	r3
 8003906:	3601      	adds	r6, #1
 8003908:	e7ee      	b.n	80038e8 <__libc_init_array+0xc>
 800390a:	f855 3b04 	ldr.w	r3, [r5], #4
 800390e:	4798      	blx	r3
 8003910:	3601      	adds	r6, #1
 8003912:	e7f2      	b.n	80038fa <__libc_init_array+0x1e>
 8003914:	08008724 	.word	0x08008724
 8003918:	08008724 	.word	0x08008724
 800391c:	08008724 	.word	0x08008724
 8003920:	08008728 	.word	0x08008728

08003924 <memset>:
 8003924:	4402      	add	r2, r0
 8003926:	4603      	mov	r3, r0
 8003928:	4293      	cmp	r3, r2
 800392a:	d100      	bne.n	800392e <memset+0xa>
 800392c:	4770      	bx	lr
 800392e:	f803 1b01 	strb.w	r1, [r3], #1
 8003932:	e7f9      	b.n	8003928 <memset+0x4>

08003934 <__cvt>:
 8003934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003938:	ec55 4b10 	vmov	r4, r5, d0
 800393c:	2d00      	cmp	r5, #0
 800393e:	460e      	mov	r6, r1
 8003940:	4619      	mov	r1, r3
 8003942:	462b      	mov	r3, r5
 8003944:	bfbb      	ittet	lt
 8003946:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800394a:	461d      	movlt	r5, r3
 800394c:	2300      	movge	r3, #0
 800394e:	232d      	movlt	r3, #45	; 0x2d
 8003950:	700b      	strb	r3, [r1, #0]
 8003952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003954:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003958:	4691      	mov	r9, r2
 800395a:	f023 0820 	bic.w	r8, r3, #32
 800395e:	bfbc      	itt	lt
 8003960:	4622      	movlt	r2, r4
 8003962:	4614      	movlt	r4, r2
 8003964:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003968:	d005      	beq.n	8003976 <__cvt+0x42>
 800396a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800396e:	d100      	bne.n	8003972 <__cvt+0x3e>
 8003970:	3601      	adds	r6, #1
 8003972:	2102      	movs	r1, #2
 8003974:	e000      	b.n	8003978 <__cvt+0x44>
 8003976:	2103      	movs	r1, #3
 8003978:	ab03      	add	r3, sp, #12
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	ab02      	add	r3, sp, #8
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	ec45 4b10 	vmov	d0, r4, r5
 8003984:	4653      	mov	r3, sl
 8003986:	4632      	mov	r2, r6
 8003988:	f001 fdb6 	bl	80054f8 <_dtoa_r>
 800398c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003990:	4607      	mov	r7, r0
 8003992:	d102      	bne.n	800399a <__cvt+0x66>
 8003994:	f019 0f01 	tst.w	r9, #1
 8003998:	d022      	beq.n	80039e0 <__cvt+0xac>
 800399a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800399e:	eb07 0906 	add.w	r9, r7, r6
 80039a2:	d110      	bne.n	80039c6 <__cvt+0x92>
 80039a4:	783b      	ldrb	r3, [r7, #0]
 80039a6:	2b30      	cmp	r3, #48	; 0x30
 80039a8:	d10a      	bne.n	80039c0 <__cvt+0x8c>
 80039aa:	2200      	movs	r2, #0
 80039ac:	2300      	movs	r3, #0
 80039ae:	4620      	mov	r0, r4
 80039b0:	4629      	mov	r1, r5
 80039b2:	f7fd f889 	bl	8000ac8 <__aeabi_dcmpeq>
 80039b6:	b918      	cbnz	r0, 80039c0 <__cvt+0x8c>
 80039b8:	f1c6 0601 	rsb	r6, r6, #1
 80039bc:	f8ca 6000 	str.w	r6, [sl]
 80039c0:	f8da 3000 	ldr.w	r3, [sl]
 80039c4:	4499      	add	r9, r3
 80039c6:	2200      	movs	r2, #0
 80039c8:	2300      	movs	r3, #0
 80039ca:	4620      	mov	r0, r4
 80039cc:	4629      	mov	r1, r5
 80039ce:	f7fd f87b 	bl	8000ac8 <__aeabi_dcmpeq>
 80039d2:	b108      	cbz	r0, 80039d8 <__cvt+0xa4>
 80039d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80039d8:	2230      	movs	r2, #48	; 0x30
 80039da:	9b03      	ldr	r3, [sp, #12]
 80039dc:	454b      	cmp	r3, r9
 80039de:	d307      	bcc.n	80039f0 <__cvt+0xbc>
 80039e0:	9b03      	ldr	r3, [sp, #12]
 80039e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039e4:	1bdb      	subs	r3, r3, r7
 80039e6:	4638      	mov	r0, r7
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	b004      	add	sp, #16
 80039ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f0:	1c59      	adds	r1, r3, #1
 80039f2:	9103      	str	r1, [sp, #12]
 80039f4:	701a      	strb	r2, [r3, #0]
 80039f6:	e7f0      	b.n	80039da <__cvt+0xa6>

080039f8 <__exponent>:
 80039f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039fa:	4603      	mov	r3, r0
 80039fc:	2900      	cmp	r1, #0
 80039fe:	bfb8      	it	lt
 8003a00:	4249      	neglt	r1, r1
 8003a02:	f803 2b02 	strb.w	r2, [r3], #2
 8003a06:	bfb4      	ite	lt
 8003a08:	222d      	movlt	r2, #45	; 0x2d
 8003a0a:	222b      	movge	r2, #43	; 0x2b
 8003a0c:	2909      	cmp	r1, #9
 8003a0e:	7042      	strb	r2, [r0, #1]
 8003a10:	dd2a      	ble.n	8003a68 <__exponent+0x70>
 8003a12:	f10d 0407 	add.w	r4, sp, #7
 8003a16:	46a4      	mov	ip, r4
 8003a18:	270a      	movs	r7, #10
 8003a1a:	46a6      	mov	lr, r4
 8003a1c:	460a      	mov	r2, r1
 8003a1e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003a22:	fb07 1516 	mls	r5, r7, r6, r1
 8003a26:	3530      	adds	r5, #48	; 0x30
 8003a28:	2a63      	cmp	r2, #99	; 0x63
 8003a2a:	f104 34ff 	add.w	r4, r4, #4294967295
 8003a2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003a32:	4631      	mov	r1, r6
 8003a34:	dcf1      	bgt.n	8003a1a <__exponent+0x22>
 8003a36:	3130      	adds	r1, #48	; 0x30
 8003a38:	f1ae 0502 	sub.w	r5, lr, #2
 8003a3c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003a40:	1c44      	adds	r4, r0, #1
 8003a42:	4629      	mov	r1, r5
 8003a44:	4561      	cmp	r1, ip
 8003a46:	d30a      	bcc.n	8003a5e <__exponent+0x66>
 8003a48:	f10d 0209 	add.w	r2, sp, #9
 8003a4c:	eba2 020e 	sub.w	r2, r2, lr
 8003a50:	4565      	cmp	r5, ip
 8003a52:	bf88      	it	hi
 8003a54:	2200      	movhi	r2, #0
 8003a56:	4413      	add	r3, r2
 8003a58:	1a18      	subs	r0, r3, r0
 8003a5a:	b003      	add	sp, #12
 8003a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a62:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003a66:	e7ed      	b.n	8003a44 <__exponent+0x4c>
 8003a68:	2330      	movs	r3, #48	; 0x30
 8003a6a:	3130      	adds	r1, #48	; 0x30
 8003a6c:	7083      	strb	r3, [r0, #2]
 8003a6e:	70c1      	strb	r1, [r0, #3]
 8003a70:	1d03      	adds	r3, r0, #4
 8003a72:	e7f1      	b.n	8003a58 <__exponent+0x60>

08003a74 <_printf_float>:
 8003a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a78:	ed2d 8b02 	vpush	{d8}
 8003a7c:	b08d      	sub	sp, #52	; 0x34
 8003a7e:	460c      	mov	r4, r1
 8003a80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003a84:	4616      	mov	r6, r2
 8003a86:	461f      	mov	r7, r3
 8003a88:	4605      	mov	r5, r0
 8003a8a:	f002 fe91 	bl	80067b0 <_localeconv_r>
 8003a8e:	f8d0 a000 	ldr.w	sl, [r0]
 8003a92:	4650      	mov	r0, sl
 8003a94:	f7fc fb9c 	bl	80001d0 <strlen>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	930a      	str	r3, [sp, #40]	; 0x28
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	9305      	str	r3, [sp, #20]
 8003aa0:	f8d8 3000 	ldr.w	r3, [r8]
 8003aa4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003aa8:	3307      	adds	r3, #7
 8003aaa:	f023 0307 	bic.w	r3, r3, #7
 8003aae:	f103 0208 	add.w	r2, r3, #8
 8003ab2:	f8c8 2000 	str.w	r2, [r8]
 8003ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003abe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003ac2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003ac6:	9307      	str	r3, [sp, #28]
 8003ac8:	f8cd 8018 	str.w	r8, [sp, #24]
 8003acc:	ee08 0a10 	vmov	s16, r0
 8003ad0:	4b9f      	ldr	r3, [pc, #636]	; (8003d50 <_printf_float+0x2dc>)
 8003ad2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8003ada:	f7fd f827 	bl	8000b2c <__aeabi_dcmpun>
 8003ade:	bb88      	cbnz	r0, 8003b44 <_printf_float+0xd0>
 8003ae0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ae4:	4b9a      	ldr	r3, [pc, #616]	; (8003d50 <_printf_float+0x2dc>)
 8003ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aea:	f7fd f801 	bl	8000af0 <__aeabi_dcmple>
 8003aee:	bb48      	cbnz	r0, 8003b44 <_printf_float+0xd0>
 8003af0:	2200      	movs	r2, #0
 8003af2:	2300      	movs	r3, #0
 8003af4:	4640      	mov	r0, r8
 8003af6:	4649      	mov	r1, r9
 8003af8:	f7fc fff0 	bl	8000adc <__aeabi_dcmplt>
 8003afc:	b110      	cbz	r0, 8003b04 <_printf_float+0x90>
 8003afe:	232d      	movs	r3, #45	; 0x2d
 8003b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b04:	4b93      	ldr	r3, [pc, #588]	; (8003d54 <_printf_float+0x2e0>)
 8003b06:	4894      	ldr	r0, [pc, #592]	; (8003d58 <_printf_float+0x2e4>)
 8003b08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003b0c:	bf94      	ite	ls
 8003b0e:	4698      	movls	r8, r3
 8003b10:	4680      	movhi	r8, r0
 8003b12:	2303      	movs	r3, #3
 8003b14:	6123      	str	r3, [r4, #16]
 8003b16:	9b05      	ldr	r3, [sp, #20]
 8003b18:	f023 0204 	bic.w	r2, r3, #4
 8003b1c:	6022      	str	r2, [r4, #0]
 8003b1e:	f04f 0900 	mov.w	r9, #0
 8003b22:	9700      	str	r7, [sp, #0]
 8003b24:	4633      	mov	r3, r6
 8003b26:	aa0b      	add	r2, sp, #44	; 0x2c
 8003b28:	4621      	mov	r1, r4
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	f000 f9d8 	bl	8003ee0 <_printf_common>
 8003b30:	3001      	adds	r0, #1
 8003b32:	f040 8090 	bne.w	8003c56 <_printf_float+0x1e2>
 8003b36:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3a:	b00d      	add	sp, #52	; 0x34
 8003b3c:	ecbd 8b02 	vpop	{d8}
 8003b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b44:	4642      	mov	r2, r8
 8003b46:	464b      	mov	r3, r9
 8003b48:	4640      	mov	r0, r8
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	f7fc ffee 	bl	8000b2c <__aeabi_dcmpun>
 8003b50:	b140      	cbz	r0, 8003b64 <_printf_float+0xf0>
 8003b52:	464b      	mov	r3, r9
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bfbc      	itt	lt
 8003b58:	232d      	movlt	r3, #45	; 0x2d
 8003b5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003b5e:	487f      	ldr	r0, [pc, #508]	; (8003d5c <_printf_float+0x2e8>)
 8003b60:	4b7f      	ldr	r3, [pc, #508]	; (8003d60 <_printf_float+0x2ec>)
 8003b62:	e7d1      	b.n	8003b08 <_printf_float+0x94>
 8003b64:	6863      	ldr	r3, [r4, #4]
 8003b66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003b6a:	9206      	str	r2, [sp, #24]
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	d13f      	bne.n	8003bf0 <_printf_float+0x17c>
 8003b70:	2306      	movs	r3, #6
 8003b72:	6063      	str	r3, [r4, #4]
 8003b74:	9b05      	ldr	r3, [sp, #20]
 8003b76:	6861      	ldr	r1, [r4, #4]
 8003b78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	9303      	str	r3, [sp, #12]
 8003b80:	ab0a      	add	r3, sp, #40	; 0x28
 8003b82:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003b86:	ab09      	add	r3, sp, #36	; 0x24
 8003b88:	ec49 8b10 	vmov	d0, r8, r9
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	6022      	str	r2, [r4, #0]
 8003b90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003b94:	4628      	mov	r0, r5
 8003b96:	f7ff fecd 	bl	8003934 <__cvt>
 8003b9a:	9b06      	ldr	r3, [sp, #24]
 8003b9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b9e:	2b47      	cmp	r3, #71	; 0x47
 8003ba0:	4680      	mov	r8, r0
 8003ba2:	d108      	bne.n	8003bb6 <_printf_float+0x142>
 8003ba4:	1cc8      	adds	r0, r1, #3
 8003ba6:	db02      	blt.n	8003bae <_printf_float+0x13a>
 8003ba8:	6863      	ldr	r3, [r4, #4]
 8003baa:	4299      	cmp	r1, r3
 8003bac:	dd41      	ble.n	8003c32 <_printf_float+0x1be>
 8003bae:	f1ab 0b02 	sub.w	fp, fp, #2
 8003bb2:	fa5f fb8b 	uxtb.w	fp, fp
 8003bb6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003bba:	d820      	bhi.n	8003bfe <_printf_float+0x18a>
 8003bbc:	3901      	subs	r1, #1
 8003bbe:	465a      	mov	r2, fp
 8003bc0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003bc4:	9109      	str	r1, [sp, #36]	; 0x24
 8003bc6:	f7ff ff17 	bl	80039f8 <__exponent>
 8003bca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bcc:	1813      	adds	r3, r2, r0
 8003bce:	2a01      	cmp	r2, #1
 8003bd0:	4681      	mov	r9, r0
 8003bd2:	6123      	str	r3, [r4, #16]
 8003bd4:	dc02      	bgt.n	8003bdc <_printf_float+0x168>
 8003bd6:	6822      	ldr	r2, [r4, #0]
 8003bd8:	07d2      	lsls	r2, r2, #31
 8003bda:	d501      	bpl.n	8003be0 <_printf_float+0x16c>
 8003bdc:	3301      	adds	r3, #1
 8003bde:	6123      	str	r3, [r4, #16]
 8003be0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d09c      	beq.n	8003b22 <_printf_float+0xae>
 8003be8:	232d      	movs	r3, #45	; 0x2d
 8003bea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bee:	e798      	b.n	8003b22 <_printf_float+0xae>
 8003bf0:	9a06      	ldr	r2, [sp, #24]
 8003bf2:	2a47      	cmp	r2, #71	; 0x47
 8003bf4:	d1be      	bne.n	8003b74 <_printf_float+0x100>
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1bc      	bne.n	8003b74 <_printf_float+0x100>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e7b9      	b.n	8003b72 <_printf_float+0xfe>
 8003bfe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003c02:	d118      	bne.n	8003c36 <_printf_float+0x1c2>
 8003c04:	2900      	cmp	r1, #0
 8003c06:	6863      	ldr	r3, [r4, #4]
 8003c08:	dd0b      	ble.n	8003c22 <_printf_float+0x1ae>
 8003c0a:	6121      	str	r1, [r4, #16]
 8003c0c:	b913      	cbnz	r3, 8003c14 <_printf_float+0x1a0>
 8003c0e:	6822      	ldr	r2, [r4, #0]
 8003c10:	07d0      	lsls	r0, r2, #31
 8003c12:	d502      	bpl.n	8003c1a <_printf_float+0x1a6>
 8003c14:	3301      	adds	r3, #1
 8003c16:	440b      	add	r3, r1
 8003c18:	6123      	str	r3, [r4, #16]
 8003c1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8003c1c:	f04f 0900 	mov.w	r9, #0
 8003c20:	e7de      	b.n	8003be0 <_printf_float+0x16c>
 8003c22:	b913      	cbnz	r3, 8003c2a <_printf_float+0x1b6>
 8003c24:	6822      	ldr	r2, [r4, #0]
 8003c26:	07d2      	lsls	r2, r2, #31
 8003c28:	d501      	bpl.n	8003c2e <_printf_float+0x1ba>
 8003c2a:	3302      	adds	r3, #2
 8003c2c:	e7f4      	b.n	8003c18 <_printf_float+0x1a4>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e7f2      	b.n	8003c18 <_printf_float+0x1a4>
 8003c32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c38:	4299      	cmp	r1, r3
 8003c3a:	db05      	blt.n	8003c48 <_printf_float+0x1d4>
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	6121      	str	r1, [r4, #16]
 8003c40:	07d8      	lsls	r0, r3, #31
 8003c42:	d5ea      	bpl.n	8003c1a <_printf_float+0x1a6>
 8003c44:	1c4b      	adds	r3, r1, #1
 8003c46:	e7e7      	b.n	8003c18 <_printf_float+0x1a4>
 8003c48:	2900      	cmp	r1, #0
 8003c4a:	bfd4      	ite	le
 8003c4c:	f1c1 0202 	rsble	r2, r1, #2
 8003c50:	2201      	movgt	r2, #1
 8003c52:	4413      	add	r3, r2
 8003c54:	e7e0      	b.n	8003c18 <_printf_float+0x1a4>
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	055a      	lsls	r2, r3, #21
 8003c5a:	d407      	bmi.n	8003c6c <_printf_float+0x1f8>
 8003c5c:	6923      	ldr	r3, [r4, #16]
 8003c5e:	4642      	mov	r2, r8
 8003c60:	4631      	mov	r1, r6
 8003c62:	4628      	mov	r0, r5
 8003c64:	47b8      	blx	r7
 8003c66:	3001      	adds	r0, #1
 8003c68:	d12c      	bne.n	8003cc4 <_printf_float+0x250>
 8003c6a:	e764      	b.n	8003b36 <_printf_float+0xc2>
 8003c6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003c70:	f240 80e0 	bls.w	8003e34 <_printf_float+0x3c0>
 8003c74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f7fc ff24 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c80:	2800      	cmp	r0, #0
 8003c82:	d034      	beq.n	8003cee <_printf_float+0x27a>
 8003c84:	4a37      	ldr	r2, [pc, #220]	; (8003d64 <_printf_float+0x2f0>)
 8003c86:	2301      	movs	r3, #1
 8003c88:	4631      	mov	r1, r6
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	47b8      	blx	r7
 8003c8e:	3001      	adds	r0, #1
 8003c90:	f43f af51 	beq.w	8003b36 <_printf_float+0xc2>
 8003c94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	db02      	blt.n	8003ca2 <_printf_float+0x22e>
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	07d8      	lsls	r0, r3, #31
 8003ca0:	d510      	bpl.n	8003cc4 <_printf_float+0x250>
 8003ca2:	ee18 3a10 	vmov	r3, s16
 8003ca6:	4652      	mov	r2, sl
 8003ca8:	4631      	mov	r1, r6
 8003caa:	4628      	mov	r0, r5
 8003cac:	47b8      	blx	r7
 8003cae:	3001      	adds	r0, #1
 8003cb0:	f43f af41 	beq.w	8003b36 <_printf_float+0xc2>
 8003cb4:	f04f 0800 	mov.w	r8, #0
 8003cb8:	f104 091a 	add.w	r9, r4, #26
 8003cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	4543      	cmp	r3, r8
 8003cc2:	dc09      	bgt.n	8003cd8 <_printf_float+0x264>
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	079b      	lsls	r3, r3, #30
 8003cc8:	f100 8105 	bmi.w	8003ed6 <_printf_float+0x462>
 8003ccc:	68e0      	ldr	r0, [r4, #12]
 8003cce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cd0:	4298      	cmp	r0, r3
 8003cd2:	bfb8      	it	lt
 8003cd4:	4618      	movlt	r0, r3
 8003cd6:	e730      	b.n	8003b3a <_printf_float+0xc6>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	464a      	mov	r2, r9
 8003cdc:	4631      	mov	r1, r6
 8003cde:	4628      	mov	r0, r5
 8003ce0:	47b8      	blx	r7
 8003ce2:	3001      	adds	r0, #1
 8003ce4:	f43f af27 	beq.w	8003b36 <_printf_float+0xc2>
 8003ce8:	f108 0801 	add.w	r8, r8, #1
 8003cec:	e7e6      	b.n	8003cbc <_printf_float+0x248>
 8003cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	dc39      	bgt.n	8003d68 <_printf_float+0x2f4>
 8003cf4:	4a1b      	ldr	r2, [pc, #108]	; (8003d64 <_printf_float+0x2f0>)
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	4631      	mov	r1, r6
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	47b8      	blx	r7
 8003cfe:	3001      	adds	r0, #1
 8003d00:	f43f af19 	beq.w	8003b36 <_printf_float+0xc2>
 8003d04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	d102      	bne.n	8003d12 <_printf_float+0x29e>
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	07d9      	lsls	r1, r3, #31
 8003d10:	d5d8      	bpl.n	8003cc4 <_printf_float+0x250>
 8003d12:	ee18 3a10 	vmov	r3, s16
 8003d16:	4652      	mov	r2, sl
 8003d18:	4631      	mov	r1, r6
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	47b8      	blx	r7
 8003d1e:	3001      	adds	r0, #1
 8003d20:	f43f af09 	beq.w	8003b36 <_printf_float+0xc2>
 8003d24:	f04f 0900 	mov.w	r9, #0
 8003d28:	f104 0a1a 	add.w	sl, r4, #26
 8003d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d2e:	425b      	negs	r3, r3
 8003d30:	454b      	cmp	r3, r9
 8003d32:	dc01      	bgt.n	8003d38 <_printf_float+0x2c4>
 8003d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d36:	e792      	b.n	8003c5e <_printf_float+0x1ea>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	4652      	mov	r2, sl
 8003d3c:	4631      	mov	r1, r6
 8003d3e:	4628      	mov	r0, r5
 8003d40:	47b8      	blx	r7
 8003d42:	3001      	adds	r0, #1
 8003d44:	f43f aef7 	beq.w	8003b36 <_printf_float+0xc2>
 8003d48:	f109 0901 	add.w	r9, r9, #1
 8003d4c:	e7ee      	b.n	8003d2c <_printf_float+0x2b8>
 8003d4e:	bf00      	nop
 8003d50:	7fefffff 	.word	0x7fefffff
 8003d54:	08008274 	.word	0x08008274
 8003d58:	08008278 	.word	0x08008278
 8003d5c:	08008280 	.word	0x08008280
 8003d60:	0800827c 	.word	0x0800827c
 8003d64:	08008284 	.word	0x08008284
 8003d68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	bfa8      	it	ge
 8003d70:	461a      	movge	r2, r3
 8003d72:	2a00      	cmp	r2, #0
 8003d74:	4691      	mov	r9, r2
 8003d76:	dc37      	bgt.n	8003de8 <_printf_float+0x374>
 8003d78:	f04f 0b00 	mov.w	fp, #0
 8003d7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d80:	f104 021a 	add.w	r2, r4, #26
 8003d84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d86:	9305      	str	r3, [sp, #20]
 8003d88:	eba3 0309 	sub.w	r3, r3, r9
 8003d8c:	455b      	cmp	r3, fp
 8003d8e:	dc33      	bgt.n	8003df8 <_printf_float+0x384>
 8003d90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d94:	429a      	cmp	r2, r3
 8003d96:	db3b      	blt.n	8003e10 <_printf_float+0x39c>
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	07da      	lsls	r2, r3, #31
 8003d9c:	d438      	bmi.n	8003e10 <_printf_float+0x39c>
 8003d9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003da0:	9b05      	ldr	r3, [sp, #20]
 8003da2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	eba2 0901 	sub.w	r9, r2, r1
 8003daa:	4599      	cmp	r9, r3
 8003dac:	bfa8      	it	ge
 8003dae:	4699      	movge	r9, r3
 8003db0:	f1b9 0f00 	cmp.w	r9, #0
 8003db4:	dc35      	bgt.n	8003e22 <_printf_float+0x3ae>
 8003db6:	f04f 0800 	mov.w	r8, #0
 8003dba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003dbe:	f104 0a1a 	add.w	sl, r4, #26
 8003dc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	eba3 0309 	sub.w	r3, r3, r9
 8003dcc:	4543      	cmp	r3, r8
 8003dce:	f77f af79 	ble.w	8003cc4 <_printf_float+0x250>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	4652      	mov	r2, sl
 8003dd6:	4631      	mov	r1, r6
 8003dd8:	4628      	mov	r0, r5
 8003dda:	47b8      	blx	r7
 8003ddc:	3001      	adds	r0, #1
 8003dde:	f43f aeaa 	beq.w	8003b36 <_printf_float+0xc2>
 8003de2:	f108 0801 	add.w	r8, r8, #1
 8003de6:	e7ec      	b.n	8003dc2 <_printf_float+0x34e>
 8003de8:	4613      	mov	r3, r2
 8003dea:	4631      	mov	r1, r6
 8003dec:	4642      	mov	r2, r8
 8003dee:	4628      	mov	r0, r5
 8003df0:	47b8      	blx	r7
 8003df2:	3001      	adds	r0, #1
 8003df4:	d1c0      	bne.n	8003d78 <_printf_float+0x304>
 8003df6:	e69e      	b.n	8003b36 <_printf_float+0xc2>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	4631      	mov	r1, r6
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	9205      	str	r2, [sp, #20]
 8003e00:	47b8      	blx	r7
 8003e02:	3001      	adds	r0, #1
 8003e04:	f43f ae97 	beq.w	8003b36 <_printf_float+0xc2>
 8003e08:	9a05      	ldr	r2, [sp, #20]
 8003e0a:	f10b 0b01 	add.w	fp, fp, #1
 8003e0e:	e7b9      	b.n	8003d84 <_printf_float+0x310>
 8003e10:	ee18 3a10 	vmov	r3, s16
 8003e14:	4652      	mov	r2, sl
 8003e16:	4631      	mov	r1, r6
 8003e18:	4628      	mov	r0, r5
 8003e1a:	47b8      	blx	r7
 8003e1c:	3001      	adds	r0, #1
 8003e1e:	d1be      	bne.n	8003d9e <_printf_float+0x32a>
 8003e20:	e689      	b.n	8003b36 <_printf_float+0xc2>
 8003e22:	9a05      	ldr	r2, [sp, #20]
 8003e24:	464b      	mov	r3, r9
 8003e26:	4442      	add	r2, r8
 8003e28:	4631      	mov	r1, r6
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	47b8      	blx	r7
 8003e2e:	3001      	adds	r0, #1
 8003e30:	d1c1      	bne.n	8003db6 <_printf_float+0x342>
 8003e32:	e680      	b.n	8003b36 <_printf_float+0xc2>
 8003e34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e36:	2a01      	cmp	r2, #1
 8003e38:	dc01      	bgt.n	8003e3e <_printf_float+0x3ca>
 8003e3a:	07db      	lsls	r3, r3, #31
 8003e3c:	d538      	bpl.n	8003eb0 <_printf_float+0x43c>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	4642      	mov	r2, r8
 8003e42:	4631      	mov	r1, r6
 8003e44:	4628      	mov	r0, r5
 8003e46:	47b8      	blx	r7
 8003e48:	3001      	adds	r0, #1
 8003e4a:	f43f ae74 	beq.w	8003b36 <_printf_float+0xc2>
 8003e4e:	ee18 3a10 	vmov	r3, s16
 8003e52:	4652      	mov	r2, sl
 8003e54:	4631      	mov	r1, r6
 8003e56:	4628      	mov	r0, r5
 8003e58:	47b8      	blx	r7
 8003e5a:	3001      	adds	r0, #1
 8003e5c:	f43f ae6b 	beq.w	8003b36 <_printf_float+0xc2>
 8003e60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e64:	2200      	movs	r2, #0
 8003e66:	2300      	movs	r3, #0
 8003e68:	f7fc fe2e 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e6c:	b9d8      	cbnz	r0, 8003ea6 <_printf_float+0x432>
 8003e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e70:	f108 0201 	add.w	r2, r8, #1
 8003e74:	3b01      	subs	r3, #1
 8003e76:	4631      	mov	r1, r6
 8003e78:	4628      	mov	r0, r5
 8003e7a:	47b8      	blx	r7
 8003e7c:	3001      	adds	r0, #1
 8003e7e:	d10e      	bne.n	8003e9e <_printf_float+0x42a>
 8003e80:	e659      	b.n	8003b36 <_printf_float+0xc2>
 8003e82:	2301      	movs	r3, #1
 8003e84:	4652      	mov	r2, sl
 8003e86:	4631      	mov	r1, r6
 8003e88:	4628      	mov	r0, r5
 8003e8a:	47b8      	blx	r7
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	f43f ae52 	beq.w	8003b36 <_printf_float+0xc2>
 8003e92:	f108 0801 	add.w	r8, r8, #1
 8003e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	4543      	cmp	r3, r8
 8003e9c:	dcf1      	bgt.n	8003e82 <_printf_float+0x40e>
 8003e9e:	464b      	mov	r3, r9
 8003ea0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003ea4:	e6dc      	b.n	8003c60 <_printf_float+0x1ec>
 8003ea6:	f04f 0800 	mov.w	r8, #0
 8003eaa:	f104 0a1a 	add.w	sl, r4, #26
 8003eae:	e7f2      	b.n	8003e96 <_printf_float+0x422>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	4642      	mov	r2, r8
 8003eb4:	e7df      	b.n	8003e76 <_printf_float+0x402>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	464a      	mov	r2, r9
 8003eba:	4631      	mov	r1, r6
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	47b8      	blx	r7
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	f43f ae38 	beq.w	8003b36 <_printf_float+0xc2>
 8003ec6:	f108 0801 	add.w	r8, r8, #1
 8003eca:	68e3      	ldr	r3, [r4, #12]
 8003ecc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ece:	1a5b      	subs	r3, r3, r1
 8003ed0:	4543      	cmp	r3, r8
 8003ed2:	dcf0      	bgt.n	8003eb6 <_printf_float+0x442>
 8003ed4:	e6fa      	b.n	8003ccc <_printf_float+0x258>
 8003ed6:	f04f 0800 	mov.w	r8, #0
 8003eda:	f104 0919 	add.w	r9, r4, #25
 8003ede:	e7f4      	b.n	8003eca <_printf_float+0x456>

08003ee0 <_printf_common>:
 8003ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee4:	4616      	mov	r6, r2
 8003ee6:	4699      	mov	r9, r3
 8003ee8:	688a      	ldr	r2, [r1, #8]
 8003eea:	690b      	ldr	r3, [r1, #16]
 8003eec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	bfb8      	it	lt
 8003ef4:	4613      	movlt	r3, r2
 8003ef6:	6033      	str	r3, [r6, #0]
 8003ef8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003efc:	4607      	mov	r7, r0
 8003efe:	460c      	mov	r4, r1
 8003f00:	b10a      	cbz	r2, 8003f06 <_printf_common+0x26>
 8003f02:	3301      	adds	r3, #1
 8003f04:	6033      	str	r3, [r6, #0]
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	0699      	lsls	r1, r3, #26
 8003f0a:	bf42      	ittt	mi
 8003f0c:	6833      	ldrmi	r3, [r6, #0]
 8003f0e:	3302      	addmi	r3, #2
 8003f10:	6033      	strmi	r3, [r6, #0]
 8003f12:	6825      	ldr	r5, [r4, #0]
 8003f14:	f015 0506 	ands.w	r5, r5, #6
 8003f18:	d106      	bne.n	8003f28 <_printf_common+0x48>
 8003f1a:	f104 0a19 	add.w	sl, r4, #25
 8003f1e:	68e3      	ldr	r3, [r4, #12]
 8003f20:	6832      	ldr	r2, [r6, #0]
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	42ab      	cmp	r3, r5
 8003f26:	dc26      	bgt.n	8003f76 <_printf_common+0x96>
 8003f28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f2c:	1e13      	subs	r3, r2, #0
 8003f2e:	6822      	ldr	r2, [r4, #0]
 8003f30:	bf18      	it	ne
 8003f32:	2301      	movne	r3, #1
 8003f34:	0692      	lsls	r2, r2, #26
 8003f36:	d42b      	bmi.n	8003f90 <_printf_common+0xb0>
 8003f38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f3c:	4649      	mov	r1, r9
 8003f3e:	4638      	mov	r0, r7
 8003f40:	47c0      	blx	r8
 8003f42:	3001      	adds	r0, #1
 8003f44:	d01e      	beq.n	8003f84 <_printf_common+0xa4>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	68e5      	ldr	r5, [r4, #12]
 8003f4a:	6832      	ldr	r2, [r6, #0]
 8003f4c:	f003 0306 	and.w	r3, r3, #6
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	bf08      	it	eq
 8003f54:	1aad      	subeq	r5, r5, r2
 8003f56:	68a3      	ldr	r3, [r4, #8]
 8003f58:	6922      	ldr	r2, [r4, #16]
 8003f5a:	bf0c      	ite	eq
 8003f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f60:	2500      	movne	r5, #0
 8003f62:	4293      	cmp	r3, r2
 8003f64:	bfc4      	itt	gt
 8003f66:	1a9b      	subgt	r3, r3, r2
 8003f68:	18ed      	addgt	r5, r5, r3
 8003f6a:	2600      	movs	r6, #0
 8003f6c:	341a      	adds	r4, #26
 8003f6e:	42b5      	cmp	r5, r6
 8003f70:	d11a      	bne.n	8003fa8 <_printf_common+0xc8>
 8003f72:	2000      	movs	r0, #0
 8003f74:	e008      	b.n	8003f88 <_printf_common+0xa8>
 8003f76:	2301      	movs	r3, #1
 8003f78:	4652      	mov	r2, sl
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	4638      	mov	r0, r7
 8003f7e:	47c0      	blx	r8
 8003f80:	3001      	adds	r0, #1
 8003f82:	d103      	bne.n	8003f8c <_printf_common+0xac>
 8003f84:	f04f 30ff 	mov.w	r0, #4294967295
 8003f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f8c:	3501      	adds	r5, #1
 8003f8e:	e7c6      	b.n	8003f1e <_printf_common+0x3e>
 8003f90:	18e1      	adds	r1, r4, r3
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	2030      	movs	r0, #48	; 0x30
 8003f96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f9a:	4422      	add	r2, r4
 8003f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fa4:	3302      	adds	r3, #2
 8003fa6:	e7c7      	b.n	8003f38 <_printf_common+0x58>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	4622      	mov	r2, r4
 8003fac:	4649      	mov	r1, r9
 8003fae:	4638      	mov	r0, r7
 8003fb0:	47c0      	blx	r8
 8003fb2:	3001      	adds	r0, #1
 8003fb4:	d0e6      	beq.n	8003f84 <_printf_common+0xa4>
 8003fb6:	3601      	adds	r6, #1
 8003fb8:	e7d9      	b.n	8003f6e <_printf_common+0x8e>
	...

08003fbc <_printf_i>:
 8003fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc0:	460c      	mov	r4, r1
 8003fc2:	4691      	mov	r9, r2
 8003fc4:	7e27      	ldrb	r7, [r4, #24]
 8003fc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fc8:	2f78      	cmp	r7, #120	; 0x78
 8003fca:	4680      	mov	r8, r0
 8003fcc:	469a      	mov	sl, r3
 8003fce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fd2:	d807      	bhi.n	8003fe4 <_printf_i+0x28>
 8003fd4:	2f62      	cmp	r7, #98	; 0x62
 8003fd6:	d80a      	bhi.n	8003fee <_printf_i+0x32>
 8003fd8:	2f00      	cmp	r7, #0
 8003fda:	f000 80d8 	beq.w	800418e <_printf_i+0x1d2>
 8003fde:	2f58      	cmp	r7, #88	; 0x58
 8003fe0:	f000 80a3 	beq.w	800412a <_printf_i+0x16e>
 8003fe4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fec:	e03a      	b.n	8004064 <_printf_i+0xa8>
 8003fee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ff2:	2b15      	cmp	r3, #21
 8003ff4:	d8f6      	bhi.n	8003fe4 <_printf_i+0x28>
 8003ff6:	a001      	add	r0, pc, #4	; (adr r0, 8003ffc <_printf_i+0x40>)
 8003ff8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ffc:	08004055 	.word	0x08004055
 8004000:	08004069 	.word	0x08004069
 8004004:	08003fe5 	.word	0x08003fe5
 8004008:	08003fe5 	.word	0x08003fe5
 800400c:	08003fe5 	.word	0x08003fe5
 8004010:	08003fe5 	.word	0x08003fe5
 8004014:	08004069 	.word	0x08004069
 8004018:	08003fe5 	.word	0x08003fe5
 800401c:	08003fe5 	.word	0x08003fe5
 8004020:	08003fe5 	.word	0x08003fe5
 8004024:	08003fe5 	.word	0x08003fe5
 8004028:	08004175 	.word	0x08004175
 800402c:	08004099 	.word	0x08004099
 8004030:	08004157 	.word	0x08004157
 8004034:	08003fe5 	.word	0x08003fe5
 8004038:	08003fe5 	.word	0x08003fe5
 800403c:	08004197 	.word	0x08004197
 8004040:	08003fe5 	.word	0x08003fe5
 8004044:	08004099 	.word	0x08004099
 8004048:	08003fe5 	.word	0x08003fe5
 800404c:	08003fe5 	.word	0x08003fe5
 8004050:	0800415f 	.word	0x0800415f
 8004054:	680b      	ldr	r3, [r1, #0]
 8004056:	1d1a      	adds	r2, r3, #4
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	600a      	str	r2, [r1, #0]
 800405c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004064:	2301      	movs	r3, #1
 8004066:	e0a3      	b.n	80041b0 <_printf_i+0x1f4>
 8004068:	6825      	ldr	r5, [r4, #0]
 800406a:	6808      	ldr	r0, [r1, #0]
 800406c:	062e      	lsls	r6, r5, #24
 800406e:	f100 0304 	add.w	r3, r0, #4
 8004072:	d50a      	bpl.n	800408a <_printf_i+0xce>
 8004074:	6805      	ldr	r5, [r0, #0]
 8004076:	600b      	str	r3, [r1, #0]
 8004078:	2d00      	cmp	r5, #0
 800407a:	da03      	bge.n	8004084 <_printf_i+0xc8>
 800407c:	232d      	movs	r3, #45	; 0x2d
 800407e:	426d      	negs	r5, r5
 8004080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004084:	485e      	ldr	r0, [pc, #376]	; (8004200 <_printf_i+0x244>)
 8004086:	230a      	movs	r3, #10
 8004088:	e019      	b.n	80040be <_printf_i+0x102>
 800408a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800408e:	6805      	ldr	r5, [r0, #0]
 8004090:	600b      	str	r3, [r1, #0]
 8004092:	bf18      	it	ne
 8004094:	b22d      	sxthne	r5, r5
 8004096:	e7ef      	b.n	8004078 <_printf_i+0xbc>
 8004098:	680b      	ldr	r3, [r1, #0]
 800409a:	6825      	ldr	r5, [r4, #0]
 800409c:	1d18      	adds	r0, r3, #4
 800409e:	6008      	str	r0, [r1, #0]
 80040a0:	0628      	lsls	r0, r5, #24
 80040a2:	d501      	bpl.n	80040a8 <_printf_i+0xec>
 80040a4:	681d      	ldr	r5, [r3, #0]
 80040a6:	e002      	b.n	80040ae <_printf_i+0xf2>
 80040a8:	0669      	lsls	r1, r5, #25
 80040aa:	d5fb      	bpl.n	80040a4 <_printf_i+0xe8>
 80040ac:	881d      	ldrh	r5, [r3, #0]
 80040ae:	4854      	ldr	r0, [pc, #336]	; (8004200 <_printf_i+0x244>)
 80040b0:	2f6f      	cmp	r7, #111	; 0x6f
 80040b2:	bf0c      	ite	eq
 80040b4:	2308      	moveq	r3, #8
 80040b6:	230a      	movne	r3, #10
 80040b8:	2100      	movs	r1, #0
 80040ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040be:	6866      	ldr	r6, [r4, #4]
 80040c0:	60a6      	str	r6, [r4, #8]
 80040c2:	2e00      	cmp	r6, #0
 80040c4:	bfa2      	ittt	ge
 80040c6:	6821      	ldrge	r1, [r4, #0]
 80040c8:	f021 0104 	bicge.w	r1, r1, #4
 80040cc:	6021      	strge	r1, [r4, #0]
 80040ce:	b90d      	cbnz	r5, 80040d4 <_printf_i+0x118>
 80040d0:	2e00      	cmp	r6, #0
 80040d2:	d04d      	beq.n	8004170 <_printf_i+0x1b4>
 80040d4:	4616      	mov	r6, r2
 80040d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80040da:	fb03 5711 	mls	r7, r3, r1, r5
 80040de:	5dc7      	ldrb	r7, [r0, r7]
 80040e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040e4:	462f      	mov	r7, r5
 80040e6:	42bb      	cmp	r3, r7
 80040e8:	460d      	mov	r5, r1
 80040ea:	d9f4      	bls.n	80040d6 <_printf_i+0x11a>
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d10b      	bne.n	8004108 <_printf_i+0x14c>
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	07df      	lsls	r7, r3, #31
 80040f4:	d508      	bpl.n	8004108 <_printf_i+0x14c>
 80040f6:	6923      	ldr	r3, [r4, #16]
 80040f8:	6861      	ldr	r1, [r4, #4]
 80040fa:	4299      	cmp	r1, r3
 80040fc:	bfde      	ittt	le
 80040fe:	2330      	movle	r3, #48	; 0x30
 8004100:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004104:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004108:	1b92      	subs	r2, r2, r6
 800410a:	6122      	str	r2, [r4, #16]
 800410c:	f8cd a000 	str.w	sl, [sp]
 8004110:	464b      	mov	r3, r9
 8004112:	aa03      	add	r2, sp, #12
 8004114:	4621      	mov	r1, r4
 8004116:	4640      	mov	r0, r8
 8004118:	f7ff fee2 	bl	8003ee0 <_printf_common>
 800411c:	3001      	adds	r0, #1
 800411e:	d14c      	bne.n	80041ba <_printf_i+0x1fe>
 8004120:	f04f 30ff 	mov.w	r0, #4294967295
 8004124:	b004      	add	sp, #16
 8004126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800412a:	4835      	ldr	r0, [pc, #212]	; (8004200 <_printf_i+0x244>)
 800412c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	680e      	ldr	r6, [r1, #0]
 8004134:	061f      	lsls	r7, r3, #24
 8004136:	f856 5b04 	ldr.w	r5, [r6], #4
 800413a:	600e      	str	r6, [r1, #0]
 800413c:	d514      	bpl.n	8004168 <_printf_i+0x1ac>
 800413e:	07d9      	lsls	r1, r3, #31
 8004140:	bf44      	itt	mi
 8004142:	f043 0320 	orrmi.w	r3, r3, #32
 8004146:	6023      	strmi	r3, [r4, #0]
 8004148:	b91d      	cbnz	r5, 8004152 <_printf_i+0x196>
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	f023 0320 	bic.w	r3, r3, #32
 8004150:	6023      	str	r3, [r4, #0]
 8004152:	2310      	movs	r3, #16
 8004154:	e7b0      	b.n	80040b8 <_printf_i+0xfc>
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	f043 0320 	orr.w	r3, r3, #32
 800415c:	6023      	str	r3, [r4, #0]
 800415e:	2378      	movs	r3, #120	; 0x78
 8004160:	4828      	ldr	r0, [pc, #160]	; (8004204 <_printf_i+0x248>)
 8004162:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004166:	e7e3      	b.n	8004130 <_printf_i+0x174>
 8004168:	065e      	lsls	r6, r3, #25
 800416a:	bf48      	it	mi
 800416c:	b2ad      	uxthmi	r5, r5
 800416e:	e7e6      	b.n	800413e <_printf_i+0x182>
 8004170:	4616      	mov	r6, r2
 8004172:	e7bb      	b.n	80040ec <_printf_i+0x130>
 8004174:	680b      	ldr	r3, [r1, #0]
 8004176:	6826      	ldr	r6, [r4, #0]
 8004178:	6960      	ldr	r0, [r4, #20]
 800417a:	1d1d      	adds	r5, r3, #4
 800417c:	600d      	str	r5, [r1, #0]
 800417e:	0635      	lsls	r5, r6, #24
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	d501      	bpl.n	8004188 <_printf_i+0x1cc>
 8004184:	6018      	str	r0, [r3, #0]
 8004186:	e002      	b.n	800418e <_printf_i+0x1d2>
 8004188:	0671      	lsls	r1, r6, #25
 800418a:	d5fb      	bpl.n	8004184 <_printf_i+0x1c8>
 800418c:	8018      	strh	r0, [r3, #0]
 800418e:	2300      	movs	r3, #0
 8004190:	6123      	str	r3, [r4, #16]
 8004192:	4616      	mov	r6, r2
 8004194:	e7ba      	b.n	800410c <_printf_i+0x150>
 8004196:	680b      	ldr	r3, [r1, #0]
 8004198:	1d1a      	adds	r2, r3, #4
 800419a:	600a      	str	r2, [r1, #0]
 800419c:	681e      	ldr	r6, [r3, #0]
 800419e:	6862      	ldr	r2, [r4, #4]
 80041a0:	2100      	movs	r1, #0
 80041a2:	4630      	mov	r0, r6
 80041a4:	f7fc f81c 	bl	80001e0 <memchr>
 80041a8:	b108      	cbz	r0, 80041ae <_printf_i+0x1f2>
 80041aa:	1b80      	subs	r0, r0, r6
 80041ac:	6060      	str	r0, [r4, #4]
 80041ae:	6863      	ldr	r3, [r4, #4]
 80041b0:	6123      	str	r3, [r4, #16]
 80041b2:	2300      	movs	r3, #0
 80041b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041b8:	e7a8      	b.n	800410c <_printf_i+0x150>
 80041ba:	6923      	ldr	r3, [r4, #16]
 80041bc:	4632      	mov	r2, r6
 80041be:	4649      	mov	r1, r9
 80041c0:	4640      	mov	r0, r8
 80041c2:	47d0      	blx	sl
 80041c4:	3001      	adds	r0, #1
 80041c6:	d0ab      	beq.n	8004120 <_printf_i+0x164>
 80041c8:	6823      	ldr	r3, [r4, #0]
 80041ca:	079b      	lsls	r3, r3, #30
 80041cc:	d413      	bmi.n	80041f6 <_printf_i+0x23a>
 80041ce:	68e0      	ldr	r0, [r4, #12]
 80041d0:	9b03      	ldr	r3, [sp, #12]
 80041d2:	4298      	cmp	r0, r3
 80041d4:	bfb8      	it	lt
 80041d6:	4618      	movlt	r0, r3
 80041d8:	e7a4      	b.n	8004124 <_printf_i+0x168>
 80041da:	2301      	movs	r3, #1
 80041dc:	4632      	mov	r2, r6
 80041de:	4649      	mov	r1, r9
 80041e0:	4640      	mov	r0, r8
 80041e2:	47d0      	blx	sl
 80041e4:	3001      	adds	r0, #1
 80041e6:	d09b      	beq.n	8004120 <_printf_i+0x164>
 80041e8:	3501      	adds	r5, #1
 80041ea:	68e3      	ldr	r3, [r4, #12]
 80041ec:	9903      	ldr	r1, [sp, #12]
 80041ee:	1a5b      	subs	r3, r3, r1
 80041f0:	42ab      	cmp	r3, r5
 80041f2:	dcf2      	bgt.n	80041da <_printf_i+0x21e>
 80041f4:	e7eb      	b.n	80041ce <_printf_i+0x212>
 80041f6:	2500      	movs	r5, #0
 80041f8:	f104 0619 	add.w	r6, r4, #25
 80041fc:	e7f5      	b.n	80041ea <_printf_i+0x22e>
 80041fe:	bf00      	nop
 8004200:	08008286 	.word	0x08008286
 8004204:	08008297 	.word	0x08008297

08004208 <_scanf_float>:
 8004208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420c:	b087      	sub	sp, #28
 800420e:	4617      	mov	r7, r2
 8004210:	9303      	str	r3, [sp, #12]
 8004212:	688b      	ldr	r3, [r1, #8]
 8004214:	1e5a      	subs	r2, r3, #1
 8004216:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800421a:	bf83      	ittte	hi
 800421c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004220:	195b      	addhi	r3, r3, r5
 8004222:	9302      	strhi	r3, [sp, #8]
 8004224:	2300      	movls	r3, #0
 8004226:	bf86      	itte	hi
 8004228:	f240 135d 	movwhi	r3, #349	; 0x15d
 800422c:	608b      	strhi	r3, [r1, #8]
 800422e:	9302      	strls	r3, [sp, #8]
 8004230:	680b      	ldr	r3, [r1, #0]
 8004232:	468b      	mov	fp, r1
 8004234:	2500      	movs	r5, #0
 8004236:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800423a:	f84b 3b1c 	str.w	r3, [fp], #28
 800423e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004242:	4680      	mov	r8, r0
 8004244:	460c      	mov	r4, r1
 8004246:	465e      	mov	r6, fp
 8004248:	46aa      	mov	sl, r5
 800424a:	46a9      	mov	r9, r5
 800424c:	9501      	str	r5, [sp, #4]
 800424e:	68a2      	ldr	r2, [r4, #8]
 8004250:	b152      	cbz	r2, 8004268 <_scanf_float+0x60>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b4e      	cmp	r3, #78	; 0x4e
 8004258:	d864      	bhi.n	8004324 <_scanf_float+0x11c>
 800425a:	2b40      	cmp	r3, #64	; 0x40
 800425c:	d83c      	bhi.n	80042d8 <_scanf_float+0xd0>
 800425e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004262:	b2c8      	uxtb	r0, r1
 8004264:	280e      	cmp	r0, #14
 8004266:	d93a      	bls.n	80042de <_scanf_float+0xd6>
 8004268:	f1b9 0f00 	cmp.w	r9, #0
 800426c:	d003      	beq.n	8004276 <_scanf_float+0x6e>
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004274:	6023      	str	r3, [r4, #0]
 8004276:	f10a 3aff 	add.w	sl, sl, #4294967295
 800427a:	f1ba 0f01 	cmp.w	sl, #1
 800427e:	f200 8113 	bhi.w	80044a8 <_scanf_float+0x2a0>
 8004282:	455e      	cmp	r6, fp
 8004284:	f200 8105 	bhi.w	8004492 <_scanf_float+0x28a>
 8004288:	2501      	movs	r5, #1
 800428a:	4628      	mov	r0, r5
 800428c:	b007      	add	sp, #28
 800428e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004292:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004296:	2a0d      	cmp	r2, #13
 8004298:	d8e6      	bhi.n	8004268 <_scanf_float+0x60>
 800429a:	a101      	add	r1, pc, #4	; (adr r1, 80042a0 <_scanf_float+0x98>)
 800429c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80042a0:	080043df 	.word	0x080043df
 80042a4:	08004269 	.word	0x08004269
 80042a8:	08004269 	.word	0x08004269
 80042ac:	08004269 	.word	0x08004269
 80042b0:	0800443f 	.word	0x0800443f
 80042b4:	08004417 	.word	0x08004417
 80042b8:	08004269 	.word	0x08004269
 80042bc:	08004269 	.word	0x08004269
 80042c0:	080043ed 	.word	0x080043ed
 80042c4:	08004269 	.word	0x08004269
 80042c8:	08004269 	.word	0x08004269
 80042cc:	08004269 	.word	0x08004269
 80042d0:	08004269 	.word	0x08004269
 80042d4:	080043a5 	.word	0x080043a5
 80042d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80042dc:	e7db      	b.n	8004296 <_scanf_float+0x8e>
 80042de:	290e      	cmp	r1, #14
 80042e0:	d8c2      	bhi.n	8004268 <_scanf_float+0x60>
 80042e2:	a001      	add	r0, pc, #4	; (adr r0, 80042e8 <_scanf_float+0xe0>)
 80042e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80042e8:	08004397 	.word	0x08004397
 80042ec:	08004269 	.word	0x08004269
 80042f0:	08004397 	.word	0x08004397
 80042f4:	0800442b 	.word	0x0800442b
 80042f8:	08004269 	.word	0x08004269
 80042fc:	08004345 	.word	0x08004345
 8004300:	08004381 	.word	0x08004381
 8004304:	08004381 	.word	0x08004381
 8004308:	08004381 	.word	0x08004381
 800430c:	08004381 	.word	0x08004381
 8004310:	08004381 	.word	0x08004381
 8004314:	08004381 	.word	0x08004381
 8004318:	08004381 	.word	0x08004381
 800431c:	08004381 	.word	0x08004381
 8004320:	08004381 	.word	0x08004381
 8004324:	2b6e      	cmp	r3, #110	; 0x6e
 8004326:	d809      	bhi.n	800433c <_scanf_float+0x134>
 8004328:	2b60      	cmp	r3, #96	; 0x60
 800432a:	d8b2      	bhi.n	8004292 <_scanf_float+0x8a>
 800432c:	2b54      	cmp	r3, #84	; 0x54
 800432e:	d077      	beq.n	8004420 <_scanf_float+0x218>
 8004330:	2b59      	cmp	r3, #89	; 0x59
 8004332:	d199      	bne.n	8004268 <_scanf_float+0x60>
 8004334:	2d07      	cmp	r5, #7
 8004336:	d197      	bne.n	8004268 <_scanf_float+0x60>
 8004338:	2508      	movs	r5, #8
 800433a:	e029      	b.n	8004390 <_scanf_float+0x188>
 800433c:	2b74      	cmp	r3, #116	; 0x74
 800433e:	d06f      	beq.n	8004420 <_scanf_float+0x218>
 8004340:	2b79      	cmp	r3, #121	; 0x79
 8004342:	e7f6      	b.n	8004332 <_scanf_float+0x12a>
 8004344:	6821      	ldr	r1, [r4, #0]
 8004346:	05c8      	lsls	r0, r1, #23
 8004348:	d51a      	bpl.n	8004380 <_scanf_float+0x178>
 800434a:	9b02      	ldr	r3, [sp, #8]
 800434c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004350:	6021      	str	r1, [r4, #0]
 8004352:	f109 0901 	add.w	r9, r9, #1
 8004356:	b11b      	cbz	r3, 8004360 <_scanf_float+0x158>
 8004358:	3b01      	subs	r3, #1
 800435a:	3201      	adds	r2, #1
 800435c:	9302      	str	r3, [sp, #8]
 800435e:	60a2      	str	r2, [r4, #8]
 8004360:	68a3      	ldr	r3, [r4, #8]
 8004362:	3b01      	subs	r3, #1
 8004364:	60a3      	str	r3, [r4, #8]
 8004366:	6923      	ldr	r3, [r4, #16]
 8004368:	3301      	adds	r3, #1
 800436a:	6123      	str	r3, [r4, #16]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3b01      	subs	r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	607b      	str	r3, [r7, #4]
 8004374:	f340 8084 	ble.w	8004480 <_scanf_float+0x278>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	3301      	adds	r3, #1
 800437c:	603b      	str	r3, [r7, #0]
 800437e:	e766      	b.n	800424e <_scanf_float+0x46>
 8004380:	eb1a 0f05 	cmn.w	sl, r5
 8004384:	f47f af70 	bne.w	8004268 <_scanf_float+0x60>
 8004388:	6822      	ldr	r2, [r4, #0]
 800438a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800438e:	6022      	str	r2, [r4, #0]
 8004390:	f806 3b01 	strb.w	r3, [r6], #1
 8004394:	e7e4      	b.n	8004360 <_scanf_float+0x158>
 8004396:	6822      	ldr	r2, [r4, #0]
 8004398:	0610      	lsls	r0, r2, #24
 800439a:	f57f af65 	bpl.w	8004268 <_scanf_float+0x60>
 800439e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043a2:	e7f4      	b.n	800438e <_scanf_float+0x186>
 80043a4:	f1ba 0f00 	cmp.w	sl, #0
 80043a8:	d10e      	bne.n	80043c8 <_scanf_float+0x1c0>
 80043aa:	f1b9 0f00 	cmp.w	r9, #0
 80043ae:	d10e      	bne.n	80043ce <_scanf_float+0x1c6>
 80043b0:	6822      	ldr	r2, [r4, #0]
 80043b2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80043b6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80043ba:	d108      	bne.n	80043ce <_scanf_float+0x1c6>
 80043bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80043c0:	6022      	str	r2, [r4, #0]
 80043c2:	f04f 0a01 	mov.w	sl, #1
 80043c6:	e7e3      	b.n	8004390 <_scanf_float+0x188>
 80043c8:	f1ba 0f02 	cmp.w	sl, #2
 80043cc:	d055      	beq.n	800447a <_scanf_float+0x272>
 80043ce:	2d01      	cmp	r5, #1
 80043d0:	d002      	beq.n	80043d8 <_scanf_float+0x1d0>
 80043d2:	2d04      	cmp	r5, #4
 80043d4:	f47f af48 	bne.w	8004268 <_scanf_float+0x60>
 80043d8:	3501      	adds	r5, #1
 80043da:	b2ed      	uxtb	r5, r5
 80043dc:	e7d8      	b.n	8004390 <_scanf_float+0x188>
 80043de:	f1ba 0f01 	cmp.w	sl, #1
 80043e2:	f47f af41 	bne.w	8004268 <_scanf_float+0x60>
 80043e6:	f04f 0a02 	mov.w	sl, #2
 80043ea:	e7d1      	b.n	8004390 <_scanf_float+0x188>
 80043ec:	b97d      	cbnz	r5, 800440e <_scanf_float+0x206>
 80043ee:	f1b9 0f00 	cmp.w	r9, #0
 80043f2:	f47f af3c 	bne.w	800426e <_scanf_float+0x66>
 80043f6:	6822      	ldr	r2, [r4, #0]
 80043f8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80043fc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004400:	f47f af39 	bne.w	8004276 <_scanf_float+0x6e>
 8004404:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004408:	6022      	str	r2, [r4, #0]
 800440a:	2501      	movs	r5, #1
 800440c:	e7c0      	b.n	8004390 <_scanf_float+0x188>
 800440e:	2d03      	cmp	r5, #3
 8004410:	d0e2      	beq.n	80043d8 <_scanf_float+0x1d0>
 8004412:	2d05      	cmp	r5, #5
 8004414:	e7de      	b.n	80043d4 <_scanf_float+0x1cc>
 8004416:	2d02      	cmp	r5, #2
 8004418:	f47f af26 	bne.w	8004268 <_scanf_float+0x60>
 800441c:	2503      	movs	r5, #3
 800441e:	e7b7      	b.n	8004390 <_scanf_float+0x188>
 8004420:	2d06      	cmp	r5, #6
 8004422:	f47f af21 	bne.w	8004268 <_scanf_float+0x60>
 8004426:	2507      	movs	r5, #7
 8004428:	e7b2      	b.n	8004390 <_scanf_float+0x188>
 800442a:	6822      	ldr	r2, [r4, #0]
 800442c:	0591      	lsls	r1, r2, #22
 800442e:	f57f af1b 	bpl.w	8004268 <_scanf_float+0x60>
 8004432:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004436:	6022      	str	r2, [r4, #0]
 8004438:	f8cd 9004 	str.w	r9, [sp, #4]
 800443c:	e7a8      	b.n	8004390 <_scanf_float+0x188>
 800443e:	6822      	ldr	r2, [r4, #0]
 8004440:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004444:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004448:	d006      	beq.n	8004458 <_scanf_float+0x250>
 800444a:	0550      	lsls	r0, r2, #21
 800444c:	f57f af0c 	bpl.w	8004268 <_scanf_float+0x60>
 8004450:	f1b9 0f00 	cmp.w	r9, #0
 8004454:	f43f af0f 	beq.w	8004276 <_scanf_float+0x6e>
 8004458:	0591      	lsls	r1, r2, #22
 800445a:	bf58      	it	pl
 800445c:	9901      	ldrpl	r1, [sp, #4]
 800445e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004462:	bf58      	it	pl
 8004464:	eba9 0101 	subpl.w	r1, r9, r1
 8004468:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800446c:	bf58      	it	pl
 800446e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004472:	6022      	str	r2, [r4, #0]
 8004474:	f04f 0900 	mov.w	r9, #0
 8004478:	e78a      	b.n	8004390 <_scanf_float+0x188>
 800447a:	f04f 0a03 	mov.w	sl, #3
 800447e:	e787      	b.n	8004390 <_scanf_float+0x188>
 8004480:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004484:	4639      	mov	r1, r7
 8004486:	4640      	mov	r0, r8
 8004488:	4798      	blx	r3
 800448a:	2800      	cmp	r0, #0
 800448c:	f43f aedf 	beq.w	800424e <_scanf_float+0x46>
 8004490:	e6ea      	b.n	8004268 <_scanf_float+0x60>
 8004492:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004496:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800449a:	463a      	mov	r2, r7
 800449c:	4640      	mov	r0, r8
 800449e:	4798      	blx	r3
 80044a0:	6923      	ldr	r3, [r4, #16]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	6123      	str	r3, [r4, #16]
 80044a6:	e6ec      	b.n	8004282 <_scanf_float+0x7a>
 80044a8:	1e6b      	subs	r3, r5, #1
 80044aa:	2b06      	cmp	r3, #6
 80044ac:	d825      	bhi.n	80044fa <_scanf_float+0x2f2>
 80044ae:	2d02      	cmp	r5, #2
 80044b0:	d836      	bhi.n	8004520 <_scanf_float+0x318>
 80044b2:	455e      	cmp	r6, fp
 80044b4:	f67f aee8 	bls.w	8004288 <_scanf_float+0x80>
 80044b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80044bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80044c0:	463a      	mov	r2, r7
 80044c2:	4640      	mov	r0, r8
 80044c4:	4798      	blx	r3
 80044c6:	6923      	ldr	r3, [r4, #16]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	6123      	str	r3, [r4, #16]
 80044cc:	e7f1      	b.n	80044b2 <_scanf_float+0x2aa>
 80044ce:	9802      	ldr	r0, [sp, #8]
 80044d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80044d4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80044d8:	9002      	str	r0, [sp, #8]
 80044da:	463a      	mov	r2, r7
 80044dc:	4640      	mov	r0, r8
 80044de:	4798      	blx	r3
 80044e0:	6923      	ldr	r3, [r4, #16]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	6123      	str	r3, [r4, #16]
 80044e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80044ea:	fa5f fa8a 	uxtb.w	sl, sl
 80044ee:	f1ba 0f02 	cmp.w	sl, #2
 80044f2:	d1ec      	bne.n	80044ce <_scanf_float+0x2c6>
 80044f4:	3d03      	subs	r5, #3
 80044f6:	b2ed      	uxtb	r5, r5
 80044f8:	1b76      	subs	r6, r6, r5
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	05da      	lsls	r2, r3, #23
 80044fe:	d52f      	bpl.n	8004560 <_scanf_float+0x358>
 8004500:	055b      	lsls	r3, r3, #21
 8004502:	d510      	bpl.n	8004526 <_scanf_float+0x31e>
 8004504:	455e      	cmp	r6, fp
 8004506:	f67f aebf 	bls.w	8004288 <_scanf_float+0x80>
 800450a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800450e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004512:	463a      	mov	r2, r7
 8004514:	4640      	mov	r0, r8
 8004516:	4798      	blx	r3
 8004518:	6923      	ldr	r3, [r4, #16]
 800451a:	3b01      	subs	r3, #1
 800451c:	6123      	str	r3, [r4, #16]
 800451e:	e7f1      	b.n	8004504 <_scanf_float+0x2fc>
 8004520:	46aa      	mov	sl, r5
 8004522:	9602      	str	r6, [sp, #8]
 8004524:	e7df      	b.n	80044e6 <_scanf_float+0x2de>
 8004526:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800452a:	6923      	ldr	r3, [r4, #16]
 800452c:	2965      	cmp	r1, #101	; 0x65
 800452e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004532:	f106 35ff 	add.w	r5, r6, #4294967295
 8004536:	6123      	str	r3, [r4, #16]
 8004538:	d00c      	beq.n	8004554 <_scanf_float+0x34c>
 800453a:	2945      	cmp	r1, #69	; 0x45
 800453c:	d00a      	beq.n	8004554 <_scanf_float+0x34c>
 800453e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004542:	463a      	mov	r2, r7
 8004544:	4640      	mov	r0, r8
 8004546:	4798      	blx	r3
 8004548:	6923      	ldr	r3, [r4, #16]
 800454a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800454e:	3b01      	subs	r3, #1
 8004550:	1eb5      	subs	r5, r6, #2
 8004552:	6123      	str	r3, [r4, #16]
 8004554:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004558:	463a      	mov	r2, r7
 800455a:	4640      	mov	r0, r8
 800455c:	4798      	blx	r3
 800455e:	462e      	mov	r6, r5
 8004560:	6825      	ldr	r5, [r4, #0]
 8004562:	f015 0510 	ands.w	r5, r5, #16
 8004566:	d158      	bne.n	800461a <_scanf_float+0x412>
 8004568:	7035      	strb	r5, [r6, #0]
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004574:	d11c      	bne.n	80045b0 <_scanf_float+0x3a8>
 8004576:	9b01      	ldr	r3, [sp, #4]
 8004578:	454b      	cmp	r3, r9
 800457a:	eba3 0209 	sub.w	r2, r3, r9
 800457e:	d124      	bne.n	80045ca <_scanf_float+0x3c2>
 8004580:	2200      	movs	r2, #0
 8004582:	4659      	mov	r1, fp
 8004584:	4640      	mov	r0, r8
 8004586:	f000 fe9d 	bl	80052c4 <_strtod_r>
 800458a:	9b03      	ldr	r3, [sp, #12]
 800458c:	6821      	ldr	r1, [r4, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f011 0f02 	tst.w	r1, #2
 8004594:	ec57 6b10 	vmov	r6, r7, d0
 8004598:	f103 0204 	add.w	r2, r3, #4
 800459c:	d020      	beq.n	80045e0 <_scanf_float+0x3d8>
 800459e:	9903      	ldr	r1, [sp, #12]
 80045a0:	600a      	str	r2, [r1, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	e9c3 6700 	strd	r6, r7, [r3]
 80045a8:	68e3      	ldr	r3, [r4, #12]
 80045aa:	3301      	adds	r3, #1
 80045ac:	60e3      	str	r3, [r4, #12]
 80045ae:	e66c      	b.n	800428a <_scanf_float+0x82>
 80045b0:	9b04      	ldr	r3, [sp, #16]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0e4      	beq.n	8004580 <_scanf_float+0x378>
 80045b6:	9905      	ldr	r1, [sp, #20]
 80045b8:	230a      	movs	r3, #10
 80045ba:	462a      	mov	r2, r5
 80045bc:	3101      	adds	r1, #1
 80045be:	4640      	mov	r0, r8
 80045c0:	f000 ff0a 	bl	80053d8 <_strtol_r>
 80045c4:	9b04      	ldr	r3, [sp, #16]
 80045c6:	9e05      	ldr	r6, [sp, #20]
 80045c8:	1ac2      	subs	r2, r0, r3
 80045ca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80045ce:	429e      	cmp	r6, r3
 80045d0:	bf28      	it	cs
 80045d2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80045d6:	4912      	ldr	r1, [pc, #72]	; (8004620 <_scanf_float+0x418>)
 80045d8:	4630      	mov	r0, r6
 80045da:	f000 f82b 	bl	8004634 <siprintf>
 80045de:	e7cf      	b.n	8004580 <_scanf_float+0x378>
 80045e0:	f011 0f04 	tst.w	r1, #4
 80045e4:	9903      	ldr	r1, [sp, #12]
 80045e6:	600a      	str	r2, [r1, #0]
 80045e8:	d1db      	bne.n	80045a2 <_scanf_float+0x39a>
 80045ea:	f8d3 8000 	ldr.w	r8, [r3]
 80045ee:	ee10 2a10 	vmov	r2, s0
 80045f2:	ee10 0a10 	vmov	r0, s0
 80045f6:	463b      	mov	r3, r7
 80045f8:	4639      	mov	r1, r7
 80045fa:	f7fc fa97 	bl	8000b2c <__aeabi_dcmpun>
 80045fe:	b128      	cbz	r0, 800460c <_scanf_float+0x404>
 8004600:	4808      	ldr	r0, [pc, #32]	; (8004624 <_scanf_float+0x41c>)
 8004602:	f000 f811 	bl	8004628 <nanf>
 8004606:	ed88 0a00 	vstr	s0, [r8]
 800460a:	e7cd      	b.n	80045a8 <_scanf_float+0x3a0>
 800460c:	4630      	mov	r0, r6
 800460e:	4639      	mov	r1, r7
 8004610:	f7fc faea 	bl	8000be8 <__aeabi_d2f>
 8004614:	f8c8 0000 	str.w	r0, [r8]
 8004618:	e7c6      	b.n	80045a8 <_scanf_float+0x3a0>
 800461a:	2500      	movs	r5, #0
 800461c:	e635      	b.n	800428a <_scanf_float+0x82>
 800461e:	bf00      	nop
 8004620:	080082a8 	.word	0x080082a8
 8004624:	080086c0 	.word	0x080086c0

08004628 <nanf>:
 8004628:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004630 <nanf+0x8>
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	7fc00000 	.word	0x7fc00000

08004634 <siprintf>:
 8004634:	b40e      	push	{r1, r2, r3}
 8004636:	b500      	push	{lr}
 8004638:	b09c      	sub	sp, #112	; 0x70
 800463a:	ab1d      	add	r3, sp, #116	; 0x74
 800463c:	9002      	str	r0, [sp, #8]
 800463e:	9006      	str	r0, [sp, #24]
 8004640:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004644:	4809      	ldr	r0, [pc, #36]	; (800466c <siprintf+0x38>)
 8004646:	9107      	str	r1, [sp, #28]
 8004648:	9104      	str	r1, [sp, #16]
 800464a:	4909      	ldr	r1, [pc, #36]	; (8004670 <siprintf+0x3c>)
 800464c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004650:	9105      	str	r1, [sp, #20]
 8004652:	6800      	ldr	r0, [r0, #0]
 8004654:	9301      	str	r3, [sp, #4]
 8004656:	a902      	add	r1, sp, #8
 8004658:	f002 fea6 	bl	80073a8 <_svfiprintf_r>
 800465c:	9b02      	ldr	r3, [sp, #8]
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	b01c      	add	sp, #112	; 0x70
 8004664:	f85d eb04 	ldr.w	lr, [sp], #4
 8004668:	b003      	add	sp, #12
 800466a:	4770      	bx	lr
 800466c:	20000008 	.word	0x20000008
 8004670:	ffff0208 	.word	0xffff0208

08004674 <sulp>:
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	4604      	mov	r4, r0
 8004678:	460d      	mov	r5, r1
 800467a:	ec45 4b10 	vmov	d0, r4, r5
 800467e:	4616      	mov	r6, r2
 8004680:	f002 fc2e 	bl	8006ee0 <__ulp>
 8004684:	ec51 0b10 	vmov	r0, r1, d0
 8004688:	b17e      	cbz	r6, 80046aa <sulp+0x36>
 800468a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800468e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004692:	2b00      	cmp	r3, #0
 8004694:	dd09      	ble.n	80046aa <sulp+0x36>
 8004696:	051b      	lsls	r3, r3, #20
 8004698:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800469c:	2400      	movs	r4, #0
 800469e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80046a2:	4622      	mov	r2, r4
 80046a4:	462b      	mov	r3, r5
 80046a6:	f7fb ffa7 	bl	80005f8 <__aeabi_dmul>
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	0000      	movs	r0, r0
	...

080046b0 <_strtod_l>:
 80046b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b4:	b0a3      	sub	sp, #140	; 0x8c
 80046b6:	461f      	mov	r7, r3
 80046b8:	2300      	movs	r3, #0
 80046ba:	931e      	str	r3, [sp, #120]	; 0x78
 80046bc:	4ba4      	ldr	r3, [pc, #656]	; (8004950 <_strtod_l+0x2a0>)
 80046be:	9219      	str	r2, [sp, #100]	; 0x64
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	9307      	str	r3, [sp, #28]
 80046c4:	4604      	mov	r4, r0
 80046c6:	4618      	mov	r0, r3
 80046c8:	4688      	mov	r8, r1
 80046ca:	f7fb fd81 	bl	80001d0 <strlen>
 80046ce:	f04f 0a00 	mov.w	sl, #0
 80046d2:	4605      	mov	r5, r0
 80046d4:	f04f 0b00 	mov.w	fp, #0
 80046d8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80046dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80046de:	781a      	ldrb	r2, [r3, #0]
 80046e0:	2a2b      	cmp	r2, #43	; 0x2b
 80046e2:	d04c      	beq.n	800477e <_strtod_l+0xce>
 80046e4:	d839      	bhi.n	800475a <_strtod_l+0xaa>
 80046e6:	2a0d      	cmp	r2, #13
 80046e8:	d832      	bhi.n	8004750 <_strtod_l+0xa0>
 80046ea:	2a08      	cmp	r2, #8
 80046ec:	d832      	bhi.n	8004754 <_strtod_l+0xa4>
 80046ee:	2a00      	cmp	r2, #0
 80046f0:	d03c      	beq.n	800476c <_strtod_l+0xbc>
 80046f2:	2300      	movs	r3, #0
 80046f4:	930e      	str	r3, [sp, #56]	; 0x38
 80046f6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80046f8:	7833      	ldrb	r3, [r6, #0]
 80046fa:	2b30      	cmp	r3, #48	; 0x30
 80046fc:	f040 80b4 	bne.w	8004868 <_strtod_l+0x1b8>
 8004700:	7873      	ldrb	r3, [r6, #1]
 8004702:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004706:	2b58      	cmp	r3, #88	; 0x58
 8004708:	d16c      	bne.n	80047e4 <_strtod_l+0x134>
 800470a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800470c:	9301      	str	r3, [sp, #4]
 800470e:	ab1e      	add	r3, sp, #120	; 0x78
 8004710:	9702      	str	r7, [sp, #8]
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	4a8f      	ldr	r2, [pc, #572]	; (8004954 <_strtod_l+0x2a4>)
 8004716:	ab1f      	add	r3, sp, #124	; 0x7c
 8004718:	a91d      	add	r1, sp, #116	; 0x74
 800471a:	4620      	mov	r0, r4
 800471c:	f001 fd40 	bl	80061a0 <__gethex>
 8004720:	f010 0707 	ands.w	r7, r0, #7
 8004724:	4605      	mov	r5, r0
 8004726:	d005      	beq.n	8004734 <_strtod_l+0x84>
 8004728:	2f06      	cmp	r7, #6
 800472a:	d12a      	bne.n	8004782 <_strtod_l+0xd2>
 800472c:	3601      	adds	r6, #1
 800472e:	2300      	movs	r3, #0
 8004730:	961d      	str	r6, [sp, #116]	; 0x74
 8004732:	930e      	str	r3, [sp, #56]	; 0x38
 8004734:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004736:	2b00      	cmp	r3, #0
 8004738:	f040 8596 	bne.w	8005268 <_strtod_l+0xbb8>
 800473c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800473e:	b1db      	cbz	r3, 8004778 <_strtod_l+0xc8>
 8004740:	4652      	mov	r2, sl
 8004742:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004746:	ec43 2b10 	vmov	d0, r2, r3
 800474a:	b023      	add	sp, #140	; 0x8c
 800474c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004750:	2a20      	cmp	r2, #32
 8004752:	d1ce      	bne.n	80046f2 <_strtod_l+0x42>
 8004754:	3301      	adds	r3, #1
 8004756:	931d      	str	r3, [sp, #116]	; 0x74
 8004758:	e7c0      	b.n	80046dc <_strtod_l+0x2c>
 800475a:	2a2d      	cmp	r2, #45	; 0x2d
 800475c:	d1c9      	bne.n	80046f2 <_strtod_l+0x42>
 800475e:	2201      	movs	r2, #1
 8004760:	920e      	str	r2, [sp, #56]	; 0x38
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	921d      	str	r2, [sp, #116]	; 0x74
 8004766:	785b      	ldrb	r3, [r3, #1]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1c4      	bne.n	80046f6 <_strtod_l+0x46>
 800476c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800476e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004772:	2b00      	cmp	r3, #0
 8004774:	f040 8576 	bne.w	8005264 <_strtod_l+0xbb4>
 8004778:	4652      	mov	r2, sl
 800477a:	465b      	mov	r3, fp
 800477c:	e7e3      	b.n	8004746 <_strtod_l+0x96>
 800477e:	2200      	movs	r2, #0
 8004780:	e7ee      	b.n	8004760 <_strtod_l+0xb0>
 8004782:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004784:	b13a      	cbz	r2, 8004796 <_strtod_l+0xe6>
 8004786:	2135      	movs	r1, #53	; 0x35
 8004788:	a820      	add	r0, sp, #128	; 0x80
 800478a:	f002 fcb4 	bl	80070f6 <__copybits>
 800478e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004790:	4620      	mov	r0, r4
 8004792:	f002 f879 	bl	8006888 <_Bfree>
 8004796:	3f01      	subs	r7, #1
 8004798:	2f05      	cmp	r7, #5
 800479a:	d807      	bhi.n	80047ac <_strtod_l+0xfc>
 800479c:	e8df f007 	tbb	[pc, r7]
 80047a0:	1d180b0e 	.word	0x1d180b0e
 80047a4:	030e      	.short	0x030e
 80047a6:	f04f 0b00 	mov.w	fp, #0
 80047aa:	46da      	mov	sl, fp
 80047ac:	0728      	lsls	r0, r5, #28
 80047ae:	d5c1      	bpl.n	8004734 <_strtod_l+0x84>
 80047b0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80047b4:	e7be      	b.n	8004734 <_strtod_l+0x84>
 80047b6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80047ba:	e7f7      	b.n	80047ac <_strtod_l+0xfc>
 80047bc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80047c0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80047c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80047c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80047ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80047ce:	e7ed      	b.n	80047ac <_strtod_l+0xfc>
 80047d0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8004958 <_strtod_l+0x2a8>
 80047d4:	f04f 0a00 	mov.w	sl, #0
 80047d8:	e7e8      	b.n	80047ac <_strtod_l+0xfc>
 80047da:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80047de:	f04f 3aff 	mov.w	sl, #4294967295
 80047e2:	e7e3      	b.n	80047ac <_strtod_l+0xfc>
 80047e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	921d      	str	r2, [sp, #116]	; 0x74
 80047ea:	785b      	ldrb	r3, [r3, #1]
 80047ec:	2b30      	cmp	r3, #48	; 0x30
 80047ee:	d0f9      	beq.n	80047e4 <_strtod_l+0x134>
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d09f      	beq.n	8004734 <_strtod_l+0x84>
 80047f4:	2301      	movs	r3, #1
 80047f6:	f04f 0900 	mov.w	r9, #0
 80047fa:	9304      	str	r3, [sp, #16]
 80047fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80047fe:	930a      	str	r3, [sp, #40]	; 0x28
 8004800:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004804:	464f      	mov	r7, r9
 8004806:	220a      	movs	r2, #10
 8004808:	981d      	ldr	r0, [sp, #116]	; 0x74
 800480a:	7806      	ldrb	r6, [r0, #0]
 800480c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004810:	b2d9      	uxtb	r1, r3
 8004812:	2909      	cmp	r1, #9
 8004814:	d92a      	bls.n	800486c <_strtod_l+0x1bc>
 8004816:	9907      	ldr	r1, [sp, #28]
 8004818:	462a      	mov	r2, r5
 800481a:	f002 fedd 	bl	80075d8 <strncmp>
 800481e:	b398      	cbz	r0, 8004888 <_strtod_l+0x1d8>
 8004820:	2000      	movs	r0, #0
 8004822:	4633      	mov	r3, r6
 8004824:	463d      	mov	r5, r7
 8004826:	9007      	str	r0, [sp, #28]
 8004828:	4602      	mov	r2, r0
 800482a:	2b65      	cmp	r3, #101	; 0x65
 800482c:	d001      	beq.n	8004832 <_strtod_l+0x182>
 800482e:	2b45      	cmp	r3, #69	; 0x45
 8004830:	d118      	bne.n	8004864 <_strtod_l+0x1b4>
 8004832:	b91d      	cbnz	r5, 800483c <_strtod_l+0x18c>
 8004834:	9b04      	ldr	r3, [sp, #16]
 8004836:	4303      	orrs	r3, r0
 8004838:	d098      	beq.n	800476c <_strtod_l+0xbc>
 800483a:	2500      	movs	r5, #0
 800483c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8004840:	f108 0301 	add.w	r3, r8, #1
 8004844:	931d      	str	r3, [sp, #116]	; 0x74
 8004846:	f898 3001 	ldrb.w	r3, [r8, #1]
 800484a:	2b2b      	cmp	r3, #43	; 0x2b
 800484c:	d075      	beq.n	800493a <_strtod_l+0x28a>
 800484e:	2b2d      	cmp	r3, #45	; 0x2d
 8004850:	d07b      	beq.n	800494a <_strtod_l+0x29a>
 8004852:	f04f 0c00 	mov.w	ip, #0
 8004856:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800485a:	2909      	cmp	r1, #9
 800485c:	f240 8082 	bls.w	8004964 <_strtod_l+0x2b4>
 8004860:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004864:	2600      	movs	r6, #0
 8004866:	e09d      	b.n	80049a4 <_strtod_l+0x2f4>
 8004868:	2300      	movs	r3, #0
 800486a:	e7c4      	b.n	80047f6 <_strtod_l+0x146>
 800486c:	2f08      	cmp	r7, #8
 800486e:	bfd8      	it	le
 8004870:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004872:	f100 0001 	add.w	r0, r0, #1
 8004876:	bfda      	itte	le
 8004878:	fb02 3301 	mlale	r3, r2, r1, r3
 800487c:	9309      	strle	r3, [sp, #36]	; 0x24
 800487e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004882:	3701      	adds	r7, #1
 8004884:	901d      	str	r0, [sp, #116]	; 0x74
 8004886:	e7bf      	b.n	8004808 <_strtod_l+0x158>
 8004888:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800488a:	195a      	adds	r2, r3, r5
 800488c:	921d      	str	r2, [sp, #116]	; 0x74
 800488e:	5d5b      	ldrb	r3, [r3, r5]
 8004890:	2f00      	cmp	r7, #0
 8004892:	d037      	beq.n	8004904 <_strtod_l+0x254>
 8004894:	9007      	str	r0, [sp, #28]
 8004896:	463d      	mov	r5, r7
 8004898:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800489c:	2a09      	cmp	r2, #9
 800489e:	d912      	bls.n	80048c6 <_strtod_l+0x216>
 80048a0:	2201      	movs	r2, #1
 80048a2:	e7c2      	b.n	800482a <_strtod_l+0x17a>
 80048a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	921d      	str	r2, [sp, #116]	; 0x74
 80048aa:	785b      	ldrb	r3, [r3, #1]
 80048ac:	3001      	adds	r0, #1
 80048ae:	2b30      	cmp	r3, #48	; 0x30
 80048b0:	d0f8      	beq.n	80048a4 <_strtod_l+0x1f4>
 80048b2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80048b6:	2a08      	cmp	r2, #8
 80048b8:	f200 84db 	bhi.w	8005272 <_strtod_l+0xbc2>
 80048bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80048be:	9007      	str	r0, [sp, #28]
 80048c0:	2000      	movs	r0, #0
 80048c2:	920a      	str	r2, [sp, #40]	; 0x28
 80048c4:	4605      	mov	r5, r0
 80048c6:	3b30      	subs	r3, #48	; 0x30
 80048c8:	f100 0201 	add.w	r2, r0, #1
 80048cc:	d014      	beq.n	80048f8 <_strtod_l+0x248>
 80048ce:	9907      	ldr	r1, [sp, #28]
 80048d0:	4411      	add	r1, r2
 80048d2:	9107      	str	r1, [sp, #28]
 80048d4:	462a      	mov	r2, r5
 80048d6:	eb00 0e05 	add.w	lr, r0, r5
 80048da:	210a      	movs	r1, #10
 80048dc:	4572      	cmp	r2, lr
 80048de:	d113      	bne.n	8004908 <_strtod_l+0x258>
 80048e0:	182a      	adds	r2, r5, r0
 80048e2:	2a08      	cmp	r2, #8
 80048e4:	f105 0501 	add.w	r5, r5, #1
 80048e8:	4405      	add	r5, r0
 80048ea:	dc1c      	bgt.n	8004926 <_strtod_l+0x276>
 80048ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048ee:	220a      	movs	r2, #10
 80048f0:	fb02 3301 	mla	r3, r2, r1, r3
 80048f4:	9309      	str	r3, [sp, #36]	; 0x24
 80048f6:	2200      	movs	r2, #0
 80048f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80048fa:	1c59      	adds	r1, r3, #1
 80048fc:	911d      	str	r1, [sp, #116]	; 0x74
 80048fe:	785b      	ldrb	r3, [r3, #1]
 8004900:	4610      	mov	r0, r2
 8004902:	e7c9      	b.n	8004898 <_strtod_l+0x1e8>
 8004904:	4638      	mov	r0, r7
 8004906:	e7d2      	b.n	80048ae <_strtod_l+0x1fe>
 8004908:	2a08      	cmp	r2, #8
 800490a:	dc04      	bgt.n	8004916 <_strtod_l+0x266>
 800490c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800490e:	434e      	muls	r6, r1
 8004910:	9609      	str	r6, [sp, #36]	; 0x24
 8004912:	3201      	adds	r2, #1
 8004914:	e7e2      	b.n	80048dc <_strtod_l+0x22c>
 8004916:	f102 0c01 	add.w	ip, r2, #1
 800491a:	f1bc 0f10 	cmp.w	ip, #16
 800491e:	bfd8      	it	le
 8004920:	fb01 f909 	mulle.w	r9, r1, r9
 8004924:	e7f5      	b.n	8004912 <_strtod_l+0x262>
 8004926:	2d10      	cmp	r5, #16
 8004928:	bfdc      	itt	le
 800492a:	220a      	movle	r2, #10
 800492c:	fb02 3909 	mlale	r9, r2, r9, r3
 8004930:	e7e1      	b.n	80048f6 <_strtod_l+0x246>
 8004932:	2300      	movs	r3, #0
 8004934:	9307      	str	r3, [sp, #28]
 8004936:	2201      	movs	r2, #1
 8004938:	e77c      	b.n	8004834 <_strtod_l+0x184>
 800493a:	f04f 0c00 	mov.w	ip, #0
 800493e:	f108 0302 	add.w	r3, r8, #2
 8004942:	931d      	str	r3, [sp, #116]	; 0x74
 8004944:	f898 3002 	ldrb.w	r3, [r8, #2]
 8004948:	e785      	b.n	8004856 <_strtod_l+0x1a6>
 800494a:	f04f 0c01 	mov.w	ip, #1
 800494e:	e7f6      	b.n	800493e <_strtod_l+0x28e>
 8004950:	08008500 	.word	0x08008500
 8004954:	080082b0 	.word	0x080082b0
 8004958:	7ff00000 	.word	0x7ff00000
 800495c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800495e:	1c59      	adds	r1, r3, #1
 8004960:	911d      	str	r1, [sp, #116]	; 0x74
 8004962:	785b      	ldrb	r3, [r3, #1]
 8004964:	2b30      	cmp	r3, #48	; 0x30
 8004966:	d0f9      	beq.n	800495c <_strtod_l+0x2ac>
 8004968:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800496c:	2908      	cmp	r1, #8
 800496e:	f63f af79 	bhi.w	8004864 <_strtod_l+0x1b4>
 8004972:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004976:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004978:	9308      	str	r3, [sp, #32]
 800497a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800497c:	1c59      	adds	r1, r3, #1
 800497e:	911d      	str	r1, [sp, #116]	; 0x74
 8004980:	785b      	ldrb	r3, [r3, #1]
 8004982:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8004986:	2e09      	cmp	r6, #9
 8004988:	d937      	bls.n	80049fa <_strtod_l+0x34a>
 800498a:	9e08      	ldr	r6, [sp, #32]
 800498c:	1b89      	subs	r1, r1, r6
 800498e:	2908      	cmp	r1, #8
 8004990:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004994:	dc02      	bgt.n	800499c <_strtod_l+0x2ec>
 8004996:	4576      	cmp	r6, lr
 8004998:	bfa8      	it	ge
 800499a:	4676      	movge	r6, lr
 800499c:	f1bc 0f00 	cmp.w	ip, #0
 80049a0:	d000      	beq.n	80049a4 <_strtod_l+0x2f4>
 80049a2:	4276      	negs	r6, r6
 80049a4:	2d00      	cmp	r5, #0
 80049a6:	d14f      	bne.n	8004a48 <_strtod_l+0x398>
 80049a8:	9904      	ldr	r1, [sp, #16]
 80049aa:	4301      	orrs	r1, r0
 80049ac:	f47f aec2 	bne.w	8004734 <_strtod_l+0x84>
 80049b0:	2a00      	cmp	r2, #0
 80049b2:	f47f aedb 	bne.w	800476c <_strtod_l+0xbc>
 80049b6:	2b69      	cmp	r3, #105	; 0x69
 80049b8:	d027      	beq.n	8004a0a <_strtod_l+0x35a>
 80049ba:	dc24      	bgt.n	8004a06 <_strtod_l+0x356>
 80049bc:	2b49      	cmp	r3, #73	; 0x49
 80049be:	d024      	beq.n	8004a0a <_strtod_l+0x35a>
 80049c0:	2b4e      	cmp	r3, #78	; 0x4e
 80049c2:	f47f aed3 	bne.w	800476c <_strtod_l+0xbc>
 80049c6:	499e      	ldr	r1, [pc, #632]	; (8004c40 <_strtod_l+0x590>)
 80049c8:	a81d      	add	r0, sp, #116	; 0x74
 80049ca:	f001 fe41 	bl	8006650 <__match>
 80049ce:	2800      	cmp	r0, #0
 80049d0:	f43f aecc 	beq.w	800476c <_strtod_l+0xbc>
 80049d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b28      	cmp	r3, #40	; 0x28
 80049da:	d12d      	bne.n	8004a38 <_strtod_l+0x388>
 80049dc:	4999      	ldr	r1, [pc, #612]	; (8004c44 <_strtod_l+0x594>)
 80049de:	aa20      	add	r2, sp, #128	; 0x80
 80049e0:	a81d      	add	r0, sp, #116	; 0x74
 80049e2:	f001 fe49 	bl	8006678 <__hexnan>
 80049e6:	2805      	cmp	r0, #5
 80049e8:	d126      	bne.n	8004a38 <_strtod_l+0x388>
 80049ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049ec:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80049f0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80049f4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80049f8:	e69c      	b.n	8004734 <_strtod_l+0x84>
 80049fa:	210a      	movs	r1, #10
 80049fc:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004a00:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004a04:	e7b9      	b.n	800497a <_strtod_l+0x2ca>
 8004a06:	2b6e      	cmp	r3, #110	; 0x6e
 8004a08:	e7db      	b.n	80049c2 <_strtod_l+0x312>
 8004a0a:	498f      	ldr	r1, [pc, #572]	; (8004c48 <_strtod_l+0x598>)
 8004a0c:	a81d      	add	r0, sp, #116	; 0x74
 8004a0e:	f001 fe1f 	bl	8006650 <__match>
 8004a12:	2800      	cmp	r0, #0
 8004a14:	f43f aeaa 	beq.w	800476c <_strtod_l+0xbc>
 8004a18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004a1a:	498c      	ldr	r1, [pc, #560]	; (8004c4c <_strtod_l+0x59c>)
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	a81d      	add	r0, sp, #116	; 0x74
 8004a20:	931d      	str	r3, [sp, #116]	; 0x74
 8004a22:	f001 fe15 	bl	8006650 <__match>
 8004a26:	b910      	cbnz	r0, 8004a2e <_strtod_l+0x37e>
 8004a28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	931d      	str	r3, [sp, #116]	; 0x74
 8004a2e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8004c5c <_strtod_l+0x5ac>
 8004a32:	f04f 0a00 	mov.w	sl, #0
 8004a36:	e67d      	b.n	8004734 <_strtod_l+0x84>
 8004a38:	4885      	ldr	r0, [pc, #532]	; (8004c50 <_strtod_l+0x5a0>)
 8004a3a:	f002 fdb5 	bl	80075a8 <nan>
 8004a3e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004a42:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004a46:	e675      	b.n	8004734 <_strtod_l+0x84>
 8004a48:	9b07      	ldr	r3, [sp, #28]
 8004a4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a4c:	1af3      	subs	r3, r6, r3
 8004a4e:	2f00      	cmp	r7, #0
 8004a50:	bf08      	it	eq
 8004a52:	462f      	moveq	r7, r5
 8004a54:	2d10      	cmp	r5, #16
 8004a56:	9308      	str	r3, [sp, #32]
 8004a58:	46a8      	mov	r8, r5
 8004a5a:	bfa8      	it	ge
 8004a5c:	f04f 0810 	movge.w	r8, #16
 8004a60:	f7fb fd50 	bl	8000504 <__aeabi_ui2d>
 8004a64:	2d09      	cmp	r5, #9
 8004a66:	4682      	mov	sl, r0
 8004a68:	468b      	mov	fp, r1
 8004a6a:	dd13      	ble.n	8004a94 <_strtod_l+0x3e4>
 8004a6c:	4b79      	ldr	r3, [pc, #484]	; (8004c54 <_strtod_l+0x5a4>)
 8004a6e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004a72:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004a76:	f7fb fdbf 	bl	80005f8 <__aeabi_dmul>
 8004a7a:	4682      	mov	sl, r0
 8004a7c:	4648      	mov	r0, r9
 8004a7e:	468b      	mov	fp, r1
 8004a80:	f7fb fd40 	bl	8000504 <__aeabi_ui2d>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4650      	mov	r0, sl
 8004a8a:	4659      	mov	r1, fp
 8004a8c:	f7fb fbfe 	bl	800028c <__adddf3>
 8004a90:	4682      	mov	sl, r0
 8004a92:	468b      	mov	fp, r1
 8004a94:	2d0f      	cmp	r5, #15
 8004a96:	dc38      	bgt.n	8004b0a <_strtod_l+0x45a>
 8004a98:	9b08      	ldr	r3, [sp, #32]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f43f ae4a 	beq.w	8004734 <_strtod_l+0x84>
 8004aa0:	dd24      	ble.n	8004aec <_strtod_l+0x43c>
 8004aa2:	2b16      	cmp	r3, #22
 8004aa4:	dc0b      	bgt.n	8004abe <_strtod_l+0x40e>
 8004aa6:	4d6b      	ldr	r5, [pc, #428]	; (8004c54 <_strtod_l+0x5a4>)
 8004aa8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8004aac:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004ab0:	4652      	mov	r2, sl
 8004ab2:	465b      	mov	r3, fp
 8004ab4:	f7fb fda0 	bl	80005f8 <__aeabi_dmul>
 8004ab8:	4682      	mov	sl, r0
 8004aba:	468b      	mov	fp, r1
 8004abc:	e63a      	b.n	8004734 <_strtod_l+0x84>
 8004abe:	9a08      	ldr	r2, [sp, #32]
 8004ac0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	db20      	blt.n	8004b0a <_strtod_l+0x45a>
 8004ac8:	4c62      	ldr	r4, [pc, #392]	; (8004c54 <_strtod_l+0x5a4>)
 8004aca:	f1c5 050f 	rsb	r5, r5, #15
 8004ace:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004ad2:	4652      	mov	r2, sl
 8004ad4:	465b      	mov	r3, fp
 8004ad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ada:	f7fb fd8d 	bl	80005f8 <__aeabi_dmul>
 8004ade:	9b08      	ldr	r3, [sp, #32]
 8004ae0:	1b5d      	subs	r5, r3, r5
 8004ae2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004ae6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004aea:	e7e3      	b.n	8004ab4 <_strtod_l+0x404>
 8004aec:	9b08      	ldr	r3, [sp, #32]
 8004aee:	3316      	adds	r3, #22
 8004af0:	db0b      	blt.n	8004b0a <_strtod_l+0x45a>
 8004af2:	9b07      	ldr	r3, [sp, #28]
 8004af4:	4a57      	ldr	r2, [pc, #348]	; (8004c54 <_strtod_l+0x5a4>)
 8004af6:	1b9e      	subs	r6, r3, r6
 8004af8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8004afc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b00:	4650      	mov	r0, sl
 8004b02:	4659      	mov	r1, fp
 8004b04:	f7fb fea2 	bl	800084c <__aeabi_ddiv>
 8004b08:	e7d6      	b.n	8004ab8 <_strtod_l+0x408>
 8004b0a:	9b08      	ldr	r3, [sp, #32]
 8004b0c:	eba5 0808 	sub.w	r8, r5, r8
 8004b10:	4498      	add	r8, r3
 8004b12:	f1b8 0f00 	cmp.w	r8, #0
 8004b16:	dd71      	ble.n	8004bfc <_strtod_l+0x54c>
 8004b18:	f018 030f 	ands.w	r3, r8, #15
 8004b1c:	d00a      	beq.n	8004b34 <_strtod_l+0x484>
 8004b1e:	494d      	ldr	r1, [pc, #308]	; (8004c54 <_strtod_l+0x5a4>)
 8004b20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004b24:	4652      	mov	r2, sl
 8004b26:	465b      	mov	r3, fp
 8004b28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b2c:	f7fb fd64 	bl	80005f8 <__aeabi_dmul>
 8004b30:	4682      	mov	sl, r0
 8004b32:	468b      	mov	fp, r1
 8004b34:	f038 080f 	bics.w	r8, r8, #15
 8004b38:	d04d      	beq.n	8004bd6 <_strtod_l+0x526>
 8004b3a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004b3e:	dd22      	ble.n	8004b86 <_strtod_l+0x4d6>
 8004b40:	2500      	movs	r5, #0
 8004b42:	462e      	mov	r6, r5
 8004b44:	9509      	str	r5, [sp, #36]	; 0x24
 8004b46:	9507      	str	r5, [sp, #28]
 8004b48:	2322      	movs	r3, #34	; 0x22
 8004b4a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8004c5c <_strtod_l+0x5ac>
 8004b4e:	6023      	str	r3, [r4, #0]
 8004b50:	f04f 0a00 	mov.w	sl, #0
 8004b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f43f adec 	beq.w	8004734 <_strtod_l+0x84>
 8004b5c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f001 fe92 	bl	8006888 <_Bfree>
 8004b64:	9907      	ldr	r1, [sp, #28]
 8004b66:	4620      	mov	r0, r4
 8004b68:	f001 fe8e 	bl	8006888 <_Bfree>
 8004b6c:	4631      	mov	r1, r6
 8004b6e:	4620      	mov	r0, r4
 8004b70:	f001 fe8a 	bl	8006888 <_Bfree>
 8004b74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b76:	4620      	mov	r0, r4
 8004b78:	f001 fe86 	bl	8006888 <_Bfree>
 8004b7c:	4629      	mov	r1, r5
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f001 fe82 	bl	8006888 <_Bfree>
 8004b84:	e5d6      	b.n	8004734 <_strtod_l+0x84>
 8004b86:	2300      	movs	r3, #0
 8004b88:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004b8c:	4650      	mov	r0, sl
 8004b8e:	4659      	mov	r1, fp
 8004b90:	4699      	mov	r9, r3
 8004b92:	f1b8 0f01 	cmp.w	r8, #1
 8004b96:	dc21      	bgt.n	8004bdc <_strtod_l+0x52c>
 8004b98:	b10b      	cbz	r3, 8004b9e <_strtod_l+0x4ee>
 8004b9a:	4682      	mov	sl, r0
 8004b9c:	468b      	mov	fp, r1
 8004b9e:	4b2e      	ldr	r3, [pc, #184]	; (8004c58 <_strtod_l+0x5a8>)
 8004ba0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004ba4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004ba8:	4652      	mov	r2, sl
 8004baa:	465b      	mov	r3, fp
 8004bac:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004bb0:	f7fb fd22 	bl	80005f8 <__aeabi_dmul>
 8004bb4:	4b29      	ldr	r3, [pc, #164]	; (8004c5c <_strtod_l+0x5ac>)
 8004bb6:	460a      	mov	r2, r1
 8004bb8:	400b      	ands	r3, r1
 8004bba:	4929      	ldr	r1, [pc, #164]	; (8004c60 <_strtod_l+0x5b0>)
 8004bbc:	428b      	cmp	r3, r1
 8004bbe:	4682      	mov	sl, r0
 8004bc0:	d8be      	bhi.n	8004b40 <_strtod_l+0x490>
 8004bc2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004bc6:	428b      	cmp	r3, r1
 8004bc8:	bf86      	itte	hi
 8004bca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8004c64 <_strtod_l+0x5b4>
 8004bce:	f04f 3aff 	movhi.w	sl, #4294967295
 8004bd2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	9304      	str	r3, [sp, #16]
 8004bda:	e081      	b.n	8004ce0 <_strtod_l+0x630>
 8004bdc:	f018 0f01 	tst.w	r8, #1
 8004be0:	d007      	beq.n	8004bf2 <_strtod_l+0x542>
 8004be2:	4b1d      	ldr	r3, [pc, #116]	; (8004c58 <_strtod_l+0x5a8>)
 8004be4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bec:	f7fb fd04 	bl	80005f8 <__aeabi_dmul>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	f109 0901 	add.w	r9, r9, #1
 8004bf6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004bfa:	e7ca      	b.n	8004b92 <_strtod_l+0x4e2>
 8004bfc:	d0eb      	beq.n	8004bd6 <_strtod_l+0x526>
 8004bfe:	f1c8 0800 	rsb	r8, r8, #0
 8004c02:	f018 020f 	ands.w	r2, r8, #15
 8004c06:	d00a      	beq.n	8004c1e <_strtod_l+0x56e>
 8004c08:	4b12      	ldr	r3, [pc, #72]	; (8004c54 <_strtod_l+0x5a4>)
 8004c0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c0e:	4650      	mov	r0, sl
 8004c10:	4659      	mov	r1, fp
 8004c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c16:	f7fb fe19 	bl	800084c <__aeabi_ddiv>
 8004c1a:	4682      	mov	sl, r0
 8004c1c:	468b      	mov	fp, r1
 8004c1e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004c22:	d0d8      	beq.n	8004bd6 <_strtod_l+0x526>
 8004c24:	f1b8 0f1f 	cmp.w	r8, #31
 8004c28:	dd1e      	ble.n	8004c68 <_strtod_l+0x5b8>
 8004c2a:	2500      	movs	r5, #0
 8004c2c:	462e      	mov	r6, r5
 8004c2e:	9509      	str	r5, [sp, #36]	; 0x24
 8004c30:	9507      	str	r5, [sp, #28]
 8004c32:	2322      	movs	r3, #34	; 0x22
 8004c34:	f04f 0a00 	mov.w	sl, #0
 8004c38:	f04f 0b00 	mov.w	fp, #0
 8004c3c:	6023      	str	r3, [r4, #0]
 8004c3e:	e789      	b.n	8004b54 <_strtod_l+0x4a4>
 8004c40:	08008281 	.word	0x08008281
 8004c44:	080082c4 	.word	0x080082c4
 8004c48:	08008279 	.word	0x08008279
 8004c4c:	08008404 	.word	0x08008404
 8004c50:	080086c0 	.word	0x080086c0
 8004c54:	080085a0 	.word	0x080085a0
 8004c58:	08008578 	.word	0x08008578
 8004c5c:	7ff00000 	.word	0x7ff00000
 8004c60:	7ca00000 	.word	0x7ca00000
 8004c64:	7fefffff 	.word	0x7fefffff
 8004c68:	f018 0310 	ands.w	r3, r8, #16
 8004c6c:	bf18      	it	ne
 8004c6e:	236a      	movne	r3, #106	; 0x6a
 8004c70:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005028 <_strtod_l+0x978>
 8004c74:	9304      	str	r3, [sp, #16]
 8004c76:	4650      	mov	r0, sl
 8004c78:	4659      	mov	r1, fp
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f018 0f01 	tst.w	r8, #1
 8004c80:	d004      	beq.n	8004c8c <_strtod_l+0x5dc>
 8004c82:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004c86:	f7fb fcb7 	bl	80005f8 <__aeabi_dmul>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004c90:	f109 0908 	add.w	r9, r9, #8
 8004c94:	d1f2      	bne.n	8004c7c <_strtod_l+0x5cc>
 8004c96:	b10b      	cbz	r3, 8004c9c <_strtod_l+0x5ec>
 8004c98:	4682      	mov	sl, r0
 8004c9a:	468b      	mov	fp, r1
 8004c9c:	9b04      	ldr	r3, [sp, #16]
 8004c9e:	b1bb      	cbz	r3, 8004cd0 <_strtod_l+0x620>
 8004ca0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004ca4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	4659      	mov	r1, fp
 8004cac:	dd10      	ble.n	8004cd0 <_strtod_l+0x620>
 8004cae:	2b1f      	cmp	r3, #31
 8004cb0:	f340 8128 	ble.w	8004f04 <_strtod_l+0x854>
 8004cb4:	2b34      	cmp	r3, #52	; 0x34
 8004cb6:	bfde      	ittt	le
 8004cb8:	3b20      	suble	r3, #32
 8004cba:	f04f 32ff 	movle.w	r2, #4294967295
 8004cbe:	fa02 f303 	lslle.w	r3, r2, r3
 8004cc2:	f04f 0a00 	mov.w	sl, #0
 8004cc6:	bfcc      	ite	gt
 8004cc8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004ccc:	ea03 0b01 	andle.w	fp, r3, r1
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	4650      	mov	r0, sl
 8004cd6:	4659      	mov	r1, fp
 8004cd8:	f7fb fef6 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	d1a4      	bne.n	8004c2a <_strtod_l+0x57a>
 8004ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004ce6:	462b      	mov	r3, r5
 8004ce8:	463a      	mov	r2, r7
 8004cea:	4620      	mov	r0, r4
 8004cec:	f001 fe38 	bl	8006960 <__s2b>
 8004cf0:	9009      	str	r0, [sp, #36]	; 0x24
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	f43f af24 	beq.w	8004b40 <_strtod_l+0x490>
 8004cf8:	9b07      	ldr	r3, [sp, #28]
 8004cfa:	1b9e      	subs	r6, r3, r6
 8004cfc:	9b08      	ldr	r3, [sp, #32]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	bfb4      	ite	lt
 8004d02:	4633      	movlt	r3, r6
 8004d04:	2300      	movge	r3, #0
 8004d06:	9310      	str	r3, [sp, #64]	; 0x40
 8004d08:	9b08      	ldr	r3, [sp, #32]
 8004d0a:	2500      	movs	r5, #0
 8004d0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004d10:	9318      	str	r3, [sp, #96]	; 0x60
 8004d12:	462e      	mov	r6, r5
 8004d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d16:	4620      	mov	r0, r4
 8004d18:	6859      	ldr	r1, [r3, #4]
 8004d1a:	f001 fd75 	bl	8006808 <_Balloc>
 8004d1e:	9007      	str	r0, [sp, #28]
 8004d20:	2800      	cmp	r0, #0
 8004d22:	f43f af11 	beq.w	8004b48 <_strtod_l+0x498>
 8004d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d28:	691a      	ldr	r2, [r3, #16]
 8004d2a:	3202      	adds	r2, #2
 8004d2c:	f103 010c 	add.w	r1, r3, #12
 8004d30:	0092      	lsls	r2, r2, #2
 8004d32:	300c      	adds	r0, #12
 8004d34:	f001 fd5a 	bl	80067ec <memcpy>
 8004d38:	ec4b ab10 	vmov	d0, sl, fp
 8004d3c:	aa20      	add	r2, sp, #128	; 0x80
 8004d3e:	a91f      	add	r1, sp, #124	; 0x7c
 8004d40:	4620      	mov	r0, r4
 8004d42:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004d46:	f002 f947 	bl	8006fd8 <__d2b>
 8004d4a:	901e      	str	r0, [sp, #120]	; 0x78
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	f43f aefb 	beq.w	8004b48 <_strtod_l+0x498>
 8004d52:	2101      	movs	r1, #1
 8004d54:	4620      	mov	r0, r4
 8004d56:	f001 fe9d 	bl	8006a94 <__i2b>
 8004d5a:	4606      	mov	r6, r0
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	f43f aef3 	beq.w	8004b48 <_strtod_l+0x498>
 8004d62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d64:	9904      	ldr	r1, [sp, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	bfab      	itete	ge
 8004d6a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8004d6c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8004d6e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8004d70:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8004d74:	bfac      	ite	ge
 8004d76:	eb03 0902 	addge.w	r9, r3, r2
 8004d7a:	1ad7      	sublt	r7, r2, r3
 8004d7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d7e:	eba3 0801 	sub.w	r8, r3, r1
 8004d82:	4490      	add	r8, r2
 8004d84:	4ba3      	ldr	r3, [pc, #652]	; (8005014 <_strtod_l+0x964>)
 8004d86:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d8a:	4598      	cmp	r8, r3
 8004d8c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004d90:	f280 80cc 	bge.w	8004f2c <_strtod_l+0x87c>
 8004d94:	eba3 0308 	sub.w	r3, r3, r8
 8004d98:	2b1f      	cmp	r3, #31
 8004d9a:	eba2 0203 	sub.w	r2, r2, r3
 8004d9e:	f04f 0101 	mov.w	r1, #1
 8004da2:	f300 80b6 	bgt.w	8004f12 <_strtod_l+0x862>
 8004da6:	fa01 f303 	lsl.w	r3, r1, r3
 8004daa:	9311      	str	r3, [sp, #68]	; 0x44
 8004dac:	2300      	movs	r3, #0
 8004dae:	930c      	str	r3, [sp, #48]	; 0x30
 8004db0:	eb09 0802 	add.w	r8, r9, r2
 8004db4:	9b04      	ldr	r3, [sp, #16]
 8004db6:	45c1      	cmp	r9, r8
 8004db8:	4417      	add	r7, r2
 8004dba:	441f      	add	r7, r3
 8004dbc:	464b      	mov	r3, r9
 8004dbe:	bfa8      	it	ge
 8004dc0:	4643      	movge	r3, r8
 8004dc2:	42bb      	cmp	r3, r7
 8004dc4:	bfa8      	it	ge
 8004dc6:	463b      	movge	r3, r7
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	bfc2      	ittt	gt
 8004dcc:	eba8 0803 	subgt.w	r8, r8, r3
 8004dd0:	1aff      	subgt	r7, r7, r3
 8004dd2:	eba9 0903 	subgt.w	r9, r9, r3
 8004dd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	dd17      	ble.n	8004e0c <_strtod_l+0x75c>
 8004ddc:	4631      	mov	r1, r6
 8004dde:	461a      	mov	r2, r3
 8004de0:	4620      	mov	r0, r4
 8004de2:	f001 ff13 	bl	8006c0c <__pow5mult>
 8004de6:	4606      	mov	r6, r0
 8004de8:	2800      	cmp	r0, #0
 8004dea:	f43f aead 	beq.w	8004b48 <_strtod_l+0x498>
 8004dee:	4601      	mov	r1, r0
 8004df0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004df2:	4620      	mov	r0, r4
 8004df4:	f001 fe64 	bl	8006ac0 <__multiply>
 8004df8:	900f      	str	r0, [sp, #60]	; 0x3c
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	f43f aea4 	beq.w	8004b48 <_strtod_l+0x498>
 8004e00:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004e02:	4620      	mov	r0, r4
 8004e04:	f001 fd40 	bl	8006888 <_Bfree>
 8004e08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e0a:	931e      	str	r3, [sp, #120]	; 0x78
 8004e0c:	f1b8 0f00 	cmp.w	r8, #0
 8004e10:	f300 8091 	bgt.w	8004f36 <_strtod_l+0x886>
 8004e14:	9b08      	ldr	r3, [sp, #32]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	dd08      	ble.n	8004e2c <_strtod_l+0x77c>
 8004e1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004e1c:	9907      	ldr	r1, [sp, #28]
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f001 fef4 	bl	8006c0c <__pow5mult>
 8004e24:	9007      	str	r0, [sp, #28]
 8004e26:	2800      	cmp	r0, #0
 8004e28:	f43f ae8e 	beq.w	8004b48 <_strtod_l+0x498>
 8004e2c:	2f00      	cmp	r7, #0
 8004e2e:	dd08      	ble.n	8004e42 <_strtod_l+0x792>
 8004e30:	9907      	ldr	r1, [sp, #28]
 8004e32:	463a      	mov	r2, r7
 8004e34:	4620      	mov	r0, r4
 8004e36:	f001 ff43 	bl	8006cc0 <__lshift>
 8004e3a:	9007      	str	r0, [sp, #28]
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	f43f ae83 	beq.w	8004b48 <_strtod_l+0x498>
 8004e42:	f1b9 0f00 	cmp.w	r9, #0
 8004e46:	dd08      	ble.n	8004e5a <_strtod_l+0x7aa>
 8004e48:	4631      	mov	r1, r6
 8004e4a:	464a      	mov	r2, r9
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	f001 ff37 	bl	8006cc0 <__lshift>
 8004e52:	4606      	mov	r6, r0
 8004e54:	2800      	cmp	r0, #0
 8004e56:	f43f ae77 	beq.w	8004b48 <_strtod_l+0x498>
 8004e5a:	9a07      	ldr	r2, [sp, #28]
 8004e5c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f001 ffb6 	bl	8006dd0 <__mdiff>
 8004e64:	4605      	mov	r5, r0
 8004e66:	2800      	cmp	r0, #0
 8004e68:	f43f ae6e 	beq.w	8004b48 <_strtod_l+0x498>
 8004e6c:	68c3      	ldr	r3, [r0, #12]
 8004e6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e70:	2300      	movs	r3, #0
 8004e72:	60c3      	str	r3, [r0, #12]
 8004e74:	4631      	mov	r1, r6
 8004e76:	f001 ff8f 	bl	8006d98 <__mcmp>
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	da65      	bge.n	8004f4a <_strtod_l+0x89a>
 8004e7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e80:	ea53 030a 	orrs.w	r3, r3, sl
 8004e84:	f040 8087 	bne.w	8004f96 <_strtod_l+0x8e6>
 8004e88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f040 8082 	bne.w	8004f96 <_strtod_l+0x8e6>
 8004e92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004e96:	0d1b      	lsrs	r3, r3, #20
 8004e98:	051b      	lsls	r3, r3, #20
 8004e9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004e9e:	d97a      	bls.n	8004f96 <_strtod_l+0x8e6>
 8004ea0:	696b      	ldr	r3, [r5, #20]
 8004ea2:	b913      	cbnz	r3, 8004eaa <_strtod_l+0x7fa>
 8004ea4:	692b      	ldr	r3, [r5, #16]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	dd75      	ble.n	8004f96 <_strtod_l+0x8e6>
 8004eaa:	4629      	mov	r1, r5
 8004eac:	2201      	movs	r2, #1
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f001 ff06 	bl	8006cc0 <__lshift>
 8004eb4:	4631      	mov	r1, r6
 8004eb6:	4605      	mov	r5, r0
 8004eb8:	f001 ff6e 	bl	8006d98 <__mcmp>
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	dd6a      	ble.n	8004f96 <_strtod_l+0x8e6>
 8004ec0:	9904      	ldr	r1, [sp, #16]
 8004ec2:	4a55      	ldr	r2, [pc, #340]	; (8005018 <_strtod_l+0x968>)
 8004ec4:	465b      	mov	r3, fp
 8004ec6:	2900      	cmp	r1, #0
 8004ec8:	f000 8085 	beq.w	8004fd6 <_strtod_l+0x926>
 8004ecc:	ea02 010b 	and.w	r1, r2, fp
 8004ed0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004ed4:	dc7f      	bgt.n	8004fd6 <_strtod_l+0x926>
 8004ed6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004eda:	f77f aeaa 	ble.w	8004c32 <_strtod_l+0x582>
 8004ede:	4a4f      	ldr	r2, [pc, #316]	; (800501c <_strtod_l+0x96c>)
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8004ee6:	4650      	mov	r0, sl
 8004ee8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8004eec:	4659      	mov	r1, fp
 8004eee:	f7fb fb83 	bl	80005f8 <__aeabi_dmul>
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4303      	orrs	r3, r0
 8004ef6:	bf08      	it	eq
 8004ef8:	2322      	moveq	r3, #34	; 0x22
 8004efa:	4682      	mov	sl, r0
 8004efc:	468b      	mov	fp, r1
 8004efe:	bf08      	it	eq
 8004f00:	6023      	streq	r3, [r4, #0]
 8004f02:	e62b      	b.n	8004b5c <_strtod_l+0x4ac>
 8004f04:	f04f 32ff 	mov.w	r2, #4294967295
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	ea03 0a0a 	and.w	sl, r3, sl
 8004f10:	e6de      	b.n	8004cd0 <_strtod_l+0x620>
 8004f12:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004f16:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8004f1a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8004f1e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004f22:	fa01 f308 	lsl.w	r3, r1, r8
 8004f26:	930c      	str	r3, [sp, #48]	; 0x30
 8004f28:	9111      	str	r1, [sp, #68]	; 0x44
 8004f2a:	e741      	b.n	8004db0 <_strtod_l+0x700>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	930c      	str	r3, [sp, #48]	; 0x30
 8004f30:	2301      	movs	r3, #1
 8004f32:	9311      	str	r3, [sp, #68]	; 0x44
 8004f34:	e73c      	b.n	8004db0 <_strtod_l+0x700>
 8004f36:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004f38:	4642      	mov	r2, r8
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	f001 fec0 	bl	8006cc0 <__lshift>
 8004f40:	901e      	str	r0, [sp, #120]	; 0x78
 8004f42:	2800      	cmp	r0, #0
 8004f44:	f47f af66 	bne.w	8004e14 <_strtod_l+0x764>
 8004f48:	e5fe      	b.n	8004b48 <_strtod_l+0x498>
 8004f4a:	465f      	mov	r7, fp
 8004f4c:	d16e      	bne.n	800502c <_strtod_l+0x97c>
 8004f4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004f54:	b342      	cbz	r2, 8004fa8 <_strtod_l+0x8f8>
 8004f56:	4a32      	ldr	r2, [pc, #200]	; (8005020 <_strtod_l+0x970>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d128      	bne.n	8004fae <_strtod_l+0x8fe>
 8004f5c:	9b04      	ldr	r3, [sp, #16]
 8004f5e:	4650      	mov	r0, sl
 8004f60:	b1eb      	cbz	r3, 8004f9e <_strtod_l+0x8ee>
 8004f62:	4a2d      	ldr	r2, [pc, #180]	; (8005018 <_strtod_l+0x968>)
 8004f64:	403a      	ands	r2, r7
 8004f66:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004f6a:	f04f 31ff 	mov.w	r1, #4294967295
 8004f6e:	d819      	bhi.n	8004fa4 <_strtod_l+0x8f4>
 8004f70:	0d12      	lsrs	r2, r2, #20
 8004f72:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004f76:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7a:	4298      	cmp	r0, r3
 8004f7c:	d117      	bne.n	8004fae <_strtod_l+0x8fe>
 8004f7e:	4b29      	ldr	r3, [pc, #164]	; (8005024 <_strtod_l+0x974>)
 8004f80:	429f      	cmp	r7, r3
 8004f82:	d102      	bne.n	8004f8a <_strtod_l+0x8da>
 8004f84:	3001      	adds	r0, #1
 8004f86:	f43f addf 	beq.w	8004b48 <_strtod_l+0x498>
 8004f8a:	4b23      	ldr	r3, [pc, #140]	; (8005018 <_strtod_l+0x968>)
 8004f8c:	403b      	ands	r3, r7
 8004f8e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004f92:	f04f 0a00 	mov.w	sl, #0
 8004f96:	9b04      	ldr	r3, [sp, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1a0      	bne.n	8004ede <_strtod_l+0x82e>
 8004f9c:	e5de      	b.n	8004b5c <_strtod_l+0x4ac>
 8004f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa2:	e7ea      	b.n	8004f7a <_strtod_l+0x8ca>
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	e7e8      	b.n	8004f7a <_strtod_l+0x8ca>
 8004fa8:	ea53 030a 	orrs.w	r3, r3, sl
 8004fac:	d088      	beq.n	8004ec0 <_strtod_l+0x810>
 8004fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fb0:	b1db      	cbz	r3, 8004fea <_strtod_l+0x93a>
 8004fb2:	423b      	tst	r3, r7
 8004fb4:	d0ef      	beq.n	8004f96 <_strtod_l+0x8e6>
 8004fb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fb8:	9a04      	ldr	r2, [sp, #16]
 8004fba:	4650      	mov	r0, sl
 8004fbc:	4659      	mov	r1, fp
 8004fbe:	b1c3      	cbz	r3, 8004ff2 <_strtod_l+0x942>
 8004fc0:	f7ff fb58 	bl	8004674 <sulp>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004fcc:	f7fb f95e 	bl	800028c <__adddf3>
 8004fd0:	4682      	mov	sl, r0
 8004fd2:	468b      	mov	fp, r1
 8004fd4:	e7df      	b.n	8004f96 <_strtod_l+0x8e6>
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004fdc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004fe0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004fe4:	f04f 3aff 	mov.w	sl, #4294967295
 8004fe8:	e7d5      	b.n	8004f96 <_strtod_l+0x8e6>
 8004fea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004fec:	ea13 0f0a 	tst.w	r3, sl
 8004ff0:	e7e0      	b.n	8004fb4 <_strtod_l+0x904>
 8004ff2:	f7ff fb3f 	bl	8004674 <sulp>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ffe:	f7fb f943 	bl	8000288 <__aeabi_dsub>
 8005002:	2200      	movs	r2, #0
 8005004:	2300      	movs	r3, #0
 8005006:	4682      	mov	sl, r0
 8005008:	468b      	mov	fp, r1
 800500a:	f7fb fd5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800500e:	2800      	cmp	r0, #0
 8005010:	d0c1      	beq.n	8004f96 <_strtod_l+0x8e6>
 8005012:	e60e      	b.n	8004c32 <_strtod_l+0x582>
 8005014:	fffffc02 	.word	0xfffffc02
 8005018:	7ff00000 	.word	0x7ff00000
 800501c:	39500000 	.word	0x39500000
 8005020:	000fffff 	.word	0x000fffff
 8005024:	7fefffff 	.word	0x7fefffff
 8005028:	080082d8 	.word	0x080082d8
 800502c:	4631      	mov	r1, r6
 800502e:	4628      	mov	r0, r5
 8005030:	f002 f82e 	bl	8007090 <__ratio>
 8005034:	ec59 8b10 	vmov	r8, r9, d0
 8005038:	ee10 0a10 	vmov	r0, s0
 800503c:	2200      	movs	r2, #0
 800503e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005042:	4649      	mov	r1, r9
 8005044:	f7fb fd54 	bl	8000af0 <__aeabi_dcmple>
 8005048:	2800      	cmp	r0, #0
 800504a:	d07c      	beq.n	8005146 <_strtod_l+0xa96>
 800504c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800504e:	2b00      	cmp	r3, #0
 8005050:	d04c      	beq.n	80050ec <_strtod_l+0xa3c>
 8005052:	4b95      	ldr	r3, [pc, #596]	; (80052a8 <_strtod_l+0xbf8>)
 8005054:	2200      	movs	r2, #0
 8005056:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800505a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80052a8 <_strtod_l+0xbf8>
 800505e:	f04f 0800 	mov.w	r8, #0
 8005062:	4b92      	ldr	r3, [pc, #584]	; (80052ac <_strtod_l+0xbfc>)
 8005064:	403b      	ands	r3, r7
 8005066:	9311      	str	r3, [sp, #68]	; 0x44
 8005068:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800506a:	4b91      	ldr	r3, [pc, #580]	; (80052b0 <_strtod_l+0xc00>)
 800506c:	429a      	cmp	r2, r3
 800506e:	f040 80b2 	bne.w	80051d6 <_strtod_l+0xb26>
 8005072:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005076:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800507a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800507e:	ec4b ab10 	vmov	d0, sl, fp
 8005082:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8005086:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800508a:	f001 ff29 	bl	8006ee0 <__ulp>
 800508e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005092:	ec53 2b10 	vmov	r2, r3, d0
 8005096:	f7fb faaf 	bl	80005f8 <__aeabi_dmul>
 800509a:	4652      	mov	r2, sl
 800509c:	465b      	mov	r3, fp
 800509e:	f7fb f8f5 	bl	800028c <__adddf3>
 80050a2:	460b      	mov	r3, r1
 80050a4:	4981      	ldr	r1, [pc, #516]	; (80052ac <_strtod_l+0xbfc>)
 80050a6:	4a83      	ldr	r2, [pc, #524]	; (80052b4 <_strtod_l+0xc04>)
 80050a8:	4019      	ands	r1, r3
 80050aa:	4291      	cmp	r1, r2
 80050ac:	4682      	mov	sl, r0
 80050ae:	d95e      	bls.n	800516e <_strtod_l+0xabe>
 80050b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050b2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d103      	bne.n	80050c2 <_strtod_l+0xa12>
 80050ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050bc:	3301      	adds	r3, #1
 80050be:	f43f ad43 	beq.w	8004b48 <_strtod_l+0x498>
 80050c2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80052c0 <_strtod_l+0xc10>
 80050c6:	f04f 3aff 	mov.w	sl, #4294967295
 80050ca:	991e      	ldr	r1, [sp, #120]	; 0x78
 80050cc:	4620      	mov	r0, r4
 80050ce:	f001 fbdb 	bl	8006888 <_Bfree>
 80050d2:	9907      	ldr	r1, [sp, #28]
 80050d4:	4620      	mov	r0, r4
 80050d6:	f001 fbd7 	bl	8006888 <_Bfree>
 80050da:	4631      	mov	r1, r6
 80050dc:	4620      	mov	r0, r4
 80050de:	f001 fbd3 	bl	8006888 <_Bfree>
 80050e2:	4629      	mov	r1, r5
 80050e4:	4620      	mov	r0, r4
 80050e6:	f001 fbcf 	bl	8006888 <_Bfree>
 80050ea:	e613      	b.n	8004d14 <_strtod_l+0x664>
 80050ec:	f1ba 0f00 	cmp.w	sl, #0
 80050f0:	d11b      	bne.n	800512a <_strtod_l+0xa7a>
 80050f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80050f6:	b9f3      	cbnz	r3, 8005136 <_strtod_l+0xa86>
 80050f8:	4b6b      	ldr	r3, [pc, #428]	; (80052a8 <_strtod_l+0xbf8>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	4640      	mov	r0, r8
 80050fe:	4649      	mov	r1, r9
 8005100:	f7fb fcec 	bl	8000adc <__aeabi_dcmplt>
 8005104:	b9d0      	cbnz	r0, 800513c <_strtod_l+0xa8c>
 8005106:	4640      	mov	r0, r8
 8005108:	4649      	mov	r1, r9
 800510a:	4b6b      	ldr	r3, [pc, #428]	; (80052b8 <_strtod_l+0xc08>)
 800510c:	2200      	movs	r2, #0
 800510e:	f7fb fa73 	bl	80005f8 <__aeabi_dmul>
 8005112:	4680      	mov	r8, r0
 8005114:	4689      	mov	r9, r1
 8005116:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800511a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800511e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005120:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8005124:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005128:	e79b      	b.n	8005062 <_strtod_l+0x9b2>
 800512a:	f1ba 0f01 	cmp.w	sl, #1
 800512e:	d102      	bne.n	8005136 <_strtod_l+0xa86>
 8005130:	2f00      	cmp	r7, #0
 8005132:	f43f ad7e 	beq.w	8004c32 <_strtod_l+0x582>
 8005136:	4b61      	ldr	r3, [pc, #388]	; (80052bc <_strtod_l+0xc0c>)
 8005138:	2200      	movs	r2, #0
 800513a:	e78c      	b.n	8005056 <_strtod_l+0x9a6>
 800513c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80052b8 <_strtod_l+0xc08>
 8005140:	f04f 0800 	mov.w	r8, #0
 8005144:	e7e7      	b.n	8005116 <_strtod_l+0xa66>
 8005146:	4b5c      	ldr	r3, [pc, #368]	; (80052b8 <_strtod_l+0xc08>)
 8005148:	4640      	mov	r0, r8
 800514a:	4649      	mov	r1, r9
 800514c:	2200      	movs	r2, #0
 800514e:	f7fb fa53 	bl	80005f8 <__aeabi_dmul>
 8005152:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005154:	4680      	mov	r8, r0
 8005156:	4689      	mov	r9, r1
 8005158:	b933      	cbnz	r3, 8005168 <_strtod_l+0xab8>
 800515a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800515e:	9012      	str	r0, [sp, #72]	; 0x48
 8005160:	9313      	str	r3, [sp, #76]	; 0x4c
 8005162:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005166:	e7dd      	b.n	8005124 <_strtod_l+0xa74>
 8005168:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800516c:	e7f9      	b.n	8005162 <_strtod_l+0xab2>
 800516e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005172:	9b04      	ldr	r3, [sp, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1a8      	bne.n	80050ca <_strtod_l+0xa1a>
 8005178:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800517c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800517e:	0d1b      	lsrs	r3, r3, #20
 8005180:	051b      	lsls	r3, r3, #20
 8005182:	429a      	cmp	r2, r3
 8005184:	d1a1      	bne.n	80050ca <_strtod_l+0xa1a>
 8005186:	4640      	mov	r0, r8
 8005188:	4649      	mov	r1, r9
 800518a:	f7fb fd7d 	bl	8000c88 <__aeabi_d2lz>
 800518e:	f7fb fa05 	bl	800059c <__aeabi_l2d>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4640      	mov	r0, r8
 8005198:	4649      	mov	r1, r9
 800519a:	f7fb f875 	bl	8000288 <__aeabi_dsub>
 800519e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80051a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80051a4:	ea43 030a 	orr.w	r3, r3, sl
 80051a8:	4313      	orrs	r3, r2
 80051aa:	4680      	mov	r8, r0
 80051ac:	4689      	mov	r9, r1
 80051ae:	d053      	beq.n	8005258 <_strtod_l+0xba8>
 80051b0:	a335      	add	r3, pc, #212	; (adr r3, 8005288 <_strtod_l+0xbd8>)
 80051b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b6:	f7fb fc91 	bl	8000adc <__aeabi_dcmplt>
 80051ba:	2800      	cmp	r0, #0
 80051bc:	f47f acce 	bne.w	8004b5c <_strtod_l+0x4ac>
 80051c0:	a333      	add	r3, pc, #204	; (adr r3, 8005290 <_strtod_l+0xbe0>)
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	4640      	mov	r0, r8
 80051c8:	4649      	mov	r1, r9
 80051ca:	f7fb fca5 	bl	8000b18 <__aeabi_dcmpgt>
 80051ce:	2800      	cmp	r0, #0
 80051d0:	f43f af7b 	beq.w	80050ca <_strtod_l+0xa1a>
 80051d4:	e4c2      	b.n	8004b5c <_strtod_l+0x4ac>
 80051d6:	9b04      	ldr	r3, [sp, #16]
 80051d8:	b333      	cbz	r3, 8005228 <_strtod_l+0xb78>
 80051da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80051e0:	d822      	bhi.n	8005228 <_strtod_l+0xb78>
 80051e2:	a32d      	add	r3, pc, #180	; (adr r3, 8005298 <_strtod_l+0xbe8>)
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	4640      	mov	r0, r8
 80051ea:	4649      	mov	r1, r9
 80051ec:	f7fb fc80 	bl	8000af0 <__aeabi_dcmple>
 80051f0:	b1a0      	cbz	r0, 800521c <_strtod_l+0xb6c>
 80051f2:	4649      	mov	r1, r9
 80051f4:	4640      	mov	r0, r8
 80051f6:	f7fb fcd7 	bl	8000ba8 <__aeabi_d2uiz>
 80051fa:	2801      	cmp	r0, #1
 80051fc:	bf38      	it	cc
 80051fe:	2001      	movcc	r0, #1
 8005200:	f7fb f980 	bl	8000504 <__aeabi_ui2d>
 8005204:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005206:	4680      	mov	r8, r0
 8005208:	4689      	mov	r9, r1
 800520a:	bb13      	cbnz	r3, 8005252 <_strtod_l+0xba2>
 800520c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005210:	9014      	str	r0, [sp, #80]	; 0x50
 8005212:	9315      	str	r3, [sp, #84]	; 0x54
 8005214:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005218:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800521c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800521e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005220:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005224:	1a9b      	subs	r3, r3, r2
 8005226:	930d      	str	r3, [sp, #52]	; 0x34
 8005228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800522c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005230:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005234:	f001 fe54 	bl	8006ee0 <__ulp>
 8005238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800523c:	ec53 2b10 	vmov	r2, r3, d0
 8005240:	f7fb f9da 	bl	80005f8 <__aeabi_dmul>
 8005244:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005248:	f7fb f820 	bl	800028c <__adddf3>
 800524c:	4682      	mov	sl, r0
 800524e:	468b      	mov	fp, r1
 8005250:	e78f      	b.n	8005172 <_strtod_l+0xac2>
 8005252:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8005256:	e7dd      	b.n	8005214 <_strtod_l+0xb64>
 8005258:	a311      	add	r3, pc, #68	; (adr r3, 80052a0 <_strtod_l+0xbf0>)
 800525a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525e:	f7fb fc3d 	bl	8000adc <__aeabi_dcmplt>
 8005262:	e7b4      	b.n	80051ce <_strtod_l+0xb1e>
 8005264:	2300      	movs	r3, #0
 8005266:	930e      	str	r3, [sp, #56]	; 0x38
 8005268:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800526a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	f7ff ba65 	b.w	800473c <_strtod_l+0x8c>
 8005272:	2b65      	cmp	r3, #101	; 0x65
 8005274:	f43f ab5d 	beq.w	8004932 <_strtod_l+0x282>
 8005278:	2b45      	cmp	r3, #69	; 0x45
 800527a:	f43f ab5a 	beq.w	8004932 <_strtod_l+0x282>
 800527e:	2201      	movs	r2, #1
 8005280:	f7ff bb92 	b.w	80049a8 <_strtod_l+0x2f8>
 8005284:	f3af 8000 	nop.w
 8005288:	94a03595 	.word	0x94a03595
 800528c:	3fdfffff 	.word	0x3fdfffff
 8005290:	35afe535 	.word	0x35afe535
 8005294:	3fe00000 	.word	0x3fe00000
 8005298:	ffc00000 	.word	0xffc00000
 800529c:	41dfffff 	.word	0x41dfffff
 80052a0:	94a03595 	.word	0x94a03595
 80052a4:	3fcfffff 	.word	0x3fcfffff
 80052a8:	3ff00000 	.word	0x3ff00000
 80052ac:	7ff00000 	.word	0x7ff00000
 80052b0:	7fe00000 	.word	0x7fe00000
 80052b4:	7c9fffff 	.word	0x7c9fffff
 80052b8:	3fe00000 	.word	0x3fe00000
 80052bc:	bff00000 	.word	0xbff00000
 80052c0:	7fefffff 	.word	0x7fefffff

080052c4 <_strtod_r>:
 80052c4:	4b01      	ldr	r3, [pc, #4]	; (80052cc <_strtod_r+0x8>)
 80052c6:	f7ff b9f3 	b.w	80046b0 <_strtod_l>
 80052ca:	bf00      	nop
 80052cc:	20000070 	.word	0x20000070

080052d0 <_strtol_l.isra.0>:
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052d6:	d001      	beq.n	80052dc <_strtol_l.isra.0+0xc>
 80052d8:	2b24      	cmp	r3, #36	; 0x24
 80052da:	d906      	bls.n	80052ea <_strtol_l.isra.0+0x1a>
 80052dc:	f7fe faf8 	bl	80038d0 <__errno>
 80052e0:	2316      	movs	r3, #22
 80052e2:	6003      	str	r3, [r0, #0]
 80052e4:	2000      	movs	r0, #0
 80052e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ea:	4f3a      	ldr	r7, [pc, #232]	; (80053d4 <_strtol_l.isra.0+0x104>)
 80052ec:	468e      	mov	lr, r1
 80052ee:	4676      	mov	r6, lr
 80052f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80052f4:	5de5      	ldrb	r5, [r4, r7]
 80052f6:	f015 0508 	ands.w	r5, r5, #8
 80052fa:	d1f8      	bne.n	80052ee <_strtol_l.isra.0+0x1e>
 80052fc:	2c2d      	cmp	r4, #45	; 0x2d
 80052fe:	d134      	bne.n	800536a <_strtol_l.isra.0+0x9a>
 8005300:	f89e 4000 	ldrb.w	r4, [lr]
 8005304:	f04f 0801 	mov.w	r8, #1
 8005308:	f106 0e02 	add.w	lr, r6, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d05c      	beq.n	80053ca <_strtol_l.isra.0+0xfa>
 8005310:	2b10      	cmp	r3, #16
 8005312:	d10c      	bne.n	800532e <_strtol_l.isra.0+0x5e>
 8005314:	2c30      	cmp	r4, #48	; 0x30
 8005316:	d10a      	bne.n	800532e <_strtol_l.isra.0+0x5e>
 8005318:	f89e 4000 	ldrb.w	r4, [lr]
 800531c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005320:	2c58      	cmp	r4, #88	; 0x58
 8005322:	d14d      	bne.n	80053c0 <_strtol_l.isra.0+0xf0>
 8005324:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005328:	2310      	movs	r3, #16
 800532a:	f10e 0e02 	add.w	lr, lr, #2
 800532e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005332:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005336:	2600      	movs	r6, #0
 8005338:	fbbc f9f3 	udiv	r9, ip, r3
 800533c:	4635      	mov	r5, r6
 800533e:	fb03 ca19 	mls	sl, r3, r9, ip
 8005342:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005346:	2f09      	cmp	r7, #9
 8005348:	d818      	bhi.n	800537c <_strtol_l.isra.0+0xac>
 800534a:	463c      	mov	r4, r7
 800534c:	42a3      	cmp	r3, r4
 800534e:	dd24      	ble.n	800539a <_strtol_l.isra.0+0xca>
 8005350:	2e00      	cmp	r6, #0
 8005352:	db1f      	blt.n	8005394 <_strtol_l.isra.0+0xc4>
 8005354:	45a9      	cmp	r9, r5
 8005356:	d31d      	bcc.n	8005394 <_strtol_l.isra.0+0xc4>
 8005358:	d101      	bne.n	800535e <_strtol_l.isra.0+0x8e>
 800535a:	45a2      	cmp	sl, r4
 800535c:	db1a      	blt.n	8005394 <_strtol_l.isra.0+0xc4>
 800535e:	fb05 4503 	mla	r5, r5, r3, r4
 8005362:	2601      	movs	r6, #1
 8005364:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005368:	e7eb      	b.n	8005342 <_strtol_l.isra.0+0x72>
 800536a:	2c2b      	cmp	r4, #43	; 0x2b
 800536c:	bf08      	it	eq
 800536e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005372:	46a8      	mov	r8, r5
 8005374:	bf08      	it	eq
 8005376:	f106 0e02 	addeq.w	lr, r6, #2
 800537a:	e7c7      	b.n	800530c <_strtol_l.isra.0+0x3c>
 800537c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005380:	2f19      	cmp	r7, #25
 8005382:	d801      	bhi.n	8005388 <_strtol_l.isra.0+0xb8>
 8005384:	3c37      	subs	r4, #55	; 0x37
 8005386:	e7e1      	b.n	800534c <_strtol_l.isra.0+0x7c>
 8005388:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800538c:	2f19      	cmp	r7, #25
 800538e:	d804      	bhi.n	800539a <_strtol_l.isra.0+0xca>
 8005390:	3c57      	subs	r4, #87	; 0x57
 8005392:	e7db      	b.n	800534c <_strtol_l.isra.0+0x7c>
 8005394:	f04f 36ff 	mov.w	r6, #4294967295
 8005398:	e7e4      	b.n	8005364 <_strtol_l.isra.0+0x94>
 800539a:	2e00      	cmp	r6, #0
 800539c:	da05      	bge.n	80053aa <_strtol_l.isra.0+0xda>
 800539e:	2322      	movs	r3, #34	; 0x22
 80053a0:	6003      	str	r3, [r0, #0]
 80053a2:	4665      	mov	r5, ip
 80053a4:	b942      	cbnz	r2, 80053b8 <_strtol_l.isra.0+0xe8>
 80053a6:	4628      	mov	r0, r5
 80053a8:	e79d      	b.n	80052e6 <_strtol_l.isra.0+0x16>
 80053aa:	f1b8 0f00 	cmp.w	r8, #0
 80053ae:	d000      	beq.n	80053b2 <_strtol_l.isra.0+0xe2>
 80053b0:	426d      	negs	r5, r5
 80053b2:	2a00      	cmp	r2, #0
 80053b4:	d0f7      	beq.n	80053a6 <_strtol_l.isra.0+0xd6>
 80053b6:	b10e      	cbz	r6, 80053bc <_strtol_l.isra.0+0xec>
 80053b8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80053bc:	6011      	str	r1, [r2, #0]
 80053be:	e7f2      	b.n	80053a6 <_strtol_l.isra.0+0xd6>
 80053c0:	2430      	movs	r4, #48	; 0x30
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1b3      	bne.n	800532e <_strtol_l.isra.0+0x5e>
 80053c6:	2308      	movs	r3, #8
 80053c8:	e7b1      	b.n	800532e <_strtol_l.isra.0+0x5e>
 80053ca:	2c30      	cmp	r4, #48	; 0x30
 80053cc:	d0a4      	beq.n	8005318 <_strtol_l.isra.0+0x48>
 80053ce:	230a      	movs	r3, #10
 80053d0:	e7ad      	b.n	800532e <_strtol_l.isra.0+0x5e>
 80053d2:	bf00      	nop
 80053d4:	08008301 	.word	0x08008301

080053d8 <_strtol_r>:
 80053d8:	f7ff bf7a 	b.w	80052d0 <_strtol_l.isra.0>

080053dc <quorem>:
 80053dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e0:	6903      	ldr	r3, [r0, #16]
 80053e2:	690c      	ldr	r4, [r1, #16]
 80053e4:	42a3      	cmp	r3, r4
 80053e6:	4607      	mov	r7, r0
 80053e8:	f2c0 8081 	blt.w	80054ee <quorem+0x112>
 80053ec:	3c01      	subs	r4, #1
 80053ee:	f101 0814 	add.w	r8, r1, #20
 80053f2:	f100 0514 	add.w	r5, r0, #20
 80053f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053fa:	9301      	str	r3, [sp, #4]
 80053fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005400:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005404:	3301      	adds	r3, #1
 8005406:	429a      	cmp	r2, r3
 8005408:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800540c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005410:	fbb2 f6f3 	udiv	r6, r2, r3
 8005414:	d331      	bcc.n	800547a <quorem+0x9e>
 8005416:	f04f 0e00 	mov.w	lr, #0
 800541a:	4640      	mov	r0, r8
 800541c:	46ac      	mov	ip, r5
 800541e:	46f2      	mov	sl, lr
 8005420:	f850 2b04 	ldr.w	r2, [r0], #4
 8005424:	b293      	uxth	r3, r2
 8005426:	fb06 e303 	mla	r3, r6, r3, lr
 800542a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800542e:	b29b      	uxth	r3, r3
 8005430:	ebaa 0303 	sub.w	r3, sl, r3
 8005434:	0c12      	lsrs	r2, r2, #16
 8005436:	f8dc a000 	ldr.w	sl, [ip]
 800543a:	fb06 e202 	mla	r2, r6, r2, lr
 800543e:	fa13 f38a 	uxtah	r3, r3, sl
 8005442:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005446:	fa1f fa82 	uxth.w	sl, r2
 800544a:	f8dc 2000 	ldr.w	r2, [ip]
 800544e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005452:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005456:	b29b      	uxth	r3, r3
 8005458:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800545c:	4581      	cmp	r9, r0
 800545e:	f84c 3b04 	str.w	r3, [ip], #4
 8005462:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005466:	d2db      	bcs.n	8005420 <quorem+0x44>
 8005468:	f855 300b 	ldr.w	r3, [r5, fp]
 800546c:	b92b      	cbnz	r3, 800547a <quorem+0x9e>
 800546e:	9b01      	ldr	r3, [sp, #4]
 8005470:	3b04      	subs	r3, #4
 8005472:	429d      	cmp	r5, r3
 8005474:	461a      	mov	r2, r3
 8005476:	d32e      	bcc.n	80054d6 <quorem+0xfa>
 8005478:	613c      	str	r4, [r7, #16]
 800547a:	4638      	mov	r0, r7
 800547c:	f001 fc8c 	bl	8006d98 <__mcmp>
 8005480:	2800      	cmp	r0, #0
 8005482:	db24      	blt.n	80054ce <quorem+0xf2>
 8005484:	3601      	adds	r6, #1
 8005486:	4628      	mov	r0, r5
 8005488:	f04f 0c00 	mov.w	ip, #0
 800548c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005490:	f8d0 e000 	ldr.w	lr, [r0]
 8005494:	b293      	uxth	r3, r2
 8005496:	ebac 0303 	sub.w	r3, ip, r3
 800549a:	0c12      	lsrs	r2, r2, #16
 800549c:	fa13 f38e 	uxtah	r3, r3, lr
 80054a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80054a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054ae:	45c1      	cmp	r9, r8
 80054b0:	f840 3b04 	str.w	r3, [r0], #4
 80054b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80054b8:	d2e8      	bcs.n	800548c <quorem+0xb0>
 80054ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054c2:	b922      	cbnz	r2, 80054ce <quorem+0xf2>
 80054c4:	3b04      	subs	r3, #4
 80054c6:	429d      	cmp	r5, r3
 80054c8:	461a      	mov	r2, r3
 80054ca:	d30a      	bcc.n	80054e2 <quorem+0x106>
 80054cc:	613c      	str	r4, [r7, #16]
 80054ce:	4630      	mov	r0, r6
 80054d0:	b003      	add	sp, #12
 80054d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	3b04      	subs	r3, #4
 80054da:	2a00      	cmp	r2, #0
 80054dc:	d1cc      	bne.n	8005478 <quorem+0x9c>
 80054de:	3c01      	subs	r4, #1
 80054e0:	e7c7      	b.n	8005472 <quorem+0x96>
 80054e2:	6812      	ldr	r2, [r2, #0]
 80054e4:	3b04      	subs	r3, #4
 80054e6:	2a00      	cmp	r2, #0
 80054e8:	d1f0      	bne.n	80054cc <quorem+0xf0>
 80054ea:	3c01      	subs	r4, #1
 80054ec:	e7eb      	b.n	80054c6 <quorem+0xea>
 80054ee:	2000      	movs	r0, #0
 80054f0:	e7ee      	b.n	80054d0 <quorem+0xf4>
 80054f2:	0000      	movs	r0, r0
 80054f4:	0000      	movs	r0, r0
	...

080054f8 <_dtoa_r>:
 80054f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	ed2d 8b02 	vpush	{d8}
 8005500:	ec57 6b10 	vmov	r6, r7, d0
 8005504:	b095      	sub	sp, #84	; 0x54
 8005506:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005508:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800550c:	9105      	str	r1, [sp, #20]
 800550e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005512:	4604      	mov	r4, r0
 8005514:	9209      	str	r2, [sp, #36]	; 0x24
 8005516:	930f      	str	r3, [sp, #60]	; 0x3c
 8005518:	b975      	cbnz	r5, 8005538 <_dtoa_r+0x40>
 800551a:	2010      	movs	r0, #16
 800551c:	f001 f94c 	bl	80067b8 <malloc>
 8005520:	4602      	mov	r2, r0
 8005522:	6260      	str	r0, [r4, #36]	; 0x24
 8005524:	b920      	cbnz	r0, 8005530 <_dtoa_r+0x38>
 8005526:	4bb2      	ldr	r3, [pc, #712]	; (80057f0 <_dtoa_r+0x2f8>)
 8005528:	21ea      	movs	r1, #234	; 0xea
 800552a:	48b2      	ldr	r0, [pc, #712]	; (80057f4 <_dtoa_r+0x2fc>)
 800552c:	f002 f874 	bl	8007618 <__assert_func>
 8005530:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005534:	6005      	str	r5, [r0, #0]
 8005536:	60c5      	str	r5, [r0, #12]
 8005538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800553a:	6819      	ldr	r1, [r3, #0]
 800553c:	b151      	cbz	r1, 8005554 <_dtoa_r+0x5c>
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	604a      	str	r2, [r1, #4]
 8005542:	2301      	movs	r3, #1
 8005544:	4093      	lsls	r3, r2
 8005546:	608b      	str	r3, [r1, #8]
 8005548:	4620      	mov	r0, r4
 800554a:	f001 f99d 	bl	8006888 <_Bfree>
 800554e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	1e3b      	subs	r3, r7, #0
 8005556:	bfb9      	ittee	lt
 8005558:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800555c:	9303      	strlt	r3, [sp, #12]
 800555e:	2300      	movge	r3, #0
 8005560:	f8c8 3000 	strge.w	r3, [r8]
 8005564:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005568:	4ba3      	ldr	r3, [pc, #652]	; (80057f8 <_dtoa_r+0x300>)
 800556a:	bfbc      	itt	lt
 800556c:	2201      	movlt	r2, #1
 800556e:	f8c8 2000 	strlt.w	r2, [r8]
 8005572:	ea33 0309 	bics.w	r3, r3, r9
 8005576:	d11b      	bne.n	80055b0 <_dtoa_r+0xb8>
 8005578:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800557a:	f242 730f 	movw	r3, #9999	; 0x270f
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005584:	4333      	orrs	r3, r6
 8005586:	f000 857a 	beq.w	800607e <_dtoa_r+0xb86>
 800558a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800558c:	b963      	cbnz	r3, 80055a8 <_dtoa_r+0xb0>
 800558e:	4b9b      	ldr	r3, [pc, #620]	; (80057fc <_dtoa_r+0x304>)
 8005590:	e024      	b.n	80055dc <_dtoa_r+0xe4>
 8005592:	4b9b      	ldr	r3, [pc, #620]	; (8005800 <_dtoa_r+0x308>)
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	3308      	adds	r3, #8
 8005598:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	9800      	ldr	r0, [sp, #0]
 800559e:	b015      	add	sp, #84	; 0x54
 80055a0:	ecbd 8b02 	vpop	{d8}
 80055a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a8:	4b94      	ldr	r3, [pc, #592]	; (80057fc <_dtoa_r+0x304>)
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	3303      	adds	r3, #3
 80055ae:	e7f3      	b.n	8005598 <_dtoa_r+0xa0>
 80055b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80055b4:	2200      	movs	r2, #0
 80055b6:	ec51 0b17 	vmov	r0, r1, d7
 80055ba:	2300      	movs	r3, #0
 80055bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80055c0:	f7fb fa82 	bl	8000ac8 <__aeabi_dcmpeq>
 80055c4:	4680      	mov	r8, r0
 80055c6:	b158      	cbz	r0, 80055e0 <_dtoa_r+0xe8>
 80055c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80055ca:	2301      	movs	r3, #1
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 8551 	beq.w	8006078 <_dtoa_r+0xb80>
 80055d6:	488b      	ldr	r0, [pc, #556]	; (8005804 <_dtoa_r+0x30c>)
 80055d8:	6018      	str	r0, [r3, #0]
 80055da:	1e43      	subs	r3, r0, #1
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	e7dd      	b.n	800559c <_dtoa_r+0xa4>
 80055e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80055e4:	aa12      	add	r2, sp, #72	; 0x48
 80055e6:	a913      	add	r1, sp, #76	; 0x4c
 80055e8:	4620      	mov	r0, r4
 80055ea:	f001 fcf5 	bl	8006fd8 <__d2b>
 80055ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80055f2:	4683      	mov	fp, r0
 80055f4:	2d00      	cmp	r5, #0
 80055f6:	d07c      	beq.n	80056f2 <_dtoa_r+0x1fa>
 80055f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80055fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005602:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005606:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800560a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800560e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005612:	4b7d      	ldr	r3, [pc, #500]	; (8005808 <_dtoa_r+0x310>)
 8005614:	2200      	movs	r2, #0
 8005616:	4630      	mov	r0, r6
 8005618:	4639      	mov	r1, r7
 800561a:	f7fa fe35 	bl	8000288 <__aeabi_dsub>
 800561e:	a36e      	add	r3, pc, #440	; (adr r3, 80057d8 <_dtoa_r+0x2e0>)
 8005620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005624:	f7fa ffe8 	bl	80005f8 <__aeabi_dmul>
 8005628:	a36d      	add	r3, pc, #436	; (adr r3, 80057e0 <_dtoa_r+0x2e8>)
 800562a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562e:	f7fa fe2d 	bl	800028c <__adddf3>
 8005632:	4606      	mov	r6, r0
 8005634:	4628      	mov	r0, r5
 8005636:	460f      	mov	r7, r1
 8005638:	f7fa ff74 	bl	8000524 <__aeabi_i2d>
 800563c:	a36a      	add	r3, pc, #424	; (adr r3, 80057e8 <_dtoa_r+0x2f0>)
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	f7fa ffd9 	bl	80005f8 <__aeabi_dmul>
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	4630      	mov	r0, r6
 800564c:	4639      	mov	r1, r7
 800564e:	f7fa fe1d 	bl	800028c <__adddf3>
 8005652:	4606      	mov	r6, r0
 8005654:	460f      	mov	r7, r1
 8005656:	f7fb fa7f 	bl	8000b58 <__aeabi_d2iz>
 800565a:	2200      	movs	r2, #0
 800565c:	4682      	mov	sl, r0
 800565e:	2300      	movs	r3, #0
 8005660:	4630      	mov	r0, r6
 8005662:	4639      	mov	r1, r7
 8005664:	f7fb fa3a 	bl	8000adc <__aeabi_dcmplt>
 8005668:	b148      	cbz	r0, 800567e <_dtoa_r+0x186>
 800566a:	4650      	mov	r0, sl
 800566c:	f7fa ff5a 	bl	8000524 <__aeabi_i2d>
 8005670:	4632      	mov	r2, r6
 8005672:	463b      	mov	r3, r7
 8005674:	f7fb fa28 	bl	8000ac8 <__aeabi_dcmpeq>
 8005678:	b908      	cbnz	r0, 800567e <_dtoa_r+0x186>
 800567a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800567e:	f1ba 0f16 	cmp.w	sl, #22
 8005682:	d854      	bhi.n	800572e <_dtoa_r+0x236>
 8005684:	4b61      	ldr	r3, [pc, #388]	; (800580c <_dtoa_r+0x314>)
 8005686:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800568a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005692:	f7fb fa23 	bl	8000adc <__aeabi_dcmplt>
 8005696:	2800      	cmp	r0, #0
 8005698:	d04b      	beq.n	8005732 <_dtoa_r+0x23a>
 800569a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800569e:	2300      	movs	r3, #0
 80056a0:	930e      	str	r3, [sp, #56]	; 0x38
 80056a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056a4:	1b5d      	subs	r5, r3, r5
 80056a6:	1e6b      	subs	r3, r5, #1
 80056a8:	9304      	str	r3, [sp, #16]
 80056aa:	bf43      	ittte	mi
 80056ac:	2300      	movmi	r3, #0
 80056ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80056b2:	9304      	strmi	r3, [sp, #16]
 80056b4:	f04f 0800 	movpl.w	r8, #0
 80056b8:	f1ba 0f00 	cmp.w	sl, #0
 80056bc:	db3b      	blt.n	8005736 <_dtoa_r+0x23e>
 80056be:	9b04      	ldr	r3, [sp, #16]
 80056c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80056c4:	4453      	add	r3, sl
 80056c6:	9304      	str	r3, [sp, #16]
 80056c8:	2300      	movs	r3, #0
 80056ca:	9306      	str	r3, [sp, #24]
 80056cc:	9b05      	ldr	r3, [sp, #20]
 80056ce:	2b09      	cmp	r3, #9
 80056d0:	d869      	bhi.n	80057a6 <_dtoa_r+0x2ae>
 80056d2:	2b05      	cmp	r3, #5
 80056d4:	bfc4      	itt	gt
 80056d6:	3b04      	subgt	r3, #4
 80056d8:	9305      	strgt	r3, [sp, #20]
 80056da:	9b05      	ldr	r3, [sp, #20]
 80056dc:	f1a3 0302 	sub.w	r3, r3, #2
 80056e0:	bfcc      	ite	gt
 80056e2:	2500      	movgt	r5, #0
 80056e4:	2501      	movle	r5, #1
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	d869      	bhi.n	80057be <_dtoa_r+0x2c6>
 80056ea:	e8df f003 	tbb	[pc, r3]
 80056ee:	4e2c      	.short	0x4e2c
 80056f0:	5a4c      	.short	0x5a4c
 80056f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80056f6:	441d      	add	r5, r3
 80056f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	bfc1      	itttt	gt
 8005700:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005704:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005708:	fa09 f303 	lslgt.w	r3, r9, r3
 800570c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005710:	bfda      	itte	le
 8005712:	f1c3 0320 	rsble	r3, r3, #32
 8005716:	fa06 f003 	lslle.w	r0, r6, r3
 800571a:	4318      	orrgt	r0, r3
 800571c:	f7fa fef2 	bl	8000504 <__aeabi_ui2d>
 8005720:	2301      	movs	r3, #1
 8005722:	4606      	mov	r6, r0
 8005724:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005728:	3d01      	subs	r5, #1
 800572a:	9310      	str	r3, [sp, #64]	; 0x40
 800572c:	e771      	b.n	8005612 <_dtoa_r+0x11a>
 800572e:	2301      	movs	r3, #1
 8005730:	e7b6      	b.n	80056a0 <_dtoa_r+0x1a8>
 8005732:	900e      	str	r0, [sp, #56]	; 0x38
 8005734:	e7b5      	b.n	80056a2 <_dtoa_r+0x1aa>
 8005736:	f1ca 0300 	rsb	r3, sl, #0
 800573a:	9306      	str	r3, [sp, #24]
 800573c:	2300      	movs	r3, #0
 800573e:	eba8 080a 	sub.w	r8, r8, sl
 8005742:	930d      	str	r3, [sp, #52]	; 0x34
 8005744:	e7c2      	b.n	80056cc <_dtoa_r+0x1d4>
 8005746:	2300      	movs	r3, #0
 8005748:	9308      	str	r3, [sp, #32]
 800574a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800574c:	2b00      	cmp	r3, #0
 800574e:	dc39      	bgt.n	80057c4 <_dtoa_r+0x2cc>
 8005750:	f04f 0901 	mov.w	r9, #1
 8005754:	f8cd 9004 	str.w	r9, [sp, #4]
 8005758:	464b      	mov	r3, r9
 800575a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800575e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005760:	2200      	movs	r2, #0
 8005762:	6042      	str	r2, [r0, #4]
 8005764:	2204      	movs	r2, #4
 8005766:	f102 0614 	add.w	r6, r2, #20
 800576a:	429e      	cmp	r6, r3
 800576c:	6841      	ldr	r1, [r0, #4]
 800576e:	d92f      	bls.n	80057d0 <_dtoa_r+0x2d8>
 8005770:	4620      	mov	r0, r4
 8005772:	f001 f849 	bl	8006808 <_Balloc>
 8005776:	9000      	str	r0, [sp, #0]
 8005778:	2800      	cmp	r0, #0
 800577a:	d14b      	bne.n	8005814 <_dtoa_r+0x31c>
 800577c:	4b24      	ldr	r3, [pc, #144]	; (8005810 <_dtoa_r+0x318>)
 800577e:	4602      	mov	r2, r0
 8005780:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005784:	e6d1      	b.n	800552a <_dtoa_r+0x32>
 8005786:	2301      	movs	r3, #1
 8005788:	e7de      	b.n	8005748 <_dtoa_r+0x250>
 800578a:	2300      	movs	r3, #0
 800578c:	9308      	str	r3, [sp, #32]
 800578e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005790:	eb0a 0903 	add.w	r9, sl, r3
 8005794:	f109 0301 	add.w	r3, r9, #1
 8005798:	2b01      	cmp	r3, #1
 800579a:	9301      	str	r3, [sp, #4]
 800579c:	bfb8      	it	lt
 800579e:	2301      	movlt	r3, #1
 80057a0:	e7dd      	b.n	800575e <_dtoa_r+0x266>
 80057a2:	2301      	movs	r3, #1
 80057a4:	e7f2      	b.n	800578c <_dtoa_r+0x294>
 80057a6:	2501      	movs	r5, #1
 80057a8:	2300      	movs	r3, #0
 80057aa:	9305      	str	r3, [sp, #20]
 80057ac:	9508      	str	r5, [sp, #32]
 80057ae:	f04f 39ff 	mov.w	r9, #4294967295
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80057b8:	2312      	movs	r3, #18
 80057ba:	9209      	str	r2, [sp, #36]	; 0x24
 80057bc:	e7cf      	b.n	800575e <_dtoa_r+0x266>
 80057be:	2301      	movs	r3, #1
 80057c0:	9308      	str	r3, [sp, #32]
 80057c2:	e7f4      	b.n	80057ae <_dtoa_r+0x2b6>
 80057c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80057c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80057cc:	464b      	mov	r3, r9
 80057ce:	e7c6      	b.n	800575e <_dtoa_r+0x266>
 80057d0:	3101      	adds	r1, #1
 80057d2:	6041      	str	r1, [r0, #4]
 80057d4:	0052      	lsls	r2, r2, #1
 80057d6:	e7c6      	b.n	8005766 <_dtoa_r+0x26e>
 80057d8:	636f4361 	.word	0x636f4361
 80057dc:	3fd287a7 	.word	0x3fd287a7
 80057e0:	8b60c8b3 	.word	0x8b60c8b3
 80057e4:	3fc68a28 	.word	0x3fc68a28
 80057e8:	509f79fb 	.word	0x509f79fb
 80057ec:	3fd34413 	.word	0x3fd34413
 80057f0:	0800840e 	.word	0x0800840e
 80057f4:	08008425 	.word	0x08008425
 80057f8:	7ff00000 	.word	0x7ff00000
 80057fc:	0800840a 	.word	0x0800840a
 8005800:	08008401 	.word	0x08008401
 8005804:	08008285 	.word	0x08008285
 8005808:	3ff80000 	.word	0x3ff80000
 800580c:	080085a0 	.word	0x080085a0
 8005810:	08008484 	.word	0x08008484
 8005814:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005816:	9a00      	ldr	r2, [sp, #0]
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	9b01      	ldr	r3, [sp, #4]
 800581c:	2b0e      	cmp	r3, #14
 800581e:	f200 80ad 	bhi.w	800597c <_dtoa_r+0x484>
 8005822:	2d00      	cmp	r5, #0
 8005824:	f000 80aa 	beq.w	800597c <_dtoa_r+0x484>
 8005828:	f1ba 0f00 	cmp.w	sl, #0
 800582c:	dd36      	ble.n	800589c <_dtoa_r+0x3a4>
 800582e:	4ac3      	ldr	r2, [pc, #780]	; (8005b3c <_dtoa_r+0x644>)
 8005830:	f00a 030f 	and.w	r3, sl, #15
 8005834:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005838:	ed93 7b00 	vldr	d7, [r3]
 800583c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005840:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005844:	eeb0 8a47 	vmov.f32	s16, s14
 8005848:	eef0 8a67 	vmov.f32	s17, s15
 800584c:	d016      	beq.n	800587c <_dtoa_r+0x384>
 800584e:	4bbc      	ldr	r3, [pc, #752]	; (8005b40 <_dtoa_r+0x648>)
 8005850:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005854:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005858:	f7fa fff8 	bl	800084c <__aeabi_ddiv>
 800585c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005860:	f007 070f 	and.w	r7, r7, #15
 8005864:	2503      	movs	r5, #3
 8005866:	4eb6      	ldr	r6, [pc, #728]	; (8005b40 <_dtoa_r+0x648>)
 8005868:	b957      	cbnz	r7, 8005880 <_dtoa_r+0x388>
 800586a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800586e:	ec53 2b18 	vmov	r2, r3, d8
 8005872:	f7fa ffeb 	bl	800084c <__aeabi_ddiv>
 8005876:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800587a:	e029      	b.n	80058d0 <_dtoa_r+0x3d8>
 800587c:	2502      	movs	r5, #2
 800587e:	e7f2      	b.n	8005866 <_dtoa_r+0x36e>
 8005880:	07f9      	lsls	r1, r7, #31
 8005882:	d508      	bpl.n	8005896 <_dtoa_r+0x39e>
 8005884:	ec51 0b18 	vmov	r0, r1, d8
 8005888:	e9d6 2300 	ldrd	r2, r3, [r6]
 800588c:	f7fa feb4 	bl	80005f8 <__aeabi_dmul>
 8005890:	ec41 0b18 	vmov	d8, r0, r1
 8005894:	3501      	adds	r5, #1
 8005896:	107f      	asrs	r7, r7, #1
 8005898:	3608      	adds	r6, #8
 800589a:	e7e5      	b.n	8005868 <_dtoa_r+0x370>
 800589c:	f000 80a6 	beq.w	80059ec <_dtoa_r+0x4f4>
 80058a0:	f1ca 0600 	rsb	r6, sl, #0
 80058a4:	4ba5      	ldr	r3, [pc, #660]	; (8005b3c <_dtoa_r+0x644>)
 80058a6:	4fa6      	ldr	r7, [pc, #664]	; (8005b40 <_dtoa_r+0x648>)
 80058a8:	f006 020f 	and.w	r2, r6, #15
 80058ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80058b8:	f7fa fe9e 	bl	80005f8 <__aeabi_dmul>
 80058bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058c0:	1136      	asrs	r6, r6, #4
 80058c2:	2300      	movs	r3, #0
 80058c4:	2502      	movs	r5, #2
 80058c6:	2e00      	cmp	r6, #0
 80058c8:	f040 8085 	bne.w	80059d6 <_dtoa_r+0x4de>
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1d2      	bne.n	8005876 <_dtoa_r+0x37e>
 80058d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 808c 	beq.w	80059f0 <_dtoa_r+0x4f8>
 80058d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80058dc:	4b99      	ldr	r3, [pc, #612]	; (8005b44 <_dtoa_r+0x64c>)
 80058de:	2200      	movs	r2, #0
 80058e0:	4630      	mov	r0, r6
 80058e2:	4639      	mov	r1, r7
 80058e4:	f7fb f8fa 	bl	8000adc <__aeabi_dcmplt>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	f000 8081 	beq.w	80059f0 <_dtoa_r+0x4f8>
 80058ee:	9b01      	ldr	r3, [sp, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d07d      	beq.n	80059f0 <_dtoa_r+0x4f8>
 80058f4:	f1b9 0f00 	cmp.w	r9, #0
 80058f8:	dd3c      	ble.n	8005974 <_dtoa_r+0x47c>
 80058fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80058fe:	9307      	str	r3, [sp, #28]
 8005900:	2200      	movs	r2, #0
 8005902:	4b91      	ldr	r3, [pc, #580]	; (8005b48 <_dtoa_r+0x650>)
 8005904:	4630      	mov	r0, r6
 8005906:	4639      	mov	r1, r7
 8005908:	f7fa fe76 	bl	80005f8 <__aeabi_dmul>
 800590c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005910:	3501      	adds	r5, #1
 8005912:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005916:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800591a:	4628      	mov	r0, r5
 800591c:	f7fa fe02 	bl	8000524 <__aeabi_i2d>
 8005920:	4632      	mov	r2, r6
 8005922:	463b      	mov	r3, r7
 8005924:	f7fa fe68 	bl	80005f8 <__aeabi_dmul>
 8005928:	4b88      	ldr	r3, [pc, #544]	; (8005b4c <_dtoa_r+0x654>)
 800592a:	2200      	movs	r2, #0
 800592c:	f7fa fcae 	bl	800028c <__adddf3>
 8005930:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005934:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005938:	9303      	str	r3, [sp, #12]
 800593a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800593c:	2b00      	cmp	r3, #0
 800593e:	d15c      	bne.n	80059fa <_dtoa_r+0x502>
 8005940:	4b83      	ldr	r3, [pc, #524]	; (8005b50 <_dtoa_r+0x658>)
 8005942:	2200      	movs	r2, #0
 8005944:	4630      	mov	r0, r6
 8005946:	4639      	mov	r1, r7
 8005948:	f7fa fc9e 	bl	8000288 <__aeabi_dsub>
 800594c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005950:	4606      	mov	r6, r0
 8005952:	460f      	mov	r7, r1
 8005954:	f7fb f8e0 	bl	8000b18 <__aeabi_dcmpgt>
 8005958:	2800      	cmp	r0, #0
 800595a:	f040 8296 	bne.w	8005e8a <_dtoa_r+0x992>
 800595e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005962:	4630      	mov	r0, r6
 8005964:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005968:	4639      	mov	r1, r7
 800596a:	f7fb f8b7 	bl	8000adc <__aeabi_dcmplt>
 800596e:	2800      	cmp	r0, #0
 8005970:	f040 8288 	bne.w	8005e84 <_dtoa_r+0x98c>
 8005974:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005978:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800597c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800597e:	2b00      	cmp	r3, #0
 8005980:	f2c0 8158 	blt.w	8005c34 <_dtoa_r+0x73c>
 8005984:	f1ba 0f0e 	cmp.w	sl, #14
 8005988:	f300 8154 	bgt.w	8005c34 <_dtoa_r+0x73c>
 800598c:	4b6b      	ldr	r3, [pc, #428]	; (8005b3c <_dtoa_r+0x644>)
 800598e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005992:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005998:	2b00      	cmp	r3, #0
 800599a:	f280 80e3 	bge.w	8005b64 <_dtoa_r+0x66c>
 800599e:	9b01      	ldr	r3, [sp, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f300 80df 	bgt.w	8005b64 <_dtoa_r+0x66c>
 80059a6:	f040 826d 	bne.w	8005e84 <_dtoa_r+0x98c>
 80059aa:	4b69      	ldr	r3, [pc, #420]	; (8005b50 <_dtoa_r+0x658>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	4640      	mov	r0, r8
 80059b0:	4649      	mov	r1, r9
 80059b2:	f7fa fe21 	bl	80005f8 <__aeabi_dmul>
 80059b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059ba:	f7fb f8a3 	bl	8000b04 <__aeabi_dcmpge>
 80059be:	9e01      	ldr	r6, [sp, #4]
 80059c0:	4637      	mov	r7, r6
 80059c2:	2800      	cmp	r0, #0
 80059c4:	f040 8243 	bne.w	8005e4e <_dtoa_r+0x956>
 80059c8:	9d00      	ldr	r5, [sp, #0]
 80059ca:	2331      	movs	r3, #49	; 0x31
 80059cc:	f805 3b01 	strb.w	r3, [r5], #1
 80059d0:	f10a 0a01 	add.w	sl, sl, #1
 80059d4:	e23f      	b.n	8005e56 <_dtoa_r+0x95e>
 80059d6:	07f2      	lsls	r2, r6, #31
 80059d8:	d505      	bpl.n	80059e6 <_dtoa_r+0x4ee>
 80059da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059de:	f7fa fe0b 	bl	80005f8 <__aeabi_dmul>
 80059e2:	3501      	adds	r5, #1
 80059e4:	2301      	movs	r3, #1
 80059e6:	1076      	asrs	r6, r6, #1
 80059e8:	3708      	adds	r7, #8
 80059ea:	e76c      	b.n	80058c6 <_dtoa_r+0x3ce>
 80059ec:	2502      	movs	r5, #2
 80059ee:	e76f      	b.n	80058d0 <_dtoa_r+0x3d8>
 80059f0:	9b01      	ldr	r3, [sp, #4]
 80059f2:	f8cd a01c 	str.w	sl, [sp, #28]
 80059f6:	930c      	str	r3, [sp, #48]	; 0x30
 80059f8:	e78d      	b.n	8005916 <_dtoa_r+0x41e>
 80059fa:	9900      	ldr	r1, [sp, #0]
 80059fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80059fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a00:	4b4e      	ldr	r3, [pc, #312]	; (8005b3c <_dtoa_r+0x644>)
 8005a02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005a06:	4401      	add	r1, r0
 8005a08:	9102      	str	r1, [sp, #8]
 8005a0a:	9908      	ldr	r1, [sp, #32]
 8005a0c:	eeb0 8a47 	vmov.f32	s16, s14
 8005a10:	eef0 8a67 	vmov.f32	s17, s15
 8005a14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a1c:	2900      	cmp	r1, #0
 8005a1e:	d045      	beq.n	8005aac <_dtoa_r+0x5b4>
 8005a20:	494c      	ldr	r1, [pc, #304]	; (8005b54 <_dtoa_r+0x65c>)
 8005a22:	2000      	movs	r0, #0
 8005a24:	f7fa ff12 	bl	800084c <__aeabi_ddiv>
 8005a28:	ec53 2b18 	vmov	r2, r3, d8
 8005a2c:	f7fa fc2c 	bl	8000288 <__aeabi_dsub>
 8005a30:	9d00      	ldr	r5, [sp, #0]
 8005a32:	ec41 0b18 	vmov	d8, r0, r1
 8005a36:	4639      	mov	r1, r7
 8005a38:	4630      	mov	r0, r6
 8005a3a:	f7fb f88d 	bl	8000b58 <__aeabi_d2iz>
 8005a3e:	900c      	str	r0, [sp, #48]	; 0x30
 8005a40:	f7fa fd70 	bl	8000524 <__aeabi_i2d>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	4630      	mov	r0, r6
 8005a4a:	4639      	mov	r1, r7
 8005a4c:	f7fa fc1c 	bl	8000288 <__aeabi_dsub>
 8005a50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a52:	3330      	adds	r3, #48	; 0x30
 8005a54:	f805 3b01 	strb.w	r3, [r5], #1
 8005a58:	ec53 2b18 	vmov	r2, r3, d8
 8005a5c:	4606      	mov	r6, r0
 8005a5e:	460f      	mov	r7, r1
 8005a60:	f7fb f83c 	bl	8000adc <__aeabi_dcmplt>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	d165      	bne.n	8005b34 <_dtoa_r+0x63c>
 8005a68:	4632      	mov	r2, r6
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	4935      	ldr	r1, [pc, #212]	; (8005b44 <_dtoa_r+0x64c>)
 8005a6e:	2000      	movs	r0, #0
 8005a70:	f7fa fc0a 	bl	8000288 <__aeabi_dsub>
 8005a74:	ec53 2b18 	vmov	r2, r3, d8
 8005a78:	f7fb f830 	bl	8000adc <__aeabi_dcmplt>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	f040 80b9 	bne.w	8005bf4 <_dtoa_r+0x6fc>
 8005a82:	9b02      	ldr	r3, [sp, #8]
 8005a84:	429d      	cmp	r5, r3
 8005a86:	f43f af75 	beq.w	8005974 <_dtoa_r+0x47c>
 8005a8a:	4b2f      	ldr	r3, [pc, #188]	; (8005b48 <_dtoa_r+0x650>)
 8005a8c:	ec51 0b18 	vmov	r0, r1, d8
 8005a90:	2200      	movs	r2, #0
 8005a92:	f7fa fdb1 	bl	80005f8 <__aeabi_dmul>
 8005a96:	4b2c      	ldr	r3, [pc, #176]	; (8005b48 <_dtoa_r+0x650>)
 8005a98:	ec41 0b18 	vmov	d8, r0, r1
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	4639      	mov	r1, r7
 8005aa2:	f7fa fda9 	bl	80005f8 <__aeabi_dmul>
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	460f      	mov	r7, r1
 8005aaa:	e7c4      	b.n	8005a36 <_dtoa_r+0x53e>
 8005aac:	ec51 0b17 	vmov	r0, r1, d7
 8005ab0:	f7fa fda2 	bl	80005f8 <__aeabi_dmul>
 8005ab4:	9b02      	ldr	r3, [sp, #8]
 8005ab6:	9d00      	ldr	r5, [sp, #0]
 8005ab8:	930c      	str	r3, [sp, #48]	; 0x30
 8005aba:	ec41 0b18 	vmov	d8, r0, r1
 8005abe:	4639      	mov	r1, r7
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	f7fb f849 	bl	8000b58 <__aeabi_d2iz>
 8005ac6:	9011      	str	r0, [sp, #68]	; 0x44
 8005ac8:	f7fa fd2c 	bl	8000524 <__aeabi_i2d>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	4639      	mov	r1, r7
 8005ad4:	f7fa fbd8 	bl	8000288 <__aeabi_dsub>
 8005ad8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ada:	3330      	adds	r3, #48	; 0x30
 8005adc:	f805 3b01 	strb.w	r3, [r5], #1
 8005ae0:	9b02      	ldr	r3, [sp, #8]
 8005ae2:	429d      	cmp	r5, r3
 8005ae4:	4606      	mov	r6, r0
 8005ae6:	460f      	mov	r7, r1
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	d134      	bne.n	8005b58 <_dtoa_r+0x660>
 8005aee:	4b19      	ldr	r3, [pc, #100]	; (8005b54 <_dtoa_r+0x65c>)
 8005af0:	ec51 0b18 	vmov	r0, r1, d8
 8005af4:	f7fa fbca 	bl	800028c <__adddf3>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	4630      	mov	r0, r6
 8005afe:	4639      	mov	r1, r7
 8005b00:	f7fb f80a 	bl	8000b18 <__aeabi_dcmpgt>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d175      	bne.n	8005bf4 <_dtoa_r+0x6fc>
 8005b08:	ec53 2b18 	vmov	r2, r3, d8
 8005b0c:	4911      	ldr	r1, [pc, #68]	; (8005b54 <_dtoa_r+0x65c>)
 8005b0e:	2000      	movs	r0, #0
 8005b10:	f7fa fbba 	bl	8000288 <__aeabi_dsub>
 8005b14:	4602      	mov	r2, r0
 8005b16:	460b      	mov	r3, r1
 8005b18:	4630      	mov	r0, r6
 8005b1a:	4639      	mov	r1, r7
 8005b1c:	f7fa ffde 	bl	8000adc <__aeabi_dcmplt>
 8005b20:	2800      	cmp	r0, #0
 8005b22:	f43f af27 	beq.w	8005974 <_dtoa_r+0x47c>
 8005b26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b28:	1e6b      	subs	r3, r5, #1
 8005b2a:	930c      	str	r3, [sp, #48]	; 0x30
 8005b2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b30:	2b30      	cmp	r3, #48	; 0x30
 8005b32:	d0f8      	beq.n	8005b26 <_dtoa_r+0x62e>
 8005b34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005b38:	e04a      	b.n	8005bd0 <_dtoa_r+0x6d8>
 8005b3a:	bf00      	nop
 8005b3c:	080085a0 	.word	0x080085a0
 8005b40:	08008578 	.word	0x08008578
 8005b44:	3ff00000 	.word	0x3ff00000
 8005b48:	40240000 	.word	0x40240000
 8005b4c:	401c0000 	.word	0x401c0000
 8005b50:	40140000 	.word	0x40140000
 8005b54:	3fe00000 	.word	0x3fe00000
 8005b58:	4baf      	ldr	r3, [pc, #700]	; (8005e18 <_dtoa_r+0x920>)
 8005b5a:	f7fa fd4d 	bl	80005f8 <__aeabi_dmul>
 8005b5e:	4606      	mov	r6, r0
 8005b60:	460f      	mov	r7, r1
 8005b62:	e7ac      	b.n	8005abe <_dtoa_r+0x5c6>
 8005b64:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005b68:	9d00      	ldr	r5, [sp, #0]
 8005b6a:	4642      	mov	r2, r8
 8005b6c:	464b      	mov	r3, r9
 8005b6e:	4630      	mov	r0, r6
 8005b70:	4639      	mov	r1, r7
 8005b72:	f7fa fe6b 	bl	800084c <__aeabi_ddiv>
 8005b76:	f7fa ffef 	bl	8000b58 <__aeabi_d2iz>
 8005b7a:	9002      	str	r0, [sp, #8]
 8005b7c:	f7fa fcd2 	bl	8000524 <__aeabi_i2d>
 8005b80:	4642      	mov	r2, r8
 8005b82:	464b      	mov	r3, r9
 8005b84:	f7fa fd38 	bl	80005f8 <__aeabi_dmul>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	4639      	mov	r1, r7
 8005b90:	f7fa fb7a 	bl	8000288 <__aeabi_dsub>
 8005b94:	9e02      	ldr	r6, [sp, #8]
 8005b96:	9f01      	ldr	r7, [sp, #4]
 8005b98:	3630      	adds	r6, #48	; 0x30
 8005b9a:	f805 6b01 	strb.w	r6, [r5], #1
 8005b9e:	9e00      	ldr	r6, [sp, #0]
 8005ba0:	1bae      	subs	r6, r5, r6
 8005ba2:	42b7      	cmp	r7, r6
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	d137      	bne.n	8005c1a <_dtoa_r+0x722>
 8005baa:	f7fa fb6f 	bl	800028c <__adddf3>
 8005bae:	4642      	mov	r2, r8
 8005bb0:	464b      	mov	r3, r9
 8005bb2:	4606      	mov	r6, r0
 8005bb4:	460f      	mov	r7, r1
 8005bb6:	f7fa ffaf 	bl	8000b18 <__aeabi_dcmpgt>
 8005bba:	b9c8      	cbnz	r0, 8005bf0 <_dtoa_r+0x6f8>
 8005bbc:	4642      	mov	r2, r8
 8005bbe:	464b      	mov	r3, r9
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	4639      	mov	r1, r7
 8005bc4:	f7fa ff80 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bc8:	b110      	cbz	r0, 8005bd0 <_dtoa_r+0x6d8>
 8005bca:	9b02      	ldr	r3, [sp, #8]
 8005bcc:	07d9      	lsls	r1, r3, #31
 8005bce:	d40f      	bmi.n	8005bf0 <_dtoa_r+0x6f8>
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	4659      	mov	r1, fp
 8005bd4:	f000 fe58 	bl	8006888 <_Bfree>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	702b      	strb	r3, [r5, #0]
 8005bdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bde:	f10a 0001 	add.w	r0, sl, #1
 8005be2:	6018      	str	r0, [r3, #0]
 8005be4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f43f acd8 	beq.w	800559c <_dtoa_r+0xa4>
 8005bec:	601d      	str	r5, [r3, #0]
 8005bee:	e4d5      	b.n	800559c <_dtoa_r+0xa4>
 8005bf0:	f8cd a01c 	str.w	sl, [sp, #28]
 8005bf4:	462b      	mov	r3, r5
 8005bf6:	461d      	mov	r5, r3
 8005bf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005bfc:	2a39      	cmp	r2, #57	; 0x39
 8005bfe:	d108      	bne.n	8005c12 <_dtoa_r+0x71a>
 8005c00:	9a00      	ldr	r2, [sp, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d1f7      	bne.n	8005bf6 <_dtoa_r+0x6fe>
 8005c06:	9a07      	ldr	r2, [sp, #28]
 8005c08:	9900      	ldr	r1, [sp, #0]
 8005c0a:	3201      	adds	r2, #1
 8005c0c:	9207      	str	r2, [sp, #28]
 8005c0e:	2230      	movs	r2, #48	; 0x30
 8005c10:	700a      	strb	r2, [r1, #0]
 8005c12:	781a      	ldrb	r2, [r3, #0]
 8005c14:	3201      	adds	r2, #1
 8005c16:	701a      	strb	r2, [r3, #0]
 8005c18:	e78c      	b.n	8005b34 <_dtoa_r+0x63c>
 8005c1a:	4b7f      	ldr	r3, [pc, #508]	; (8005e18 <_dtoa_r+0x920>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f7fa fceb 	bl	80005f8 <__aeabi_dmul>
 8005c22:	2200      	movs	r2, #0
 8005c24:	2300      	movs	r3, #0
 8005c26:	4606      	mov	r6, r0
 8005c28:	460f      	mov	r7, r1
 8005c2a:	f7fa ff4d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d09b      	beq.n	8005b6a <_dtoa_r+0x672>
 8005c32:	e7cd      	b.n	8005bd0 <_dtoa_r+0x6d8>
 8005c34:	9a08      	ldr	r2, [sp, #32]
 8005c36:	2a00      	cmp	r2, #0
 8005c38:	f000 80c4 	beq.w	8005dc4 <_dtoa_r+0x8cc>
 8005c3c:	9a05      	ldr	r2, [sp, #20]
 8005c3e:	2a01      	cmp	r2, #1
 8005c40:	f300 80a8 	bgt.w	8005d94 <_dtoa_r+0x89c>
 8005c44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c46:	2a00      	cmp	r2, #0
 8005c48:	f000 80a0 	beq.w	8005d8c <_dtoa_r+0x894>
 8005c4c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c50:	9e06      	ldr	r6, [sp, #24]
 8005c52:	4645      	mov	r5, r8
 8005c54:	9a04      	ldr	r2, [sp, #16]
 8005c56:	2101      	movs	r1, #1
 8005c58:	441a      	add	r2, r3
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	4498      	add	r8, r3
 8005c5e:	9204      	str	r2, [sp, #16]
 8005c60:	f000 ff18 	bl	8006a94 <__i2b>
 8005c64:	4607      	mov	r7, r0
 8005c66:	2d00      	cmp	r5, #0
 8005c68:	dd0b      	ble.n	8005c82 <_dtoa_r+0x78a>
 8005c6a:	9b04      	ldr	r3, [sp, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	dd08      	ble.n	8005c82 <_dtoa_r+0x78a>
 8005c70:	42ab      	cmp	r3, r5
 8005c72:	9a04      	ldr	r2, [sp, #16]
 8005c74:	bfa8      	it	ge
 8005c76:	462b      	movge	r3, r5
 8005c78:	eba8 0803 	sub.w	r8, r8, r3
 8005c7c:	1aed      	subs	r5, r5, r3
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	9304      	str	r3, [sp, #16]
 8005c82:	9b06      	ldr	r3, [sp, #24]
 8005c84:	b1fb      	cbz	r3, 8005cc6 <_dtoa_r+0x7ce>
 8005c86:	9b08      	ldr	r3, [sp, #32]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 809f 	beq.w	8005dcc <_dtoa_r+0x8d4>
 8005c8e:	2e00      	cmp	r6, #0
 8005c90:	dd11      	ble.n	8005cb6 <_dtoa_r+0x7be>
 8005c92:	4639      	mov	r1, r7
 8005c94:	4632      	mov	r2, r6
 8005c96:	4620      	mov	r0, r4
 8005c98:	f000 ffb8 	bl	8006c0c <__pow5mult>
 8005c9c:	465a      	mov	r2, fp
 8005c9e:	4601      	mov	r1, r0
 8005ca0:	4607      	mov	r7, r0
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	f000 ff0c 	bl	8006ac0 <__multiply>
 8005ca8:	4659      	mov	r1, fp
 8005caa:	9007      	str	r0, [sp, #28]
 8005cac:	4620      	mov	r0, r4
 8005cae:	f000 fdeb 	bl	8006888 <_Bfree>
 8005cb2:	9b07      	ldr	r3, [sp, #28]
 8005cb4:	469b      	mov	fp, r3
 8005cb6:	9b06      	ldr	r3, [sp, #24]
 8005cb8:	1b9a      	subs	r2, r3, r6
 8005cba:	d004      	beq.n	8005cc6 <_dtoa_r+0x7ce>
 8005cbc:	4659      	mov	r1, fp
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	f000 ffa4 	bl	8006c0c <__pow5mult>
 8005cc4:	4683      	mov	fp, r0
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f000 fee3 	bl	8006a94 <__i2b>
 8005cce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	dd7c      	ble.n	8005dd0 <_dtoa_r+0x8d8>
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	4601      	mov	r1, r0
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f000 ff96 	bl	8006c0c <__pow5mult>
 8005ce0:	9b05      	ldr	r3, [sp, #20]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	dd76      	ble.n	8005dd6 <_dtoa_r+0x8de>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	9306      	str	r3, [sp, #24]
 8005cec:	6933      	ldr	r3, [r6, #16]
 8005cee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005cf2:	6918      	ldr	r0, [r3, #16]
 8005cf4:	f000 fe7e 	bl	80069f4 <__hi0bits>
 8005cf8:	f1c0 0020 	rsb	r0, r0, #32
 8005cfc:	9b04      	ldr	r3, [sp, #16]
 8005cfe:	4418      	add	r0, r3
 8005d00:	f010 001f 	ands.w	r0, r0, #31
 8005d04:	f000 8086 	beq.w	8005e14 <_dtoa_r+0x91c>
 8005d08:	f1c0 0320 	rsb	r3, r0, #32
 8005d0c:	2b04      	cmp	r3, #4
 8005d0e:	dd7f      	ble.n	8005e10 <_dtoa_r+0x918>
 8005d10:	f1c0 001c 	rsb	r0, r0, #28
 8005d14:	9b04      	ldr	r3, [sp, #16]
 8005d16:	4403      	add	r3, r0
 8005d18:	4480      	add	r8, r0
 8005d1a:	4405      	add	r5, r0
 8005d1c:	9304      	str	r3, [sp, #16]
 8005d1e:	f1b8 0f00 	cmp.w	r8, #0
 8005d22:	dd05      	ble.n	8005d30 <_dtoa_r+0x838>
 8005d24:	4659      	mov	r1, fp
 8005d26:	4642      	mov	r2, r8
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f000 ffc9 	bl	8006cc0 <__lshift>
 8005d2e:	4683      	mov	fp, r0
 8005d30:	9b04      	ldr	r3, [sp, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	dd05      	ble.n	8005d42 <_dtoa_r+0x84a>
 8005d36:	4631      	mov	r1, r6
 8005d38:	461a      	mov	r2, r3
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f000 ffc0 	bl	8006cc0 <__lshift>
 8005d40:	4606      	mov	r6, r0
 8005d42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d069      	beq.n	8005e1c <_dtoa_r+0x924>
 8005d48:	4631      	mov	r1, r6
 8005d4a:	4658      	mov	r0, fp
 8005d4c:	f001 f824 	bl	8006d98 <__mcmp>
 8005d50:	2800      	cmp	r0, #0
 8005d52:	da63      	bge.n	8005e1c <_dtoa_r+0x924>
 8005d54:	2300      	movs	r3, #0
 8005d56:	4659      	mov	r1, fp
 8005d58:	220a      	movs	r2, #10
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f000 fdb6 	bl	80068cc <__multadd>
 8005d60:	9b08      	ldr	r3, [sp, #32]
 8005d62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d66:	4683      	mov	fp, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 818f 	beq.w	800608c <_dtoa_r+0xb94>
 8005d6e:	4639      	mov	r1, r7
 8005d70:	2300      	movs	r3, #0
 8005d72:	220a      	movs	r2, #10
 8005d74:	4620      	mov	r0, r4
 8005d76:	f000 fda9 	bl	80068cc <__multadd>
 8005d7a:	f1b9 0f00 	cmp.w	r9, #0
 8005d7e:	4607      	mov	r7, r0
 8005d80:	f300 808e 	bgt.w	8005ea0 <_dtoa_r+0x9a8>
 8005d84:	9b05      	ldr	r3, [sp, #20]
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	dc50      	bgt.n	8005e2c <_dtoa_r+0x934>
 8005d8a:	e089      	b.n	8005ea0 <_dtoa_r+0x9a8>
 8005d8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d92:	e75d      	b.n	8005c50 <_dtoa_r+0x758>
 8005d94:	9b01      	ldr	r3, [sp, #4]
 8005d96:	1e5e      	subs	r6, r3, #1
 8005d98:	9b06      	ldr	r3, [sp, #24]
 8005d9a:	42b3      	cmp	r3, r6
 8005d9c:	bfbf      	itttt	lt
 8005d9e:	9b06      	ldrlt	r3, [sp, #24]
 8005da0:	9606      	strlt	r6, [sp, #24]
 8005da2:	1af2      	sublt	r2, r6, r3
 8005da4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005da6:	bfb6      	itet	lt
 8005da8:	189b      	addlt	r3, r3, r2
 8005daa:	1b9e      	subge	r6, r3, r6
 8005dac:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005dae:	9b01      	ldr	r3, [sp, #4]
 8005db0:	bfb8      	it	lt
 8005db2:	2600      	movlt	r6, #0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	bfb5      	itete	lt
 8005db8:	eba8 0503 	sublt.w	r5, r8, r3
 8005dbc:	9b01      	ldrge	r3, [sp, #4]
 8005dbe:	2300      	movlt	r3, #0
 8005dc0:	4645      	movge	r5, r8
 8005dc2:	e747      	b.n	8005c54 <_dtoa_r+0x75c>
 8005dc4:	9e06      	ldr	r6, [sp, #24]
 8005dc6:	9f08      	ldr	r7, [sp, #32]
 8005dc8:	4645      	mov	r5, r8
 8005dca:	e74c      	b.n	8005c66 <_dtoa_r+0x76e>
 8005dcc:	9a06      	ldr	r2, [sp, #24]
 8005dce:	e775      	b.n	8005cbc <_dtoa_r+0x7c4>
 8005dd0:	9b05      	ldr	r3, [sp, #20]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	dc18      	bgt.n	8005e08 <_dtoa_r+0x910>
 8005dd6:	9b02      	ldr	r3, [sp, #8]
 8005dd8:	b9b3      	cbnz	r3, 8005e08 <_dtoa_r+0x910>
 8005dda:	9b03      	ldr	r3, [sp, #12]
 8005ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005de0:	b9a3      	cbnz	r3, 8005e0c <_dtoa_r+0x914>
 8005de2:	9b03      	ldr	r3, [sp, #12]
 8005de4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005de8:	0d1b      	lsrs	r3, r3, #20
 8005dea:	051b      	lsls	r3, r3, #20
 8005dec:	b12b      	cbz	r3, 8005dfa <_dtoa_r+0x902>
 8005dee:	9b04      	ldr	r3, [sp, #16]
 8005df0:	3301      	adds	r3, #1
 8005df2:	9304      	str	r3, [sp, #16]
 8005df4:	f108 0801 	add.w	r8, r8, #1
 8005df8:	2301      	movs	r3, #1
 8005dfa:	9306      	str	r3, [sp, #24]
 8005dfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f47f af74 	bne.w	8005cec <_dtoa_r+0x7f4>
 8005e04:	2001      	movs	r0, #1
 8005e06:	e779      	b.n	8005cfc <_dtoa_r+0x804>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e7f6      	b.n	8005dfa <_dtoa_r+0x902>
 8005e0c:	9b02      	ldr	r3, [sp, #8]
 8005e0e:	e7f4      	b.n	8005dfa <_dtoa_r+0x902>
 8005e10:	d085      	beq.n	8005d1e <_dtoa_r+0x826>
 8005e12:	4618      	mov	r0, r3
 8005e14:	301c      	adds	r0, #28
 8005e16:	e77d      	b.n	8005d14 <_dtoa_r+0x81c>
 8005e18:	40240000 	.word	0x40240000
 8005e1c:	9b01      	ldr	r3, [sp, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	dc38      	bgt.n	8005e94 <_dtoa_r+0x99c>
 8005e22:	9b05      	ldr	r3, [sp, #20]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	dd35      	ble.n	8005e94 <_dtoa_r+0x99c>
 8005e28:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005e2c:	f1b9 0f00 	cmp.w	r9, #0
 8005e30:	d10d      	bne.n	8005e4e <_dtoa_r+0x956>
 8005e32:	4631      	mov	r1, r6
 8005e34:	464b      	mov	r3, r9
 8005e36:	2205      	movs	r2, #5
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f000 fd47 	bl	80068cc <__multadd>
 8005e3e:	4601      	mov	r1, r0
 8005e40:	4606      	mov	r6, r0
 8005e42:	4658      	mov	r0, fp
 8005e44:	f000 ffa8 	bl	8006d98 <__mcmp>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	f73f adbd 	bgt.w	80059c8 <_dtoa_r+0x4d0>
 8005e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e50:	9d00      	ldr	r5, [sp, #0]
 8005e52:	ea6f 0a03 	mvn.w	sl, r3
 8005e56:	f04f 0800 	mov.w	r8, #0
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f000 fd13 	bl	8006888 <_Bfree>
 8005e62:	2f00      	cmp	r7, #0
 8005e64:	f43f aeb4 	beq.w	8005bd0 <_dtoa_r+0x6d8>
 8005e68:	f1b8 0f00 	cmp.w	r8, #0
 8005e6c:	d005      	beq.n	8005e7a <_dtoa_r+0x982>
 8005e6e:	45b8      	cmp	r8, r7
 8005e70:	d003      	beq.n	8005e7a <_dtoa_r+0x982>
 8005e72:	4641      	mov	r1, r8
 8005e74:	4620      	mov	r0, r4
 8005e76:	f000 fd07 	bl	8006888 <_Bfree>
 8005e7a:	4639      	mov	r1, r7
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f000 fd03 	bl	8006888 <_Bfree>
 8005e82:	e6a5      	b.n	8005bd0 <_dtoa_r+0x6d8>
 8005e84:	2600      	movs	r6, #0
 8005e86:	4637      	mov	r7, r6
 8005e88:	e7e1      	b.n	8005e4e <_dtoa_r+0x956>
 8005e8a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005e8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005e90:	4637      	mov	r7, r6
 8005e92:	e599      	b.n	80059c8 <_dtoa_r+0x4d0>
 8005e94:	9b08      	ldr	r3, [sp, #32]
 8005e96:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 80fd 	beq.w	800609a <_dtoa_r+0xba2>
 8005ea0:	2d00      	cmp	r5, #0
 8005ea2:	dd05      	ble.n	8005eb0 <_dtoa_r+0x9b8>
 8005ea4:	4639      	mov	r1, r7
 8005ea6:	462a      	mov	r2, r5
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f000 ff09 	bl	8006cc0 <__lshift>
 8005eae:	4607      	mov	r7, r0
 8005eb0:	9b06      	ldr	r3, [sp, #24]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d05c      	beq.n	8005f70 <_dtoa_r+0xa78>
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f000 fca5 	bl	8006808 <_Balloc>
 8005ebe:	4605      	mov	r5, r0
 8005ec0:	b928      	cbnz	r0, 8005ece <_dtoa_r+0x9d6>
 8005ec2:	4b80      	ldr	r3, [pc, #512]	; (80060c4 <_dtoa_r+0xbcc>)
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005eca:	f7ff bb2e 	b.w	800552a <_dtoa_r+0x32>
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	3202      	adds	r2, #2
 8005ed2:	0092      	lsls	r2, r2, #2
 8005ed4:	f107 010c 	add.w	r1, r7, #12
 8005ed8:	300c      	adds	r0, #12
 8005eda:	f000 fc87 	bl	80067ec <memcpy>
 8005ede:	2201      	movs	r2, #1
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 feec 	bl	8006cc0 <__lshift>
 8005ee8:	9b00      	ldr	r3, [sp, #0]
 8005eea:	3301      	adds	r3, #1
 8005eec:	9301      	str	r3, [sp, #4]
 8005eee:	9b00      	ldr	r3, [sp, #0]
 8005ef0:	444b      	add	r3, r9
 8005ef2:	9307      	str	r3, [sp, #28]
 8005ef4:	9b02      	ldr	r3, [sp, #8]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	46b8      	mov	r8, r7
 8005efc:	9306      	str	r3, [sp, #24]
 8005efe:	4607      	mov	r7, r0
 8005f00:	9b01      	ldr	r3, [sp, #4]
 8005f02:	4631      	mov	r1, r6
 8005f04:	3b01      	subs	r3, #1
 8005f06:	4658      	mov	r0, fp
 8005f08:	9302      	str	r3, [sp, #8]
 8005f0a:	f7ff fa67 	bl	80053dc <quorem>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	3330      	adds	r3, #48	; 0x30
 8005f12:	9004      	str	r0, [sp, #16]
 8005f14:	4641      	mov	r1, r8
 8005f16:	4658      	mov	r0, fp
 8005f18:	9308      	str	r3, [sp, #32]
 8005f1a:	f000 ff3d 	bl	8006d98 <__mcmp>
 8005f1e:	463a      	mov	r2, r7
 8005f20:	4681      	mov	r9, r0
 8005f22:	4631      	mov	r1, r6
 8005f24:	4620      	mov	r0, r4
 8005f26:	f000 ff53 	bl	8006dd0 <__mdiff>
 8005f2a:	68c2      	ldr	r2, [r0, #12]
 8005f2c:	9b08      	ldr	r3, [sp, #32]
 8005f2e:	4605      	mov	r5, r0
 8005f30:	bb02      	cbnz	r2, 8005f74 <_dtoa_r+0xa7c>
 8005f32:	4601      	mov	r1, r0
 8005f34:	4658      	mov	r0, fp
 8005f36:	f000 ff2f 	bl	8006d98 <__mcmp>
 8005f3a:	9b08      	ldr	r3, [sp, #32]
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	4629      	mov	r1, r5
 8005f40:	4620      	mov	r0, r4
 8005f42:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005f46:	f000 fc9f 	bl	8006888 <_Bfree>
 8005f4a:	9b05      	ldr	r3, [sp, #20]
 8005f4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f4e:	9d01      	ldr	r5, [sp, #4]
 8005f50:	ea43 0102 	orr.w	r1, r3, r2
 8005f54:	9b06      	ldr	r3, [sp, #24]
 8005f56:	430b      	orrs	r3, r1
 8005f58:	9b08      	ldr	r3, [sp, #32]
 8005f5a:	d10d      	bne.n	8005f78 <_dtoa_r+0xa80>
 8005f5c:	2b39      	cmp	r3, #57	; 0x39
 8005f5e:	d029      	beq.n	8005fb4 <_dtoa_r+0xabc>
 8005f60:	f1b9 0f00 	cmp.w	r9, #0
 8005f64:	dd01      	ble.n	8005f6a <_dtoa_r+0xa72>
 8005f66:	9b04      	ldr	r3, [sp, #16]
 8005f68:	3331      	adds	r3, #49	; 0x31
 8005f6a:	9a02      	ldr	r2, [sp, #8]
 8005f6c:	7013      	strb	r3, [r2, #0]
 8005f6e:	e774      	b.n	8005e5a <_dtoa_r+0x962>
 8005f70:	4638      	mov	r0, r7
 8005f72:	e7b9      	b.n	8005ee8 <_dtoa_r+0x9f0>
 8005f74:	2201      	movs	r2, #1
 8005f76:	e7e2      	b.n	8005f3e <_dtoa_r+0xa46>
 8005f78:	f1b9 0f00 	cmp.w	r9, #0
 8005f7c:	db06      	blt.n	8005f8c <_dtoa_r+0xa94>
 8005f7e:	9905      	ldr	r1, [sp, #20]
 8005f80:	ea41 0909 	orr.w	r9, r1, r9
 8005f84:	9906      	ldr	r1, [sp, #24]
 8005f86:	ea59 0101 	orrs.w	r1, r9, r1
 8005f8a:	d120      	bne.n	8005fce <_dtoa_r+0xad6>
 8005f8c:	2a00      	cmp	r2, #0
 8005f8e:	ddec      	ble.n	8005f6a <_dtoa_r+0xa72>
 8005f90:	4659      	mov	r1, fp
 8005f92:	2201      	movs	r2, #1
 8005f94:	4620      	mov	r0, r4
 8005f96:	9301      	str	r3, [sp, #4]
 8005f98:	f000 fe92 	bl	8006cc0 <__lshift>
 8005f9c:	4631      	mov	r1, r6
 8005f9e:	4683      	mov	fp, r0
 8005fa0:	f000 fefa 	bl	8006d98 <__mcmp>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	9b01      	ldr	r3, [sp, #4]
 8005fa8:	dc02      	bgt.n	8005fb0 <_dtoa_r+0xab8>
 8005faa:	d1de      	bne.n	8005f6a <_dtoa_r+0xa72>
 8005fac:	07da      	lsls	r2, r3, #31
 8005fae:	d5dc      	bpl.n	8005f6a <_dtoa_r+0xa72>
 8005fb0:	2b39      	cmp	r3, #57	; 0x39
 8005fb2:	d1d8      	bne.n	8005f66 <_dtoa_r+0xa6e>
 8005fb4:	9a02      	ldr	r2, [sp, #8]
 8005fb6:	2339      	movs	r3, #57	; 0x39
 8005fb8:	7013      	strb	r3, [r2, #0]
 8005fba:	462b      	mov	r3, r5
 8005fbc:	461d      	mov	r5, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005fc4:	2a39      	cmp	r2, #57	; 0x39
 8005fc6:	d050      	beq.n	800606a <_dtoa_r+0xb72>
 8005fc8:	3201      	adds	r2, #1
 8005fca:	701a      	strb	r2, [r3, #0]
 8005fcc:	e745      	b.n	8005e5a <_dtoa_r+0x962>
 8005fce:	2a00      	cmp	r2, #0
 8005fd0:	dd03      	ble.n	8005fda <_dtoa_r+0xae2>
 8005fd2:	2b39      	cmp	r3, #57	; 0x39
 8005fd4:	d0ee      	beq.n	8005fb4 <_dtoa_r+0xabc>
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	e7c7      	b.n	8005f6a <_dtoa_r+0xa72>
 8005fda:	9a01      	ldr	r2, [sp, #4]
 8005fdc:	9907      	ldr	r1, [sp, #28]
 8005fde:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005fe2:	428a      	cmp	r2, r1
 8005fe4:	d02a      	beq.n	800603c <_dtoa_r+0xb44>
 8005fe6:	4659      	mov	r1, fp
 8005fe8:	2300      	movs	r3, #0
 8005fea:	220a      	movs	r2, #10
 8005fec:	4620      	mov	r0, r4
 8005fee:	f000 fc6d 	bl	80068cc <__multadd>
 8005ff2:	45b8      	cmp	r8, r7
 8005ff4:	4683      	mov	fp, r0
 8005ff6:	f04f 0300 	mov.w	r3, #0
 8005ffa:	f04f 020a 	mov.w	r2, #10
 8005ffe:	4641      	mov	r1, r8
 8006000:	4620      	mov	r0, r4
 8006002:	d107      	bne.n	8006014 <_dtoa_r+0xb1c>
 8006004:	f000 fc62 	bl	80068cc <__multadd>
 8006008:	4680      	mov	r8, r0
 800600a:	4607      	mov	r7, r0
 800600c:	9b01      	ldr	r3, [sp, #4]
 800600e:	3301      	adds	r3, #1
 8006010:	9301      	str	r3, [sp, #4]
 8006012:	e775      	b.n	8005f00 <_dtoa_r+0xa08>
 8006014:	f000 fc5a 	bl	80068cc <__multadd>
 8006018:	4639      	mov	r1, r7
 800601a:	4680      	mov	r8, r0
 800601c:	2300      	movs	r3, #0
 800601e:	220a      	movs	r2, #10
 8006020:	4620      	mov	r0, r4
 8006022:	f000 fc53 	bl	80068cc <__multadd>
 8006026:	4607      	mov	r7, r0
 8006028:	e7f0      	b.n	800600c <_dtoa_r+0xb14>
 800602a:	f1b9 0f00 	cmp.w	r9, #0
 800602e:	9a00      	ldr	r2, [sp, #0]
 8006030:	bfcc      	ite	gt
 8006032:	464d      	movgt	r5, r9
 8006034:	2501      	movle	r5, #1
 8006036:	4415      	add	r5, r2
 8006038:	f04f 0800 	mov.w	r8, #0
 800603c:	4659      	mov	r1, fp
 800603e:	2201      	movs	r2, #1
 8006040:	4620      	mov	r0, r4
 8006042:	9301      	str	r3, [sp, #4]
 8006044:	f000 fe3c 	bl	8006cc0 <__lshift>
 8006048:	4631      	mov	r1, r6
 800604a:	4683      	mov	fp, r0
 800604c:	f000 fea4 	bl	8006d98 <__mcmp>
 8006050:	2800      	cmp	r0, #0
 8006052:	dcb2      	bgt.n	8005fba <_dtoa_r+0xac2>
 8006054:	d102      	bne.n	800605c <_dtoa_r+0xb64>
 8006056:	9b01      	ldr	r3, [sp, #4]
 8006058:	07db      	lsls	r3, r3, #31
 800605a:	d4ae      	bmi.n	8005fba <_dtoa_r+0xac2>
 800605c:	462b      	mov	r3, r5
 800605e:	461d      	mov	r5, r3
 8006060:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006064:	2a30      	cmp	r2, #48	; 0x30
 8006066:	d0fa      	beq.n	800605e <_dtoa_r+0xb66>
 8006068:	e6f7      	b.n	8005e5a <_dtoa_r+0x962>
 800606a:	9a00      	ldr	r2, [sp, #0]
 800606c:	429a      	cmp	r2, r3
 800606e:	d1a5      	bne.n	8005fbc <_dtoa_r+0xac4>
 8006070:	f10a 0a01 	add.w	sl, sl, #1
 8006074:	2331      	movs	r3, #49	; 0x31
 8006076:	e779      	b.n	8005f6c <_dtoa_r+0xa74>
 8006078:	4b13      	ldr	r3, [pc, #76]	; (80060c8 <_dtoa_r+0xbd0>)
 800607a:	f7ff baaf 	b.w	80055dc <_dtoa_r+0xe4>
 800607e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006080:	2b00      	cmp	r3, #0
 8006082:	f47f aa86 	bne.w	8005592 <_dtoa_r+0x9a>
 8006086:	4b11      	ldr	r3, [pc, #68]	; (80060cc <_dtoa_r+0xbd4>)
 8006088:	f7ff baa8 	b.w	80055dc <_dtoa_r+0xe4>
 800608c:	f1b9 0f00 	cmp.w	r9, #0
 8006090:	dc03      	bgt.n	800609a <_dtoa_r+0xba2>
 8006092:	9b05      	ldr	r3, [sp, #20]
 8006094:	2b02      	cmp	r3, #2
 8006096:	f73f aec9 	bgt.w	8005e2c <_dtoa_r+0x934>
 800609a:	9d00      	ldr	r5, [sp, #0]
 800609c:	4631      	mov	r1, r6
 800609e:	4658      	mov	r0, fp
 80060a0:	f7ff f99c 	bl	80053dc <quorem>
 80060a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80060a8:	f805 3b01 	strb.w	r3, [r5], #1
 80060ac:	9a00      	ldr	r2, [sp, #0]
 80060ae:	1aaa      	subs	r2, r5, r2
 80060b0:	4591      	cmp	r9, r2
 80060b2:	ddba      	ble.n	800602a <_dtoa_r+0xb32>
 80060b4:	4659      	mov	r1, fp
 80060b6:	2300      	movs	r3, #0
 80060b8:	220a      	movs	r2, #10
 80060ba:	4620      	mov	r0, r4
 80060bc:	f000 fc06 	bl	80068cc <__multadd>
 80060c0:	4683      	mov	fp, r0
 80060c2:	e7eb      	b.n	800609c <_dtoa_r+0xba4>
 80060c4:	08008484 	.word	0x08008484
 80060c8:	08008284 	.word	0x08008284
 80060cc:	08008401 	.word	0x08008401

080060d0 <rshift>:
 80060d0:	6903      	ldr	r3, [r0, #16]
 80060d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80060d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060da:	ea4f 1261 	mov.w	r2, r1, asr #5
 80060de:	f100 0414 	add.w	r4, r0, #20
 80060e2:	dd45      	ble.n	8006170 <rshift+0xa0>
 80060e4:	f011 011f 	ands.w	r1, r1, #31
 80060e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80060ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80060f0:	d10c      	bne.n	800610c <rshift+0x3c>
 80060f2:	f100 0710 	add.w	r7, r0, #16
 80060f6:	4629      	mov	r1, r5
 80060f8:	42b1      	cmp	r1, r6
 80060fa:	d334      	bcc.n	8006166 <rshift+0x96>
 80060fc:	1a9b      	subs	r3, r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	1eea      	subs	r2, r5, #3
 8006102:	4296      	cmp	r6, r2
 8006104:	bf38      	it	cc
 8006106:	2300      	movcc	r3, #0
 8006108:	4423      	add	r3, r4
 800610a:	e015      	b.n	8006138 <rshift+0x68>
 800610c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006110:	f1c1 0820 	rsb	r8, r1, #32
 8006114:	40cf      	lsrs	r7, r1
 8006116:	f105 0e04 	add.w	lr, r5, #4
 800611a:	46a1      	mov	r9, r4
 800611c:	4576      	cmp	r6, lr
 800611e:	46f4      	mov	ip, lr
 8006120:	d815      	bhi.n	800614e <rshift+0x7e>
 8006122:	1a9b      	subs	r3, r3, r2
 8006124:	009a      	lsls	r2, r3, #2
 8006126:	3a04      	subs	r2, #4
 8006128:	3501      	adds	r5, #1
 800612a:	42ae      	cmp	r6, r5
 800612c:	bf38      	it	cc
 800612e:	2200      	movcc	r2, #0
 8006130:	18a3      	adds	r3, r4, r2
 8006132:	50a7      	str	r7, [r4, r2]
 8006134:	b107      	cbz	r7, 8006138 <rshift+0x68>
 8006136:	3304      	adds	r3, #4
 8006138:	1b1a      	subs	r2, r3, r4
 800613a:	42a3      	cmp	r3, r4
 800613c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006140:	bf08      	it	eq
 8006142:	2300      	moveq	r3, #0
 8006144:	6102      	str	r2, [r0, #16]
 8006146:	bf08      	it	eq
 8006148:	6143      	streq	r3, [r0, #20]
 800614a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800614e:	f8dc c000 	ldr.w	ip, [ip]
 8006152:	fa0c fc08 	lsl.w	ip, ip, r8
 8006156:	ea4c 0707 	orr.w	r7, ip, r7
 800615a:	f849 7b04 	str.w	r7, [r9], #4
 800615e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006162:	40cf      	lsrs	r7, r1
 8006164:	e7da      	b.n	800611c <rshift+0x4c>
 8006166:	f851 cb04 	ldr.w	ip, [r1], #4
 800616a:	f847 cf04 	str.w	ip, [r7, #4]!
 800616e:	e7c3      	b.n	80060f8 <rshift+0x28>
 8006170:	4623      	mov	r3, r4
 8006172:	e7e1      	b.n	8006138 <rshift+0x68>

08006174 <__hexdig_fun>:
 8006174:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006178:	2b09      	cmp	r3, #9
 800617a:	d802      	bhi.n	8006182 <__hexdig_fun+0xe>
 800617c:	3820      	subs	r0, #32
 800617e:	b2c0      	uxtb	r0, r0
 8006180:	4770      	bx	lr
 8006182:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006186:	2b05      	cmp	r3, #5
 8006188:	d801      	bhi.n	800618e <__hexdig_fun+0x1a>
 800618a:	3847      	subs	r0, #71	; 0x47
 800618c:	e7f7      	b.n	800617e <__hexdig_fun+0xa>
 800618e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006192:	2b05      	cmp	r3, #5
 8006194:	d801      	bhi.n	800619a <__hexdig_fun+0x26>
 8006196:	3827      	subs	r0, #39	; 0x27
 8006198:	e7f1      	b.n	800617e <__hexdig_fun+0xa>
 800619a:	2000      	movs	r0, #0
 800619c:	4770      	bx	lr
	...

080061a0 <__gethex>:
 80061a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a4:	ed2d 8b02 	vpush	{d8}
 80061a8:	b089      	sub	sp, #36	; 0x24
 80061aa:	ee08 0a10 	vmov	s16, r0
 80061ae:	9304      	str	r3, [sp, #16]
 80061b0:	4bbc      	ldr	r3, [pc, #752]	; (80064a4 <__gethex+0x304>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	9301      	str	r3, [sp, #4]
 80061b6:	4618      	mov	r0, r3
 80061b8:	468b      	mov	fp, r1
 80061ba:	4690      	mov	r8, r2
 80061bc:	f7fa f808 	bl	80001d0 <strlen>
 80061c0:	9b01      	ldr	r3, [sp, #4]
 80061c2:	f8db 2000 	ldr.w	r2, [fp]
 80061c6:	4403      	add	r3, r0
 80061c8:	4682      	mov	sl, r0
 80061ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80061ce:	9305      	str	r3, [sp, #20]
 80061d0:	1c93      	adds	r3, r2, #2
 80061d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80061d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80061da:	32fe      	adds	r2, #254	; 0xfe
 80061dc:	18d1      	adds	r1, r2, r3
 80061de:	461f      	mov	r7, r3
 80061e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80061e4:	9100      	str	r1, [sp, #0]
 80061e6:	2830      	cmp	r0, #48	; 0x30
 80061e8:	d0f8      	beq.n	80061dc <__gethex+0x3c>
 80061ea:	f7ff ffc3 	bl	8006174 <__hexdig_fun>
 80061ee:	4604      	mov	r4, r0
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d13a      	bne.n	800626a <__gethex+0xca>
 80061f4:	9901      	ldr	r1, [sp, #4]
 80061f6:	4652      	mov	r2, sl
 80061f8:	4638      	mov	r0, r7
 80061fa:	f001 f9ed 	bl	80075d8 <strncmp>
 80061fe:	4605      	mov	r5, r0
 8006200:	2800      	cmp	r0, #0
 8006202:	d168      	bne.n	80062d6 <__gethex+0x136>
 8006204:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006208:	eb07 060a 	add.w	r6, r7, sl
 800620c:	f7ff ffb2 	bl	8006174 <__hexdig_fun>
 8006210:	2800      	cmp	r0, #0
 8006212:	d062      	beq.n	80062da <__gethex+0x13a>
 8006214:	4633      	mov	r3, r6
 8006216:	7818      	ldrb	r0, [r3, #0]
 8006218:	2830      	cmp	r0, #48	; 0x30
 800621a:	461f      	mov	r7, r3
 800621c:	f103 0301 	add.w	r3, r3, #1
 8006220:	d0f9      	beq.n	8006216 <__gethex+0x76>
 8006222:	f7ff ffa7 	bl	8006174 <__hexdig_fun>
 8006226:	2301      	movs	r3, #1
 8006228:	fab0 f480 	clz	r4, r0
 800622c:	0964      	lsrs	r4, r4, #5
 800622e:	4635      	mov	r5, r6
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	463a      	mov	r2, r7
 8006234:	4616      	mov	r6, r2
 8006236:	3201      	adds	r2, #1
 8006238:	7830      	ldrb	r0, [r6, #0]
 800623a:	f7ff ff9b 	bl	8006174 <__hexdig_fun>
 800623e:	2800      	cmp	r0, #0
 8006240:	d1f8      	bne.n	8006234 <__gethex+0x94>
 8006242:	9901      	ldr	r1, [sp, #4]
 8006244:	4652      	mov	r2, sl
 8006246:	4630      	mov	r0, r6
 8006248:	f001 f9c6 	bl	80075d8 <strncmp>
 800624c:	b980      	cbnz	r0, 8006270 <__gethex+0xd0>
 800624e:	b94d      	cbnz	r5, 8006264 <__gethex+0xc4>
 8006250:	eb06 050a 	add.w	r5, r6, sl
 8006254:	462a      	mov	r2, r5
 8006256:	4616      	mov	r6, r2
 8006258:	3201      	adds	r2, #1
 800625a:	7830      	ldrb	r0, [r6, #0]
 800625c:	f7ff ff8a 	bl	8006174 <__hexdig_fun>
 8006260:	2800      	cmp	r0, #0
 8006262:	d1f8      	bne.n	8006256 <__gethex+0xb6>
 8006264:	1bad      	subs	r5, r5, r6
 8006266:	00ad      	lsls	r5, r5, #2
 8006268:	e004      	b.n	8006274 <__gethex+0xd4>
 800626a:	2400      	movs	r4, #0
 800626c:	4625      	mov	r5, r4
 800626e:	e7e0      	b.n	8006232 <__gethex+0x92>
 8006270:	2d00      	cmp	r5, #0
 8006272:	d1f7      	bne.n	8006264 <__gethex+0xc4>
 8006274:	7833      	ldrb	r3, [r6, #0]
 8006276:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800627a:	2b50      	cmp	r3, #80	; 0x50
 800627c:	d13b      	bne.n	80062f6 <__gethex+0x156>
 800627e:	7873      	ldrb	r3, [r6, #1]
 8006280:	2b2b      	cmp	r3, #43	; 0x2b
 8006282:	d02c      	beq.n	80062de <__gethex+0x13e>
 8006284:	2b2d      	cmp	r3, #45	; 0x2d
 8006286:	d02e      	beq.n	80062e6 <__gethex+0x146>
 8006288:	1c71      	adds	r1, r6, #1
 800628a:	f04f 0900 	mov.w	r9, #0
 800628e:	7808      	ldrb	r0, [r1, #0]
 8006290:	f7ff ff70 	bl	8006174 <__hexdig_fun>
 8006294:	1e43      	subs	r3, r0, #1
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b18      	cmp	r3, #24
 800629a:	d82c      	bhi.n	80062f6 <__gethex+0x156>
 800629c:	f1a0 0210 	sub.w	r2, r0, #16
 80062a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80062a4:	f7ff ff66 	bl	8006174 <__hexdig_fun>
 80062a8:	1e43      	subs	r3, r0, #1
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b18      	cmp	r3, #24
 80062ae:	d91d      	bls.n	80062ec <__gethex+0x14c>
 80062b0:	f1b9 0f00 	cmp.w	r9, #0
 80062b4:	d000      	beq.n	80062b8 <__gethex+0x118>
 80062b6:	4252      	negs	r2, r2
 80062b8:	4415      	add	r5, r2
 80062ba:	f8cb 1000 	str.w	r1, [fp]
 80062be:	b1e4      	cbz	r4, 80062fa <__gethex+0x15a>
 80062c0:	9b00      	ldr	r3, [sp, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	bf14      	ite	ne
 80062c6:	2700      	movne	r7, #0
 80062c8:	2706      	moveq	r7, #6
 80062ca:	4638      	mov	r0, r7
 80062cc:	b009      	add	sp, #36	; 0x24
 80062ce:	ecbd 8b02 	vpop	{d8}
 80062d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d6:	463e      	mov	r6, r7
 80062d8:	4625      	mov	r5, r4
 80062da:	2401      	movs	r4, #1
 80062dc:	e7ca      	b.n	8006274 <__gethex+0xd4>
 80062de:	f04f 0900 	mov.w	r9, #0
 80062e2:	1cb1      	adds	r1, r6, #2
 80062e4:	e7d3      	b.n	800628e <__gethex+0xee>
 80062e6:	f04f 0901 	mov.w	r9, #1
 80062ea:	e7fa      	b.n	80062e2 <__gethex+0x142>
 80062ec:	230a      	movs	r3, #10
 80062ee:	fb03 0202 	mla	r2, r3, r2, r0
 80062f2:	3a10      	subs	r2, #16
 80062f4:	e7d4      	b.n	80062a0 <__gethex+0x100>
 80062f6:	4631      	mov	r1, r6
 80062f8:	e7df      	b.n	80062ba <__gethex+0x11a>
 80062fa:	1bf3      	subs	r3, r6, r7
 80062fc:	3b01      	subs	r3, #1
 80062fe:	4621      	mov	r1, r4
 8006300:	2b07      	cmp	r3, #7
 8006302:	dc0b      	bgt.n	800631c <__gethex+0x17c>
 8006304:	ee18 0a10 	vmov	r0, s16
 8006308:	f000 fa7e 	bl	8006808 <_Balloc>
 800630c:	4604      	mov	r4, r0
 800630e:	b940      	cbnz	r0, 8006322 <__gethex+0x182>
 8006310:	4b65      	ldr	r3, [pc, #404]	; (80064a8 <__gethex+0x308>)
 8006312:	4602      	mov	r2, r0
 8006314:	21de      	movs	r1, #222	; 0xde
 8006316:	4865      	ldr	r0, [pc, #404]	; (80064ac <__gethex+0x30c>)
 8006318:	f001 f97e 	bl	8007618 <__assert_func>
 800631c:	3101      	adds	r1, #1
 800631e:	105b      	asrs	r3, r3, #1
 8006320:	e7ee      	b.n	8006300 <__gethex+0x160>
 8006322:	f100 0914 	add.w	r9, r0, #20
 8006326:	f04f 0b00 	mov.w	fp, #0
 800632a:	f1ca 0301 	rsb	r3, sl, #1
 800632e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006332:	f8cd b000 	str.w	fp, [sp]
 8006336:	9306      	str	r3, [sp, #24]
 8006338:	42b7      	cmp	r7, r6
 800633a:	d340      	bcc.n	80063be <__gethex+0x21e>
 800633c:	9802      	ldr	r0, [sp, #8]
 800633e:	9b00      	ldr	r3, [sp, #0]
 8006340:	f840 3b04 	str.w	r3, [r0], #4
 8006344:	eba0 0009 	sub.w	r0, r0, r9
 8006348:	1080      	asrs	r0, r0, #2
 800634a:	0146      	lsls	r6, r0, #5
 800634c:	6120      	str	r0, [r4, #16]
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fb50 	bl	80069f4 <__hi0bits>
 8006354:	1a30      	subs	r0, r6, r0
 8006356:	f8d8 6000 	ldr.w	r6, [r8]
 800635a:	42b0      	cmp	r0, r6
 800635c:	dd63      	ble.n	8006426 <__gethex+0x286>
 800635e:	1b87      	subs	r7, r0, r6
 8006360:	4639      	mov	r1, r7
 8006362:	4620      	mov	r0, r4
 8006364:	f000 feea 	bl	800713c <__any_on>
 8006368:	4682      	mov	sl, r0
 800636a:	b1a8      	cbz	r0, 8006398 <__gethex+0x1f8>
 800636c:	1e7b      	subs	r3, r7, #1
 800636e:	1159      	asrs	r1, r3, #5
 8006370:	f003 021f 	and.w	r2, r3, #31
 8006374:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006378:	f04f 0a01 	mov.w	sl, #1
 800637c:	fa0a f202 	lsl.w	r2, sl, r2
 8006380:	420a      	tst	r2, r1
 8006382:	d009      	beq.n	8006398 <__gethex+0x1f8>
 8006384:	4553      	cmp	r3, sl
 8006386:	dd05      	ble.n	8006394 <__gethex+0x1f4>
 8006388:	1eb9      	subs	r1, r7, #2
 800638a:	4620      	mov	r0, r4
 800638c:	f000 fed6 	bl	800713c <__any_on>
 8006390:	2800      	cmp	r0, #0
 8006392:	d145      	bne.n	8006420 <__gethex+0x280>
 8006394:	f04f 0a02 	mov.w	sl, #2
 8006398:	4639      	mov	r1, r7
 800639a:	4620      	mov	r0, r4
 800639c:	f7ff fe98 	bl	80060d0 <rshift>
 80063a0:	443d      	add	r5, r7
 80063a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80063a6:	42ab      	cmp	r3, r5
 80063a8:	da4c      	bge.n	8006444 <__gethex+0x2a4>
 80063aa:	ee18 0a10 	vmov	r0, s16
 80063ae:	4621      	mov	r1, r4
 80063b0:	f000 fa6a 	bl	8006888 <_Bfree>
 80063b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80063b6:	2300      	movs	r3, #0
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	27a3      	movs	r7, #163	; 0xa3
 80063bc:	e785      	b.n	80062ca <__gethex+0x12a>
 80063be:	1e73      	subs	r3, r6, #1
 80063c0:	9a05      	ldr	r2, [sp, #20]
 80063c2:	9303      	str	r3, [sp, #12]
 80063c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d019      	beq.n	8006400 <__gethex+0x260>
 80063cc:	f1bb 0f20 	cmp.w	fp, #32
 80063d0:	d107      	bne.n	80063e2 <__gethex+0x242>
 80063d2:	9b02      	ldr	r3, [sp, #8]
 80063d4:	9a00      	ldr	r2, [sp, #0]
 80063d6:	f843 2b04 	str.w	r2, [r3], #4
 80063da:	9302      	str	r3, [sp, #8]
 80063dc:	2300      	movs	r3, #0
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	469b      	mov	fp, r3
 80063e2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80063e6:	f7ff fec5 	bl	8006174 <__hexdig_fun>
 80063ea:	9b00      	ldr	r3, [sp, #0]
 80063ec:	f000 000f 	and.w	r0, r0, #15
 80063f0:	fa00 f00b 	lsl.w	r0, r0, fp
 80063f4:	4303      	orrs	r3, r0
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	f10b 0b04 	add.w	fp, fp, #4
 80063fc:	9b03      	ldr	r3, [sp, #12]
 80063fe:	e00d      	b.n	800641c <__gethex+0x27c>
 8006400:	9b03      	ldr	r3, [sp, #12]
 8006402:	9a06      	ldr	r2, [sp, #24]
 8006404:	4413      	add	r3, r2
 8006406:	42bb      	cmp	r3, r7
 8006408:	d3e0      	bcc.n	80063cc <__gethex+0x22c>
 800640a:	4618      	mov	r0, r3
 800640c:	9901      	ldr	r1, [sp, #4]
 800640e:	9307      	str	r3, [sp, #28]
 8006410:	4652      	mov	r2, sl
 8006412:	f001 f8e1 	bl	80075d8 <strncmp>
 8006416:	9b07      	ldr	r3, [sp, #28]
 8006418:	2800      	cmp	r0, #0
 800641a:	d1d7      	bne.n	80063cc <__gethex+0x22c>
 800641c:	461e      	mov	r6, r3
 800641e:	e78b      	b.n	8006338 <__gethex+0x198>
 8006420:	f04f 0a03 	mov.w	sl, #3
 8006424:	e7b8      	b.n	8006398 <__gethex+0x1f8>
 8006426:	da0a      	bge.n	800643e <__gethex+0x29e>
 8006428:	1a37      	subs	r7, r6, r0
 800642a:	4621      	mov	r1, r4
 800642c:	ee18 0a10 	vmov	r0, s16
 8006430:	463a      	mov	r2, r7
 8006432:	f000 fc45 	bl	8006cc0 <__lshift>
 8006436:	1bed      	subs	r5, r5, r7
 8006438:	4604      	mov	r4, r0
 800643a:	f100 0914 	add.w	r9, r0, #20
 800643e:	f04f 0a00 	mov.w	sl, #0
 8006442:	e7ae      	b.n	80063a2 <__gethex+0x202>
 8006444:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006448:	42a8      	cmp	r0, r5
 800644a:	dd72      	ble.n	8006532 <__gethex+0x392>
 800644c:	1b45      	subs	r5, r0, r5
 800644e:	42ae      	cmp	r6, r5
 8006450:	dc36      	bgt.n	80064c0 <__gethex+0x320>
 8006452:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006456:	2b02      	cmp	r3, #2
 8006458:	d02a      	beq.n	80064b0 <__gethex+0x310>
 800645a:	2b03      	cmp	r3, #3
 800645c:	d02c      	beq.n	80064b8 <__gethex+0x318>
 800645e:	2b01      	cmp	r3, #1
 8006460:	d115      	bne.n	800648e <__gethex+0x2ee>
 8006462:	42ae      	cmp	r6, r5
 8006464:	d113      	bne.n	800648e <__gethex+0x2ee>
 8006466:	2e01      	cmp	r6, #1
 8006468:	d10b      	bne.n	8006482 <__gethex+0x2e2>
 800646a:	9a04      	ldr	r2, [sp, #16]
 800646c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	2301      	movs	r3, #1
 8006474:	6123      	str	r3, [r4, #16]
 8006476:	f8c9 3000 	str.w	r3, [r9]
 800647a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800647c:	2762      	movs	r7, #98	; 0x62
 800647e:	601c      	str	r4, [r3, #0]
 8006480:	e723      	b.n	80062ca <__gethex+0x12a>
 8006482:	1e71      	subs	r1, r6, #1
 8006484:	4620      	mov	r0, r4
 8006486:	f000 fe59 	bl	800713c <__any_on>
 800648a:	2800      	cmp	r0, #0
 800648c:	d1ed      	bne.n	800646a <__gethex+0x2ca>
 800648e:	ee18 0a10 	vmov	r0, s16
 8006492:	4621      	mov	r1, r4
 8006494:	f000 f9f8 	bl	8006888 <_Bfree>
 8006498:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800649a:	2300      	movs	r3, #0
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	2750      	movs	r7, #80	; 0x50
 80064a0:	e713      	b.n	80062ca <__gethex+0x12a>
 80064a2:	bf00      	nop
 80064a4:	08008500 	.word	0x08008500
 80064a8:	08008484 	.word	0x08008484
 80064ac:	08008495 	.word	0x08008495
 80064b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1eb      	bne.n	800648e <__gethex+0x2ee>
 80064b6:	e7d8      	b.n	800646a <__gethex+0x2ca>
 80064b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1d5      	bne.n	800646a <__gethex+0x2ca>
 80064be:	e7e6      	b.n	800648e <__gethex+0x2ee>
 80064c0:	1e6f      	subs	r7, r5, #1
 80064c2:	f1ba 0f00 	cmp.w	sl, #0
 80064c6:	d131      	bne.n	800652c <__gethex+0x38c>
 80064c8:	b127      	cbz	r7, 80064d4 <__gethex+0x334>
 80064ca:	4639      	mov	r1, r7
 80064cc:	4620      	mov	r0, r4
 80064ce:	f000 fe35 	bl	800713c <__any_on>
 80064d2:	4682      	mov	sl, r0
 80064d4:	117b      	asrs	r3, r7, #5
 80064d6:	2101      	movs	r1, #1
 80064d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80064dc:	f007 071f 	and.w	r7, r7, #31
 80064e0:	fa01 f707 	lsl.w	r7, r1, r7
 80064e4:	421f      	tst	r7, r3
 80064e6:	4629      	mov	r1, r5
 80064e8:	4620      	mov	r0, r4
 80064ea:	bf18      	it	ne
 80064ec:	f04a 0a02 	orrne.w	sl, sl, #2
 80064f0:	1b76      	subs	r6, r6, r5
 80064f2:	f7ff fded 	bl	80060d0 <rshift>
 80064f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80064fa:	2702      	movs	r7, #2
 80064fc:	f1ba 0f00 	cmp.w	sl, #0
 8006500:	d048      	beq.n	8006594 <__gethex+0x3f4>
 8006502:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006506:	2b02      	cmp	r3, #2
 8006508:	d015      	beq.n	8006536 <__gethex+0x396>
 800650a:	2b03      	cmp	r3, #3
 800650c:	d017      	beq.n	800653e <__gethex+0x39e>
 800650e:	2b01      	cmp	r3, #1
 8006510:	d109      	bne.n	8006526 <__gethex+0x386>
 8006512:	f01a 0f02 	tst.w	sl, #2
 8006516:	d006      	beq.n	8006526 <__gethex+0x386>
 8006518:	f8d9 0000 	ldr.w	r0, [r9]
 800651c:	ea4a 0a00 	orr.w	sl, sl, r0
 8006520:	f01a 0f01 	tst.w	sl, #1
 8006524:	d10e      	bne.n	8006544 <__gethex+0x3a4>
 8006526:	f047 0710 	orr.w	r7, r7, #16
 800652a:	e033      	b.n	8006594 <__gethex+0x3f4>
 800652c:	f04f 0a01 	mov.w	sl, #1
 8006530:	e7d0      	b.n	80064d4 <__gethex+0x334>
 8006532:	2701      	movs	r7, #1
 8006534:	e7e2      	b.n	80064fc <__gethex+0x35c>
 8006536:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006538:	f1c3 0301 	rsb	r3, r3, #1
 800653c:	9315      	str	r3, [sp, #84]	; 0x54
 800653e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006540:	2b00      	cmp	r3, #0
 8006542:	d0f0      	beq.n	8006526 <__gethex+0x386>
 8006544:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006548:	f104 0314 	add.w	r3, r4, #20
 800654c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006550:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006554:	f04f 0c00 	mov.w	ip, #0
 8006558:	4618      	mov	r0, r3
 800655a:	f853 2b04 	ldr.w	r2, [r3], #4
 800655e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006562:	d01c      	beq.n	800659e <__gethex+0x3fe>
 8006564:	3201      	adds	r2, #1
 8006566:	6002      	str	r2, [r0, #0]
 8006568:	2f02      	cmp	r7, #2
 800656a:	f104 0314 	add.w	r3, r4, #20
 800656e:	d13f      	bne.n	80065f0 <__gethex+0x450>
 8006570:	f8d8 2000 	ldr.w	r2, [r8]
 8006574:	3a01      	subs	r2, #1
 8006576:	42b2      	cmp	r2, r6
 8006578:	d10a      	bne.n	8006590 <__gethex+0x3f0>
 800657a:	1171      	asrs	r1, r6, #5
 800657c:	2201      	movs	r2, #1
 800657e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006582:	f006 061f 	and.w	r6, r6, #31
 8006586:	fa02 f606 	lsl.w	r6, r2, r6
 800658a:	421e      	tst	r6, r3
 800658c:	bf18      	it	ne
 800658e:	4617      	movne	r7, r2
 8006590:	f047 0720 	orr.w	r7, r7, #32
 8006594:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006596:	601c      	str	r4, [r3, #0]
 8006598:	9b04      	ldr	r3, [sp, #16]
 800659a:	601d      	str	r5, [r3, #0]
 800659c:	e695      	b.n	80062ca <__gethex+0x12a>
 800659e:	4299      	cmp	r1, r3
 80065a0:	f843 cc04 	str.w	ip, [r3, #-4]
 80065a4:	d8d8      	bhi.n	8006558 <__gethex+0x3b8>
 80065a6:	68a3      	ldr	r3, [r4, #8]
 80065a8:	459b      	cmp	fp, r3
 80065aa:	db19      	blt.n	80065e0 <__gethex+0x440>
 80065ac:	6861      	ldr	r1, [r4, #4]
 80065ae:	ee18 0a10 	vmov	r0, s16
 80065b2:	3101      	adds	r1, #1
 80065b4:	f000 f928 	bl	8006808 <_Balloc>
 80065b8:	4681      	mov	r9, r0
 80065ba:	b918      	cbnz	r0, 80065c4 <__gethex+0x424>
 80065bc:	4b1a      	ldr	r3, [pc, #104]	; (8006628 <__gethex+0x488>)
 80065be:	4602      	mov	r2, r0
 80065c0:	2184      	movs	r1, #132	; 0x84
 80065c2:	e6a8      	b.n	8006316 <__gethex+0x176>
 80065c4:	6922      	ldr	r2, [r4, #16]
 80065c6:	3202      	adds	r2, #2
 80065c8:	f104 010c 	add.w	r1, r4, #12
 80065cc:	0092      	lsls	r2, r2, #2
 80065ce:	300c      	adds	r0, #12
 80065d0:	f000 f90c 	bl	80067ec <memcpy>
 80065d4:	4621      	mov	r1, r4
 80065d6:	ee18 0a10 	vmov	r0, s16
 80065da:	f000 f955 	bl	8006888 <_Bfree>
 80065de:	464c      	mov	r4, r9
 80065e0:	6923      	ldr	r3, [r4, #16]
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80065e8:	6122      	str	r2, [r4, #16]
 80065ea:	2201      	movs	r2, #1
 80065ec:	615a      	str	r2, [r3, #20]
 80065ee:	e7bb      	b.n	8006568 <__gethex+0x3c8>
 80065f0:	6922      	ldr	r2, [r4, #16]
 80065f2:	455a      	cmp	r2, fp
 80065f4:	dd0b      	ble.n	800660e <__gethex+0x46e>
 80065f6:	2101      	movs	r1, #1
 80065f8:	4620      	mov	r0, r4
 80065fa:	f7ff fd69 	bl	80060d0 <rshift>
 80065fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006602:	3501      	adds	r5, #1
 8006604:	42ab      	cmp	r3, r5
 8006606:	f6ff aed0 	blt.w	80063aa <__gethex+0x20a>
 800660a:	2701      	movs	r7, #1
 800660c:	e7c0      	b.n	8006590 <__gethex+0x3f0>
 800660e:	f016 061f 	ands.w	r6, r6, #31
 8006612:	d0fa      	beq.n	800660a <__gethex+0x46a>
 8006614:	449a      	add	sl, r3
 8006616:	f1c6 0620 	rsb	r6, r6, #32
 800661a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800661e:	f000 f9e9 	bl	80069f4 <__hi0bits>
 8006622:	42b0      	cmp	r0, r6
 8006624:	dbe7      	blt.n	80065f6 <__gethex+0x456>
 8006626:	e7f0      	b.n	800660a <__gethex+0x46a>
 8006628:	08008484 	.word	0x08008484

0800662c <L_shift>:
 800662c:	f1c2 0208 	rsb	r2, r2, #8
 8006630:	0092      	lsls	r2, r2, #2
 8006632:	b570      	push	{r4, r5, r6, lr}
 8006634:	f1c2 0620 	rsb	r6, r2, #32
 8006638:	6843      	ldr	r3, [r0, #4]
 800663a:	6804      	ldr	r4, [r0, #0]
 800663c:	fa03 f506 	lsl.w	r5, r3, r6
 8006640:	432c      	orrs	r4, r5
 8006642:	40d3      	lsrs	r3, r2
 8006644:	6004      	str	r4, [r0, #0]
 8006646:	f840 3f04 	str.w	r3, [r0, #4]!
 800664a:	4288      	cmp	r0, r1
 800664c:	d3f4      	bcc.n	8006638 <L_shift+0xc>
 800664e:	bd70      	pop	{r4, r5, r6, pc}

08006650 <__match>:
 8006650:	b530      	push	{r4, r5, lr}
 8006652:	6803      	ldr	r3, [r0, #0]
 8006654:	3301      	adds	r3, #1
 8006656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800665a:	b914      	cbnz	r4, 8006662 <__match+0x12>
 800665c:	6003      	str	r3, [r0, #0]
 800665e:	2001      	movs	r0, #1
 8006660:	bd30      	pop	{r4, r5, pc}
 8006662:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006666:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800666a:	2d19      	cmp	r5, #25
 800666c:	bf98      	it	ls
 800666e:	3220      	addls	r2, #32
 8006670:	42a2      	cmp	r2, r4
 8006672:	d0f0      	beq.n	8006656 <__match+0x6>
 8006674:	2000      	movs	r0, #0
 8006676:	e7f3      	b.n	8006660 <__match+0x10>

08006678 <__hexnan>:
 8006678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667c:	680b      	ldr	r3, [r1, #0]
 800667e:	6801      	ldr	r1, [r0, #0]
 8006680:	115e      	asrs	r6, r3, #5
 8006682:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006686:	f013 031f 	ands.w	r3, r3, #31
 800668a:	b087      	sub	sp, #28
 800668c:	bf18      	it	ne
 800668e:	3604      	addne	r6, #4
 8006690:	2500      	movs	r5, #0
 8006692:	1f37      	subs	r7, r6, #4
 8006694:	4682      	mov	sl, r0
 8006696:	4690      	mov	r8, r2
 8006698:	9301      	str	r3, [sp, #4]
 800669a:	f846 5c04 	str.w	r5, [r6, #-4]
 800669e:	46b9      	mov	r9, r7
 80066a0:	463c      	mov	r4, r7
 80066a2:	9502      	str	r5, [sp, #8]
 80066a4:	46ab      	mov	fp, r5
 80066a6:	784a      	ldrb	r2, [r1, #1]
 80066a8:	1c4b      	adds	r3, r1, #1
 80066aa:	9303      	str	r3, [sp, #12]
 80066ac:	b342      	cbz	r2, 8006700 <__hexnan+0x88>
 80066ae:	4610      	mov	r0, r2
 80066b0:	9105      	str	r1, [sp, #20]
 80066b2:	9204      	str	r2, [sp, #16]
 80066b4:	f7ff fd5e 	bl	8006174 <__hexdig_fun>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d14f      	bne.n	800675c <__hexnan+0xe4>
 80066bc:	9a04      	ldr	r2, [sp, #16]
 80066be:	9905      	ldr	r1, [sp, #20]
 80066c0:	2a20      	cmp	r2, #32
 80066c2:	d818      	bhi.n	80066f6 <__hexnan+0x7e>
 80066c4:	9b02      	ldr	r3, [sp, #8]
 80066c6:	459b      	cmp	fp, r3
 80066c8:	dd13      	ble.n	80066f2 <__hexnan+0x7a>
 80066ca:	454c      	cmp	r4, r9
 80066cc:	d206      	bcs.n	80066dc <__hexnan+0x64>
 80066ce:	2d07      	cmp	r5, #7
 80066d0:	dc04      	bgt.n	80066dc <__hexnan+0x64>
 80066d2:	462a      	mov	r2, r5
 80066d4:	4649      	mov	r1, r9
 80066d6:	4620      	mov	r0, r4
 80066d8:	f7ff ffa8 	bl	800662c <L_shift>
 80066dc:	4544      	cmp	r4, r8
 80066de:	d950      	bls.n	8006782 <__hexnan+0x10a>
 80066e0:	2300      	movs	r3, #0
 80066e2:	f1a4 0904 	sub.w	r9, r4, #4
 80066e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80066ea:	f8cd b008 	str.w	fp, [sp, #8]
 80066ee:	464c      	mov	r4, r9
 80066f0:	461d      	mov	r5, r3
 80066f2:	9903      	ldr	r1, [sp, #12]
 80066f4:	e7d7      	b.n	80066a6 <__hexnan+0x2e>
 80066f6:	2a29      	cmp	r2, #41	; 0x29
 80066f8:	d156      	bne.n	80067a8 <__hexnan+0x130>
 80066fa:	3102      	adds	r1, #2
 80066fc:	f8ca 1000 	str.w	r1, [sl]
 8006700:	f1bb 0f00 	cmp.w	fp, #0
 8006704:	d050      	beq.n	80067a8 <__hexnan+0x130>
 8006706:	454c      	cmp	r4, r9
 8006708:	d206      	bcs.n	8006718 <__hexnan+0xa0>
 800670a:	2d07      	cmp	r5, #7
 800670c:	dc04      	bgt.n	8006718 <__hexnan+0xa0>
 800670e:	462a      	mov	r2, r5
 8006710:	4649      	mov	r1, r9
 8006712:	4620      	mov	r0, r4
 8006714:	f7ff ff8a 	bl	800662c <L_shift>
 8006718:	4544      	cmp	r4, r8
 800671a:	d934      	bls.n	8006786 <__hexnan+0x10e>
 800671c:	f1a8 0204 	sub.w	r2, r8, #4
 8006720:	4623      	mov	r3, r4
 8006722:	f853 1b04 	ldr.w	r1, [r3], #4
 8006726:	f842 1f04 	str.w	r1, [r2, #4]!
 800672a:	429f      	cmp	r7, r3
 800672c:	d2f9      	bcs.n	8006722 <__hexnan+0xaa>
 800672e:	1b3b      	subs	r3, r7, r4
 8006730:	f023 0303 	bic.w	r3, r3, #3
 8006734:	3304      	adds	r3, #4
 8006736:	3401      	adds	r4, #1
 8006738:	3e03      	subs	r6, #3
 800673a:	42b4      	cmp	r4, r6
 800673c:	bf88      	it	hi
 800673e:	2304      	movhi	r3, #4
 8006740:	4443      	add	r3, r8
 8006742:	2200      	movs	r2, #0
 8006744:	f843 2b04 	str.w	r2, [r3], #4
 8006748:	429f      	cmp	r7, r3
 800674a:	d2fb      	bcs.n	8006744 <__hexnan+0xcc>
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	b91b      	cbnz	r3, 8006758 <__hexnan+0xe0>
 8006750:	4547      	cmp	r7, r8
 8006752:	d127      	bne.n	80067a4 <__hexnan+0x12c>
 8006754:	2301      	movs	r3, #1
 8006756:	603b      	str	r3, [r7, #0]
 8006758:	2005      	movs	r0, #5
 800675a:	e026      	b.n	80067aa <__hexnan+0x132>
 800675c:	3501      	adds	r5, #1
 800675e:	2d08      	cmp	r5, #8
 8006760:	f10b 0b01 	add.w	fp, fp, #1
 8006764:	dd06      	ble.n	8006774 <__hexnan+0xfc>
 8006766:	4544      	cmp	r4, r8
 8006768:	d9c3      	bls.n	80066f2 <__hexnan+0x7a>
 800676a:	2300      	movs	r3, #0
 800676c:	f844 3c04 	str.w	r3, [r4, #-4]
 8006770:	2501      	movs	r5, #1
 8006772:	3c04      	subs	r4, #4
 8006774:	6822      	ldr	r2, [r4, #0]
 8006776:	f000 000f 	and.w	r0, r0, #15
 800677a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800677e:	6022      	str	r2, [r4, #0]
 8006780:	e7b7      	b.n	80066f2 <__hexnan+0x7a>
 8006782:	2508      	movs	r5, #8
 8006784:	e7b5      	b.n	80066f2 <__hexnan+0x7a>
 8006786:	9b01      	ldr	r3, [sp, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0df      	beq.n	800674c <__hexnan+0xd4>
 800678c:	f04f 32ff 	mov.w	r2, #4294967295
 8006790:	f1c3 0320 	rsb	r3, r3, #32
 8006794:	fa22 f303 	lsr.w	r3, r2, r3
 8006798:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800679c:	401a      	ands	r2, r3
 800679e:	f846 2c04 	str.w	r2, [r6, #-4]
 80067a2:	e7d3      	b.n	800674c <__hexnan+0xd4>
 80067a4:	3f04      	subs	r7, #4
 80067a6:	e7d1      	b.n	800674c <__hexnan+0xd4>
 80067a8:	2004      	movs	r0, #4
 80067aa:	b007      	add	sp, #28
 80067ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080067b0 <_localeconv_r>:
 80067b0:	4800      	ldr	r0, [pc, #0]	; (80067b4 <_localeconv_r+0x4>)
 80067b2:	4770      	bx	lr
 80067b4:	20000160 	.word	0x20000160

080067b8 <malloc>:
 80067b8:	4b02      	ldr	r3, [pc, #8]	; (80067c4 <malloc+0xc>)
 80067ba:	4601      	mov	r1, r0
 80067bc:	6818      	ldr	r0, [r3, #0]
 80067be:	f000 bd3d 	b.w	800723c <_malloc_r>
 80067c2:	bf00      	nop
 80067c4:	20000008 	.word	0x20000008

080067c8 <__ascii_mbtowc>:
 80067c8:	b082      	sub	sp, #8
 80067ca:	b901      	cbnz	r1, 80067ce <__ascii_mbtowc+0x6>
 80067cc:	a901      	add	r1, sp, #4
 80067ce:	b142      	cbz	r2, 80067e2 <__ascii_mbtowc+0x1a>
 80067d0:	b14b      	cbz	r3, 80067e6 <__ascii_mbtowc+0x1e>
 80067d2:	7813      	ldrb	r3, [r2, #0]
 80067d4:	600b      	str	r3, [r1, #0]
 80067d6:	7812      	ldrb	r2, [r2, #0]
 80067d8:	1e10      	subs	r0, r2, #0
 80067da:	bf18      	it	ne
 80067dc:	2001      	movne	r0, #1
 80067de:	b002      	add	sp, #8
 80067e0:	4770      	bx	lr
 80067e2:	4610      	mov	r0, r2
 80067e4:	e7fb      	b.n	80067de <__ascii_mbtowc+0x16>
 80067e6:	f06f 0001 	mvn.w	r0, #1
 80067ea:	e7f8      	b.n	80067de <__ascii_mbtowc+0x16>

080067ec <memcpy>:
 80067ec:	440a      	add	r2, r1
 80067ee:	4291      	cmp	r1, r2
 80067f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80067f4:	d100      	bne.n	80067f8 <memcpy+0xc>
 80067f6:	4770      	bx	lr
 80067f8:	b510      	push	{r4, lr}
 80067fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006802:	4291      	cmp	r1, r2
 8006804:	d1f9      	bne.n	80067fa <memcpy+0xe>
 8006806:	bd10      	pop	{r4, pc}

08006808 <_Balloc>:
 8006808:	b570      	push	{r4, r5, r6, lr}
 800680a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800680c:	4604      	mov	r4, r0
 800680e:	460d      	mov	r5, r1
 8006810:	b976      	cbnz	r6, 8006830 <_Balloc+0x28>
 8006812:	2010      	movs	r0, #16
 8006814:	f7ff ffd0 	bl	80067b8 <malloc>
 8006818:	4602      	mov	r2, r0
 800681a:	6260      	str	r0, [r4, #36]	; 0x24
 800681c:	b920      	cbnz	r0, 8006828 <_Balloc+0x20>
 800681e:	4b18      	ldr	r3, [pc, #96]	; (8006880 <_Balloc+0x78>)
 8006820:	4818      	ldr	r0, [pc, #96]	; (8006884 <_Balloc+0x7c>)
 8006822:	2166      	movs	r1, #102	; 0x66
 8006824:	f000 fef8 	bl	8007618 <__assert_func>
 8006828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800682c:	6006      	str	r6, [r0, #0]
 800682e:	60c6      	str	r6, [r0, #12]
 8006830:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006832:	68f3      	ldr	r3, [r6, #12]
 8006834:	b183      	cbz	r3, 8006858 <_Balloc+0x50>
 8006836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800683e:	b9b8      	cbnz	r0, 8006870 <_Balloc+0x68>
 8006840:	2101      	movs	r1, #1
 8006842:	fa01 f605 	lsl.w	r6, r1, r5
 8006846:	1d72      	adds	r2, r6, #5
 8006848:	0092      	lsls	r2, r2, #2
 800684a:	4620      	mov	r0, r4
 800684c:	f000 fc97 	bl	800717e <_calloc_r>
 8006850:	b160      	cbz	r0, 800686c <_Balloc+0x64>
 8006852:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006856:	e00e      	b.n	8006876 <_Balloc+0x6e>
 8006858:	2221      	movs	r2, #33	; 0x21
 800685a:	2104      	movs	r1, #4
 800685c:	4620      	mov	r0, r4
 800685e:	f000 fc8e 	bl	800717e <_calloc_r>
 8006862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006864:	60f0      	str	r0, [r6, #12]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1e4      	bne.n	8006836 <_Balloc+0x2e>
 800686c:	2000      	movs	r0, #0
 800686e:	bd70      	pop	{r4, r5, r6, pc}
 8006870:	6802      	ldr	r2, [r0, #0]
 8006872:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006876:	2300      	movs	r3, #0
 8006878:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800687c:	e7f7      	b.n	800686e <_Balloc+0x66>
 800687e:	bf00      	nop
 8006880:	0800840e 	.word	0x0800840e
 8006884:	08008514 	.word	0x08008514

08006888 <_Bfree>:
 8006888:	b570      	push	{r4, r5, r6, lr}
 800688a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800688c:	4605      	mov	r5, r0
 800688e:	460c      	mov	r4, r1
 8006890:	b976      	cbnz	r6, 80068b0 <_Bfree+0x28>
 8006892:	2010      	movs	r0, #16
 8006894:	f7ff ff90 	bl	80067b8 <malloc>
 8006898:	4602      	mov	r2, r0
 800689a:	6268      	str	r0, [r5, #36]	; 0x24
 800689c:	b920      	cbnz	r0, 80068a8 <_Bfree+0x20>
 800689e:	4b09      	ldr	r3, [pc, #36]	; (80068c4 <_Bfree+0x3c>)
 80068a0:	4809      	ldr	r0, [pc, #36]	; (80068c8 <_Bfree+0x40>)
 80068a2:	218a      	movs	r1, #138	; 0x8a
 80068a4:	f000 feb8 	bl	8007618 <__assert_func>
 80068a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068ac:	6006      	str	r6, [r0, #0]
 80068ae:	60c6      	str	r6, [r0, #12]
 80068b0:	b13c      	cbz	r4, 80068c2 <_Bfree+0x3a>
 80068b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068b4:	6862      	ldr	r2, [r4, #4]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068bc:	6021      	str	r1, [r4, #0]
 80068be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80068c2:	bd70      	pop	{r4, r5, r6, pc}
 80068c4:	0800840e 	.word	0x0800840e
 80068c8:	08008514 	.word	0x08008514

080068cc <__multadd>:
 80068cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d0:	690e      	ldr	r6, [r1, #16]
 80068d2:	4607      	mov	r7, r0
 80068d4:	4698      	mov	r8, r3
 80068d6:	460c      	mov	r4, r1
 80068d8:	f101 0014 	add.w	r0, r1, #20
 80068dc:	2300      	movs	r3, #0
 80068de:	6805      	ldr	r5, [r0, #0]
 80068e0:	b2a9      	uxth	r1, r5
 80068e2:	fb02 8101 	mla	r1, r2, r1, r8
 80068e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80068ea:	0c2d      	lsrs	r5, r5, #16
 80068ec:	fb02 c505 	mla	r5, r2, r5, ip
 80068f0:	b289      	uxth	r1, r1
 80068f2:	3301      	adds	r3, #1
 80068f4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80068f8:	429e      	cmp	r6, r3
 80068fa:	f840 1b04 	str.w	r1, [r0], #4
 80068fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006902:	dcec      	bgt.n	80068de <__multadd+0x12>
 8006904:	f1b8 0f00 	cmp.w	r8, #0
 8006908:	d022      	beq.n	8006950 <__multadd+0x84>
 800690a:	68a3      	ldr	r3, [r4, #8]
 800690c:	42b3      	cmp	r3, r6
 800690e:	dc19      	bgt.n	8006944 <__multadd+0x78>
 8006910:	6861      	ldr	r1, [r4, #4]
 8006912:	4638      	mov	r0, r7
 8006914:	3101      	adds	r1, #1
 8006916:	f7ff ff77 	bl	8006808 <_Balloc>
 800691a:	4605      	mov	r5, r0
 800691c:	b928      	cbnz	r0, 800692a <__multadd+0x5e>
 800691e:	4602      	mov	r2, r0
 8006920:	4b0d      	ldr	r3, [pc, #52]	; (8006958 <__multadd+0x8c>)
 8006922:	480e      	ldr	r0, [pc, #56]	; (800695c <__multadd+0x90>)
 8006924:	21b5      	movs	r1, #181	; 0xb5
 8006926:	f000 fe77 	bl	8007618 <__assert_func>
 800692a:	6922      	ldr	r2, [r4, #16]
 800692c:	3202      	adds	r2, #2
 800692e:	f104 010c 	add.w	r1, r4, #12
 8006932:	0092      	lsls	r2, r2, #2
 8006934:	300c      	adds	r0, #12
 8006936:	f7ff ff59 	bl	80067ec <memcpy>
 800693a:	4621      	mov	r1, r4
 800693c:	4638      	mov	r0, r7
 800693e:	f7ff ffa3 	bl	8006888 <_Bfree>
 8006942:	462c      	mov	r4, r5
 8006944:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006948:	3601      	adds	r6, #1
 800694a:	f8c3 8014 	str.w	r8, [r3, #20]
 800694e:	6126      	str	r6, [r4, #16]
 8006950:	4620      	mov	r0, r4
 8006952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006956:	bf00      	nop
 8006958:	08008484 	.word	0x08008484
 800695c:	08008514 	.word	0x08008514

08006960 <__s2b>:
 8006960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006964:	460c      	mov	r4, r1
 8006966:	4615      	mov	r5, r2
 8006968:	461f      	mov	r7, r3
 800696a:	2209      	movs	r2, #9
 800696c:	3308      	adds	r3, #8
 800696e:	4606      	mov	r6, r0
 8006970:	fb93 f3f2 	sdiv	r3, r3, r2
 8006974:	2100      	movs	r1, #0
 8006976:	2201      	movs	r2, #1
 8006978:	429a      	cmp	r2, r3
 800697a:	db09      	blt.n	8006990 <__s2b+0x30>
 800697c:	4630      	mov	r0, r6
 800697e:	f7ff ff43 	bl	8006808 <_Balloc>
 8006982:	b940      	cbnz	r0, 8006996 <__s2b+0x36>
 8006984:	4602      	mov	r2, r0
 8006986:	4b19      	ldr	r3, [pc, #100]	; (80069ec <__s2b+0x8c>)
 8006988:	4819      	ldr	r0, [pc, #100]	; (80069f0 <__s2b+0x90>)
 800698a:	21ce      	movs	r1, #206	; 0xce
 800698c:	f000 fe44 	bl	8007618 <__assert_func>
 8006990:	0052      	lsls	r2, r2, #1
 8006992:	3101      	adds	r1, #1
 8006994:	e7f0      	b.n	8006978 <__s2b+0x18>
 8006996:	9b08      	ldr	r3, [sp, #32]
 8006998:	6143      	str	r3, [r0, #20]
 800699a:	2d09      	cmp	r5, #9
 800699c:	f04f 0301 	mov.w	r3, #1
 80069a0:	6103      	str	r3, [r0, #16]
 80069a2:	dd16      	ble.n	80069d2 <__s2b+0x72>
 80069a4:	f104 0909 	add.w	r9, r4, #9
 80069a8:	46c8      	mov	r8, r9
 80069aa:	442c      	add	r4, r5
 80069ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 80069b0:	4601      	mov	r1, r0
 80069b2:	3b30      	subs	r3, #48	; 0x30
 80069b4:	220a      	movs	r2, #10
 80069b6:	4630      	mov	r0, r6
 80069b8:	f7ff ff88 	bl	80068cc <__multadd>
 80069bc:	45a0      	cmp	r8, r4
 80069be:	d1f5      	bne.n	80069ac <__s2b+0x4c>
 80069c0:	f1a5 0408 	sub.w	r4, r5, #8
 80069c4:	444c      	add	r4, r9
 80069c6:	1b2d      	subs	r5, r5, r4
 80069c8:	1963      	adds	r3, r4, r5
 80069ca:	42bb      	cmp	r3, r7
 80069cc:	db04      	blt.n	80069d8 <__s2b+0x78>
 80069ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069d2:	340a      	adds	r4, #10
 80069d4:	2509      	movs	r5, #9
 80069d6:	e7f6      	b.n	80069c6 <__s2b+0x66>
 80069d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80069dc:	4601      	mov	r1, r0
 80069de:	3b30      	subs	r3, #48	; 0x30
 80069e0:	220a      	movs	r2, #10
 80069e2:	4630      	mov	r0, r6
 80069e4:	f7ff ff72 	bl	80068cc <__multadd>
 80069e8:	e7ee      	b.n	80069c8 <__s2b+0x68>
 80069ea:	bf00      	nop
 80069ec:	08008484 	.word	0x08008484
 80069f0:	08008514 	.word	0x08008514

080069f4 <__hi0bits>:
 80069f4:	0c03      	lsrs	r3, r0, #16
 80069f6:	041b      	lsls	r3, r3, #16
 80069f8:	b9d3      	cbnz	r3, 8006a30 <__hi0bits+0x3c>
 80069fa:	0400      	lsls	r0, r0, #16
 80069fc:	2310      	movs	r3, #16
 80069fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006a02:	bf04      	itt	eq
 8006a04:	0200      	lsleq	r0, r0, #8
 8006a06:	3308      	addeq	r3, #8
 8006a08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006a0c:	bf04      	itt	eq
 8006a0e:	0100      	lsleq	r0, r0, #4
 8006a10:	3304      	addeq	r3, #4
 8006a12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006a16:	bf04      	itt	eq
 8006a18:	0080      	lsleq	r0, r0, #2
 8006a1a:	3302      	addeq	r3, #2
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	db05      	blt.n	8006a2c <__hi0bits+0x38>
 8006a20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006a24:	f103 0301 	add.w	r3, r3, #1
 8006a28:	bf08      	it	eq
 8006a2a:	2320      	moveq	r3, #32
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	4770      	bx	lr
 8006a30:	2300      	movs	r3, #0
 8006a32:	e7e4      	b.n	80069fe <__hi0bits+0xa>

08006a34 <__lo0bits>:
 8006a34:	6803      	ldr	r3, [r0, #0]
 8006a36:	f013 0207 	ands.w	r2, r3, #7
 8006a3a:	4601      	mov	r1, r0
 8006a3c:	d00b      	beq.n	8006a56 <__lo0bits+0x22>
 8006a3e:	07da      	lsls	r2, r3, #31
 8006a40:	d424      	bmi.n	8006a8c <__lo0bits+0x58>
 8006a42:	0798      	lsls	r0, r3, #30
 8006a44:	bf49      	itett	mi
 8006a46:	085b      	lsrmi	r3, r3, #1
 8006a48:	089b      	lsrpl	r3, r3, #2
 8006a4a:	2001      	movmi	r0, #1
 8006a4c:	600b      	strmi	r3, [r1, #0]
 8006a4e:	bf5c      	itt	pl
 8006a50:	600b      	strpl	r3, [r1, #0]
 8006a52:	2002      	movpl	r0, #2
 8006a54:	4770      	bx	lr
 8006a56:	b298      	uxth	r0, r3
 8006a58:	b9b0      	cbnz	r0, 8006a88 <__lo0bits+0x54>
 8006a5a:	0c1b      	lsrs	r3, r3, #16
 8006a5c:	2010      	movs	r0, #16
 8006a5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006a62:	bf04      	itt	eq
 8006a64:	0a1b      	lsreq	r3, r3, #8
 8006a66:	3008      	addeq	r0, #8
 8006a68:	071a      	lsls	r2, r3, #28
 8006a6a:	bf04      	itt	eq
 8006a6c:	091b      	lsreq	r3, r3, #4
 8006a6e:	3004      	addeq	r0, #4
 8006a70:	079a      	lsls	r2, r3, #30
 8006a72:	bf04      	itt	eq
 8006a74:	089b      	lsreq	r3, r3, #2
 8006a76:	3002      	addeq	r0, #2
 8006a78:	07da      	lsls	r2, r3, #31
 8006a7a:	d403      	bmi.n	8006a84 <__lo0bits+0x50>
 8006a7c:	085b      	lsrs	r3, r3, #1
 8006a7e:	f100 0001 	add.w	r0, r0, #1
 8006a82:	d005      	beq.n	8006a90 <__lo0bits+0x5c>
 8006a84:	600b      	str	r3, [r1, #0]
 8006a86:	4770      	bx	lr
 8006a88:	4610      	mov	r0, r2
 8006a8a:	e7e8      	b.n	8006a5e <__lo0bits+0x2a>
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	4770      	bx	lr
 8006a90:	2020      	movs	r0, #32
 8006a92:	4770      	bx	lr

08006a94 <__i2b>:
 8006a94:	b510      	push	{r4, lr}
 8006a96:	460c      	mov	r4, r1
 8006a98:	2101      	movs	r1, #1
 8006a9a:	f7ff feb5 	bl	8006808 <_Balloc>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	b928      	cbnz	r0, 8006aae <__i2b+0x1a>
 8006aa2:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <__i2b+0x24>)
 8006aa4:	4805      	ldr	r0, [pc, #20]	; (8006abc <__i2b+0x28>)
 8006aa6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006aaa:	f000 fdb5 	bl	8007618 <__assert_func>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	6144      	str	r4, [r0, #20]
 8006ab2:	6103      	str	r3, [r0, #16]
 8006ab4:	bd10      	pop	{r4, pc}
 8006ab6:	bf00      	nop
 8006ab8:	08008484 	.word	0x08008484
 8006abc:	08008514 	.word	0x08008514

08006ac0 <__multiply>:
 8006ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	690a      	ldr	r2, [r1, #16]
 8006ac8:	6923      	ldr	r3, [r4, #16]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	bfb8      	it	lt
 8006ace:	460b      	movlt	r3, r1
 8006ad0:	460d      	mov	r5, r1
 8006ad2:	bfbc      	itt	lt
 8006ad4:	4625      	movlt	r5, r4
 8006ad6:	461c      	movlt	r4, r3
 8006ad8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006adc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006ae0:	68ab      	ldr	r3, [r5, #8]
 8006ae2:	6869      	ldr	r1, [r5, #4]
 8006ae4:	eb0a 0709 	add.w	r7, sl, r9
 8006ae8:	42bb      	cmp	r3, r7
 8006aea:	b085      	sub	sp, #20
 8006aec:	bfb8      	it	lt
 8006aee:	3101      	addlt	r1, #1
 8006af0:	f7ff fe8a 	bl	8006808 <_Balloc>
 8006af4:	b930      	cbnz	r0, 8006b04 <__multiply+0x44>
 8006af6:	4602      	mov	r2, r0
 8006af8:	4b42      	ldr	r3, [pc, #264]	; (8006c04 <__multiply+0x144>)
 8006afa:	4843      	ldr	r0, [pc, #268]	; (8006c08 <__multiply+0x148>)
 8006afc:	f240 115d 	movw	r1, #349	; 0x15d
 8006b00:	f000 fd8a 	bl	8007618 <__assert_func>
 8006b04:	f100 0614 	add.w	r6, r0, #20
 8006b08:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006b0c:	4633      	mov	r3, r6
 8006b0e:	2200      	movs	r2, #0
 8006b10:	4543      	cmp	r3, r8
 8006b12:	d31e      	bcc.n	8006b52 <__multiply+0x92>
 8006b14:	f105 0c14 	add.w	ip, r5, #20
 8006b18:	f104 0314 	add.w	r3, r4, #20
 8006b1c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006b20:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006b24:	9202      	str	r2, [sp, #8]
 8006b26:	ebac 0205 	sub.w	r2, ip, r5
 8006b2a:	3a15      	subs	r2, #21
 8006b2c:	f022 0203 	bic.w	r2, r2, #3
 8006b30:	3204      	adds	r2, #4
 8006b32:	f105 0115 	add.w	r1, r5, #21
 8006b36:	458c      	cmp	ip, r1
 8006b38:	bf38      	it	cc
 8006b3a:	2204      	movcc	r2, #4
 8006b3c:	9201      	str	r2, [sp, #4]
 8006b3e:	9a02      	ldr	r2, [sp, #8]
 8006b40:	9303      	str	r3, [sp, #12]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d808      	bhi.n	8006b58 <__multiply+0x98>
 8006b46:	2f00      	cmp	r7, #0
 8006b48:	dc55      	bgt.n	8006bf6 <__multiply+0x136>
 8006b4a:	6107      	str	r7, [r0, #16]
 8006b4c:	b005      	add	sp, #20
 8006b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b52:	f843 2b04 	str.w	r2, [r3], #4
 8006b56:	e7db      	b.n	8006b10 <__multiply+0x50>
 8006b58:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b5c:	f1ba 0f00 	cmp.w	sl, #0
 8006b60:	d020      	beq.n	8006ba4 <__multiply+0xe4>
 8006b62:	f105 0e14 	add.w	lr, r5, #20
 8006b66:	46b1      	mov	r9, r6
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006b6e:	f8d9 b000 	ldr.w	fp, [r9]
 8006b72:	b2a1      	uxth	r1, r4
 8006b74:	fa1f fb8b 	uxth.w	fp, fp
 8006b78:	fb0a b101 	mla	r1, sl, r1, fp
 8006b7c:	4411      	add	r1, r2
 8006b7e:	f8d9 2000 	ldr.w	r2, [r9]
 8006b82:	0c24      	lsrs	r4, r4, #16
 8006b84:	0c12      	lsrs	r2, r2, #16
 8006b86:	fb0a 2404 	mla	r4, sl, r4, r2
 8006b8a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006b8e:	b289      	uxth	r1, r1
 8006b90:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006b94:	45f4      	cmp	ip, lr
 8006b96:	f849 1b04 	str.w	r1, [r9], #4
 8006b9a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006b9e:	d8e4      	bhi.n	8006b6a <__multiply+0xaa>
 8006ba0:	9901      	ldr	r1, [sp, #4]
 8006ba2:	5072      	str	r2, [r6, r1]
 8006ba4:	9a03      	ldr	r2, [sp, #12]
 8006ba6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006baa:	3304      	adds	r3, #4
 8006bac:	f1b9 0f00 	cmp.w	r9, #0
 8006bb0:	d01f      	beq.n	8006bf2 <__multiply+0x132>
 8006bb2:	6834      	ldr	r4, [r6, #0]
 8006bb4:	f105 0114 	add.w	r1, r5, #20
 8006bb8:	46b6      	mov	lr, r6
 8006bba:	f04f 0a00 	mov.w	sl, #0
 8006bbe:	880a      	ldrh	r2, [r1, #0]
 8006bc0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006bc4:	fb09 b202 	mla	r2, r9, r2, fp
 8006bc8:	4492      	add	sl, r2
 8006bca:	b2a4      	uxth	r4, r4
 8006bcc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006bd0:	f84e 4b04 	str.w	r4, [lr], #4
 8006bd4:	f851 4b04 	ldr.w	r4, [r1], #4
 8006bd8:	f8be 2000 	ldrh.w	r2, [lr]
 8006bdc:	0c24      	lsrs	r4, r4, #16
 8006bde:	fb09 2404 	mla	r4, r9, r4, r2
 8006be2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006be6:	458c      	cmp	ip, r1
 8006be8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006bec:	d8e7      	bhi.n	8006bbe <__multiply+0xfe>
 8006bee:	9a01      	ldr	r2, [sp, #4]
 8006bf0:	50b4      	str	r4, [r6, r2]
 8006bf2:	3604      	adds	r6, #4
 8006bf4:	e7a3      	b.n	8006b3e <__multiply+0x7e>
 8006bf6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1a5      	bne.n	8006b4a <__multiply+0x8a>
 8006bfe:	3f01      	subs	r7, #1
 8006c00:	e7a1      	b.n	8006b46 <__multiply+0x86>
 8006c02:	bf00      	nop
 8006c04:	08008484 	.word	0x08008484
 8006c08:	08008514 	.word	0x08008514

08006c0c <__pow5mult>:
 8006c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c10:	4615      	mov	r5, r2
 8006c12:	f012 0203 	ands.w	r2, r2, #3
 8006c16:	4606      	mov	r6, r0
 8006c18:	460f      	mov	r7, r1
 8006c1a:	d007      	beq.n	8006c2c <__pow5mult+0x20>
 8006c1c:	4c25      	ldr	r4, [pc, #148]	; (8006cb4 <__pow5mult+0xa8>)
 8006c1e:	3a01      	subs	r2, #1
 8006c20:	2300      	movs	r3, #0
 8006c22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c26:	f7ff fe51 	bl	80068cc <__multadd>
 8006c2a:	4607      	mov	r7, r0
 8006c2c:	10ad      	asrs	r5, r5, #2
 8006c2e:	d03d      	beq.n	8006cac <__pow5mult+0xa0>
 8006c30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c32:	b97c      	cbnz	r4, 8006c54 <__pow5mult+0x48>
 8006c34:	2010      	movs	r0, #16
 8006c36:	f7ff fdbf 	bl	80067b8 <malloc>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	6270      	str	r0, [r6, #36]	; 0x24
 8006c3e:	b928      	cbnz	r0, 8006c4c <__pow5mult+0x40>
 8006c40:	4b1d      	ldr	r3, [pc, #116]	; (8006cb8 <__pow5mult+0xac>)
 8006c42:	481e      	ldr	r0, [pc, #120]	; (8006cbc <__pow5mult+0xb0>)
 8006c44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006c48:	f000 fce6 	bl	8007618 <__assert_func>
 8006c4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c50:	6004      	str	r4, [r0, #0]
 8006c52:	60c4      	str	r4, [r0, #12]
 8006c54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006c58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c5c:	b94c      	cbnz	r4, 8006c72 <__pow5mult+0x66>
 8006c5e:	f240 2171 	movw	r1, #625	; 0x271
 8006c62:	4630      	mov	r0, r6
 8006c64:	f7ff ff16 	bl	8006a94 <__i2b>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c6e:	4604      	mov	r4, r0
 8006c70:	6003      	str	r3, [r0, #0]
 8006c72:	f04f 0900 	mov.w	r9, #0
 8006c76:	07eb      	lsls	r3, r5, #31
 8006c78:	d50a      	bpl.n	8006c90 <__pow5mult+0x84>
 8006c7a:	4639      	mov	r1, r7
 8006c7c:	4622      	mov	r2, r4
 8006c7e:	4630      	mov	r0, r6
 8006c80:	f7ff ff1e 	bl	8006ac0 <__multiply>
 8006c84:	4639      	mov	r1, r7
 8006c86:	4680      	mov	r8, r0
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f7ff fdfd 	bl	8006888 <_Bfree>
 8006c8e:	4647      	mov	r7, r8
 8006c90:	106d      	asrs	r5, r5, #1
 8006c92:	d00b      	beq.n	8006cac <__pow5mult+0xa0>
 8006c94:	6820      	ldr	r0, [r4, #0]
 8006c96:	b938      	cbnz	r0, 8006ca8 <__pow5mult+0x9c>
 8006c98:	4622      	mov	r2, r4
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	f7ff ff0f 	bl	8006ac0 <__multiply>
 8006ca2:	6020      	str	r0, [r4, #0]
 8006ca4:	f8c0 9000 	str.w	r9, [r0]
 8006ca8:	4604      	mov	r4, r0
 8006caa:	e7e4      	b.n	8006c76 <__pow5mult+0x6a>
 8006cac:	4638      	mov	r0, r7
 8006cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cb2:	bf00      	nop
 8006cb4:	08008668 	.word	0x08008668
 8006cb8:	0800840e 	.word	0x0800840e
 8006cbc:	08008514 	.word	0x08008514

08006cc0 <__lshift>:
 8006cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc4:	460c      	mov	r4, r1
 8006cc6:	6849      	ldr	r1, [r1, #4]
 8006cc8:	6923      	ldr	r3, [r4, #16]
 8006cca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006cce:	68a3      	ldr	r3, [r4, #8]
 8006cd0:	4607      	mov	r7, r0
 8006cd2:	4691      	mov	r9, r2
 8006cd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006cd8:	f108 0601 	add.w	r6, r8, #1
 8006cdc:	42b3      	cmp	r3, r6
 8006cde:	db0b      	blt.n	8006cf8 <__lshift+0x38>
 8006ce0:	4638      	mov	r0, r7
 8006ce2:	f7ff fd91 	bl	8006808 <_Balloc>
 8006ce6:	4605      	mov	r5, r0
 8006ce8:	b948      	cbnz	r0, 8006cfe <__lshift+0x3e>
 8006cea:	4602      	mov	r2, r0
 8006cec:	4b28      	ldr	r3, [pc, #160]	; (8006d90 <__lshift+0xd0>)
 8006cee:	4829      	ldr	r0, [pc, #164]	; (8006d94 <__lshift+0xd4>)
 8006cf0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006cf4:	f000 fc90 	bl	8007618 <__assert_func>
 8006cf8:	3101      	adds	r1, #1
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	e7ee      	b.n	8006cdc <__lshift+0x1c>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f100 0114 	add.w	r1, r0, #20
 8006d04:	f100 0210 	add.w	r2, r0, #16
 8006d08:	4618      	mov	r0, r3
 8006d0a:	4553      	cmp	r3, sl
 8006d0c:	db33      	blt.n	8006d76 <__lshift+0xb6>
 8006d0e:	6920      	ldr	r0, [r4, #16]
 8006d10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d14:	f104 0314 	add.w	r3, r4, #20
 8006d18:	f019 091f 	ands.w	r9, r9, #31
 8006d1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d24:	d02b      	beq.n	8006d7e <__lshift+0xbe>
 8006d26:	f1c9 0e20 	rsb	lr, r9, #32
 8006d2a:	468a      	mov	sl, r1
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	6818      	ldr	r0, [r3, #0]
 8006d30:	fa00 f009 	lsl.w	r0, r0, r9
 8006d34:	4302      	orrs	r2, r0
 8006d36:	f84a 2b04 	str.w	r2, [sl], #4
 8006d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d3e:	459c      	cmp	ip, r3
 8006d40:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d44:	d8f3      	bhi.n	8006d2e <__lshift+0x6e>
 8006d46:	ebac 0304 	sub.w	r3, ip, r4
 8006d4a:	3b15      	subs	r3, #21
 8006d4c:	f023 0303 	bic.w	r3, r3, #3
 8006d50:	3304      	adds	r3, #4
 8006d52:	f104 0015 	add.w	r0, r4, #21
 8006d56:	4584      	cmp	ip, r0
 8006d58:	bf38      	it	cc
 8006d5a:	2304      	movcc	r3, #4
 8006d5c:	50ca      	str	r2, [r1, r3]
 8006d5e:	b10a      	cbz	r2, 8006d64 <__lshift+0xa4>
 8006d60:	f108 0602 	add.w	r6, r8, #2
 8006d64:	3e01      	subs	r6, #1
 8006d66:	4638      	mov	r0, r7
 8006d68:	612e      	str	r6, [r5, #16]
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	f7ff fd8c 	bl	8006888 <_Bfree>
 8006d70:	4628      	mov	r0, r5
 8006d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d76:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	e7c5      	b.n	8006d0a <__lshift+0x4a>
 8006d7e:	3904      	subs	r1, #4
 8006d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d84:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d88:	459c      	cmp	ip, r3
 8006d8a:	d8f9      	bhi.n	8006d80 <__lshift+0xc0>
 8006d8c:	e7ea      	b.n	8006d64 <__lshift+0xa4>
 8006d8e:	bf00      	nop
 8006d90:	08008484 	.word	0x08008484
 8006d94:	08008514 	.word	0x08008514

08006d98 <__mcmp>:
 8006d98:	b530      	push	{r4, r5, lr}
 8006d9a:	6902      	ldr	r2, [r0, #16]
 8006d9c:	690c      	ldr	r4, [r1, #16]
 8006d9e:	1b12      	subs	r2, r2, r4
 8006da0:	d10e      	bne.n	8006dc0 <__mcmp+0x28>
 8006da2:	f100 0314 	add.w	r3, r0, #20
 8006da6:	3114      	adds	r1, #20
 8006da8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006dac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006db0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006db4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006db8:	42a5      	cmp	r5, r4
 8006dba:	d003      	beq.n	8006dc4 <__mcmp+0x2c>
 8006dbc:	d305      	bcc.n	8006dca <__mcmp+0x32>
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	bd30      	pop	{r4, r5, pc}
 8006dc4:	4283      	cmp	r3, r0
 8006dc6:	d3f3      	bcc.n	8006db0 <__mcmp+0x18>
 8006dc8:	e7fa      	b.n	8006dc0 <__mcmp+0x28>
 8006dca:	f04f 32ff 	mov.w	r2, #4294967295
 8006dce:	e7f7      	b.n	8006dc0 <__mcmp+0x28>

08006dd0 <__mdiff>:
 8006dd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd4:	460c      	mov	r4, r1
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	4611      	mov	r1, r2
 8006dda:	4620      	mov	r0, r4
 8006ddc:	4617      	mov	r7, r2
 8006dde:	f7ff ffdb 	bl	8006d98 <__mcmp>
 8006de2:	1e05      	subs	r5, r0, #0
 8006de4:	d110      	bne.n	8006e08 <__mdiff+0x38>
 8006de6:	4629      	mov	r1, r5
 8006de8:	4630      	mov	r0, r6
 8006dea:	f7ff fd0d 	bl	8006808 <_Balloc>
 8006dee:	b930      	cbnz	r0, 8006dfe <__mdiff+0x2e>
 8006df0:	4b39      	ldr	r3, [pc, #228]	; (8006ed8 <__mdiff+0x108>)
 8006df2:	4602      	mov	r2, r0
 8006df4:	f240 2132 	movw	r1, #562	; 0x232
 8006df8:	4838      	ldr	r0, [pc, #224]	; (8006edc <__mdiff+0x10c>)
 8006dfa:	f000 fc0d 	bl	8007618 <__assert_func>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e08:	bfa4      	itt	ge
 8006e0a:	463b      	movge	r3, r7
 8006e0c:	4627      	movge	r7, r4
 8006e0e:	4630      	mov	r0, r6
 8006e10:	6879      	ldr	r1, [r7, #4]
 8006e12:	bfa6      	itte	ge
 8006e14:	461c      	movge	r4, r3
 8006e16:	2500      	movge	r5, #0
 8006e18:	2501      	movlt	r5, #1
 8006e1a:	f7ff fcf5 	bl	8006808 <_Balloc>
 8006e1e:	b920      	cbnz	r0, 8006e2a <__mdiff+0x5a>
 8006e20:	4b2d      	ldr	r3, [pc, #180]	; (8006ed8 <__mdiff+0x108>)
 8006e22:	4602      	mov	r2, r0
 8006e24:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006e28:	e7e6      	b.n	8006df8 <__mdiff+0x28>
 8006e2a:	693e      	ldr	r6, [r7, #16]
 8006e2c:	60c5      	str	r5, [r0, #12]
 8006e2e:	6925      	ldr	r5, [r4, #16]
 8006e30:	f107 0114 	add.w	r1, r7, #20
 8006e34:	f104 0914 	add.w	r9, r4, #20
 8006e38:	f100 0e14 	add.w	lr, r0, #20
 8006e3c:	f107 0210 	add.w	r2, r7, #16
 8006e40:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006e44:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006e48:	46f2      	mov	sl, lr
 8006e4a:	2700      	movs	r7, #0
 8006e4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006e54:	fa1f f883 	uxth.w	r8, r3
 8006e58:	fa17 f78b 	uxtah	r7, r7, fp
 8006e5c:	0c1b      	lsrs	r3, r3, #16
 8006e5e:	eba7 0808 	sub.w	r8, r7, r8
 8006e62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006e6a:	fa1f f888 	uxth.w	r8, r8
 8006e6e:	141f      	asrs	r7, r3, #16
 8006e70:	454d      	cmp	r5, r9
 8006e72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006e76:	f84a 3b04 	str.w	r3, [sl], #4
 8006e7a:	d8e7      	bhi.n	8006e4c <__mdiff+0x7c>
 8006e7c:	1b2b      	subs	r3, r5, r4
 8006e7e:	3b15      	subs	r3, #21
 8006e80:	f023 0303 	bic.w	r3, r3, #3
 8006e84:	3304      	adds	r3, #4
 8006e86:	3415      	adds	r4, #21
 8006e88:	42a5      	cmp	r5, r4
 8006e8a:	bf38      	it	cc
 8006e8c:	2304      	movcc	r3, #4
 8006e8e:	4419      	add	r1, r3
 8006e90:	4473      	add	r3, lr
 8006e92:	469e      	mov	lr, r3
 8006e94:	460d      	mov	r5, r1
 8006e96:	4565      	cmp	r5, ip
 8006e98:	d30e      	bcc.n	8006eb8 <__mdiff+0xe8>
 8006e9a:	f10c 0203 	add.w	r2, ip, #3
 8006e9e:	1a52      	subs	r2, r2, r1
 8006ea0:	f022 0203 	bic.w	r2, r2, #3
 8006ea4:	3903      	subs	r1, #3
 8006ea6:	458c      	cmp	ip, r1
 8006ea8:	bf38      	it	cc
 8006eaa:	2200      	movcc	r2, #0
 8006eac:	441a      	add	r2, r3
 8006eae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006eb2:	b17b      	cbz	r3, 8006ed4 <__mdiff+0x104>
 8006eb4:	6106      	str	r6, [r0, #16]
 8006eb6:	e7a5      	b.n	8006e04 <__mdiff+0x34>
 8006eb8:	f855 8b04 	ldr.w	r8, [r5], #4
 8006ebc:	fa17 f488 	uxtah	r4, r7, r8
 8006ec0:	1422      	asrs	r2, r4, #16
 8006ec2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006ec6:	b2a4      	uxth	r4, r4
 8006ec8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006ecc:	f84e 4b04 	str.w	r4, [lr], #4
 8006ed0:	1417      	asrs	r7, r2, #16
 8006ed2:	e7e0      	b.n	8006e96 <__mdiff+0xc6>
 8006ed4:	3e01      	subs	r6, #1
 8006ed6:	e7ea      	b.n	8006eae <__mdiff+0xde>
 8006ed8:	08008484 	.word	0x08008484
 8006edc:	08008514 	.word	0x08008514

08006ee0 <__ulp>:
 8006ee0:	b082      	sub	sp, #8
 8006ee2:	ed8d 0b00 	vstr	d0, [sp]
 8006ee6:	9b01      	ldr	r3, [sp, #4]
 8006ee8:	4912      	ldr	r1, [pc, #72]	; (8006f34 <__ulp+0x54>)
 8006eea:	4019      	ands	r1, r3
 8006eec:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8006ef0:	2900      	cmp	r1, #0
 8006ef2:	dd05      	ble.n	8006f00 <__ulp+0x20>
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	ec43 2b10 	vmov	d0, r2, r3
 8006efc:	b002      	add	sp, #8
 8006efe:	4770      	bx	lr
 8006f00:	4249      	negs	r1, r1
 8006f02:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8006f06:	ea4f 5021 	mov.w	r0, r1, asr #20
 8006f0a:	f04f 0200 	mov.w	r2, #0
 8006f0e:	f04f 0300 	mov.w	r3, #0
 8006f12:	da04      	bge.n	8006f1e <__ulp+0x3e>
 8006f14:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006f18:	fa41 f300 	asr.w	r3, r1, r0
 8006f1c:	e7ec      	b.n	8006ef8 <__ulp+0x18>
 8006f1e:	f1a0 0114 	sub.w	r1, r0, #20
 8006f22:	291e      	cmp	r1, #30
 8006f24:	bfda      	itte	le
 8006f26:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8006f2a:	fa20 f101 	lsrle.w	r1, r0, r1
 8006f2e:	2101      	movgt	r1, #1
 8006f30:	460a      	mov	r2, r1
 8006f32:	e7e1      	b.n	8006ef8 <__ulp+0x18>
 8006f34:	7ff00000 	.word	0x7ff00000

08006f38 <__b2d>:
 8006f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3a:	6905      	ldr	r5, [r0, #16]
 8006f3c:	f100 0714 	add.w	r7, r0, #20
 8006f40:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006f44:	1f2e      	subs	r6, r5, #4
 8006f46:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f7ff fd52 	bl	80069f4 <__hi0bits>
 8006f50:	f1c0 0320 	rsb	r3, r0, #32
 8006f54:	280a      	cmp	r0, #10
 8006f56:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006fd4 <__b2d+0x9c>
 8006f5a:	600b      	str	r3, [r1, #0]
 8006f5c:	dc14      	bgt.n	8006f88 <__b2d+0x50>
 8006f5e:	f1c0 0e0b 	rsb	lr, r0, #11
 8006f62:	fa24 f10e 	lsr.w	r1, r4, lr
 8006f66:	42b7      	cmp	r7, r6
 8006f68:	ea41 030c 	orr.w	r3, r1, ip
 8006f6c:	bf34      	ite	cc
 8006f6e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006f72:	2100      	movcs	r1, #0
 8006f74:	3015      	adds	r0, #21
 8006f76:	fa04 f000 	lsl.w	r0, r4, r0
 8006f7a:	fa21 f10e 	lsr.w	r1, r1, lr
 8006f7e:	ea40 0201 	orr.w	r2, r0, r1
 8006f82:	ec43 2b10 	vmov	d0, r2, r3
 8006f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f88:	42b7      	cmp	r7, r6
 8006f8a:	bf3a      	itte	cc
 8006f8c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006f90:	f1a5 0608 	subcc.w	r6, r5, #8
 8006f94:	2100      	movcs	r1, #0
 8006f96:	380b      	subs	r0, #11
 8006f98:	d017      	beq.n	8006fca <__b2d+0x92>
 8006f9a:	f1c0 0c20 	rsb	ip, r0, #32
 8006f9e:	fa04 f500 	lsl.w	r5, r4, r0
 8006fa2:	42be      	cmp	r6, r7
 8006fa4:	fa21 f40c 	lsr.w	r4, r1, ip
 8006fa8:	ea45 0504 	orr.w	r5, r5, r4
 8006fac:	bf8c      	ite	hi
 8006fae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006fb2:	2400      	movls	r4, #0
 8006fb4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8006fb8:	fa01 f000 	lsl.w	r0, r1, r0
 8006fbc:	fa24 f40c 	lsr.w	r4, r4, ip
 8006fc0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006fc4:	ea40 0204 	orr.w	r2, r0, r4
 8006fc8:	e7db      	b.n	8006f82 <__b2d+0x4a>
 8006fca:	ea44 030c 	orr.w	r3, r4, ip
 8006fce:	460a      	mov	r2, r1
 8006fd0:	e7d7      	b.n	8006f82 <__b2d+0x4a>
 8006fd2:	bf00      	nop
 8006fd4:	3ff00000 	.word	0x3ff00000

08006fd8 <__d2b>:
 8006fd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006fdc:	4689      	mov	r9, r1
 8006fde:	2101      	movs	r1, #1
 8006fe0:	ec57 6b10 	vmov	r6, r7, d0
 8006fe4:	4690      	mov	r8, r2
 8006fe6:	f7ff fc0f 	bl	8006808 <_Balloc>
 8006fea:	4604      	mov	r4, r0
 8006fec:	b930      	cbnz	r0, 8006ffc <__d2b+0x24>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	4b25      	ldr	r3, [pc, #148]	; (8007088 <__d2b+0xb0>)
 8006ff2:	4826      	ldr	r0, [pc, #152]	; (800708c <__d2b+0xb4>)
 8006ff4:	f240 310a 	movw	r1, #778	; 0x30a
 8006ff8:	f000 fb0e 	bl	8007618 <__assert_func>
 8006ffc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007000:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007004:	bb35      	cbnz	r5, 8007054 <__d2b+0x7c>
 8007006:	2e00      	cmp	r6, #0
 8007008:	9301      	str	r3, [sp, #4]
 800700a:	d028      	beq.n	800705e <__d2b+0x86>
 800700c:	4668      	mov	r0, sp
 800700e:	9600      	str	r6, [sp, #0]
 8007010:	f7ff fd10 	bl	8006a34 <__lo0bits>
 8007014:	9900      	ldr	r1, [sp, #0]
 8007016:	b300      	cbz	r0, 800705a <__d2b+0x82>
 8007018:	9a01      	ldr	r2, [sp, #4]
 800701a:	f1c0 0320 	rsb	r3, r0, #32
 800701e:	fa02 f303 	lsl.w	r3, r2, r3
 8007022:	430b      	orrs	r3, r1
 8007024:	40c2      	lsrs	r2, r0
 8007026:	6163      	str	r3, [r4, #20]
 8007028:	9201      	str	r2, [sp, #4]
 800702a:	9b01      	ldr	r3, [sp, #4]
 800702c:	61a3      	str	r3, [r4, #24]
 800702e:	2b00      	cmp	r3, #0
 8007030:	bf14      	ite	ne
 8007032:	2202      	movne	r2, #2
 8007034:	2201      	moveq	r2, #1
 8007036:	6122      	str	r2, [r4, #16]
 8007038:	b1d5      	cbz	r5, 8007070 <__d2b+0x98>
 800703a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800703e:	4405      	add	r5, r0
 8007040:	f8c9 5000 	str.w	r5, [r9]
 8007044:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007048:	f8c8 0000 	str.w	r0, [r8]
 800704c:	4620      	mov	r0, r4
 800704e:	b003      	add	sp, #12
 8007050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007054:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007058:	e7d5      	b.n	8007006 <__d2b+0x2e>
 800705a:	6161      	str	r1, [r4, #20]
 800705c:	e7e5      	b.n	800702a <__d2b+0x52>
 800705e:	a801      	add	r0, sp, #4
 8007060:	f7ff fce8 	bl	8006a34 <__lo0bits>
 8007064:	9b01      	ldr	r3, [sp, #4]
 8007066:	6163      	str	r3, [r4, #20]
 8007068:	2201      	movs	r2, #1
 800706a:	6122      	str	r2, [r4, #16]
 800706c:	3020      	adds	r0, #32
 800706e:	e7e3      	b.n	8007038 <__d2b+0x60>
 8007070:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007074:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007078:	f8c9 0000 	str.w	r0, [r9]
 800707c:	6918      	ldr	r0, [r3, #16]
 800707e:	f7ff fcb9 	bl	80069f4 <__hi0bits>
 8007082:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007086:	e7df      	b.n	8007048 <__d2b+0x70>
 8007088:	08008484 	.word	0x08008484
 800708c:	08008514 	.word	0x08008514

08007090 <__ratio>:
 8007090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007094:	4688      	mov	r8, r1
 8007096:	4669      	mov	r1, sp
 8007098:	4681      	mov	r9, r0
 800709a:	f7ff ff4d 	bl	8006f38 <__b2d>
 800709e:	a901      	add	r1, sp, #4
 80070a0:	4640      	mov	r0, r8
 80070a2:	ec55 4b10 	vmov	r4, r5, d0
 80070a6:	f7ff ff47 	bl	8006f38 <__b2d>
 80070aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80070ae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80070b2:	eba3 0c02 	sub.w	ip, r3, r2
 80070b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80070ba:	1a9b      	subs	r3, r3, r2
 80070bc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80070c0:	ec51 0b10 	vmov	r0, r1, d0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	bfd6      	itet	le
 80070c8:	460a      	movle	r2, r1
 80070ca:	462a      	movgt	r2, r5
 80070cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80070d0:	468b      	mov	fp, r1
 80070d2:	462f      	mov	r7, r5
 80070d4:	bfd4      	ite	le
 80070d6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80070da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80070de:	4620      	mov	r0, r4
 80070e0:	ee10 2a10 	vmov	r2, s0
 80070e4:	465b      	mov	r3, fp
 80070e6:	4639      	mov	r1, r7
 80070e8:	f7f9 fbb0 	bl	800084c <__aeabi_ddiv>
 80070ec:	ec41 0b10 	vmov	d0, r0, r1
 80070f0:	b003      	add	sp, #12
 80070f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080070f6 <__copybits>:
 80070f6:	3901      	subs	r1, #1
 80070f8:	b570      	push	{r4, r5, r6, lr}
 80070fa:	1149      	asrs	r1, r1, #5
 80070fc:	6914      	ldr	r4, [r2, #16]
 80070fe:	3101      	adds	r1, #1
 8007100:	f102 0314 	add.w	r3, r2, #20
 8007104:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007108:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800710c:	1f05      	subs	r5, r0, #4
 800710e:	42a3      	cmp	r3, r4
 8007110:	d30c      	bcc.n	800712c <__copybits+0x36>
 8007112:	1aa3      	subs	r3, r4, r2
 8007114:	3b11      	subs	r3, #17
 8007116:	f023 0303 	bic.w	r3, r3, #3
 800711a:	3211      	adds	r2, #17
 800711c:	42a2      	cmp	r2, r4
 800711e:	bf88      	it	hi
 8007120:	2300      	movhi	r3, #0
 8007122:	4418      	add	r0, r3
 8007124:	2300      	movs	r3, #0
 8007126:	4288      	cmp	r0, r1
 8007128:	d305      	bcc.n	8007136 <__copybits+0x40>
 800712a:	bd70      	pop	{r4, r5, r6, pc}
 800712c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007130:	f845 6f04 	str.w	r6, [r5, #4]!
 8007134:	e7eb      	b.n	800710e <__copybits+0x18>
 8007136:	f840 3b04 	str.w	r3, [r0], #4
 800713a:	e7f4      	b.n	8007126 <__copybits+0x30>

0800713c <__any_on>:
 800713c:	f100 0214 	add.w	r2, r0, #20
 8007140:	6900      	ldr	r0, [r0, #16]
 8007142:	114b      	asrs	r3, r1, #5
 8007144:	4298      	cmp	r0, r3
 8007146:	b510      	push	{r4, lr}
 8007148:	db11      	blt.n	800716e <__any_on+0x32>
 800714a:	dd0a      	ble.n	8007162 <__any_on+0x26>
 800714c:	f011 011f 	ands.w	r1, r1, #31
 8007150:	d007      	beq.n	8007162 <__any_on+0x26>
 8007152:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007156:	fa24 f001 	lsr.w	r0, r4, r1
 800715a:	fa00 f101 	lsl.w	r1, r0, r1
 800715e:	428c      	cmp	r4, r1
 8007160:	d10b      	bne.n	800717a <__any_on+0x3e>
 8007162:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007166:	4293      	cmp	r3, r2
 8007168:	d803      	bhi.n	8007172 <__any_on+0x36>
 800716a:	2000      	movs	r0, #0
 800716c:	bd10      	pop	{r4, pc}
 800716e:	4603      	mov	r3, r0
 8007170:	e7f7      	b.n	8007162 <__any_on+0x26>
 8007172:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007176:	2900      	cmp	r1, #0
 8007178:	d0f5      	beq.n	8007166 <__any_on+0x2a>
 800717a:	2001      	movs	r0, #1
 800717c:	e7f6      	b.n	800716c <__any_on+0x30>

0800717e <_calloc_r>:
 800717e:	b513      	push	{r0, r1, r4, lr}
 8007180:	434a      	muls	r2, r1
 8007182:	4611      	mov	r1, r2
 8007184:	9201      	str	r2, [sp, #4]
 8007186:	f000 f859 	bl	800723c <_malloc_r>
 800718a:	4604      	mov	r4, r0
 800718c:	b118      	cbz	r0, 8007196 <_calloc_r+0x18>
 800718e:	9a01      	ldr	r2, [sp, #4]
 8007190:	2100      	movs	r1, #0
 8007192:	f7fc fbc7 	bl	8003924 <memset>
 8007196:	4620      	mov	r0, r4
 8007198:	b002      	add	sp, #8
 800719a:	bd10      	pop	{r4, pc}

0800719c <_free_r>:
 800719c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800719e:	2900      	cmp	r1, #0
 80071a0:	d048      	beq.n	8007234 <_free_r+0x98>
 80071a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071a6:	9001      	str	r0, [sp, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f1a1 0404 	sub.w	r4, r1, #4
 80071ae:	bfb8      	it	lt
 80071b0:	18e4      	addlt	r4, r4, r3
 80071b2:	f000 fa7b 	bl	80076ac <__malloc_lock>
 80071b6:	4a20      	ldr	r2, [pc, #128]	; (8007238 <_free_r+0x9c>)
 80071b8:	9801      	ldr	r0, [sp, #4]
 80071ba:	6813      	ldr	r3, [r2, #0]
 80071bc:	4615      	mov	r5, r2
 80071be:	b933      	cbnz	r3, 80071ce <_free_r+0x32>
 80071c0:	6063      	str	r3, [r4, #4]
 80071c2:	6014      	str	r4, [r2, #0]
 80071c4:	b003      	add	sp, #12
 80071c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071ca:	f000 ba75 	b.w	80076b8 <__malloc_unlock>
 80071ce:	42a3      	cmp	r3, r4
 80071d0:	d90b      	bls.n	80071ea <_free_r+0x4e>
 80071d2:	6821      	ldr	r1, [r4, #0]
 80071d4:	1862      	adds	r2, r4, r1
 80071d6:	4293      	cmp	r3, r2
 80071d8:	bf04      	itt	eq
 80071da:	681a      	ldreq	r2, [r3, #0]
 80071dc:	685b      	ldreq	r3, [r3, #4]
 80071de:	6063      	str	r3, [r4, #4]
 80071e0:	bf04      	itt	eq
 80071e2:	1852      	addeq	r2, r2, r1
 80071e4:	6022      	streq	r2, [r4, #0]
 80071e6:	602c      	str	r4, [r5, #0]
 80071e8:	e7ec      	b.n	80071c4 <_free_r+0x28>
 80071ea:	461a      	mov	r2, r3
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	b10b      	cbz	r3, 80071f4 <_free_r+0x58>
 80071f0:	42a3      	cmp	r3, r4
 80071f2:	d9fa      	bls.n	80071ea <_free_r+0x4e>
 80071f4:	6811      	ldr	r1, [r2, #0]
 80071f6:	1855      	adds	r5, r2, r1
 80071f8:	42a5      	cmp	r5, r4
 80071fa:	d10b      	bne.n	8007214 <_free_r+0x78>
 80071fc:	6824      	ldr	r4, [r4, #0]
 80071fe:	4421      	add	r1, r4
 8007200:	1854      	adds	r4, r2, r1
 8007202:	42a3      	cmp	r3, r4
 8007204:	6011      	str	r1, [r2, #0]
 8007206:	d1dd      	bne.n	80071c4 <_free_r+0x28>
 8007208:	681c      	ldr	r4, [r3, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	6053      	str	r3, [r2, #4]
 800720e:	4421      	add	r1, r4
 8007210:	6011      	str	r1, [r2, #0]
 8007212:	e7d7      	b.n	80071c4 <_free_r+0x28>
 8007214:	d902      	bls.n	800721c <_free_r+0x80>
 8007216:	230c      	movs	r3, #12
 8007218:	6003      	str	r3, [r0, #0]
 800721a:	e7d3      	b.n	80071c4 <_free_r+0x28>
 800721c:	6825      	ldr	r5, [r4, #0]
 800721e:	1961      	adds	r1, r4, r5
 8007220:	428b      	cmp	r3, r1
 8007222:	bf04      	itt	eq
 8007224:	6819      	ldreq	r1, [r3, #0]
 8007226:	685b      	ldreq	r3, [r3, #4]
 8007228:	6063      	str	r3, [r4, #4]
 800722a:	bf04      	itt	eq
 800722c:	1949      	addeq	r1, r1, r5
 800722e:	6021      	streq	r1, [r4, #0]
 8007230:	6054      	str	r4, [r2, #4]
 8007232:	e7c7      	b.n	80071c4 <_free_r+0x28>
 8007234:	b003      	add	sp, #12
 8007236:	bd30      	pop	{r4, r5, pc}
 8007238:	20000208 	.word	0x20000208

0800723c <_malloc_r>:
 800723c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723e:	1ccd      	adds	r5, r1, #3
 8007240:	f025 0503 	bic.w	r5, r5, #3
 8007244:	3508      	adds	r5, #8
 8007246:	2d0c      	cmp	r5, #12
 8007248:	bf38      	it	cc
 800724a:	250c      	movcc	r5, #12
 800724c:	2d00      	cmp	r5, #0
 800724e:	4606      	mov	r6, r0
 8007250:	db01      	blt.n	8007256 <_malloc_r+0x1a>
 8007252:	42a9      	cmp	r1, r5
 8007254:	d903      	bls.n	800725e <_malloc_r+0x22>
 8007256:	230c      	movs	r3, #12
 8007258:	6033      	str	r3, [r6, #0]
 800725a:	2000      	movs	r0, #0
 800725c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800725e:	f000 fa25 	bl	80076ac <__malloc_lock>
 8007262:	4921      	ldr	r1, [pc, #132]	; (80072e8 <_malloc_r+0xac>)
 8007264:	680a      	ldr	r2, [r1, #0]
 8007266:	4614      	mov	r4, r2
 8007268:	b99c      	cbnz	r4, 8007292 <_malloc_r+0x56>
 800726a:	4f20      	ldr	r7, [pc, #128]	; (80072ec <_malloc_r+0xb0>)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	b923      	cbnz	r3, 800727a <_malloc_r+0x3e>
 8007270:	4621      	mov	r1, r4
 8007272:	4630      	mov	r0, r6
 8007274:	f000 f9a0 	bl	80075b8 <_sbrk_r>
 8007278:	6038      	str	r0, [r7, #0]
 800727a:	4629      	mov	r1, r5
 800727c:	4630      	mov	r0, r6
 800727e:	f000 f99b 	bl	80075b8 <_sbrk_r>
 8007282:	1c43      	adds	r3, r0, #1
 8007284:	d123      	bne.n	80072ce <_malloc_r+0x92>
 8007286:	230c      	movs	r3, #12
 8007288:	6033      	str	r3, [r6, #0]
 800728a:	4630      	mov	r0, r6
 800728c:	f000 fa14 	bl	80076b8 <__malloc_unlock>
 8007290:	e7e3      	b.n	800725a <_malloc_r+0x1e>
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	1b5b      	subs	r3, r3, r5
 8007296:	d417      	bmi.n	80072c8 <_malloc_r+0x8c>
 8007298:	2b0b      	cmp	r3, #11
 800729a:	d903      	bls.n	80072a4 <_malloc_r+0x68>
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	441c      	add	r4, r3
 80072a0:	6025      	str	r5, [r4, #0]
 80072a2:	e004      	b.n	80072ae <_malloc_r+0x72>
 80072a4:	6863      	ldr	r3, [r4, #4]
 80072a6:	42a2      	cmp	r2, r4
 80072a8:	bf0c      	ite	eq
 80072aa:	600b      	streq	r3, [r1, #0]
 80072ac:	6053      	strne	r3, [r2, #4]
 80072ae:	4630      	mov	r0, r6
 80072b0:	f000 fa02 	bl	80076b8 <__malloc_unlock>
 80072b4:	f104 000b 	add.w	r0, r4, #11
 80072b8:	1d23      	adds	r3, r4, #4
 80072ba:	f020 0007 	bic.w	r0, r0, #7
 80072be:	1ac2      	subs	r2, r0, r3
 80072c0:	d0cc      	beq.n	800725c <_malloc_r+0x20>
 80072c2:	1a1b      	subs	r3, r3, r0
 80072c4:	50a3      	str	r3, [r4, r2]
 80072c6:	e7c9      	b.n	800725c <_malloc_r+0x20>
 80072c8:	4622      	mov	r2, r4
 80072ca:	6864      	ldr	r4, [r4, #4]
 80072cc:	e7cc      	b.n	8007268 <_malloc_r+0x2c>
 80072ce:	1cc4      	adds	r4, r0, #3
 80072d0:	f024 0403 	bic.w	r4, r4, #3
 80072d4:	42a0      	cmp	r0, r4
 80072d6:	d0e3      	beq.n	80072a0 <_malloc_r+0x64>
 80072d8:	1a21      	subs	r1, r4, r0
 80072da:	4630      	mov	r0, r6
 80072dc:	f000 f96c 	bl	80075b8 <_sbrk_r>
 80072e0:	3001      	adds	r0, #1
 80072e2:	d1dd      	bne.n	80072a0 <_malloc_r+0x64>
 80072e4:	e7cf      	b.n	8007286 <_malloc_r+0x4a>
 80072e6:	bf00      	nop
 80072e8:	20000208 	.word	0x20000208
 80072ec:	2000020c 	.word	0x2000020c

080072f0 <__ssputs_r>:
 80072f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f4:	688e      	ldr	r6, [r1, #8]
 80072f6:	429e      	cmp	r6, r3
 80072f8:	4682      	mov	sl, r0
 80072fa:	460c      	mov	r4, r1
 80072fc:	4690      	mov	r8, r2
 80072fe:	461f      	mov	r7, r3
 8007300:	d838      	bhi.n	8007374 <__ssputs_r+0x84>
 8007302:	898a      	ldrh	r2, [r1, #12]
 8007304:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007308:	d032      	beq.n	8007370 <__ssputs_r+0x80>
 800730a:	6825      	ldr	r5, [r4, #0]
 800730c:	6909      	ldr	r1, [r1, #16]
 800730e:	eba5 0901 	sub.w	r9, r5, r1
 8007312:	6965      	ldr	r5, [r4, #20]
 8007314:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007318:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800731c:	3301      	adds	r3, #1
 800731e:	444b      	add	r3, r9
 8007320:	106d      	asrs	r5, r5, #1
 8007322:	429d      	cmp	r5, r3
 8007324:	bf38      	it	cc
 8007326:	461d      	movcc	r5, r3
 8007328:	0553      	lsls	r3, r2, #21
 800732a:	d531      	bpl.n	8007390 <__ssputs_r+0xa0>
 800732c:	4629      	mov	r1, r5
 800732e:	f7ff ff85 	bl	800723c <_malloc_r>
 8007332:	4606      	mov	r6, r0
 8007334:	b950      	cbnz	r0, 800734c <__ssputs_r+0x5c>
 8007336:	230c      	movs	r3, #12
 8007338:	f8ca 3000 	str.w	r3, [sl]
 800733c:	89a3      	ldrh	r3, [r4, #12]
 800733e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007342:	81a3      	strh	r3, [r4, #12]
 8007344:	f04f 30ff 	mov.w	r0, #4294967295
 8007348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800734c:	6921      	ldr	r1, [r4, #16]
 800734e:	464a      	mov	r2, r9
 8007350:	f7ff fa4c 	bl	80067ec <memcpy>
 8007354:	89a3      	ldrh	r3, [r4, #12]
 8007356:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800735a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800735e:	81a3      	strh	r3, [r4, #12]
 8007360:	6126      	str	r6, [r4, #16]
 8007362:	6165      	str	r5, [r4, #20]
 8007364:	444e      	add	r6, r9
 8007366:	eba5 0509 	sub.w	r5, r5, r9
 800736a:	6026      	str	r6, [r4, #0]
 800736c:	60a5      	str	r5, [r4, #8]
 800736e:	463e      	mov	r6, r7
 8007370:	42be      	cmp	r6, r7
 8007372:	d900      	bls.n	8007376 <__ssputs_r+0x86>
 8007374:	463e      	mov	r6, r7
 8007376:	4632      	mov	r2, r6
 8007378:	6820      	ldr	r0, [r4, #0]
 800737a:	4641      	mov	r1, r8
 800737c:	f000 f97c 	bl	8007678 <memmove>
 8007380:	68a3      	ldr	r3, [r4, #8]
 8007382:	6822      	ldr	r2, [r4, #0]
 8007384:	1b9b      	subs	r3, r3, r6
 8007386:	4432      	add	r2, r6
 8007388:	60a3      	str	r3, [r4, #8]
 800738a:	6022      	str	r2, [r4, #0]
 800738c:	2000      	movs	r0, #0
 800738e:	e7db      	b.n	8007348 <__ssputs_r+0x58>
 8007390:	462a      	mov	r2, r5
 8007392:	f000 f997 	bl	80076c4 <_realloc_r>
 8007396:	4606      	mov	r6, r0
 8007398:	2800      	cmp	r0, #0
 800739a:	d1e1      	bne.n	8007360 <__ssputs_r+0x70>
 800739c:	6921      	ldr	r1, [r4, #16]
 800739e:	4650      	mov	r0, sl
 80073a0:	f7ff fefc 	bl	800719c <_free_r>
 80073a4:	e7c7      	b.n	8007336 <__ssputs_r+0x46>
	...

080073a8 <_svfiprintf_r>:
 80073a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ac:	4698      	mov	r8, r3
 80073ae:	898b      	ldrh	r3, [r1, #12]
 80073b0:	061b      	lsls	r3, r3, #24
 80073b2:	b09d      	sub	sp, #116	; 0x74
 80073b4:	4607      	mov	r7, r0
 80073b6:	460d      	mov	r5, r1
 80073b8:	4614      	mov	r4, r2
 80073ba:	d50e      	bpl.n	80073da <_svfiprintf_r+0x32>
 80073bc:	690b      	ldr	r3, [r1, #16]
 80073be:	b963      	cbnz	r3, 80073da <_svfiprintf_r+0x32>
 80073c0:	2140      	movs	r1, #64	; 0x40
 80073c2:	f7ff ff3b 	bl	800723c <_malloc_r>
 80073c6:	6028      	str	r0, [r5, #0]
 80073c8:	6128      	str	r0, [r5, #16]
 80073ca:	b920      	cbnz	r0, 80073d6 <_svfiprintf_r+0x2e>
 80073cc:	230c      	movs	r3, #12
 80073ce:	603b      	str	r3, [r7, #0]
 80073d0:	f04f 30ff 	mov.w	r0, #4294967295
 80073d4:	e0d1      	b.n	800757a <_svfiprintf_r+0x1d2>
 80073d6:	2340      	movs	r3, #64	; 0x40
 80073d8:	616b      	str	r3, [r5, #20]
 80073da:	2300      	movs	r3, #0
 80073dc:	9309      	str	r3, [sp, #36]	; 0x24
 80073de:	2320      	movs	r3, #32
 80073e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80073e8:	2330      	movs	r3, #48	; 0x30
 80073ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007594 <_svfiprintf_r+0x1ec>
 80073ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073f2:	f04f 0901 	mov.w	r9, #1
 80073f6:	4623      	mov	r3, r4
 80073f8:	469a      	mov	sl, r3
 80073fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073fe:	b10a      	cbz	r2, 8007404 <_svfiprintf_r+0x5c>
 8007400:	2a25      	cmp	r2, #37	; 0x25
 8007402:	d1f9      	bne.n	80073f8 <_svfiprintf_r+0x50>
 8007404:	ebba 0b04 	subs.w	fp, sl, r4
 8007408:	d00b      	beq.n	8007422 <_svfiprintf_r+0x7a>
 800740a:	465b      	mov	r3, fp
 800740c:	4622      	mov	r2, r4
 800740e:	4629      	mov	r1, r5
 8007410:	4638      	mov	r0, r7
 8007412:	f7ff ff6d 	bl	80072f0 <__ssputs_r>
 8007416:	3001      	adds	r0, #1
 8007418:	f000 80aa 	beq.w	8007570 <_svfiprintf_r+0x1c8>
 800741c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800741e:	445a      	add	r2, fp
 8007420:	9209      	str	r2, [sp, #36]	; 0x24
 8007422:	f89a 3000 	ldrb.w	r3, [sl]
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 80a2 	beq.w	8007570 <_svfiprintf_r+0x1c8>
 800742c:	2300      	movs	r3, #0
 800742e:	f04f 32ff 	mov.w	r2, #4294967295
 8007432:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007436:	f10a 0a01 	add.w	sl, sl, #1
 800743a:	9304      	str	r3, [sp, #16]
 800743c:	9307      	str	r3, [sp, #28]
 800743e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007442:	931a      	str	r3, [sp, #104]	; 0x68
 8007444:	4654      	mov	r4, sl
 8007446:	2205      	movs	r2, #5
 8007448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800744c:	4851      	ldr	r0, [pc, #324]	; (8007594 <_svfiprintf_r+0x1ec>)
 800744e:	f7f8 fec7 	bl	80001e0 <memchr>
 8007452:	9a04      	ldr	r2, [sp, #16]
 8007454:	b9d8      	cbnz	r0, 800748e <_svfiprintf_r+0xe6>
 8007456:	06d0      	lsls	r0, r2, #27
 8007458:	bf44      	itt	mi
 800745a:	2320      	movmi	r3, #32
 800745c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007460:	0711      	lsls	r1, r2, #28
 8007462:	bf44      	itt	mi
 8007464:	232b      	movmi	r3, #43	; 0x2b
 8007466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800746a:	f89a 3000 	ldrb.w	r3, [sl]
 800746e:	2b2a      	cmp	r3, #42	; 0x2a
 8007470:	d015      	beq.n	800749e <_svfiprintf_r+0xf6>
 8007472:	9a07      	ldr	r2, [sp, #28]
 8007474:	4654      	mov	r4, sl
 8007476:	2000      	movs	r0, #0
 8007478:	f04f 0c0a 	mov.w	ip, #10
 800747c:	4621      	mov	r1, r4
 800747e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007482:	3b30      	subs	r3, #48	; 0x30
 8007484:	2b09      	cmp	r3, #9
 8007486:	d94e      	bls.n	8007526 <_svfiprintf_r+0x17e>
 8007488:	b1b0      	cbz	r0, 80074b8 <_svfiprintf_r+0x110>
 800748a:	9207      	str	r2, [sp, #28]
 800748c:	e014      	b.n	80074b8 <_svfiprintf_r+0x110>
 800748e:	eba0 0308 	sub.w	r3, r0, r8
 8007492:	fa09 f303 	lsl.w	r3, r9, r3
 8007496:	4313      	orrs	r3, r2
 8007498:	9304      	str	r3, [sp, #16]
 800749a:	46a2      	mov	sl, r4
 800749c:	e7d2      	b.n	8007444 <_svfiprintf_r+0x9c>
 800749e:	9b03      	ldr	r3, [sp, #12]
 80074a0:	1d19      	adds	r1, r3, #4
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	9103      	str	r1, [sp, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	bfbb      	ittet	lt
 80074aa:	425b      	neglt	r3, r3
 80074ac:	f042 0202 	orrlt.w	r2, r2, #2
 80074b0:	9307      	strge	r3, [sp, #28]
 80074b2:	9307      	strlt	r3, [sp, #28]
 80074b4:	bfb8      	it	lt
 80074b6:	9204      	strlt	r2, [sp, #16]
 80074b8:	7823      	ldrb	r3, [r4, #0]
 80074ba:	2b2e      	cmp	r3, #46	; 0x2e
 80074bc:	d10c      	bne.n	80074d8 <_svfiprintf_r+0x130>
 80074be:	7863      	ldrb	r3, [r4, #1]
 80074c0:	2b2a      	cmp	r3, #42	; 0x2a
 80074c2:	d135      	bne.n	8007530 <_svfiprintf_r+0x188>
 80074c4:	9b03      	ldr	r3, [sp, #12]
 80074c6:	1d1a      	adds	r2, r3, #4
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	9203      	str	r2, [sp, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	bfb8      	it	lt
 80074d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80074d4:	3402      	adds	r4, #2
 80074d6:	9305      	str	r3, [sp, #20]
 80074d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80075a4 <_svfiprintf_r+0x1fc>
 80074dc:	7821      	ldrb	r1, [r4, #0]
 80074de:	2203      	movs	r2, #3
 80074e0:	4650      	mov	r0, sl
 80074e2:	f7f8 fe7d 	bl	80001e0 <memchr>
 80074e6:	b140      	cbz	r0, 80074fa <_svfiprintf_r+0x152>
 80074e8:	2340      	movs	r3, #64	; 0x40
 80074ea:	eba0 000a 	sub.w	r0, r0, sl
 80074ee:	fa03 f000 	lsl.w	r0, r3, r0
 80074f2:	9b04      	ldr	r3, [sp, #16]
 80074f4:	4303      	orrs	r3, r0
 80074f6:	3401      	adds	r4, #1
 80074f8:	9304      	str	r3, [sp, #16]
 80074fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074fe:	4826      	ldr	r0, [pc, #152]	; (8007598 <_svfiprintf_r+0x1f0>)
 8007500:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007504:	2206      	movs	r2, #6
 8007506:	f7f8 fe6b 	bl	80001e0 <memchr>
 800750a:	2800      	cmp	r0, #0
 800750c:	d038      	beq.n	8007580 <_svfiprintf_r+0x1d8>
 800750e:	4b23      	ldr	r3, [pc, #140]	; (800759c <_svfiprintf_r+0x1f4>)
 8007510:	bb1b      	cbnz	r3, 800755a <_svfiprintf_r+0x1b2>
 8007512:	9b03      	ldr	r3, [sp, #12]
 8007514:	3307      	adds	r3, #7
 8007516:	f023 0307 	bic.w	r3, r3, #7
 800751a:	3308      	adds	r3, #8
 800751c:	9303      	str	r3, [sp, #12]
 800751e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007520:	4433      	add	r3, r6
 8007522:	9309      	str	r3, [sp, #36]	; 0x24
 8007524:	e767      	b.n	80073f6 <_svfiprintf_r+0x4e>
 8007526:	fb0c 3202 	mla	r2, ip, r2, r3
 800752a:	460c      	mov	r4, r1
 800752c:	2001      	movs	r0, #1
 800752e:	e7a5      	b.n	800747c <_svfiprintf_r+0xd4>
 8007530:	2300      	movs	r3, #0
 8007532:	3401      	adds	r4, #1
 8007534:	9305      	str	r3, [sp, #20]
 8007536:	4619      	mov	r1, r3
 8007538:	f04f 0c0a 	mov.w	ip, #10
 800753c:	4620      	mov	r0, r4
 800753e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007542:	3a30      	subs	r2, #48	; 0x30
 8007544:	2a09      	cmp	r2, #9
 8007546:	d903      	bls.n	8007550 <_svfiprintf_r+0x1a8>
 8007548:	2b00      	cmp	r3, #0
 800754a:	d0c5      	beq.n	80074d8 <_svfiprintf_r+0x130>
 800754c:	9105      	str	r1, [sp, #20]
 800754e:	e7c3      	b.n	80074d8 <_svfiprintf_r+0x130>
 8007550:	fb0c 2101 	mla	r1, ip, r1, r2
 8007554:	4604      	mov	r4, r0
 8007556:	2301      	movs	r3, #1
 8007558:	e7f0      	b.n	800753c <_svfiprintf_r+0x194>
 800755a:	ab03      	add	r3, sp, #12
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	462a      	mov	r2, r5
 8007560:	4b0f      	ldr	r3, [pc, #60]	; (80075a0 <_svfiprintf_r+0x1f8>)
 8007562:	a904      	add	r1, sp, #16
 8007564:	4638      	mov	r0, r7
 8007566:	f7fc fa85 	bl	8003a74 <_printf_float>
 800756a:	1c42      	adds	r2, r0, #1
 800756c:	4606      	mov	r6, r0
 800756e:	d1d6      	bne.n	800751e <_svfiprintf_r+0x176>
 8007570:	89ab      	ldrh	r3, [r5, #12]
 8007572:	065b      	lsls	r3, r3, #25
 8007574:	f53f af2c 	bmi.w	80073d0 <_svfiprintf_r+0x28>
 8007578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800757a:	b01d      	add	sp, #116	; 0x74
 800757c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007580:	ab03      	add	r3, sp, #12
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	462a      	mov	r2, r5
 8007586:	4b06      	ldr	r3, [pc, #24]	; (80075a0 <_svfiprintf_r+0x1f8>)
 8007588:	a904      	add	r1, sp, #16
 800758a:	4638      	mov	r0, r7
 800758c:	f7fc fd16 	bl	8003fbc <_printf_i>
 8007590:	e7eb      	b.n	800756a <_svfiprintf_r+0x1c2>
 8007592:	bf00      	nop
 8007594:	08008674 	.word	0x08008674
 8007598:	0800867e 	.word	0x0800867e
 800759c:	08003a75 	.word	0x08003a75
 80075a0:	080072f1 	.word	0x080072f1
 80075a4:	0800867a 	.word	0x0800867a

080075a8 <nan>:
 80075a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80075b0 <nan+0x8>
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	00000000 	.word	0x00000000
 80075b4:	7ff80000 	.word	0x7ff80000

080075b8 <_sbrk_r>:
 80075b8:	b538      	push	{r3, r4, r5, lr}
 80075ba:	4d06      	ldr	r5, [pc, #24]	; (80075d4 <_sbrk_r+0x1c>)
 80075bc:	2300      	movs	r3, #0
 80075be:	4604      	mov	r4, r0
 80075c0:	4608      	mov	r0, r1
 80075c2:	602b      	str	r3, [r5, #0]
 80075c4:	f7fa f8e6 	bl	8001794 <_sbrk>
 80075c8:	1c43      	adds	r3, r0, #1
 80075ca:	d102      	bne.n	80075d2 <_sbrk_r+0x1a>
 80075cc:	682b      	ldr	r3, [r5, #0]
 80075ce:	b103      	cbz	r3, 80075d2 <_sbrk_r+0x1a>
 80075d0:	6023      	str	r3, [r4, #0]
 80075d2:	bd38      	pop	{r3, r4, r5, pc}
 80075d4:	200002d8 	.word	0x200002d8

080075d8 <strncmp>:
 80075d8:	b510      	push	{r4, lr}
 80075da:	b16a      	cbz	r2, 80075f8 <strncmp+0x20>
 80075dc:	3901      	subs	r1, #1
 80075de:	1884      	adds	r4, r0, r2
 80075e0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80075e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d103      	bne.n	80075f4 <strncmp+0x1c>
 80075ec:	42a0      	cmp	r0, r4
 80075ee:	d001      	beq.n	80075f4 <strncmp+0x1c>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1f5      	bne.n	80075e0 <strncmp+0x8>
 80075f4:	1a98      	subs	r0, r3, r2
 80075f6:	bd10      	pop	{r4, pc}
 80075f8:	4610      	mov	r0, r2
 80075fa:	e7fc      	b.n	80075f6 <strncmp+0x1e>

080075fc <__ascii_wctomb>:
 80075fc:	b149      	cbz	r1, 8007612 <__ascii_wctomb+0x16>
 80075fe:	2aff      	cmp	r2, #255	; 0xff
 8007600:	bf85      	ittet	hi
 8007602:	238a      	movhi	r3, #138	; 0x8a
 8007604:	6003      	strhi	r3, [r0, #0]
 8007606:	700a      	strbls	r2, [r1, #0]
 8007608:	f04f 30ff 	movhi.w	r0, #4294967295
 800760c:	bf98      	it	ls
 800760e:	2001      	movls	r0, #1
 8007610:	4770      	bx	lr
 8007612:	4608      	mov	r0, r1
 8007614:	4770      	bx	lr
	...

08007618 <__assert_func>:
 8007618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800761a:	4614      	mov	r4, r2
 800761c:	461a      	mov	r2, r3
 800761e:	4b09      	ldr	r3, [pc, #36]	; (8007644 <__assert_func+0x2c>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4605      	mov	r5, r0
 8007624:	68d8      	ldr	r0, [r3, #12]
 8007626:	b14c      	cbz	r4, 800763c <__assert_func+0x24>
 8007628:	4b07      	ldr	r3, [pc, #28]	; (8007648 <__assert_func+0x30>)
 800762a:	9100      	str	r1, [sp, #0]
 800762c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007630:	4906      	ldr	r1, [pc, #24]	; (800764c <__assert_func+0x34>)
 8007632:	462b      	mov	r3, r5
 8007634:	f000 f80e 	bl	8007654 <fiprintf>
 8007638:	f000 fa84 	bl	8007b44 <abort>
 800763c:	4b04      	ldr	r3, [pc, #16]	; (8007650 <__assert_func+0x38>)
 800763e:	461c      	mov	r4, r3
 8007640:	e7f3      	b.n	800762a <__assert_func+0x12>
 8007642:	bf00      	nop
 8007644:	20000008 	.word	0x20000008
 8007648:	08008685 	.word	0x08008685
 800764c:	08008692 	.word	0x08008692
 8007650:	080086c0 	.word	0x080086c0

08007654 <fiprintf>:
 8007654:	b40e      	push	{r1, r2, r3}
 8007656:	b503      	push	{r0, r1, lr}
 8007658:	4601      	mov	r1, r0
 800765a:	ab03      	add	r3, sp, #12
 800765c:	4805      	ldr	r0, [pc, #20]	; (8007674 <fiprintf+0x20>)
 800765e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007662:	6800      	ldr	r0, [r0, #0]
 8007664:	9301      	str	r3, [sp, #4]
 8007666:	f000 f87d 	bl	8007764 <_vfiprintf_r>
 800766a:	b002      	add	sp, #8
 800766c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007670:	b003      	add	sp, #12
 8007672:	4770      	bx	lr
 8007674:	20000008 	.word	0x20000008

08007678 <memmove>:
 8007678:	4288      	cmp	r0, r1
 800767a:	b510      	push	{r4, lr}
 800767c:	eb01 0402 	add.w	r4, r1, r2
 8007680:	d902      	bls.n	8007688 <memmove+0x10>
 8007682:	4284      	cmp	r4, r0
 8007684:	4623      	mov	r3, r4
 8007686:	d807      	bhi.n	8007698 <memmove+0x20>
 8007688:	1e43      	subs	r3, r0, #1
 800768a:	42a1      	cmp	r1, r4
 800768c:	d008      	beq.n	80076a0 <memmove+0x28>
 800768e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007692:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007696:	e7f8      	b.n	800768a <memmove+0x12>
 8007698:	4402      	add	r2, r0
 800769a:	4601      	mov	r1, r0
 800769c:	428a      	cmp	r2, r1
 800769e:	d100      	bne.n	80076a2 <memmove+0x2a>
 80076a0:	bd10      	pop	{r4, pc}
 80076a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076aa:	e7f7      	b.n	800769c <memmove+0x24>

080076ac <__malloc_lock>:
 80076ac:	4801      	ldr	r0, [pc, #4]	; (80076b4 <__malloc_lock+0x8>)
 80076ae:	f000 bc09 	b.w	8007ec4 <__retarget_lock_acquire_recursive>
 80076b2:	bf00      	nop
 80076b4:	200002e0 	.word	0x200002e0

080076b8 <__malloc_unlock>:
 80076b8:	4801      	ldr	r0, [pc, #4]	; (80076c0 <__malloc_unlock+0x8>)
 80076ba:	f000 bc04 	b.w	8007ec6 <__retarget_lock_release_recursive>
 80076be:	bf00      	nop
 80076c0:	200002e0 	.word	0x200002e0

080076c4 <_realloc_r>:
 80076c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c6:	4607      	mov	r7, r0
 80076c8:	4614      	mov	r4, r2
 80076ca:	460e      	mov	r6, r1
 80076cc:	b921      	cbnz	r1, 80076d8 <_realloc_r+0x14>
 80076ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80076d2:	4611      	mov	r1, r2
 80076d4:	f7ff bdb2 	b.w	800723c <_malloc_r>
 80076d8:	b922      	cbnz	r2, 80076e4 <_realloc_r+0x20>
 80076da:	f7ff fd5f 	bl	800719c <_free_r>
 80076de:	4625      	mov	r5, r4
 80076e0:	4628      	mov	r0, r5
 80076e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076e4:	f000 fc54 	bl	8007f90 <_malloc_usable_size_r>
 80076e8:	42a0      	cmp	r0, r4
 80076ea:	d20f      	bcs.n	800770c <_realloc_r+0x48>
 80076ec:	4621      	mov	r1, r4
 80076ee:	4638      	mov	r0, r7
 80076f0:	f7ff fda4 	bl	800723c <_malloc_r>
 80076f4:	4605      	mov	r5, r0
 80076f6:	2800      	cmp	r0, #0
 80076f8:	d0f2      	beq.n	80076e0 <_realloc_r+0x1c>
 80076fa:	4631      	mov	r1, r6
 80076fc:	4622      	mov	r2, r4
 80076fe:	f7ff f875 	bl	80067ec <memcpy>
 8007702:	4631      	mov	r1, r6
 8007704:	4638      	mov	r0, r7
 8007706:	f7ff fd49 	bl	800719c <_free_r>
 800770a:	e7e9      	b.n	80076e0 <_realloc_r+0x1c>
 800770c:	4635      	mov	r5, r6
 800770e:	e7e7      	b.n	80076e0 <_realloc_r+0x1c>

08007710 <__sfputc_r>:
 8007710:	6893      	ldr	r3, [r2, #8]
 8007712:	3b01      	subs	r3, #1
 8007714:	2b00      	cmp	r3, #0
 8007716:	b410      	push	{r4}
 8007718:	6093      	str	r3, [r2, #8]
 800771a:	da08      	bge.n	800772e <__sfputc_r+0x1e>
 800771c:	6994      	ldr	r4, [r2, #24]
 800771e:	42a3      	cmp	r3, r4
 8007720:	db01      	blt.n	8007726 <__sfputc_r+0x16>
 8007722:	290a      	cmp	r1, #10
 8007724:	d103      	bne.n	800772e <__sfputc_r+0x1e>
 8007726:	f85d 4b04 	ldr.w	r4, [sp], #4
 800772a:	f000 b94b 	b.w	80079c4 <__swbuf_r>
 800772e:	6813      	ldr	r3, [r2, #0]
 8007730:	1c58      	adds	r0, r3, #1
 8007732:	6010      	str	r0, [r2, #0]
 8007734:	7019      	strb	r1, [r3, #0]
 8007736:	4608      	mov	r0, r1
 8007738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800773c:	4770      	bx	lr

0800773e <__sfputs_r>:
 800773e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007740:	4606      	mov	r6, r0
 8007742:	460f      	mov	r7, r1
 8007744:	4614      	mov	r4, r2
 8007746:	18d5      	adds	r5, r2, r3
 8007748:	42ac      	cmp	r4, r5
 800774a:	d101      	bne.n	8007750 <__sfputs_r+0x12>
 800774c:	2000      	movs	r0, #0
 800774e:	e007      	b.n	8007760 <__sfputs_r+0x22>
 8007750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007754:	463a      	mov	r2, r7
 8007756:	4630      	mov	r0, r6
 8007758:	f7ff ffda 	bl	8007710 <__sfputc_r>
 800775c:	1c43      	adds	r3, r0, #1
 800775e:	d1f3      	bne.n	8007748 <__sfputs_r+0xa>
 8007760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007764 <_vfiprintf_r>:
 8007764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007768:	460d      	mov	r5, r1
 800776a:	b09d      	sub	sp, #116	; 0x74
 800776c:	4614      	mov	r4, r2
 800776e:	4698      	mov	r8, r3
 8007770:	4606      	mov	r6, r0
 8007772:	b118      	cbz	r0, 800777c <_vfiprintf_r+0x18>
 8007774:	6983      	ldr	r3, [r0, #24]
 8007776:	b90b      	cbnz	r3, 800777c <_vfiprintf_r+0x18>
 8007778:	f000 fb06 	bl	8007d88 <__sinit>
 800777c:	4b89      	ldr	r3, [pc, #548]	; (80079a4 <_vfiprintf_r+0x240>)
 800777e:	429d      	cmp	r5, r3
 8007780:	d11b      	bne.n	80077ba <_vfiprintf_r+0x56>
 8007782:	6875      	ldr	r5, [r6, #4]
 8007784:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007786:	07d9      	lsls	r1, r3, #31
 8007788:	d405      	bmi.n	8007796 <_vfiprintf_r+0x32>
 800778a:	89ab      	ldrh	r3, [r5, #12]
 800778c:	059a      	lsls	r2, r3, #22
 800778e:	d402      	bmi.n	8007796 <_vfiprintf_r+0x32>
 8007790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007792:	f000 fb97 	bl	8007ec4 <__retarget_lock_acquire_recursive>
 8007796:	89ab      	ldrh	r3, [r5, #12]
 8007798:	071b      	lsls	r3, r3, #28
 800779a:	d501      	bpl.n	80077a0 <_vfiprintf_r+0x3c>
 800779c:	692b      	ldr	r3, [r5, #16]
 800779e:	b9eb      	cbnz	r3, 80077dc <_vfiprintf_r+0x78>
 80077a0:	4629      	mov	r1, r5
 80077a2:	4630      	mov	r0, r6
 80077a4:	f000 f960 	bl	8007a68 <__swsetup_r>
 80077a8:	b1c0      	cbz	r0, 80077dc <_vfiprintf_r+0x78>
 80077aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077ac:	07dc      	lsls	r4, r3, #31
 80077ae:	d50e      	bpl.n	80077ce <_vfiprintf_r+0x6a>
 80077b0:	f04f 30ff 	mov.w	r0, #4294967295
 80077b4:	b01d      	add	sp, #116	; 0x74
 80077b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ba:	4b7b      	ldr	r3, [pc, #492]	; (80079a8 <_vfiprintf_r+0x244>)
 80077bc:	429d      	cmp	r5, r3
 80077be:	d101      	bne.n	80077c4 <_vfiprintf_r+0x60>
 80077c0:	68b5      	ldr	r5, [r6, #8]
 80077c2:	e7df      	b.n	8007784 <_vfiprintf_r+0x20>
 80077c4:	4b79      	ldr	r3, [pc, #484]	; (80079ac <_vfiprintf_r+0x248>)
 80077c6:	429d      	cmp	r5, r3
 80077c8:	bf08      	it	eq
 80077ca:	68f5      	ldreq	r5, [r6, #12]
 80077cc:	e7da      	b.n	8007784 <_vfiprintf_r+0x20>
 80077ce:	89ab      	ldrh	r3, [r5, #12]
 80077d0:	0598      	lsls	r0, r3, #22
 80077d2:	d4ed      	bmi.n	80077b0 <_vfiprintf_r+0x4c>
 80077d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077d6:	f000 fb76 	bl	8007ec6 <__retarget_lock_release_recursive>
 80077da:	e7e9      	b.n	80077b0 <_vfiprintf_r+0x4c>
 80077dc:	2300      	movs	r3, #0
 80077de:	9309      	str	r3, [sp, #36]	; 0x24
 80077e0:	2320      	movs	r3, #32
 80077e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80077ea:	2330      	movs	r3, #48	; 0x30
 80077ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80079b0 <_vfiprintf_r+0x24c>
 80077f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077f4:	f04f 0901 	mov.w	r9, #1
 80077f8:	4623      	mov	r3, r4
 80077fa:	469a      	mov	sl, r3
 80077fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007800:	b10a      	cbz	r2, 8007806 <_vfiprintf_r+0xa2>
 8007802:	2a25      	cmp	r2, #37	; 0x25
 8007804:	d1f9      	bne.n	80077fa <_vfiprintf_r+0x96>
 8007806:	ebba 0b04 	subs.w	fp, sl, r4
 800780a:	d00b      	beq.n	8007824 <_vfiprintf_r+0xc0>
 800780c:	465b      	mov	r3, fp
 800780e:	4622      	mov	r2, r4
 8007810:	4629      	mov	r1, r5
 8007812:	4630      	mov	r0, r6
 8007814:	f7ff ff93 	bl	800773e <__sfputs_r>
 8007818:	3001      	adds	r0, #1
 800781a:	f000 80aa 	beq.w	8007972 <_vfiprintf_r+0x20e>
 800781e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007820:	445a      	add	r2, fp
 8007822:	9209      	str	r2, [sp, #36]	; 0x24
 8007824:	f89a 3000 	ldrb.w	r3, [sl]
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 80a2 	beq.w	8007972 <_vfiprintf_r+0x20e>
 800782e:	2300      	movs	r3, #0
 8007830:	f04f 32ff 	mov.w	r2, #4294967295
 8007834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007838:	f10a 0a01 	add.w	sl, sl, #1
 800783c:	9304      	str	r3, [sp, #16]
 800783e:	9307      	str	r3, [sp, #28]
 8007840:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007844:	931a      	str	r3, [sp, #104]	; 0x68
 8007846:	4654      	mov	r4, sl
 8007848:	2205      	movs	r2, #5
 800784a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800784e:	4858      	ldr	r0, [pc, #352]	; (80079b0 <_vfiprintf_r+0x24c>)
 8007850:	f7f8 fcc6 	bl	80001e0 <memchr>
 8007854:	9a04      	ldr	r2, [sp, #16]
 8007856:	b9d8      	cbnz	r0, 8007890 <_vfiprintf_r+0x12c>
 8007858:	06d1      	lsls	r1, r2, #27
 800785a:	bf44      	itt	mi
 800785c:	2320      	movmi	r3, #32
 800785e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007862:	0713      	lsls	r3, r2, #28
 8007864:	bf44      	itt	mi
 8007866:	232b      	movmi	r3, #43	; 0x2b
 8007868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800786c:	f89a 3000 	ldrb.w	r3, [sl]
 8007870:	2b2a      	cmp	r3, #42	; 0x2a
 8007872:	d015      	beq.n	80078a0 <_vfiprintf_r+0x13c>
 8007874:	9a07      	ldr	r2, [sp, #28]
 8007876:	4654      	mov	r4, sl
 8007878:	2000      	movs	r0, #0
 800787a:	f04f 0c0a 	mov.w	ip, #10
 800787e:	4621      	mov	r1, r4
 8007880:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007884:	3b30      	subs	r3, #48	; 0x30
 8007886:	2b09      	cmp	r3, #9
 8007888:	d94e      	bls.n	8007928 <_vfiprintf_r+0x1c4>
 800788a:	b1b0      	cbz	r0, 80078ba <_vfiprintf_r+0x156>
 800788c:	9207      	str	r2, [sp, #28]
 800788e:	e014      	b.n	80078ba <_vfiprintf_r+0x156>
 8007890:	eba0 0308 	sub.w	r3, r0, r8
 8007894:	fa09 f303 	lsl.w	r3, r9, r3
 8007898:	4313      	orrs	r3, r2
 800789a:	9304      	str	r3, [sp, #16]
 800789c:	46a2      	mov	sl, r4
 800789e:	e7d2      	b.n	8007846 <_vfiprintf_r+0xe2>
 80078a0:	9b03      	ldr	r3, [sp, #12]
 80078a2:	1d19      	adds	r1, r3, #4
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	9103      	str	r1, [sp, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	bfbb      	ittet	lt
 80078ac:	425b      	neglt	r3, r3
 80078ae:	f042 0202 	orrlt.w	r2, r2, #2
 80078b2:	9307      	strge	r3, [sp, #28]
 80078b4:	9307      	strlt	r3, [sp, #28]
 80078b6:	bfb8      	it	lt
 80078b8:	9204      	strlt	r2, [sp, #16]
 80078ba:	7823      	ldrb	r3, [r4, #0]
 80078bc:	2b2e      	cmp	r3, #46	; 0x2e
 80078be:	d10c      	bne.n	80078da <_vfiprintf_r+0x176>
 80078c0:	7863      	ldrb	r3, [r4, #1]
 80078c2:	2b2a      	cmp	r3, #42	; 0x2a
 80078c4:	d135      	bne.n	8007932 <_vfiprintf_r+0x1ce>
 80078c6:	9b03      	ldr	r3, [sp, #12]
 80078c8:	1d1a      	adds	r2, r3, #4
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	9203      	str	r2, [sp, #12]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	bfb8      	it	lt
 80078d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80078d6:	3402      	adds	r4, #2
 80078d8:	9305      	str	r3, [sp, #20]
 80078da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80079c0 <_vfiprintf_r+0x25c>
 80078de:	7821      	ldrb	r1, [r4, #0]
 80078e0:	2203      	movs	r2, #3
 80078e2:	4650      	mov	r0, sl
 80078e4:	f7f8 fc7c 	bl	80001e0 <memchr>
 80078e8:	b140      	cbz	r0, 80078fc <_vfiprintf_r+0x198>
 80078ea:	2340      	movs	r3, #64	; 0x40
 80078ec:	eba0 000a 	sub.w	r0, r0, sl
 80078f0:	fa03 f000 	lsl.w	r0, r3, r0
 80078f4:	9b04      	ldr	r3, [sp, #16]
 80078f6:	4303      	orrs	r3, r0
 80078f8:	3401      	adds	r4, #1
 80078fa:	9304      	str	r3, [sp, #16]
 80078fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007900:	482c      	ldr	r0, [pc, #176]	; (80079b4 <_vfiprintf_r+0x250>)
 8007902:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007906:	2206      	movs	r2, #6
 8007908:	f7f8 fc6a 	bl	80001e0 <memchr>
 800790c:	2800      	cmp	r0, #0
 800790e:	d03f      	beq.n	8007990 <_vfiprintf_r+0x22c>
 8007910:	4b29      	ldr	r3, [pc, #164]	; (80079b8 <_vfiprintf_r+0x254>)
 8007912:	bb1b      	cbnz	r3, 800795c <_vfiprintf_r+0x1f8>
 8007914:	9b03      	ldr	r3, [sp, #12]
 8007916:	3307      	adds	r3, #7
 8007918:	f023 0307 	bic.w	r3, r3, #7
 800791c:	3308      	adds	r3, #8
 800791e:	9303      	str	r3, [sp, #12]
 8007920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007922:	443b      	add	r3, r7
 8007924:	9309      	str	r3, [sp, #36]	; 0x24
 8007926:	e767      	b.n	80077f8 <_vfiprintf_r+0x94>
 8007928:	fb0c 3202 	mla	r2, ip, r2, r3
 800792c:	460c      	mov	r4, r1
 800792e:	2001      	movs	r0, #1
 8007930:	e7a5      	b.n	800787e <_vfiprintf_r+0x11a>
 8007932:	2300      	movs	r3, #0
 8007934:	3401      	adds	r4, #1
 8007936:	9305      	str	r3, [sp, #20]
 8007938:	4619      	mov	r1, r3
 800793a:	f04f 0c0a 	mov.w	ip, #10
 800793e:	4620      	mov	r0, r4
 8007940:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007944:	3a30      	subs	r2, #48	; 0x30
 8007946:	2a09      	cmp	r2, #9
 8007948:	d903      	bls.n	8007952 <_vfiprintf_r+0x1ee>
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0c5      	beq.n	80078da <_vfiprintf_r+0x176>
 800794e:	9105      	str	r1, [sp, #20]
 8007950:	e7c3      	b.n	80078da <_vfiprintf_r+0x176>
 8007952:	fb0c 2101 	mla	r1, ip, r1, r2
 8007956:	4604      	mov	r4, r0
 8007958:	2301      	movs	r3, #1
 800795a:	e7f0      	b.n	800793e <_vfiprintf_r+0x1da>
 800795c:	ab03      	add	r3, sp, #12
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	462a      	mov	r2, r5
 8007962:	4b16      	ldr	r3, [pc, #88]	; (80079bc <_vfiprintf_r+0x258>)
 8007964:	a904      	add	r1, sp, #16
 8007966:	4630      	mov	r0, r6
 8007968:	f7fc f884 	bl	8003a74 <_printf_float>
 800796c:	4607      	mov	r7, r0
 800796e:	1c78      	adds	r0, r7, #1
 8007970:	d1d6      	bne.n	8007920 <_vfiprintf_r+0x1bc>
 8007972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007974:	07d9      	lsls	r1, r3, #31
 8007976:	d405      	bmi.n	8007984 <_vfiprintf_r+0x220>
 8007978:	89ab      	ldrh	r3, [r5, #12]
 800797a:	059a      	lsls	r2, r3, #22
 800797c:	d402      	bmi.n	8007984 <_vfiprintf_r+0x220>
 800797e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007980:	f000 faa1 	bl	8007ec6 <__retarget_lock_release_recursive>
 8007984:	89ab      	ldrh	r3, [r5, #12]
 8007986:	065b      	lsls	r3, r3, #25
 8007988:	f53f af12 	bmi.w	80077b0 <_vfiprintf_r+0x4c>
 800798c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800798e:	e711      	b.n	80077b4 <_vfiprintf_r+0x50>
 8007990:	ab03      	add	r3, sp, #12
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	462a      	mov	r2, r5
 8007996:	4b09      	ldr	r3, [pc, #36]	; (80079bc <_vfiprintf_r+0x258>)
 8007998:	a904      	add	r1, sp, #16
 800799a:	4630      	mov	r0, r6
 800799c:	f7fc fb0e 	bl	8003fbc <_printf_i>
 80079a0:	e7e4      	b.n	800796c <_vfiprintf_r+0x208>
 80079a2:	bf00      	nop
 80079a4:	080086e4 	.word	0x080086e4
 80079a8:	08008704 	.word	0x08008704
 80079ac:	080086c4 	.word	0x080086c4
 80079b0:	08008674 	.word	0x08008674
 80079b4:	0800867e 	.word	0x0800867e
 80079b8:	08003a75 	.word	0x08003a75
 80079bc:	0800773f 	.word	0x0800773f
 80079c0:	0800867a 	.word	0x0800867a

080079c4 <__swbuf_r>:
 80079c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c6:	460e      	mov	r6, r1
 80079c8:	4614      	mov	r4, r2
 80079ca:	4605      	mov	r5, r0
 80079cc:	b118      	cbz	r0, 80079d6 <__swbuf_r+0x12>
 80079ce:	6983      	ldr	r3, [r0, #24]
 80079d0:	b90b      	cbnz	r3, 80079d6 <__swbuf_r+0x12>
 80079d2:	f000 f9d9 	bl	8007d88 <__sinit>
 80079d6:	4b21      	ldr	r3, [pc, #132]	; (8007a5c <__swbuf_r+0x98>)
 80079d8:	429c      	cmp	r4, r3
 80079da:	d12b      	bne.n	8007a34 <__swbuf_r+0x70>
 80079dc:	686c      	ldr	r4, [r5, #4]
 80079de:	69a3      	ldr	r3, [r4, #24]
 80079e0:	60a3      	str	r3, [r4, #8]
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	071a      	lsls	r2, r3, #28
 80079e6:	d52f      	bpl.n	8007a48 <__swbuf_r+0x84>
 80079e8:	6923      	ldr	r3, [r4, #16]
 80079ea:	b36b      	cbz	r3, 8007a48 <__swbuf_r+0x84>
 80079ec:	6923      	ldr	r3, [r4, #16]
 80079ee:	6820      	ldr	r0, [r4, #0]
 80079f0:	1ac0      	subs	r0, r0, r3
 80079f2:	6963      	ldr	r3, [r4, #20]
 80079f4:	b2f6      	uxtb	r6, r6
 80079f6:	4283      	cmp	r3, r0
 80079f8:	4637      	mov	r7, r6
 80079fa:	dc04      	bgt.n	8007a06 <__swbuf_r+0x42>
 80079fc:	4621      	mov	r1, r4
 80079fe:	4628      	mov	r0, r5
 8007a00:	f000 f92e 	bl	8007c60 <_fflush_r>
 8007a04:	bb30      	cbnz	r0, 8007a54 <__swbuf_r+0x90>
 8007a06:	68a3      	ldr	r3, [r4, #8]
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	60a3      	str	r3, [r4, #8]
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	1c5a      	adds	r2, r3, #1
 8007a10:	6022      	str	r2, [r4, #0]
 8007a12:	701e      	strb	r6, [r3, #0]
 8007a14:	6963      	ldr	r3, [r4, #20]
 8007a16:	3001      	adds	r0, #1
 8007a18:	4283      	cmp	r3, r0
 8007a1a:	d004      	beq.n	8007a26 <__swbuf_r+0x62>
 8007a1c:	89a3      	ldrh	r3, [r4, #12]
 8007a1e:	07db      	lsls	r3, r3, #31
 8007a20:	d506      	bpl.n	8007a30 <__swbuf_r+0x6c>
 8007a22:	2e0a      	cmp	r6, #10
 8007a24:	d104      	bne.n	8007a30 <__swbuf_r+0x6c>
 8007a26:	4621      	mov	r1, r4
 8007a28:	4628      	mov	r0, r5
 8007a2a:	f000 f919 	bl	8007c60 <_fflush_r>
 8007a2e:	b988      	cbnz	r0, 8007a54 <__swbuf_r+0x90>
 8007a30:	4638      	mov	r0, r7
 8007a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a34:	4b0a      	ldr	r3, [pc, #40]	; (8007a60 <__swbuf_r+0x9c>)
 8007a36:	429c      	cmp	r4, r3
 8007a38:	d101      	bne.n	8007a3e <__swbuf_r+0x7a>
 8007a3a:	68ac      	ldr	r4, [r5, #8]
 8007a3c:	e7cf      	b.n	80079de <__swbuf_r+0x1a>
 8007a3e:	4b09      	ldr	r3, [pc, #36]	; (8007a64 <__swbuf_r+0xa0>)
 8007a40:	429c      	cmp	r4, r3
 8007a42:	bf08      	it	eq
 8007a44:	68ec      	ldreq	r4, [r5, #12]
 8007a46:	e7ca      	b.n	80079de <__swbuf_r+0x1a>
 8007a48:	4621      	mov	r1, r4
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	f000 f80c 	bl	8007a68 <__swsetup_r>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	d0cb      	beq.n	80079ec <__swbuf_r+0x28>
 8007a54:	f04f 37ff 	mov.w	r7, #4294967295
 8007a58:	e7ea      	b.n	8007a30 <__swbuf_r+0x6c>
 8007a5a:	bf00      	nop
 8007a5c:	080086e4 	.word	0x080086e4
 8007a60:	08008704 	.word	0x08008704
 8007a64:	080086c4 	.word	0x080086c4

08007a68 <__swsetup_r>:
 8007a68:	4b32      	ldr	r3, [pc, #200]	; (8007b34 <__swsetup_r+0xcc>)
 8007a6a:	b570      	push	{r4, r5, r6, lr}
 8007a6c:	681d      	ldr	r5, [r3, #0]
 8007a6e:	4606      	mov	r6, r0
 8007a70:	460c      	mov	r4, r1
 8007a72:	b125      	cbz	r5, 8007a7e <__swsetup_r+0x16>
 8007a74:	69ab      	ldr	r3, [r5, #24]
 8007a76:	b913      	cbnz	r3, 8007a7e <__swsetup_r+0x16>
 8007a78:	4628      	mov	r0, r5
 8007a7a:	f000 f985 	bl	8007d88 <__sinit>
 8007a7e:	4b2e      	ldr	r3, [pc, #184]	; (8007b38 <__swsetup_r+0xd0>)
 8007a80:	429c      	cmp	r4, r3
 8007a82:	d10f      	bne.n	8007aa4 <__swsetup_r+0x3c>
 8007a84:	686c      	ldr	r4, [r5, #4]
 8007a86:	89a3      	ldrh	r3, [r4, #12]
 8007a88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a8c:	0719      	lsls	r1, r3, #28
 8007a8e:	d42c      	bmi.n	8007aea <__swsetup_r+0x82>
 8007a90:	06dd      	lsls	r5, r3, #27
 8007a92:	d411      	bmi.n	8007ab8 <__swsetup_r+0x50>
 8007a94:	2309      	movs	r3, #9
 8007a96:	6033      	str	r3, [r6, #0]
 8007a98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a9c:	81a3      	strh	r3, [r4, #12]
 8007a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa2:	e03e      	b.n	8007b22 <__swsetup_r+0xba>
 8007aa4:	4b25      	ldr	r3, [pc, #148]	; (8007b3c <__swsetup_r+0xd4>)
 8007aa6:	429c      	cmp	r4, r3
 8007aa8:	d101      	bne.n	8007aae <__swsetup_r+0x46>
 8007aaa:	68ac      	ldr	r4, [r5, #8]
 8007aac:	e7eb      	b.n	8007a86 <__swsetup_r+0x1e>
 8007aae:	4b24      	ldr	r3, [pc, #144]	; (8007b40 <__swsetup_r+0xd8>)
 8007ab0:	429c      	cmp	r4, r3
 8007ab2:	bf08      	it	eq
 8007ab4:	68ec      	ldreq	r4, [r5, #12]
 8007ab6:	e7e6      	b.n	8007a86 <__swsetup_r+0x1e>
 8007ab8:	0758      	lsls	r0, r3, #29
 8007aba:	d512      	bpl.n	8007ae2 <__swsetup_r+0x7a>
 8007abc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007abe:	b141      	cbz	r1, 8007ad2 <__swsetup_r+0x6a>
 8007ac0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ac4:	4299      	cmp	r1, r3
 8007ac6:	d002      	beq.n	8007ace <__swsetup_r+0x66>
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f7ff fb67 	bl	800719c <_free_r>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	6363      	str	r3, [r4, #52]	; 0x34
 8007ad2:	89a3      	ldrh	r3, [r4, #12]
 8007ad4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ad8:	81a3      	strh	r3, [r4, #12]
 8007ada:	2300      	movs	r3, #0
 8007adc:	6063      	str	r3, [r4, #4]
 8007ade:	6923      	ldr	r3, [r4, #16]
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	89a3      	ldrh	r3, [r4, #12]
 8007ae4:	f043 0308 	orr.w	r3, r3, #8
 8007ae8:	81a3      	strh	r3, [r4, #12]
 8007aea:	6923      	ldr	r3, [r4, #16]
 8007aec:	b94b      	cbnz	r3, 8007b02 <__swsetup_r+0x9a>
 8007aee:	89a3      	ldrh	r3, [r4, #12]
 8007af0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007af8:	d003      	beq.n	8007b02 <__swsetup_r+0x9a>
 8007afa:	4621      	mov	r1, r4
 8007afc:	4630      	mov	r0, r6
 8007afe:	f000 fa07 	bl	8007f10 <__smakebuf_r>
 8007b02:	89a0      	ldrh	r0, [r4, #12]
 8007b04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b08:	f010 0301 	ands.w	r3, r0, #1
 8007b0c:	d00a      	beq.n	8007b24 <__swsetup_r+0xbc>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60a3      	str	r3, [r4, #8]
 8007b12:	6963      	ldr	r3, [r4, #20]
 8007b14:	425b      	negs	r3, r3
 8007b16:	61a3      	str	r3, [r4, #24]
 8007b18:	6923      	ldr	r3, [r4, #16]
 8007b1a:	b943      	cbnz	r3, 8007b2e <__swsetup_r+0xc6>
 8007b1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b20:	d1ba      	bne.n	8007a98 <__swsetup_r+0x30>
 8007b22:	bd70      	pop	{r4, r5, r6, pc}
 8007b24:	0781      	lsls	r1, r0, #30
 8007b26:	bf58      	it	pl
 8007b28:	6963      	ldrpl	r3, [r4, #20]
 8007b2a:	60a3      	str	r3, [r4, #8]
 8007b2c:	e7f4      	b.n	8007b18 <__swsetup_r+0xb0>
 8007b2e:	2000      	movs	r0, #0
 8007b30:	e7f7      	b.n	8007b22 <__swsetup_r+0xba>
 8007b32:	bf00      	nop
 8007b34:	20000008 	.word	0x20000008
 8007b38:	080086e4 	.word	0x080086e4
 8007b3c:	08008704 	.word	0x08008704
 8007b40:	080086c4 	.word	0x080086c4

08007b44 <abort>:
 8007b44:	b508      	push	{r3, lr}
 8007b46:	2006      	movs	r0, #6
 8007b48:	f000 fa52 	bl	8007ff0 <raise>
 8007b4c:	2001      	movs	r0, #1
 8007b4e:	f7f9 fda9 	bl	80016a4 <_exit>
	...

08007b54 <__sflush_r>:
 8007b54:	898a      	ldrh	r2, [r1, #12]
 8007b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b5a:	4605      	mov	r5, r0
 8007b5c:	0710      	lsls	r0, r2, #28
 8007b5e:	460c      	mov	r4, r1
 8007b60:	d458      	bmi.n	8007c14 <__sflush_r+0xc0>
 8007b62:	684b      	ldr	r3, [r1, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	dc05      	bgt.n	8007b74 <__sflush_r+0x20>
 8007b68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	dc02      	bgt.n	8007b74 <__sflush_r+0x20>
 8007b6e:	2000      	movs	r0, #0
 8007b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b76:	2e00      	cmp	r6, #0
 8007b78:	d0f9      	beq.n	8007b6e <__sflush_r+0x1a>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b80:	682f      	ldr	r7, [r5, #0]
 8007b82:	602b      	str	r3, [r5, #0]
 8007b84:	d032      	beq.n	8007bec <__sflush_r+0x98>
 8007b86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	075a      	lsls	r2, r3, #29
 8007b8c:	d505      	bpl.n	8007b9a <__sflush_r+0x46>
 8007b8e:	6863      	ldr	r3, [r4, #4]
 8007b90:	1ac0      	subs	r0, r0, r3
 8007b92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b94:	b10b      	cbz	r3, 8007b9a <__sflush_r+0x46>
 8007b96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b98:	1ac0      	subs	r0, r0, r3
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ba0:	6a21      	ldr	r1, [r4, #32]
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	47b0      	blx	r6
 8007ba6:	1c43      	adds	r3, r0, #1
 8007ba8:	89a3      	ldrh	r3, [r4, #12]
 8007baa:	d106      	bne.n	8007bba <__sflush_r+0x66>
 8007bac:	6829      	ldr	r1, [r5, #0]
 8007bae:	291d      	cmp	r1, #29
 8007bb0:	d82c      	bhi.n	8007c0c <__sflush_r+0xb8>
 8007bb2:	4a2a      	ldr	r2, [pc, #168]	; (8007c5c <__sflush_r+0x108>)
 8007bb4:	40ca      	lsrs	r2, r1
 8007bb6:	07d6      	lsls	r6, r2, #31
 8007bb8:	d528      	bpl.n	8007c0c <__sflush_r+0xb8>
 8007bba:	2200      	movs	r2, #0
 8007bbc:	6062      	str	r2, [r4, #4]
 8007bbe:	04d9      	lsls	r1, r3, #19
 8007bc0:	6922      	ldr	r2, [r4, #16]
 8007bc2:	6022      	str	r2, [r4, #0]
 8007bc4:	d504      	bpl.n	8007bd0 <__sflush_r+0x7c>
 8007bc6:	1c42      	adds	r2, r0, #1
 8007bc8:	d101      	bne.n	8007bce <__sflush_r+0x7a>
 8007bca:	682b      	ldr	r3, [r5, #0]
 8007bcc:	b903      	cbnz	r3, 8007bd0 <__sflush_r+0x7c>
 8007bce:	6560      	str	r0, [r4, #84]	; 0x54
 8007bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bd2:	602f      	str	r7, [r5, #0]
 8007bd4:	2900      	cmp	r1, #0
 8007bd6:	d0ca      	beq.n	8007b6e <__sflush_r+0x1a>
 8007bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bdc:	4299      	cmp	r1, r3
 8007bde:	d002      	beq.n	8007be6 <__sflush_r+0x92>
 8007be0:	4628      	mov	r0, r5
 8007be2:	f7ff fadb 	bl	800719c <_free_r>
 8007be6:	2000      	movs	r0, #0
 8007be8:	6360      	str	r0, [r4, #52]	; 0x34
 8007bea:	e7c1      	b.n	8007b70 <__sflush_r+0x1c>
 8007bec:	6a21      	ldr	r1, [r4, #32]
 8007bee:	2301      	movs	r3, #1
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	47b0      	blx	r6
 8007bf4:	1c41      	adds	r1, r0, #1
 8007bf6:	d1c7      	bne.n	8007b88 <__sflush_r+0x34>
 8007bf8:	682b      	ldr	r3, [r5, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d0c4      	beq.n	8007b88 <__sflush_r+0x34>
 8007bfe:	2b1d      	cmp	r3, #29
 8007c00:	d001      	beq.n	8007c06 <__sflush_r+0xb2>
 8007c02:	2b16      	cmp	r3, #22
 8007c04:	d101      	bne.n	8007c0a <__sflush_r+0xb6>
 8007c06:	602f      	str	r7, [r5, #0]
 8007c08:	e7b1      	b.n	8007b6e <__sflush_r+0x1a>
 8007c0a:	89a3      	ldrh	r3, [r4, #12]
 8007c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c10:	81a3      	strh	r3, [r4, #12]
 8007c12:	e7ad      	b.n	8007b70 <__sflush_r+0x1c>
 8007c14:	690f      	ldr	r7, [r1, #16]
 8007c16:	2f00      	cmp	r7, #0
 8007c18:	d0a9      	beq.n	8007b6e <__sflush_r+0x1a>
 8007c1a:	0793      	lsls	r3, r2, #30
 8007c1c:	680e      	ldr	r6, [r1, #0]
 8007c1e:	bf08      	it	eq
 8007c20:	694b      	ldreq	r3, [r1, #20]
 8007c22:	600f      	str	r7, [r1, #0]
 8007c24:	bf18      	it	ne
 8007c26:	2300      	movne	r3, #0
 8007c28:	eba6 0807 	sub.w	r8, r6, r7
 8007c2c:	608b      	str	r3, [r1, #8]
 8007c2e:	f1b8 0f00 	cmp.w	r8, #0
 8007c32:	dd9c      	ble.n	8007b6e <__sflush_r+0x1a>
 8007c34:	6a21      	ldr	r1, [r4, #32]
 8007c36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c38:	4643      	mov	r3, r8
 8007c3a:	463a      	mov	r2, r7
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	47b0      	blx	r6
 8007c40:	2800      	cmp	r0, #0
 8007c42:	dc06      	bgt.n	8007c52 <__sflush_r+0xfe>
 8007c44:	89a3      	ldrh	r3, [r4, #12]
 8007c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c4a:	81a3      	strh	r3, [r4, #12]
 8007c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c50:	e78e      	b.n	8007b70 <__sflush_r+0x1c>
 8007c52:	4407      	add	r7, r0
 8007c54:	eba8 0800 	sub.w	r8, r8, r0
 8007c58:	e7e9      	b.n	8007c2e <__sflush_r+0xda>
 8007c5a:	bf00      	nop
 8007c5c:	20400001 	.word	0x20400001

08007c60 <_fflush_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	690b      	ldr	r3, [r1, #16]
 8007c64:	4605      	mov	r5, r0
 8007c66:	460c      	mov	r4, r1
 8007c68:	b913      	cbnz	r3, 8007c70 <_fflush_r+0x10>
 8007c6a:	2500      	movs	r5, #0
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
 8007c70:	b118      	cbz	r0, 8007c7a <_fflush_r+0x1a>
 8007c72:	6983      	ldr	r3, [r0, #24]
 8007c74:	b90b      	cbnz	r3, 8007c7a <_fflush_r+0x1a>
 8007c76:	f000 f887 	bl	8007d88 <__sinit>
 8007c7a:	4b14      	ldr	r3, [pc, #80]	; (8007ccc <_fflush_r+0x6c>)
 8007c7c:	429c      	cmp	r4, r3
 8007c7e:	d11b      	bne.n	8007cb8 <_fflush_r+0x58>
 8007c80:	686c      	ldr	r4, [r5, #4]
 8007c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d0ef      	beq.n	8007c6a <_fflush_r+0xa>
 8007c8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c8c:	07d0      	lsls	r0, r2, #31
 8007c8e:	d404      	bmi.n	8007c9a <_fflush_r+0x3a>
 8007c90:	0599      	lsls	r1, r3, #22
 8007c92:	d402      	bmi.n	8007c9a <_fflush_r+0x3a>
 8007c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c96:	f000 f915 	bl	8007ec4 <__retarget_lock_acquire_recursive>
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	4621      	mov	r1, r4
 8007c9e:	f7ff ff59 	bl	8007b54 <__sflush_r>
 8007ca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ca4:	07da      	lsls	r2, r3, #31
 8007ca6:	4605      	mov	r5, r0
 8007ca8:	d4e0      	bmi.n	8007c6c <_fflush_r+0xc>
 8007caa:	89a3      	ldrh	r3, [r4, #12]
 8007cac:	059b      	lsls	r3, r3, #22
 8007cae:	d4dd      	bmi.n	8007c6c <_fflush_r+0xc>
 8007cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cb2:	f000 f908 	bl	8007ec6 <__retarget_lock_release_recursive>
 8007cb6:	e7d9      	b.n	8007c6c <_fflush_r+0xc>
 8007cb8:	4b05      	ldr	r3, [pc, #20]	; (8007cd0 <_fflush_r+0x70>)
 8007cba:	429c      	cmp	r4, r3
 8007cbc:	d101      	bne.n	8007cc2 <_fflush_r+0x62>
 8007cbe:	68ac      	ldr	r4, [r5, #8]
 8007cc0:	e7df      	b.n	8007c82 <_fflush_r+0x22>
 8007cc2:	4b04      	ldr	r3, [pc, #16]	; (8007cd4 <_fflush_r+0x74>)
 8007cc4:	429c      	cmp	r4, r3
 8007cc6:	bf08      	it	eq
 8007cc8:	68ec      	ldreq	r4, [r5, #12]
 8007cca:	e7da      	b.n	8007c82 <_fflush_r+0x22>
 8007ccc:	080086e4 	.word	0x080086e4
 8007cd0:	08008704 	.word	0x08008704
 8007cd4:	080086c4 	.word	0x080086c4

08007cd8 <std>:
 8007cd8:	2300      	movs	r3, #0
 8007cda:	b510      	push	{r4, lr}
 8007cdc:	4604      	mov	r4, r0
 8007cde:	e9c0 3300 	strd	r3, r3, [r0]
 8007ce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ce6:	6083      	str	r3, [r0, #8]
 8007ce8:	8181      	strh	r1, [r0, #12]
 8007cea:	6643      	str	r3, [r0, #100]	; 0x64
 8007cec:	81c2      	strh	r2, [r0, #14]
 8007cee:	6183      	str	r3, [r0, #24]
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	2208      	movs	r2, #8
 8007cf4:	305c      	adds	r0, #92	; 0x5c
 8007cf6:	f7fb fe15 	bl	8003924 <memset>
 8007cfa:	4b05      	ldr	r3, [pc, #20]	; (8007d10 <std+0x38>)
 8007cfc:	6263      	str	r3, [r4, #36]	; 0x24
 8007cfe:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <std+0x3c>)
 8007d00:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d02:	4b05      	ldr	r3, [pc, #20]	; (8007d18 <std+0x40>)
 8007d04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d06:	4b05      	ldr	r3, [pc, #20]	; (8007d1c <std+0x44>)
 8007d08:	6224      	str	r4, [r4, #32]
 8007d0a:	6323      	str	r3, [r4, #48]	; 0x30
 8007d0c:	bd10      	pop	{r4, pc}
 8007d0e:	bf00      	nop
 8007d10:	08008029 	.word	0x08008029
 8007d14:	0800804b 	.word	0x0800804b
 8007d18:	08008083 	.word	0x08008083
 8007d1c:	080080a7 	.word	0x080080a7

08007d20 <_cleanup_r>:
 8007d20:	4901      	ldr	r1, [pc, #4]	; (8007d28 <_cleanup_r+0x8>)
 8007d22:	f000 b8af 	b.w	8007e84 <_fwalk_reent>
 8007d26:	bf00      	nop
 8007d28:	08007c61 	.word	0x08007c61

08007d2c <__sfmoreglue>:
 8007d2c:	b570      	push	{r4, r5, r6, lr}
 8007d2e:	1e4a      	subs	r2, r1, #1
 8007d30:	2568      	movs	r5, #104	; 0x68
 8007d32:	4355      	muls	r5, r2
 8007d34:	460e      	mov	r6, r1
 8007d36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d3a:	f7ff fa7f 	bl	800723c <_malloc_r>
 8007d3e:	4604      	mov	r4, r0
 8007d40:	b140      	cbz	r0, 8007d54 <__sfmoreglue+0x28>
 8007d42:	2100      	movs	r1, #0
 8007d44:	e9c0 1600 	strd	r1, r6, [r0]
 8007d48:	300c      	adds	r0, #12
 8007d4a:	60a0      	str	r0, [r4, #8]
 8007d4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d50:	f7fb fde8 	bl	8003924 <memset>
 8007d54:	4620      	mov	r0, r4
 8007d56:	bd70      	pop	{r4, r5, r6, pc}

08007d58 <__sfp_lock_acquire>:
 8007d58:	4801      	ldr	r0, [pc, #4]	; (8007d60 <__sfp_lock_acquire+0x8>)
 8007d5a:	f000 b8b3 	b.w	8007ec4 <__retarget_lock_acquire_recursive>
 8007d5e:	bf00      	nop
 8007d60:	200002e4 	.word	0x200002e4

08007d64 <__sfp_lock_release>:
 8007d64:	4801      	ldr	r0, [pc, #4]	; (8007d6c <__sfp_lock_release+0x8>)
 8007d66:	f000 b8ae 	b.w	8007ec6 <__retarget_lock_release_recursive>
 8007d6a:	bf00      	nop
 8007d6c:	200002e4 	.word	0x200002e4

08007d70 <__sinit_lock_acquire>:
 8007d70:	4801      	ldr	r0, [pc, #4]	; (8007d78 <__sinit_lock_acquire+0x8>)
 8007d72:	f000 b8a7 	b.w	8007ec4 <__retarget_lock_acquire_recursive>
 8007d76:	bf00      	nop
 8007d78:	200002df 	.word	0x200002df

08007d7c <__sinit_lock_release>:
 8007d7c:	4801      	ldr	r0, [pc, #4]	; (8007d84 <__sinit_lock_release+0x8>)
 8007d7e:	f000 b8a2 	b.w	8007ec6 <__retarget_lock_release_recursive>
 8007d82:	bf00      	nop
 8007d84:	200002df 	.word	0x200002df

08007d88 <__sinit>:
 8007d88:	b510      	push	{r4, lr}
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	f7ff fff0 	bl	8007d70 <__sinit_lock_acquire>
 8007d90:	69a3      	ldr	r3, [r4, #24]
 8007d92:	b11b      	cbz	r3, 8007d9c <__sinit+0x14>
 8007d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d98:	f7ff bff0 	b.w	8007d7c <__sinit_lock_release>
 8007d9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007da0:	6523      	str	r3, [r4, #80]	; 0x50
 8007da2:	4b13      	ldr	r3, [pc, #76]	; (8007df0 <__sinit+0x68>)
 8007da4:	4a13      	ldr	r2, [pc, #76]	; (8007df4 <__sinit+0x6c>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007daa:	42a3      	cmp	r3, r4
 8007dac:	bf04      	itt	eq
 8007dae:	2301      	moveq	r3, #1
 8007db0:	61a3      	streq	r3, [r4, #24]
 8007db2:	4620      	mov	r0, r4
 8007db4:	f000 f820 	bl	8007df8 <__sfp>
 8007db8:	6060      	str	r0, [r4, #4]
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f000 f81c 	bl	8007df8 <__sfp>
 8007dc0:	60a0      	str	r0, [r4, #8]
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	f000 f818 	bl	8007df8 <__sfp>
 8007dc8:	2200      	movs	r2, #0
 8007dca:	60e0      	str	r0, [r4, #12]
 8007dcc:	2104      	movs	r1, #4
 8007dce:	6860      	ldr	r0, [r4, #4]
 8007dd0:	f7ff ff82 	bl	8007cd8 <std>
 8007dd4:	68a0      	ldr	r0, [r4, #8]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	2109      	movs	r1, #9
 8007dda:	f7ff ff7d 	bl	8007cd8 <std>
 8007dde:	68e0      	ldr	r0, [r4, #12]
 8007de0:	2202      	movs	r2, #2
 8007de2:	2112      	movs	r1, #18
 8007de4:	f7ff ff78 	bl	8007cd8 <std>
 8007de8:	2301      	movs	r3, #1
 8007dea:	61a3      	str	r3, [r4, #24]
 8007dec:	e7d2      	b.n	8007d94 <__sinit+0xc>
 8007dee:	bf00      	nop
 8007df0:	08008270 	.word	0x08008270
 8007df4:	08007d21 	.word	0x08007d21

08007df8 <__sfp>:
 8007df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dfa:	4607      	mov	r7, r0
 8007dfc:	f7ff ffac 	bl	8007d58 <__sfp_lock_acquire>
 8007e00:	4b1e      	ldr	r3, [pc, #120]	; (8007e7c <__sfp+0x84>)
 8007e02:	681e      	ldr	r6, [r3, #0]
 8007e04:	69b3      	ldr	r3, [r6, #24]
 8007e06:	b913      	cbnz	r3, 8007e0e <__sfp+0x16>
 8007e08:	4630      	mov	r0, r6
 8007e0a:	f7ff ffbd 	bl	8007d88 <__sinit>
 8007e0e:	3648      	adds	r6, #72	; 0x48
 8007e10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e14:	3b01      	subs	r3, #1
 8007e16:	d503      	bpl.n	8007e20 <__sfp+0x28>
 8007e18:	6833      	ldr	r3, [r6, #0]
 8007e1a:	b30b      	cbz	r3, 8007e60 <__sfp+0x68>
 8007e1c:	6836      	ldr	r6, [r6, #0]
 8007e1e:	e7f7      	b.n	8007e10 <__sfp+0x18>
 8007e20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e24:	b9d5      	cbnz	r5, 8007e5c <__sfp+0x64>
 8007e26:	4b16      	ldr	r3, [pc, #88]	; (8007e80 <__sfp+0x88>)
 8007e28:	60e3      	str	r3, [r4, #12]
 8007e2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e2e:	6665      	str	r5, [r4, #100]	; 0x64
 8007e30:	f000 f847 	bl	8007ec2 <__retarget_lock_init_recursive>
 8007e34:	f7ff ff96 	bl	8007d64 <__sfp_lock_release>
 8007e38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e40:	6025      	str	r5, [r4, #0]
 8007e42:	61a5      	str	r5, [r4, #24]
 8007e44:	2208      	movs	r2, #8
 8007e46:	4629      	mov	r1, r5
 8007e48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e4c:	f7fb fd6a 	bl	8003924 <memset>
 8007e50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e58:	4620      	mov	r0, r4
 8007e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e5c:	3468      	adds	r4, #104	; 0x68
 8007e5e:	e7d9      	b.n	8007e14 <__sfp+0x1c>
 8007e60:	2104      	movs	r1, #4
 8007e62:	4638      	mov	r0, r7
 8007e64:	f7ff ff62 	bl	8007d2c <__sfmoreglue>
 8007e68:	4604      	mov	r4, r0
 8007e6a:	6030      	str	r0, [r6, #0]
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d1d5      	bne.n	8007e1c <__sfp+0x24>
 8007e70:	f7ff ff78 	bl	8007d64 <__sfp_lock_release>
 8007e74:	230c      	movs	r3, #12
 8007e76:	603b      	str	r3, [r7, #0]
 8007e78:	e7ee      	b.n	8007e58 <__sfp+0x60>
 8007e7a:	bf00      	nop
 8007e7c:	08008270 	.word	0x08008270
 8007e80:	ffff0001 	.word	0xffff0001

08007e84 <_fwalk_reent>:
 8007e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e88:	4606      	mov	r6, r0
 8007e8a:	4688      	mov	r8, r1
 8007e8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e90:	2700      	movs	r7, #0
 8007e92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e96:	f1b9 0901 	subs.w	r9, r9, #1
 8007e9a:	d505      	bpl.n	8007ea8 <_fwalk_reent+0x24>
 8007e9c:	6824      	ldr	r4, [r4, #0]
 8007e9e:	2c00      	cmp	r4, #0
 8007ea0:	d1f7      	bne.n	8007e92 <_fwalk_reent+0xe>
 8007ea2:	4638      	mov	r0, r7
 8007ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ea8:	89ab      	ldrh	r3, [r5, #12]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d907      	bls.n	8007ebe <_fwalk_reent+0x3a>
 8007eae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	d003      	beq.n	8007ebe <_fwalk_reent+0x3a>
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	4630      	mov	r0, r6
 8007eba:	47c0      	blx	r8
 8007ebc:	4307      	orrs	r7, r0
 8007ebe:	3568      	adds	r5, #104	; 0x68
 8007ec0:	e7e9      	b.n	8007e96 <_fwalk_reent+0x12>

08007ec2 <__retarget_lock_init_recursive>:
 8007ec2:	4770      	bx	lr

08007ec4 <__retarget_lock_acquire_recursive>:
 8007ec4:	4770      	bx	lr

08007ec6 <__retarget_lock_release_recursive>:
 8007ec6:	4770      	bx	lr

08007ec8 <__swhatbuf_r>:
 8007ec8:	b570      	push	{r4, r5, r6, lr}
 8007eca:	460e      	mov	r6, r1
 8007ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed0:	2900      	cmp	r1, #0
 8007ed2:	b096      	sub	sp, #88	; 0x58
 8007ed4:	4614      	mov	r4, r2
 8007ed6:	461d      	mov	r5, r3
 8007ed8:	da07      	bge.n	8007eea <__swhatbuf_r+0x22>
 8007eda:	2300      	movs	r3, #0
 8007edc:	602b      	str	r3, [r5, #0]
 8007ede:	89b3      	ldrh	r3, [r6, #12]
 8007ee0:	061a      	lsls	r2, r3, #24
 8007ee2:	d410      	bmi.n	8007f06 <__swhatbuf_r+0x3e>
 8007ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ee8:	e00e      	b.n	8007f08 <__swhatbuf_r+0x40>
 8007eea:	466a      	mov	r2, sp
 8007eec:	f000 f902 	bl	80080f4 <_fstat_r>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	dbf2      	blt.n	8007eda <__swhatbuf_r+0x12>
 8007ef4:	9a01      	ldr	r2, [sp, #4]
 8007ef6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007efa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007efe:	425a      	negs	r2, r3
 8007f00:	415a      	adcs	r2, r3
 8007f02:	602a      	str	r2, [r5, #0]
 8007f04:	e7ee      	b.n	8007ee4 <__swhatbuf_r+0x1c>
 8007f06:	2340      	movs	r3, #64	; 0x40
 8007f08:	2000      	movs	r0, #0
 8007f0a:	6023      	str	r3, [r4, #0]
 8007f0c:	b016      	add	sp, #88	; 0x58
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}

08007f10 <__smakebuf_r>:
 8007f10:	898b      	ldrh	r3, [r1, #12]
 8007f12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f14:	079d      	lsls	r5, r3, #30
 8007f16:	4606      	mov	r6, r0
 8007f18:	460c      	mov	r4, r1
 8007f1a:	d507      	bpl.n	8007f2c <__smakebuf_r+0x1c>
 8007f1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	6123      	str	r3, [r4, #16]
 8007f24:	2301      	movs	r3, #1
 8007f26:	6163      	str	r3, [r4, #20]
 8007f28:	b002      	add	sp, #8
 8007f2a:	bd70      	pop	{r4, r5, r6, pc}
 8007f2c:	ab01      	add	r3, sp, #4
 8007f2e:	466a      	mov	r2, sp
 8007f30:	f7ff ffca 	bl	8007ec8 <__swhatbuf_r>
 8007f34:	9900      	ldr	r1, [sp, #0]
 8007f36:	4605      	mov	r5, r0
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f7ff f97f 	bl	800723c <_malloc_r>
 8007f3e:	b948      	cbnz	r0, 8007f54 <__smakebuf_r+0x44>
 8007f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f44:	059a      	lsls	r2, r3, #22
 8007f46:	d4ef      	bmi.n	8007f28 <__smakebuf_r+0x18>
 8007f48:	f023 0303 	bic.w	r3, r3, #3
 8007f4c:	f043 0302 	orr.w	r3, r3, #2
 8007f50:	81a3      	strh	r3, [r4, #12]
 8007f52:	e7e3      	b.n	8007f1c <__smakebuf_r+0xc>
 8007f54:	4b0d      	ldr	r3, [pc, #52]	; (8007f8c <__smakebuf_r+0x7c>)
 8007f56:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f58:	89a3      	ldrh	r3, [r4, #12]
 8007f5a:	6020      	str	r0, [r4, #0]
 8007f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f60:	81a3      	strh	r3, [r4, #12]
 8007f62:	9b00      	ldr	r3, [sp, #0]
 8007f64:	6163      	str	r3, [r4, #20]
 8007f66:	9b01      	ldr	r3, [sp, #4]
 8007f68:	6120      	str	r0, [r4, #16]
 8007f6a:	b15b      	cbz	r3, 8007f84 <__smakebuf_r+0x74>
 8007f6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f70:	4630      	mov	r0, r6
 8007f72:	f000 f8d1 	bl	8008118 <_isatty_r>
 8007f76:	b128      	cbz	r0, 8007f84 <__smakebuf_r+0x74>
 8007f78:	89a3      	ldrh	r3, [r4, #12]
 8007f7a:	f023 0303 	bic.w	r3, r3, #3
 8007f7e:	f043 0301 	orr.w	r3, r3, #1
 8007f82:	81a3      	strh	r3, [r4, #12]
 8007f84:	89a0      	ldrh	r0, [r4, #12]
 8007f86:	4305      	orrs	r5, r0
 8007f88:	81a5      	strh	r5, [r4, #12]
 8007f8a:	e7cd      	b.n	8007f28 <__smakebuf_r+0x18>
 8007f8c:	08007d21 	.word	0x08007d21

08007f90 <_malloc_usable_size_r>:
 8007f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f94:	1f18      	subs	r0, r3, #4
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	bfbc      	itt	lt
 8007f9a:	580b      	ldrlt	r3, [r1, r0]
 8007f9c:	18c0      	addlt	r0, r0, r3
 8007f9e:	4770      	bx	lr

08007fa0 <_raise_r>:
 8007fa0:	291f      	cmp	r1, #31
 8007fa2:	b538      	push	{r3, r4, r5, lr}
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	460d      	mov	r5, r1
 8007fa8:	d904      	bls.n	8007fb4 <_raise_r+0x14>
 8007faa:	2316      	movs	r3, #22
 8007fac:	6003      	str	r3, [r0, #0]
 8007fae:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb2:	bd38      	pop	{r3, r4, r5, pc}
 8007fb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007fb6:	b112      	cbz	r2, 8007fbe <_raise_r+0x1e>
 8007fb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007fbc:	b94b      	cbnz	r3, 8007fd2 <_raise_r+0x32>
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f000 f830 	bl	8008024 <_getpid_r>
 8007fc4:	462a      	mov	r2, r5
 8007fc6:	4601      	mov	r1, r0
 8007fc8:	4620      	mov	r0, r4
 8007fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fce:	f000 b817 	b.w	8008000 <_kill_r>
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d00a      	beq.n	8007fec <_raise_r+0x4c>
 8007fd6:	1c59      	adds	r1, r3, #1
 8007fd8:	d103      	bne.n	8007fe2 <_raise_r+0x42>
 8007fda:	2316      	movs	r3, #22
 8007fdc:	6003      	str	r3, [r0, #0]
 8007fde:	2001      	movs	r0, #1
 8007fe0:	e7e7      	b.n	8007fb2 <_raise_r+0x12>
 8007fe2:	2400      	movs	r4, #0
 8007fe4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007fe8:	4628      	mov	r0, r5
 8007fea:	4798      	blx	r3
 8007fec:	2000      	movs	r0, #0
 8007fee:	e7e0      	b.n	8007fb2 <_raise_r+0x12>

08007ff0 <raise>:
 8007ff0:	4b02      	ldr	r3, [pc, #8]	; (8007ffc <raise+0xc>)
 8007ff2:	4601      	mov	r1, r0
 8007ff4:	6818      	ldr	r0, [r3, #0]
 8007ff6:	f7ff bfd3 	b.w	8007fa0 <_raise_r>
 8007ffa:	bf00      	nop
 8007ffc:	20000008 	.word	0x20000008

08008000 <_kill_r>:
 8008000:	b538      	push	{r3, r4, r5, lr}
 8008002:	4d07      	ldr	r5, [pc, #28]	; (8008020 <_kill_r+0x20>)
 8008004:	2300      	movs	r3, #0
 8008006:	4604      	mov	r4, r0
 8008008:	4608      	mov	r0, r1
 800800a:	4611      	mov	r1, r2
 800800c:	602b      	str	r3, [r5, #0]
 800800e:	f7f9 fb39 	bl	8001684 <_kill>
 8008012:	1c43      	adds	r3, r0, #1
 8008014:	d102      	bne.n	800801c <_kill_r+0x1c>
 8008016:	682b      	ldr	r3, [r5, #0]
 8008018:	b103      	cbz	r3, 800801c <_kill_r+0x1c>
 800801a:	6023      	str	r3, [r4, #0]
 800801c:	bd38      	pop	{r3, r4, r5, pc}
 800801e:	bf00      	nop
 8008020:	200002d8 	.word	0x200002d8

08008024 <_getpid_r>:
 8008024:	f7f9 bb26 	b.w	8001674 <_getpid>

08008028 <__sread>:
 8008028:	b510      	push	{r4, lr}
 800802a:	460c      	mov	r4, r1
 800802c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008030:	f000 f894 	bl	800815c <_read_r>
 8008034:	2800      	cmp	r0, #0
 8008036:	bfab      	itete	ge
 8008038:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800803a:	89a3      	ldrhlt	r3, [r4, #12]
 800803c:	181b      	addge	r3, r3, r0
 800803e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008042:	bfac      	ite	ge
 8008044:	6563      	strge	r3, [r4, #84]	; 0x54
 8008046:	81a3      	strhlt	r3, [r4, #12]
 8008048:	bd10      	pop	{r4, pc}

0800804a <__swrite>:
 800804a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800804e:	461f      	mov	r7, r3
 8008050:	898b      	ldrh	r3, [r1, #12]
 8008052:	05db      	lsls	r3, r3, #23
 8008054:	4605      	mov	r5, r0
 8008056:	460c      	mov	r4, r1
 8008058:	4616      	mov	r6, r2
 800805a:	d505      	bpl.n	8008068 <__swrite+0x1e>
 800805c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008060:	2302      	movs	r3, #2
 8008062:	2200      	movs	r2, #0
 8008064:	f000 f868 	bl	8008138 <_lseek_r>
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800806e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008072:	81a3      	strh	r3, [r4, #12]
 8008074:	4632      	mov	r2, r6
 8008076:	463b      	mov	r3, r7
 8008078:	4628      	mov	r0, r5
 800807a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800807e:	f000 b817 	b.w	80080b0 <_write_r>

08008082 <__sseek>:
 8008082:	b510      	push	{r4, lr}
 8008084:	460c      	mov	r4, r1
 8008086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800808a:	f000 f855 	bl	8008138 <_lseek_r>
 800808e:	1c43      	adds	r3, r0, #1
 8008090:	89a3      	ldrh	r3, [r4, #12]
 8008092:	bf15      	itete	ne
 8008094:	6560      	strne	r0, [r4, #84]	; 0x54
 8008096:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800809a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800809e:	81a3      	strheq	r3, [r4, #12]
 80080a0:	bf18      	it	ne
 80080a2:	81a3      	strhne	r3, [r4, #12]
 80080a4:	bd10      	pop	{r4, pc}

080080a6 <__sclose>:
 80080a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080aa:	f000 b813 	b.w	80080d4 <_close_r>
	...

080080b0 <_write_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	4d07      	ldr	r5, [pc, #28]	; (80080d0 <_write_r+0x20>)
 80080b4:	4604      	mov	r4, r0
 80080b6:	4608      	mov	r0, r1
 80080b8:	4611      	mov	r1, r2
 80080ba:	2200      	movs	r2, #0
 80080bc:	602a      	str	r2, [r5, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	f7f9 fb17 	bl	80016f2 <_write>
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	d102      	bne.n	80080ce <_write_r+0x1e>
 80080c8:	682b      	ldr	r3, [r5, #0]
 80080ca:	b103      	cbz	r3, 80080ce <_write_r+0x1e>
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	bd38      	pop	{r3, r4, r5, pc}
 80080d0:	200002d8 	.word	0x200002d8

080080d4 <_close_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	4d06      	ldr	r5, [pc, #24]	; (80080f0 <_close_r+0x1c>)
 80080d8:	2300      	movs	r3, #0
 80080da:	4604      	mov	r4, r0
 80080dc:	4608      	mov	r0, r1
 80080de:	602b      	str	r3, [r5, #0]
 80080e0:	f7f9 fb23 	bl	800172a <_close>
 80080e4:	1c43      	adds	r3, r0, #1
 80080e6:	d102      	bne.n	80080ee <_close_r+0x1a>
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	b103      	cbz	r3, 80080ee <_close_r+0x1a>
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	bd38      	pop	{r3, r4, r5, pc}
 80080f0:	200002d8 	.word	0x200002d8

080080f4 <_fstat_r>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	4d07      	ldr	r5, [pc, #28]	; (8008114 <_fstat_r+0x20>)
 80080f8:	2300      	movs	r3, #0
 80080fa:	4604      	mov	r4, r0
 80080fc:	4608      	mov	r0, r1
 80080fe:	4611      	mov	r1, r2
 8008100:	602b      	str	r3, [r5, #0]
 8008102:	f7f9 fb1e 	bl	8001742 <_fstat>
 8008106:	1c43      	adds	r3, r0, #1
 8008108:	d102      	bne.n	8008110 <_fstat_r+0x1c>
 800810a:	682b      	ldr	r3, [r5, #0]
 800810c:	b103      	cbz	r3, 8008110 <_fstat_r+0x1c>
 800810e:	6023      	str	r3, [r4, #0]
 8008110:	bd38      	pop	{r3, r4, r5, pc}
 8008112:	bf00      	nop
 8008114:	200002d8 	.word	0x200002d8

08008118 <_isatty_r>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	4d06      	ldr	r5, [pc, #24]	; (8008134 <_isatty_r+0x1c>)
 800811c:	2300      	movs	r3, #0
 800811e:	4604      	mov	r4, r0
 8008120:	4608      	mov	r0, r1
 8008122:	602b      	str	r3, [r5, #0]
 8008124:	f7f9 fb1d 	bl	8001762 <_isatty>
 8008128:	1c43      	adds	r3, r0, #1
 800812a:	d102      	bne.n	8008132 <_isatty_r+0x1a>
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	b103      	cbz	r3, 8008132 <_isatty_r+0x1a>
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	bd38      	pop	{r3, r4, r5, pc}
 8008134:	200002d8 	.word	0x200002d8

08008138 <_lseek_r>:
 8008138:	b538      	push	{r3, r4, r5, lr}
 800813a:	4d07      	ldr	r5, [pc, #28]	; (8008158 <_lseek_r+0x20>)
 800813c:	4604      	mov	r4, r0
 800813e:	4608      	mov	r0, r1
 8008140:	4611      	mov	r1, r2
 8008142:	2200      	movs	r2, #0
 8008144:	602a      	str	r2, [r5, #0]
 8008146:	461a      	mov	r2, r3
 8008148:	f7f9 fb16 	bl	8001778 <_lseek>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d102      	bne.n	8008156 <_lseek_r+0x1e>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	b103      	cbz	r3, 8008156 <_lseek_r+0x1e>
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	200002d8 	.word	0x200002d8

0800815c <_read_r>:
 800815c:	b538      	push	{r3, r4, r5, lr}
 800815e:	4d07      	ldr	r5, [pc, #28]	; (800817c <_read_r+0x20>)
 8008160:	4604      	mov	r4, r0
 8008162:	4608      	mov	r0, r1
 8008164:	4611      	mov	r1, r2
 8008166:	2200      	movs	r2, #0
 8008168:	602a      	str	r2, [r5, #0]
 800816a:	461a      	mov	r2, r3
 800816c:	f7f9 faa4 	bl	80016b8 <_read>
 8008170:	1c43      	adds	r3, r0, #1
 8008172:	d102      	bne.n	800817a <_read_r+0x1e>
 8008174:	682b      	ldr	r3, [r5, #0]
 8008176:	b103      	cbz	r3, 800817a <_read_r+0x1e>
 8008178:	6023      	str	r3, [r4, #0]
 800817a:	bd38      	pop	{r3, r4, r5, pc}
 800817c:	200002d8 	.word	0x200002d8

08008180 <_init>:
 8008180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008182:	bf00      	nop
 8008184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008186:	bc08      	pop	{r3}
 8008188:	469e      	mov	lr, r3
 800818a:	4770      	bx	lr

0800818c <_fini>:
 800818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818e:	bf00      	nop
 8008190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008192:	bc08      	pop	{r3}
 8008194:	469e      	mov	lr, r3
 8008196:	4770      	bx	lr
