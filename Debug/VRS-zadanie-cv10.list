
VRS-zadanie-cv10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008158  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  080082e8  080082e8  000182e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008874  08008874  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008874  08008874  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008874  08008874  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008874  08008874  00018874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008878  08008878  00018878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800887c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000110  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ec  200002ec  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a9ac  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f9b  00000000  00000000  0002abb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000928  00000000  00000000  0002cb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000840  00000000  00000000  0002d480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018455  00000000  00000000  0002dcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000075db  00000000  00000000  00046115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b576  00000000  00000000  0004d6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c8c66  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a88  00000000  00000000  000c8cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082d0 	.word	0x080082d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080082d0 	.word	0x080082d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <__NVIC_GetPriorityGrouping+0x18>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	f003 0307 	and.w	r3, r3, #7
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	db0b      	blt.n	8000d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	f003 021f 	and.w	r2, r3, #31
 8000d28:	4907      	ldr	r1, [pc, #28]	; (8000d48 <__NVIC_EnableIRQ+0x38>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	095b      	lsrs	r3, r3, #5
 8000d30:	2001      	movs	r0, #1
 8000d32:	fa00 f202 	lsl.w	r2, r0, r2
 8000d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db0a      	blt.n	8000d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	490c      	ldr	r1, [pc, #48]	; (8000d98 <__NVIC_SetPriority+0x4c>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d74:	e00a      	b.n	8000d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4908      	ldr	r1, [pc, #32]	; (8000d9c <__NVIC_SetPriority+0x50>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	3b04      	subs	r3, #4
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	761a      	strb	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f1c3 0307 	rsb	r3, r3, #7
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2304      	movcs	r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d902      	bls.n	8000dd0 <NVIC_EncodePriority+0x30>
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3b03      	subs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <NVIC_EncodePriority+0x32>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43d9      	mvns	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4313      	orrs	r3, r2
         );
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3724      	adds	r7, #36	; 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e12:	695a      	ldr	r2, [r3, #20]
 8000e14:	4907      	ldr	r1, [pc, #28]	; (8000e34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e1e:	695a      	ldr	r2, [r3, #20]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4013      	ands	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	40021000 	.word	0x40021000

08000e38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff ffe3 	bl	8000e08 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e42:	f7ff ff57 	bl	8000cf4 <__NVIC_GetPriorityGrouping>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ffa7 	bl	8000da0 <NVIC_EncodePriority>
 8000e52:	4603      	mov	r3, r0
 8000e54:	4619      	mov	r1, r3
 8000e56:	2010      	movs	r0, #16
 8000e58:	f7ff ff78 	bl	8000d4c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000e5c:	2010      	movs	r0, #16
 8000e5e:	f7ff ff57 	bl	8000d10 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e62:	f7ff ff47 	bl	8000cf4 <__NVIC_GetPriorityGrouping>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff97 	bl	8000da0 <NVIC_EncodePriority>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4619      	mov	r1, r3
 8000e76:	2011      	movs	r0, #17
 8000e78:	f7ff ff68 	bl	8000d4c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000e7c:	2011      	movs	r0, #17
 8000e7e:	f7ff ff47 	bl	8000d10 <__NVIC_EnableIRQ>

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <LL_AHB1_GRP1_EnableClock>:
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e92:	695a      	ldr	r2, [r3, #20]
 8000e94:	4907      	ldr	r1, [pc, #28]	; (8000eb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e9e:	695a      	ldr	r2, [r3, #20]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000ebc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ec0:	f7ff ffe2 	bl	8000e88 <LL_AHB1_GRP1_EnableClock>

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <__NVIC_SetPriorityGrouping>:
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_GetPriorityGrouping>:
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_SetPriority>:
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	db0a      	blt.n	8000f56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	490c      	ldr	r1, [pc, #48]	; (8000f78 <__NVIC_SetPriority+0x4c>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	0112      	lsls	r2, r2, #4
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f54:	e00a      	b.n	8000f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4908      	ldr	r1, [pc, #32]	; (8000f7c <__NVIC_SetPriority+0x50>)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	3b04      	subs	r3, #4
 8000f64:	0112      	lsls	r2, r2, #4
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	440b      	add	r3, r1
 8000f6a:	761a      	strb	r2, [r3, #24]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <NVIC_EncodePriority>:
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	; 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f1c3 0307 	rsb	r3, r3, #7
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	bf28      	it	cs
 8000f9e:	2304      	movcs	r3, #4
 8000fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d902      	bls.n	8000fb0 <NVIC_EncodePriority+0x30>
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b03      	subs	r3, #3
 8000fae:	e000      	b.n	8000fb2 <NVIC_EncodePriority+0x32>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43d9      	mvns	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	4313      	orrs	r3, r2
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3724      	adds	r7, #36	; 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <LL_RCC_HSI_Enable+0x1c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <LL_RCC_HSI_Enable+0x1c>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000

08001008 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <LL_RCC_HSI_IsReady+0x20>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b02      	cmp	r3, #2
 8001016:	bf0c      	ite	eq
 8001018:	2301      	moveq	r3, #1
 800101a:	2300      	movne	r3, #0
 800101c:	b2db      	uxtb	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	40021000 	.word	0x40021000

0800102c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4904      	ldr	r1, [pc, #16]	; (8001054 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001042:	4313      	orrs	r3, r2
 8001044:	600b      	str	r3, [r1, #0]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000

08001058 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <LL_RCC_SetSysClkSource+0x24>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f023 0203 	bic.w	r2, r3, #3
 8001068:	4904      	ldr	r1, [pc, #16]	; (800107c <LL_RCC_SetSysClkSource+0x24>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4313      	orrs	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40021000 	.word	0x40021000

08001080 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <LL_RCC_GetSysClkSource+0x18>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 030c 	and.w	r3, r3, #12
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000

0800109c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <LL_RCC_SetAHBPrescaler+0x24>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ac:	4904      	ldr	r1, [pc, #16]	; (80010c0 <LL_RCC_SetAHBPrescaler+0x24>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	604b      	str	r3, [r1, #4]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	40021000 	.word	0x40021000

080010c4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010d4:	4904      	ldr	r1, [pc, #16]	; (80010e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4313      	orrs	r3, r2
 80010da:	604b      	str	r3, [r1, #4]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	40021000 	.word	0x40021000

080010ec <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <LL_RCC_SetAPB2Prescaler+0x24>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80010fc:	4904      	ldr	r1, [pc, #16]	; (8001110 <LL_RCC_SetAPB2Prescaler+0x24>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4313      	orrs	r3, r2
 8001102:	604b      	str	r3, [r1, #4]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	40021000 	.word	0x40021000

08001114 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <LL_APB1_GRP1_EnableClock+0x2c>)
 800111e:	69da      	ldr	r2, [r3, #28]
 8001120:	4907      	ldr	r1, [pc, #28]	; (8001140 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4313      	orrs	r3, r2
 8001126:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <LL_APB1_GRP1_EnableClock+0x2c>)
 800112a:	69da      	ldr	r2, [r3, #28]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4013      	ands	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	40021000 	.word	0x40021000

08001144 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <LL_APB2_GRP1_EnableClock+0x2c>)
 800114e:	699a      	ldr	r2, [r3, #24]
 8001150:	4907      	ldr	r1, [pc, #28]	; (8001170 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4313      	orrs	r3, r2
 8001156:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <LL_APB2_GRP1_EnableClock+0x2c>)
 800115a:	699a      	ldr	r2, [r3, #24]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4013      	ands	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001162:	68fb      	ldr	r3, [r7, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	40021000 	.word	0x40021000

08001174 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <LL_FLASH_SetLatency+0x24>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f023 0207 	bic.w	r2, r3, #7
 8001184:	4904      	ldr	r1, [pc, #16]	; (8001198 <LL_FLASH_SetLatency+0x24>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4313      	orrs	r3, r2
 800118a:	600b      	str	r3, [r1, #0]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	40022000 	.word	0x40022000

0800119c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <LL_FLASH_GetLatency+0x18>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0307 	and.w	r3, r3, #7
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40022000 	.word	0x40022000

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b0df      	sub	sp, #380	; 0x17c
 80011bc:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80011be:	2001      	movs	r0, #1
 80011c0:	f7ff ffc0 	bl	8001144 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80011c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80011c8:	f7ff ffa4 	bl	8001114 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011cc:	2003      	movs	r0, #3
 80011ce:	f7ff fe7b 	bl	8000ec8 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80011d2:	f7ff fe9d 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2200      	movs	r2, #0
 80011da:	210f      	movs	r1, #15
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fecf 	bl	8000f80 <NVIC_EncodePriority>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4619      	mov	r1, r3
 80011e6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ea:	f7ff fe9f 	bl	8000f2c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ee:	f000 f86d 	bl	80012cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f2:	f7ff fe61 	bl	8000eb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80011f6:	f7ff fe1f 	bl	8000e38 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011fa:	f001 fa3f 	bl	800267c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80011fe:	f000 fd65 	bl	8001ccc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  USART2_RegisterCallback(proccesDmaData); //DMA callback init
 8001202:	482a      	ldr	r0, [pc, #168]	; (80012ac <main+0xf4>)
 8001204:	f001 fb24 	bl	8002850 <USART2_RegisterCallback>

   dutyCycle = 0; //default duty cycle
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <main+0xf8>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
   mode = 0;
 800120e:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <main+0xfc>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
   countUpDown = 1;
 8001214:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <main+0x100>)
 8001216:	2201      	movs	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]
   dutyCycleManual = 0;
 800121a:	4b28      	ldr	r3, [pc, #160]	; (80012bc <main+0x104>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]


   /*While loop definitions*/
  char data_to_send[100];
  char actual_data_buffer[256];
  strcpy(actual_data_buffer,"");
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  dutyCycleManual = 30;
 8001226:	4b25      	ldr	r3, [pc, #148]	; (80012bc <main+0x104>)
 8001228:	221e      	movs	r2, #30
 800122a:	701a      	strb	r2, [r3, #0]
	  LL_mDelay(1000);
 800122c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001230:	f002 fbc0 	bl	80039b4 <LL_mDelay>
	  dutyCycleManual = 100;
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <main+0x104>)
 8001236:	2264      	movs	r2, #100	; 0x64
 8001238:	701a      	strb	r2, [r3, #0]
	  //Sending info about buffer capacity status
	  	  uint16_t buffer_state = getBufferState();
 800123a:	f001 fa13 	bl	8002664 <getBufferState>
 800123e:	4603      	mov	r3, r0
 8001240:	f8a7 316e 	strh.w	r3, [r7, #366]	; 0x16e
	  	  float buffer_percentage = (float) (buffer_state) / (float) (DMA_USART2_BUFFER_SIZE)*100;
 8001244:	f8b7 316e 	ldrh.w	r3, [r7, #366]	; 0x16e
 8001248:	ee07 3a90 	vmov	s15, r3
 800124c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001250:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80012c0 <main+0x108>
 8001254:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001258:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80012c4 <main+0x10c>
 800125c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001260:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168
	  	  sprintf(data_to_send, "Buffer capacity: %d bytes, occupied memory: %d bytes, load [in %%]:%.2f%%\r\n", DMA_USART2_BUFFER_SIZE, buffer_state, buffer_percentage);
 8001264:	f8b7 416e 	ldrh.w	r4, [r7, #366]	; 0x16e
 8001268:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 800126c:	f7ff f96c 	bl	8000548 <__aeabi_f2d>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8001278:	e9cd 2300 	strd	r2, r3, [sp]
 800127c:	4623      	mov	r3, r4
 800127e:	22c8      	movs	r2, #200	; 0xc8
 8001280:	4911      	ldr	r1, [pc, #68]	; (80012c8 <main+0x110>)
 8001282:	f003 fa7f 	bl	8004784 <siprintf>

	  	  USART2_PutBuffer((uint8_t *) data_to_send, strlen(data_to_send));
 8001286:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800128a:	4618      	mov	r0, r3
 800128c:	f7fe ffa0 	bl	80001d0 <strlen>
 8001290:	4603      	mov	r3, r0
 8001292:	b2da      	uxtb	r2, r3
 8001294:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f001 faea 	bl	8002874 <USART2_PutBuffer>
	  	  LL_mDelay(1000);
 80012a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a4:	f002 fb86 	bl	80039b4 <LL_mDelay>
  {
 80012a8:	e7bd      	b.n	8001226 <main+0x6e>
 80012aa:	bf00      	nop
 80012ac:	08001331 	.word	0x08001331
 80012b0:	20000210 	.word	0x20000210
 80012b4:	20000212 	.word	0x20000212
 80012b8:	20000213 	.word	0x20000213
 80012bc:	20000211 	.word	0x20000211
 80012c0:	43480000 	.word	0x43480000
 80012c4:	42c80000 	.word	0x42c80000
 80012c8:	080082e8 	.word	0x080082e8

080012cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff ff4f 	bl	8001174 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80012d6:	bf00      	nop
 80012d8:	f7ff ff60 	bl	800119c <LL_FLASH_GetLatency>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1fa      	bne.n	80012d8 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80012e2:	f7ff fe81 	bl	8000fe8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80012e6:	bf00      	nop
 80012e8:	f7ff fe8e 	bl	8001008 <LL_RCC_HSI_IsReady>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d1fa      	bne.n	80012e8 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80012f2:	2010      	movs	r0, #16
 80012f4:	f7ff fe9a 	bl	800102c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff fecf 	bl	800109c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80012fe:	2000      	movs	r0, #0
 8001300:	f7ff fee0 	bl	80010c4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff fef1 	bl	80010ec <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff fea4 	bl	8001058 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001310:	bf00      	nop
 8001312:	f7ff feb5 	bl	8001080 <LL_RCC_GetSysClkSource>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1fa      	bne.n	8001312 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 800131c:	4803      	ldr	r0, [pc, #12]	; (800132c <SystemClock_Config+0x60>)
 800131e:	f002 fb3b 	bl	8003998 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8001322:	4802      	ldr	r0, [pc, #8]	; (800132c <SystemClock_Config+0x60>)
 8001324:	f002 fb6c 	bl	8003a00 <LL_SetSystemCoreClock>
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	007a1200 	.word	0x007a1200

08001330 <proccesDmaData>:

/* USER CODE BEGIN 4 */
void proccesDmaData(uint8_t sign)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b09c      	sub	sp, #112	; 0x70
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
	static uint8_t lowercase_char = 0;
	static uint8_t uppercase_char = 0;

		// type your algorithm here:
	char data_number_to_send[100];
	if(sign == '\r') return; //filtering endline character from PuTTY
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	2b0d      	cmp	r3, #13
 800133e:	d066      	beq.n	800140e <proccesDmaData+0xde>


	if(sign == '#' && allow == 0){ //zapneme povolenie pre citanie znakov, startovaci znak je prijaty len raz
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b23      	cmp	r3, #35	; 0x23
 8001344:	d10f      	bne.n	8001366 <proccesDmaData+0x36>
 8001346:	4b34      	ldr	r3, [pc, #208]	; (8001418 <proccesDmaData+0xe8>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10b      	bne.n	8001366 <proccesDmaData+0x36>
		allow = 1;
 800134e:	4b32      	ldr	r3, [pc, #200]	; (8001418 <proccesDmaData+0xe8>)
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
		calculate_sign = 0;
 8001354:	4b31      	ldr	r3, [pc, #196]	; (800141c <proccesDmaData+0xec>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
		lowercase_char = 0;
 800135a:	4b31      	ldr	r3, [pc, #196]	; (8001420 <proccesDmaData+0xf0>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
		uppercase_char = 0;
 8001360:	4b30      	ldr	r3, [pc, #192]	; (8001424 <proccesDmaData+0xf4>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
	}
	if(sign == '$' && allow == 1){ // po prijati ukoncovacieho znaku vypneme povolenie a vypiseme data
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	2b24      	cmp	r3, #36	; 0x24
 800136a:	d11d      	bne.n	80013a8 <proccesDmaData+0x78>
 800136c:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <proccesDmaData+0xe8>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d119      	bne.n	80013a8 <proccesDmaData+0x78>
		allow = 0;
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <proccesDmaData+0xe8>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
		sprintf(data_number_to_send, "Number of lowercase characters: %d , Number of uppercase characters: %d\r\n", lowercase_char,uppercase_char);
 800137a:	4b29      	ldr	r3, [pc, #164]	; (8001420 <proccesDmaData+0xf0>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4b28      	ldr	r3, [pc, #160]	; (8001424 <proccesDmaData+0xf4>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f107 000c 	add.w	r0, r7, #12
 8001388:	4927      	ldr	r1, [pc, #156]	; (8001428 <proccesDmaData+0xf8>)
 800138a:	f003 f9fb 	bl	8004784 <siprintf>
		USART2_PutBuffer((uint8_t *) data_number_to_send, strlen(data_number_to_send));
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	4618      	mov	r0, r3
 8001394:	f7fe ff1c 	bl	80001d0 <strlen>
 8001398:	4603      	mov	r3, r0
 800139a:	b2da      	uxtb	r2, r3
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 fa66 	bl	8002874 <USART2_PutBuffer>
	}
	if(calculate_sign > 35){//ak sme prekrocili pocet znakov o 35, prestaneme znaky ratat a zahodime data
 80013a8:	4b1c      	ldr	r3, [pc, #112]	; (800141c <proccesDmaData+0xec>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b23      	cmp	r3, #35	; 0x23
 80013ae:	d90b      	bls.n	80013c8 <proccesDmaData+0x98>
		allow = 0;
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <proccesDmaData+0xe8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
		calculate_sign = 0;
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <proccesDmaData+0xec>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
		lowercase_char = 0;
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <proccesDmaData+0xf0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
		uppercase_char = 0;
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <proccesDmaData+0xf4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
	}
	if (allow == 1){//ratanie malych/velkych pismen
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <proccesDmaData+0xe8>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d11f      	bne.n	8001410 <proccesDmaData+0xe0>
		calculate_sign++;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <proccesDmaData+0xec>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	4b10      	ldr	r3, [pc, #64]	; (800141c <proccesDmaData+0xec>)
 80013da:	701a      	strb	r2, [r3, #0]
		if(sign >= 'a' && sign <= 'z'){
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	2b60      	cmp	r3, #96	; 0x60
 80013e0:	d908      	bls.n	80013f4 <proccesDmaData+0xc4>
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b7a      	cmp	r3, #122	; 0x7a
 80013e6:	d805      	bhi.n	80013f4 <proccesDmaData+0xc4>
			lowercase_char++;
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <proccesDmaData+0xf0>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <proccesDmaData+0xf0>)
 80013f2:	701a      	strb	r2, [r3, #0]
		}
		if(sign >= 'A' && sign <= 'Z'){
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	2b40      	cmp	r3, #64	; 0x40
 80013f8:	d90a      	bls.n	8001410 <proccesDmaData+0xe0>
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b5a      	cmp	r3, #90	; 0x5a
 80013fe:	d807      	bhi.n	8001410 <proccesDmaData+0xe0>
			uppercase_char++;
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <proccesDmaData+0xf4>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	3301      	adds	r3, #1
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <proccesDmaData+0xf4>)
 800140a:	701a      	strb	r2, [r3, #0]
 800140c:	e000      	b.n	8001410 <proccesDmaData+0xe0>
	if(sign == '\r') return; //filtering endline character from PuTTY
 800140e:	bf00      	nop
		}

	}

}
 8001410:	3770      	adds	r7, #112	; 0x70
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000000 	.word	0x20000000
 800141c:	200001f8 	.word	0x200001f8
 8001420:	200001f9 	.word	0x200001f9
 8001424:	200001fa 	.word	0x200001fa
 8001428:	08008334 	.word	0x08008334

0800142c <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	3b01      	subs	r3, #1
 800143a:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <LL_DMA_DisableChannel+0x3c>)
 800143c:	5cd3      	ldrb	r3, [r2, r3]
 800143e:	461a      	mov	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	3a01      	subs	r2, #1
 800144a:	4907      	ldr	r1, [pc, #28]	; (8001468 <LL_DMA_DisableChannel+0x3c>)
 800144c:	5c8a      	ldrb	r2, [r1, r2]
 800144e:	4611      	mov	r1, r2
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	440a      	add	r2, r1
 8001454:	f023 0301 	bic.w	r3, r3, #1
 8001458:	6013      	str	r3, [r2, #0]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	08008380 	.word	0x08008380

0800146c <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001480:	bf0c      	ite	eq
 8001482:	2301      	moveq	r3, #1
 8001484:	2300      	movne	r3, #0
 8001486:	b2db      	uxtb	r3, r3
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80014a8:	bf0c      	ite	eq
 80014aa:	2301      	moveq	r3, #1
 80014ac:	2300      	movne	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014d0:	bf0c      	ite	eq
 80014d2:	2301      	moveq	r3, #1
 80014d4:	2300      	movne	r3, #0
 80014d6:	b2db      	uxtb	r3, r3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014f2:	605a      	str	r2, [r3, #4]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800150e:	605a      	str	r2, [r3, #4]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800152a:	605a      	str	r2, [r3, #4]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f06f 0201 	mvn.w	r2, #1
 8001546:	611a      	str	r2, [r3, #16]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 0310 	and.w	r3, r3, #16
 800158a:	2b10      	cmp	r3, #16
 800158c:	d101      	bne.n	8001592 <LL_USART_IsActiveFlag_IDLE+0x18>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b0:	2b40      	cmp	r3, #64	; 0x40
 80015b2:	d101      	bne.n	80015b8 <LL_USART_IsActiveFlag_TC+0x18>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <LL_USART_IsActiveFlag_TC+0x1a>
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2210      	movs	r2, #16
 80015d2:	621a      	str	r2, [r3, #32]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <NMI_Handler+0x4>

080015e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <MemManage_Handler+0x4>

080015f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <BusFault_Handler+0x4>

080015f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <UsageFault_Handler+0x4>

080015fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <DMA1_Channel6_IRQHandler+0x38>)
 800163e:	f7ff ff15 	bl	800146c <LL_DMA_IsActiveFlag_TC6>
 8001642:	4603      	mov	r3, r0
 8001644:	2b01      	cmp	r3, #1
 8001646:	d105      	bne.n	8001654 <DMA1_Channel6_IRQHandler+0x1c>
		{
			USART2_CheckDmaReception();
 8001648:	f001 f934 	bl	80028b4 <USART2_CheckDmaReception>
			LL_DMA_ClearFlag_TC6(DMA1);
 800164c:	4808      	ldr	r0, [pc, #32]	; (8001670 <DMA1_Channel6_IRQHandler+0x38>)
 800164e:	f7ff ff49 	bl	80014e4 <LL_DMA_ClearFlag_TC6>
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001652:	e00a      	b.n	800166a <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8001654:	4806      	ldr	r0, [pc, #24]	; (8001670 <DMA1_Channel6_IRQHandler+0x38>)
 8001656:	f7ff ff31 	bl	80014bc <LL_DMA_IsActiveFlag_HT6>
 800165a:	4603      	mov	r3, r0
 800165c:	2b01      	cmp	r3, #1
 800165e:	d104      	bne.n	800166a <DMA1_Channel6_IRQHandler+0x32>
			USART2_CheckDmaReception();
 8001660:	f001 f928 	bl	80028b4 <USART2_CheckDmaReception>
			LL_DMA_ClearFlag_HT6(DMA1);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <DMA1_Channel6_IRQHandler+0x38>)
 8001666:	f7ff ff59 	bl	800151c <LL_DMA_ClearFlag_HT6>
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40020000 	.word	0x40020000

08001674 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8001678:	480a      	ldr	r0, [pc, #40]	; (80016a4 <DMA1_Channel7_IRQHandler+0x30>)
 800167a:	f7ff ff0b 	bl	8001494 <LL_DMA_IsActiveFlag_TC7>
 800167e:	4603      	mov	r3, r0
 8001680:	2b01      	cmp	r3, #1
 8001682:	d10d      	bne.n	80016a0 <DMA1_Channel7_IRQHandler+0x2c>
		{
			LL_DMA_ClearFlag_TC7(DMA1);
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <DMA1_Channel7_IRQHandler+0x30>)
 8001686:	f7ff ff3b 	bl	8001500 <LL_DMA_ClearFlag_TC7>

			while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 800168a:	bf00      	nop
 800168c:	4806      	ldr	r0, [pc, #24]	; (80016a8 <DMA1_Channel7_IRQHandler+0x34>)
 800168e:	f7ff ff87 	bl	80015a0 <LL_USART_IsActiveFlag_TC>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0f9      	beq.n	800168c <DMA1_Channel7_IRQHandler+0x18>
			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001698:	2107      	movs	r1, #7
 800169a:	4802      	ldr	r0, [pc, #8]	; (80016a4 <DMA1_Channel7_IRQHandler+0x30>)
 800169c:	f7ff fec6 	bl	800142c <LL_DMA_DisableChannel>
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40020000 	.word	0x40020000
 80016a8:	40004400 	.word	0x40004400

080016ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2)) {
 80016b0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016b4:	f7ff ff4e 	bl	8001554 <LL_TIM_IsActiveFlag_UPDATE>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d04d      	beq.n	800175a <TIM2_IRQHandler+0xae>
		if(mode == 0) { //automatic mode
 80016be:	4b28      	ldr	r3, [pc, #160]	; (8001760 <TIM2_IRQHandler+0xb4>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d127      	bne.n	8001716 <TIM2_IRQHandler+0x6a>
			if (countUpDown == 1) { //counting up
 80016c6:	4b27      	ldr	r3, [pc, #156]	; (8001764 <TIM2_IRQHandler+0xb8>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d111      	bne.n	80016f2 <TIM2_IRQHandler+0x46>
				if(dutyCycle >= 99) { //counted up to 99
 80016ce:	4b26      	ldr	r3, [pc, #152]	; (8001768 <TIM2_IRQHandler+0xbc>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b62      	cmp	r3, #98	; 0x62
 80016d4:	d906      	bls.n	80016e4 <TIM2_IRQHandler+0x38>
					countUpDown = 0;
 80016d6:	4b23      	ldr	r3, [pc, #140]	; (8001764 <TIM2_IRQHandler+0xb8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
					dutyCycle = 98;
 80016dc:	4b22      	ldr	r3, [pc, #136]	; (8001768 <TIM2_IRQHandler+0xbc>)
 80016de:	2262      	movs	r2, #98	; 0x62
 80016e0:	701a      	strb	r2, [r3, #0]
 80016e2:	e031      	b.n	8001748 <TIM2_IRQHandler+0x9c>
				} else {
					dutyCycle++;
 80016e4:	4b20      	ldr	r3, [pc, #128]	; (8001768 <TIM2_IRQHandler+0xbc>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	3301      	adds	r3, #1
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <TIM2_IRQHandler+0xbc>)
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	e02a      	b.n	8001748 <TIM2_IRQHandler+0x9c>
				}
			} else { //counting down
				if(dutyCycle <= 0) { //counted down to 0
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <TIM2_IRQHandler+0xbc>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d106      	bne.n	8001708 <TIM2_IRQHandler+0x5c>
					countUpDown = 1;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <TIM2_IRQHandler+0xb8>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]
					dutyCycle = 1;
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <TIM2_IRQHandler+0xbc>)
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
 8001706:	e01f      	b.n	8001748 <TIM2_IRQHandler+0x9c>
				} else {
					dutyCycle--;
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <TIM2_IRQHandler+0xbc>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	3b01      	subs	r3, #1
 800170e:	b2da      	uxtb	r2, r3
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <TIM2_IRQHandler+0xbc>)
 8001712:	701a      	strb	r2, [r3, #0]
 8001714:	e018      	b.n	8001748 <TIM2_IRQHandler+0x9c>
				}
			}
		} else {
			if (dutyCycleManual > dutyCycle) dutyCycle++;
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <TIM2_IRQHandler+0xc0>)
 8001718:	781a      	ldrb	r2, [r3, #0]
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <TIM2_IRQHandler+0xbc>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d906      	bls.n	8001730 <TIM2_IRQHandler+0x84>
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <TIM2_IRQHandler+0xbc>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <TIM2_IRQHandler+0xbc>)
 800172c:	701a      	strb	r2, [r3, #0]
 800172e:	e00b      	b.n	8001748 <TIM2_IRQHandler+0x9c>
			else if (dutyCycleManual < dutyCycle) dutyCycle--;
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <TIM2_IRQHandler+0xc0>)
 8001732:	781a      	ldrb	r2, [r3, #0]
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <TIM2_IRQHandler+0xbc>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d205      	bcs.n	8001748 <TIM2_IRQHandler+0x9c>
 800173c:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <TIM2_IRQHandler+0xbc>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	3b01      	subs	r3, #1
 8001742:	b2da      	uxtb	r2, r3
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <TIM2_IRQHandler+0xbc>)
 8001746:	701a      	strb	r2, [r3, #0]
		}
		setDutyCycle(dutyCycle);
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <TIM2_IRQHandler+0xbc>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f000 fb65 	bl	8001e1c <setDutyCycle>
		LL_TIM_ClearFlag_UPDATE(TIM2);
 8001752:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001756:	f7ff feef 	bl	8001538 <LL_TIM_ClearFlag_UPDATE>
	}
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000212 	.word	0x20000212
 8001764:	20000213 	.word	0x20000213
 8001768:	20000210 	.word	0x20000210
 800176c:	20000211 	.word	0x20000211

08001770 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8001774:	4806      	ldr	r0, [pc, #24]	; (8001790 <USART2_IRQHandler+0x20>)
 8001776:	f7ff ff00 	bl	800157a <LL_USART_IsActiveFlag_IDLE>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d004      	beq.n	800178a <USART2_IRQHandler+0x1a>
		{
			USART2_CheckDmaReception();
 8001780:	f001 f898 	bl	80028b4 <USART2_CheckDmaReception>
			LL_USART_ClearFlag_IDLE(USART2);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <USART2_IRQHandler+0x20>)
 8001786:	f7ff ff1e 	bl	80015c6 <LL_USART_ClearFlag_IDLE>
		}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40004400 	.word	0x40004400

08001794 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
	return 1;
 8001798:	2301      	movs	r3, #1
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <_kill>:

int _kill(int pid, int sig)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017ae:	f002 f937 	bl	8003a20 <__errno>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2216      	movs	r2, #22
 80017b6:	601a      	str	r2, [r3, #0]
	return -1;
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_exit>:

void _exit (int status)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017cc:	f04f 31ff 	mov.w	r1, #4294967295
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ffe7 	bl	80017a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017d6:	e7fe      	b.n	80017d6 <_exit+0x12>

080017d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	e00a      	b.n	8001800 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ea:	f3af 8000 	nop.w
 80017ee:	4601      	mov	r1, r0
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	60ba      	str	r2, [r7, #8]
 80017f6:	b2ca      	uxtb	r2, r1
 80017f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	dbf0      	blt.n	80017ea <_read+0x12>
	}

return len;
 8001808:	687b      	ldr	r3, [r7, #4]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e009      	b.n	8001838 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	60ba      	str	r2, [r7, #8]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbf1      	blt.n	8001824 <_write+0x12>
	}
	return len;
 8001840:	687b      	ldr	r3, [r7, #4]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <_close>:

int _close(int file)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
	return -1;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001872:	605a      	str	r2, [r3, #4]
	return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <_isatty>:

int _isatty(int file)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
	return 1;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
	return 0;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018bc:	4a14      	ldr	r2, [pc, #80]	; (8001910 <_sbrk+0x5c>)
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <_sbrk+0x60>)
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <_sbrk+0x64>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <_sbrk+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d207      	bcs.n	80018f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e4:	f002 f89c 	bl	8003a20 <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	220c      	movs	r2, #12
 80018ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
 80018f2:	e009      	b.n	8001908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <_sbrk+0x64>)
 8001904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20003000 	.word	0x20003000
 8001914:	00000400 	.word	0x00000400
 8001918:	200001fc 	.word	0x200001fc
 800191c:	200002f0 	.word	0x200002f0

08001920 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <SystemInit+0x20>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <SystemInit+0x20>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_GetPriorityGrouping>:
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <__NVIC_GetPriorityGrouping+0x18>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 0307 	and.w	r3, r3, #7
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_EnableIRQ>:
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db0b      	blt.n	800198a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	f003 021f 	and.w	r2, r3, #31
 8001978:	4907      	ldr	r1, [pc, #28]	; (8001998 <__NVIC_EnableIRQ+0x38>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	2001      	movs	r0, #1
 8001982:	fa00 f202 	lsl.w	r2, r0, r2
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	; (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	; (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <LL_AHB1_GRP1_EnableClock>:
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a62:	695a      	ldr	r2, [r3, #20]
 8001a64:	4907      	ldr	r1, [pc, #28]	; (8001a84 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4013      	ands	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	40021000 	.word	0x40021000

08001a88 <LL_APB1_GRP1_EnableClock>:
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a92:	69da      	ldr	r2, [r3, #28]
 8001a94:	4907      	ldr	r1, [pc, #28]	; (8001ab4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a9e:	69da      	ldr	r2, [r3, #28]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <LL_TIM_EnableCounter>:
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f043 0201 	orr.w	r2, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	601a      	str	r2, [r3, #0]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_TIM_EnableARRPreload>:
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	601a      	str	r2, [r3, #0]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_TIM_OC_DisableFast>:
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d028      	beq.n	8001b5a <LL_TIM_OC_DisableFast+0x62>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d023      	beq.n	8001b56 <LL_TIM_OC_DisableFast+0x5e>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2b10      	cmp	r3, #16
 8001b12:	d01e      	beq.n	8001b52 <LL_TIM_OC_DisableFast+0x5a>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	2b40      	cmp	r3, #64	; 0x40
 8001b18:	d019      	beq.n	8001b4e <LL_TIM_OC_DisableFast+0x56>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b20:	d013      	beq.n	8001b4a <LL_TIM_OC_DisableFast+0x52>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b28:	d00d      	beq.n	8001b46 <LL_TIM_OC_DisableFast+0x4e>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b30:	d007      	beq.n	8001b42 <LL_TIM_OC_DisableFast+0x4a>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b38:	d101      	bne.n	8001b3e <LL_TIM_OC_DisableFast+0x46>
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	e00e      	b.n	8001b5c <LL_TIM_OC_DisableFast+0x64>
 8001b3e:	2308      	movs	r3, #8
 8001b40:	e00c      	b.n	8001b5c <LL_TIM_OC_DisableFast+0x64>
 8001b42:	2306      	movs	r3, #6
 8001b44:	e00a      	b.n	8001b5c <LL_TIM_OC_DisableFast+0x64>
 8001b46:	2305      	movs	r3, #5
 8001b48:	e008      	b.n	8001b5c <LL_TIM_OC_DisableFast+0x64>
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	e006      	b.n	8001b5c <LL_TIM_OC_DisableFast+0x64>
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e004      	b.n	8001b5c <LL_TIM_OC_DisableFast+0x64>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e002      	b.n	8001b5c <LL_TIM_OC_DisableFast+0x64>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <LL_TIM_OC_DisableFast+0x64>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3318      	adds	r3, #24
 8001b62:	4619      	mov	r1, r3
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <LL_TIM_OC_DisableFast+0x9c>)
 8001b68:	5cd3      	ldrb	r3, [r2, r3]
 8001b6a:	440b      	add	r3, r1
 8001b6c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	4908      	ldr	r1, [pc, #32]	; (8001b98 <LL_TIM_OC_DisableFast+0xa0>)
 8001b76:	5ccb      	ldrb	r3, [r1, r3]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	408b      	lsls	r3, r1
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	401a      	ands	r2, r3
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	601a      	str	r2, [r3, #0]
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	080083a0 	.word	0x080083a0
 8001b98:	080083ac 	.word	0x080083ac

08001b9c <LL_TIM_OC_EnablePreload>:
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d028      	beq.n	8001bfe <LL_TIM_OC_EnablePreload+0x62>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d023      	beq.n	8001bfa <LL_TIM_OC_EnablePreload+0x5e>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b10      	cmp	r3, #16
 8001bb6:	d01e      	beq.n	8001bf6 <LL_TIM_OC_EnablePreload+0x5a>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2b40      	cmp	r3, #64	; 0x40
 8001bbc:	d019      	beq.n	8001bf2 <LL_TIM_OC_EnablePreload+0x56>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bc4:	d013      	beq.n	8001bee <LL_TIM_OC_EnablePreload+0x52>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bcc:	d00d      	beq.n	8001bea <LL_TIM_OC_EnablePreload+0x4e>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bd4:	d007      	beq.n	8001be6 <LL_TIM_OC_EnablePreload+0x4a>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bdc:	d101      	bne.n	8001be2 <LL_TIM_OC_EnablePreload+0x46>
 8001bde:	2307      	movs	r3, #7
 8001be0:	e00e      	b.n	8001c00 <LL_TIM_OC_EnablePreload+0x64>
 8001be2:	2308      	movs	r3, #8
 8001be4:	e00c      	b.n	8001c00 <LL_TIM_OC_EnablePreload+0x64>
 8001be6:	2306      	movs	r3, #6
 8001be8:	e00a      	b.n	8001c00 <LL_TIM_OC_EnablePreload+0x64>
 8001bea:	2305      	movs	r3, #5
 8001bec:	e008      	b.n	8001c00 <LL_TIM_OC_EnablePreload+0x64>
 8001bee:	2304      	movs	r3, #4
 8001bf0:	e006      	b.n	8001c00 <LL_TIM_OC_EnablePreload+0x64>
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e004      	b.n	8001c00 <LL_TIM_OC_EnablePreload+0x64>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e002      	b.n	8001c00 <LL_TIM_OC_EnablePreload+0x64>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <LL_TIM_OC_EnablePreload+0x64>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3318      	adds	r3, #24
 8001c06:	4619      	mov	r1, r3
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <LL_TIM_OC_EnablePreload+0x98>)
 8001c0c:	5cd3      	ldrb	r3, [r2, r3]
 8001c0e:	440b      	add	r3, r1
 8001c10:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	4907      	ldr	r1, [pc, #28]	; (8001c38 <LL_TIM_OC_EnablePreload+0x9c>)
 8001c1a:	5ccb      	ldrb	r3, [r1, r3]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	2308      	movs	r3, #8
 8001c20:	408b      	lsls	r3, r1
 8001c22:	431a      	orrs	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	601a      	str	r2, [r3, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	080083a0 	.word	0x080083a0
 8001c38:	080083ac 	.word	0x080083ac

08001c3c <LL_TIM_SetClockSource>:
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001c4e:	f023 0307 	bic.w	r3, r3, #7
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	609a      	str	r2, [r3, #8]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <LL_TIM_SetTriggerOutput>:
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	605a      	str	r2, [r3, #4]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_TIM_DisableMasterSlaveMode>:
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f043 0201 	orr.w	r2, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	60da      	str	r2, [r3, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b094      	sub	sp, #80	; 0x50
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001cd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
 8001ce0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001ce2:	f107 031c 	add.w	r3, r7, #28
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f001 fec2 	bl	8003a74 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	60da      	str	r2, [r3, #12]
 8001cfc:	611a      	str	r2, [r3, #16]
 8001cfe:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001d00:	2001      	movs	r0, #1
 8001d02:	f7ff fec1 	bl	8001a88 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d06:	f7ff fe1d 	bl	8001944 <__NVIC_GetPriorityGrouping>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fe6d 	bl	80019f0 <NVIC_EncodePriority>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4619      	mov	r1, r3
 8001d1a:	201c      	movs	r0, #28
 8001d1c:	f7ff fe3e 	bl	800199c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8001d20:	201c      	movs	r0, #28
 8001d22:	f7ff fe1d 	bl	8001960 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8001d26:	f240 331f 	movw	r3, #799	; 0x31f
 8001d2a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 99;
 8001d30:	2363      	movs	r3, #99	; 0x63
 8001d32:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001d34:	2300      	movs	r3, #0
 8001d36:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001d38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d42:	f001 f9c9 	bl	80030d8 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8001d46:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d4a:	f7ff fec5 	bl	8001ad8 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001d4e:	2100      	movs	r1, #0
 8001d50:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d54:	f7ff ff72 	bl	8001c3c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001d58:	2101      	movs	r1, #1
 8001d5a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d5e:	f7ff ff1d 	bl	8001b9c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001d62:	2360      	movs	r3, #96	; 0x60
 8001d64:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001d72:	2300      	movs	r3, #0
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001d76:	f107 031c 	add.w	r3, r7, #28
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d82:	f001 fa1b 	bl	80031bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8001d86:	2101      	movs	r1, #1
 8001d88:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d8c:	f7ff feb4 	bl	8001af8 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8001d90:	2310      	movs	r3, #16
 8001d92:	61fb      	str	r3, [r7, #28]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001d94:	f107 031c 	add.w	r3, r7, #28
 8001d98:	461a      	mov	r2, r3
 8001d9a:	2110      	movs	r1, #16
 8001d9c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001da0:	f001 fa0c 	bl	80031bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8001da4:	2110      	movs	r1, #16
 8001da6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001daa:	f7ff fea5 	bl	8001af8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001dae:	2100      	movs	r1, #0
 8001db0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001db4:	f7ff ff57 	bl	8001c66 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001db8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001dbc:	f7ff ff66 	bl	8001c8c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
  LL_TIM_EnableCounter(TIM2);
 8001dc0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001dc4:	f7ff fe78 	bl	8001ab8 <LL_TIM_EnableCounter>
  TIM2->CCER|=0x00000001;
 8001dc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6213      	str	r3, [r2, #32]
  LL_TIM_EnableIT_UPDATE(TIM2);
 8001dd8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ddc:	f7ff ff66 	bl	8001cac <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 8001de0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001de4:	f7ff fe68 	bl	8001ab8 <LL_TIM_EnableCounter>
  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001de8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001dec:	f7ff fe34 	bl	8001a58 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001df0:	2320      	movs	r3, #32
 8001df2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001df4:	2302      	movs	r3, #2
 8001df6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001e04:	2301      	movs	r3, #1
 8001e06:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e10:	f000 feba 	bl	8002b88 <LL_GPIO_Init>

}
 8001e14:	bf00      	nop
 8001e16:	3750      	adds	r7, #80	; 0x50
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <setDutyCycle>:

/* USER CODE BEGIN 1 */
void setDutyCycle(uint8_t D) {
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
	TIM2->CCR1 = D;
 8001e26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <__NVIC_GetPriorityGrouping>:
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <__NVIC_GetPriorityGrouping+0x18>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	f003 0307 	and.w	r3, r3, #7
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_EnableIRQ>:
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	db0b      	blt.n	8001e82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	f003 021f 	and.w	r2, r3, #31
 8001e70:	4907      	ldr	r1, [pc, #28]	; (8001e90 <__NVIC_EnableIRQ+0x38>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	2001      	movs	r0, #1
 8001e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000e100 	.word	0xe000e100

08001e94 <__NVIC_SetPriority>:
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	6039      	str	r1, [r7, #0]
 8001e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	db0a      	blt.n	8001ebe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	490c      	ldr	r1, [pc, #48]	; (8001ee0 <__NVIC_SetPriority+0x4c>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	0112      	lsls	r2, r2, #4
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ebc:	e00a      	b.n	8001ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4908      	ldr	r1, [pc, #32]	; (8001ee4 <__NVIC_SetPriority+0x50>)
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	3b04      	subs	r3, #4
 8001ecc:	0112      	lsls	r2, r2, #4
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	761a      	strb	r2, [r3, #24]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000e100 	.word	0xe000e100
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <NVIC_EncodePriority>:
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f1c3 0307 	rsb	r3, r3, #7
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	bf28      	it	cs
 8001f06:	2304      	movcs	r3, #4
 8001f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d902      	bls.n	8001f18 <NVIC_EncodePriority+0x30>
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3b03      	subs	r3, #3
 8001f16:	e000      	b.n	8001f1a <NVIC_EncodePriority+0x32>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43da      	mvns	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f30:	f04f 31ff 	mov.w	r1, #4294967295
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	43d9      	mvns	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	4313      	orrs	r3, r2
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3724      	adds	r7, #36	; 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <LL_DMA_EnableChannel>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <LL_DMA_EnableChannel+0x3c>)
 8001f60:	5cd3      	ldrb	r3, [r2, r3]
 8001f62:	461a      	mov	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4413      	add	r3, r2
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	3a01      	subs	r2, #1
 8001f6e:	4907      	ldr	r1, [pc, #28]	; (8001f8c <LL_DMA_EnableChannel+0x3c>)
 8001f70:	5c8a      	ldrb	r2, [r1, r2]
 8001f72:	4611      	mov	r1, r2
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	440a      	add	r2, r1
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6013      	str	r3, [r2, #0]
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	080083b8 	.word	0x080083b8

08001f90 <LL_DMA_DisableChannel>:
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	4a0b      	ldr	r2, [pc, #44]	; (8001fcc <LL_DMA_DisableChannel+0x3c>)
 8001fa0:	5cd3      	ldrb	r3, [r2, r3]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	3a01      	subs	r2, #1
 8001fae:	4907      	ldr	r1, [pc, #28]	; (8001fcc <LL_DMA_DisableChannel+0x3c>)
 8001fb0:	5c8a      	ldrb	r2, [r1, r2]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	440a      	add	r2, r1
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	6013      	str	r3, [r2, #0]
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	080083b8 	.word	0x080083b8

08001fd0 <LL_DMA_SetDataTransferDirection>:
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	4a0d      	ldr	r2, [pc, #52]	; (8002018 <LL_DMA_SetDataTransferDirection+0x48>)
 8001fe2:	5cd3      	ldrb	r3, [r2, r3]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4413      	add	r3, r2
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ff0:	f023 0310 	bic.w	r3, r3, #16
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	3a01      	subs	r2, #1
 8001ff8:	4907      	ldr	r1, [pc, #28]	; (8002018 <LL_DMA_SetDataTransferDirection+0x48>)
 8001ffa:	5c8a      	ldrb	r2, [r1, r2]
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	440a      	add	r2, r1
 8002002:	4611      	mov	r1, r2
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	080083b8 	.word	0x080083b8

0800201c <LL_DMA_GetDataTransferDirection>:
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	3b01      	subs	r3, #1
 800202a:	4a07      	ldr	r2, [pc, #28]	; (8002048 <LL_DMA_GetDataTransferDirection+0x2c>)
 800202c:	5cd3      	ldrb	r3, [r2, r3]
 800202e:	461a      	mov	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	f244 0310 	movw	r3, #16400	; 0x4010
 800203a:	4013      	ands	r3, r2
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	080083b8 	.word	0x080083b8

0800204c <LL_DMA_SetMode>:
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	3b01      	subs	r3, #1
 800205c:	4a0c      	ldr	r2, [pc, #48]	; (8002090 <LL_DMA_SetMode+0x44>)
 800205e:	5cd3      	ldrb	r3, [r2, r3]
 8002060:	461a      	mov	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4413      	add	r3, r2
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f023 0220 	bic.w	r2, r3, #32
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	3b01      	subs	r3, #1
 8002070:	4907      	ldr	r1, [pc, #28]	; (8002090 <LL_DMA_SetMode+0x44>)
 8002072:	5ccb      	ldrb	r3, [r1, r3]
 8002074:	4619      	mov	r1, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	440b      	add	r3, r1
 800207a:	4619      	mov	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	080083b8 	.word	0x080083b8

08002094 <LL_DMA_SetPeriphIncMode>:
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	4a0c      	ldr	r2, [pc, #48]	; (80020d8 <LL_DMA_SetPeriphIncMode+0x44>)
 80020a6:	5cd3      	ldrb	r3, [r2, r3]
 80020a8:	461a      	mov	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4413      	add	r3, r2
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	4907      	ldr	r1, [pc, #28]	; (80020d8 <LL_DMA_SetPeriphIncMode+0x44>)
 80020ba:	5ccb      	ldrb	r3, [r1, r3]
 80020bc:	4619      	mov	r1, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	440b      	add	r3, r1
 80020c2:	4619      	mov	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	080083b8 	.word	0x080083b8

080020dc <LL_DMA_SetMemoryIncMode>:
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	4a0c      	ldr	r2, [pc, #48]	; (8002120 <LL_DMA_SetMemoryIncMode+0x44>)
 80020ee:	5cd3      	ldrb	r3, [r2, r3]
 80020f0:	461a      	mov	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4413      	add	r3, r2
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	3b01      	subs	r3, #1
 8002100:	4907      	ldr	r1, [pc, #28]	; (8002120 <LL_DMA_SetMemoryIncMode+0x44>)
 8002102:	5ccb      	ldrb	r3, [r1, r3]
 8002104:	4619      	mov	r1, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	440b      	add	r3, r1
 800210a:	4619      	mov	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	080083b8 	.word	0x080083b8

08002124 <LL_DMA_SetPeriphSize>:
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	3b01      	subs	r3, #1
 8002134:	4a0c      	ldr	r2, [pc, #48]	; (8002168 <LL_DMA_SetPeriphSize+0x44>)
 8002136:	5cd3      	ldrb	r3, [r2, r3]
 8002138:	461a      	mov	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4413      	add	r3, r2
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	3b01      	subs	r3, #1
 8002148:	4907      	ldr	r1, [pc, #28]	; (8002168 <LL_DMA_SetPeriphSize+0x44>)
 800214a:	5ccb      	ldrb	r3, [r1, r3]
 800214c:	4619      	mov	r1, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	440b      	add	r3, r1
 8002152:	4619      	mov	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4313      	orrs	r3, r2
 8002158:	600b      	str	r3, [r1, #0]
}
 800215a:	bf00      	nop
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	080083b8 	.word	0x080083b8

0800216c <LL_DMA_SetMemorySize>:
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	3b01      	subs	r3, #1
 800217c:	4a0c      	ldr	r2, [pc, #48]	; (80021b0 <LL_DMA_SetMemorySize+0x44>)
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	461a      	mov	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4413      	add	r3, r2
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	3b01      	subs	r3, #1
 8002190:	4907      	ldr	r1, [pc, #28]	; (80021b0 <LL_DMA_SetMemorySize+0x44>)
 8002192:	5ccb      	ldrb	r3, [r1, r3]
 8002194:	4619      	mov	r1, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	440b      	add	r3, r1
 800219a:	4619      	mov	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]
}
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	080083b8 	.word	0x080083b8

080021b4 <LL_DMA_SetChannelPriorityLevel>:
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	4a0c      	ldr	r2, [pc, #48]	; (80021f8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80021c6:	5cd3      	ldrb	r3, [r2, r3]
 80021c8:	461a      	mov	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4413      	add	r3, r2
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	4907      	ldr	r1, [pc, #28]	; (80021f8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	4619      	mov	r1, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	440b      	add	r3, r1
 80021e2:	4619      	mov	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]
}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	080083b8 	.word	0x080083b8

080021fc <LL_DMA_SetDataLength>:
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	3b01      	subs	r3, #1
 800220c:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <LL_DMA_SetDataLength+0x44>)
 800220e:	5cd3      	ldrb	r3, [r2, r3]
 8002210:	461a      	mov	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4413      	add	r3, r2
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	0c1b      	lsrs	r3, r3, #16
 800221a:	041b      	lsls	r3, r3, #16
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	3a01      	subs	r2, #1
 8002220:	4907      	ldr	r1, [pc, #28]	; (8002240 <LL_DMA_SetDataLength+0x44>)
 8002222:	5c8a      	ldrb	r2, [r1, r2]
 8002224:	4611      	mov	r1, r2
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	440a      	add	r2, r1
 800222a:	4611      	mov	r1, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	080083b8 	.word	0x080083b8

08002244 <LL_DMA_GetDataLength>:
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	3b01      	subs	r3, #1
 8002252:	4a06      	ldr	r2, [pc, #24]	; (800226c <LL_DMA_GetDataLength+0x28>)
 8002254:	5cd3      	ldrb	r3, [r2, r3]
 8002256:	461a      	mov	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4413      	add	r3, r2
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	b29b      	uxth	r3, r3
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	080083b8 	.word	0x080083b8

08002270 <LL_DMA_ConfigAddresses>:
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	2b10      	cmp	r3, #16
 8002282:	d114      	bne.n	80022ae <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	3b01      	subs	r3, #1
 8002288:	4a16      	ldr	r2, [pc, #88]	; (80022e4 <LL_DMA_ConfigAddresses+0x74>)
 800228a:	5cd3      	ldrb	r3, [r2, r3]
 800228c:	461a      	mov	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4413      	add	r3, r2
 8002292:	461a      	mov	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	3b01      	subs	r3, #1
 800229c:	4a11      	ldr	r2, [pc, #68]	; (80022e4 <LL_DMA_ConfigAddresses+0x74>)
 800229e:	5cd3      	ldrb	r3, [r2, r3]
 80022a0:	461a      	mov	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4413      	add	r3, r2
 80022a6:	461a      	mov	r2, r3
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	6093      	str	r3, [r2, #8]
}
 80022ac:	e013      	b.n	80022d6 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	3b01      	subs	r3, #1
 80022b2:	4a0c      	ldr	r2, [pc, #48]	; (80022e4 <LL_DMA_ConfigAddresses+0x74>)
 80022b4:	5cd3      	ldrb	r3, [r2, r3]
 80022b6:	461a      	mov	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4413      	add	r3, r2
 80022bc:	461a      	mov	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	4a07      	ldr	r2, [pc, #28]	; (80022e4 <LL_DMA_ConfigAddresses+0x74>)
 80022c8:	5cd3      	ldrb	r3, [r2, r3]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4413      	add	r3, r2
 80022d0:	461a      	mov	r2, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	60d3      	str	r3, [r2, #12]
}
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	080083b8 	.word	0x080083b8

080022e8 <LL_DMA_SetMemoryAddress>:
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	4a06      	ldr	r2, [pc, #24]	; (8002314 <LL_DMA_SetMemoryAddress+0x2c>)
 80022fa:	5cd3      	ldrb	r3, [r2, r3]
 80022fc:	461a      	mov	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4413      	add	r3, r2
 8002302:	461a      	mov	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	60d3      	str	r3, [r2, #12]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	080083b8 	.word	0x080083b8

08002318 <LL_DMA_SetPeriphAddress>:
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	3b01      	subs	r3, #1
 8002328:	4a06      	ldr	r2, [pc, #24]	; (8002344 <LL_DMA_SetPeriphAddress+0x2c>)
 800232a:	5cd3      	ldrb	r3, [r2, r3]
 800232c:	461a      	mov	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4413      	add	r3, r2
 8002332:	461a      	mov	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6093      	str	r3, [r2, #8]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	080083b8 	.word	0x080083b8

08002348 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	3b01      	subs	r3, #1
 8002356:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <LL_DMA_EnableIT_TC+0x3c>)
 8002358:	5cd3      	ldrb	r3, [r2, r3]
 800235a:	461a      	mov	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4413      	add	r3, r2
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	3a01      	subs	r2, #1
 8002366:	4907      	ldr	r1, [pc, #28]	; (8002384 <LL_DMA_EnableIT_TC+0x3c>)
 8002368:	5c8a      	ldrb	r2, [r1, r2]
 800236a:	4611      	mov	r1, r2
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	440a      	add	r2, r1
 8002370:	f043 0302 	orr.w	r3, r3, #2
 8002374:	6013      	str	r3, [r2, #0]
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	080083b8 	.word	0x080083b8

08002388 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	3b01      	subs	r3, #1
 8002396:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <LL_DMA_EnableIT_HT+0x3c>)
 8002398:	5cd3      	ldrb	r3, [r2, r3]
 800239a:	461a      	mov	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	3a01      	subs	r2, #1
 80023a6:	4907      	ldr	r1, [pc, #28]	; (80023c4 <LL_DMA_EnableIT_HT+0x3c>)
 80023a8:	5c8a      	ldrb	r2, [r1, r2]
 80023aa:	4611      	mov	r1, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	440a      	add	r2, r1
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	6013      	str	r3, [r2, #0]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	080083b8 	.word	0x080083b8

080023c8 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	4a0b      	ldr	r2, [pc, #44]	; (8002404 <LL_DMA_EnableIT_TE+0x3c>)
 80023d8:	5cd3      	ldrb	r3, [r2, r3]
 80023da:	461a      	mov	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4413      	add	r3, r2
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	3a01      	subs	r2, #1
 80023e6:	4907      	ldr	r1, [pc, #28]	; (8002404 <LL_DMA_EnableIT_TE+0x3c>)
 80023e8:	5c8a      	ldrb	r2, [r1, r2]
 80023ea:	4611      	mov	r1, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	440a      	add	r2, r1
 80023f0:	f043 0308 	orr.w	r3, r3, #8
 80023f4:	6013      	str	r3, [r2, #0]
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	080083b8 	.word	0x080083b8

08002408 <LL_AHB1_GRP1_EnableClock>:
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002410:	4b08      	ldr	r3, [pc, #32]	; (8002434 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	4907      	ldr	r1, [pc, #28]	; (8002434 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4313      	orrs	r3, r2
 800241a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4013      	ands	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002426:	68fb      	ldr	r3, [r7, #12]
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	40021000 	.word	0x40021000

08002438 <LL_APB1_GRP1_EnableClock>:
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002442:	69da      	ldr	r2, [r3, #28]
 8002444:	4907      	ldr	r1, [pc, #28]	; (8002464 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4313      	orrs	r3, r2
 800244a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <LL_APB1_GRP1_EnableClock+0x2c>)
 800244e:	69da      	ldr	r2, [r3, #28]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4013      	ands	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002456:	68fb      	ldr	r3, [r7, #12]
}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	40021000 	.word	0x40021000

08002468 <LL_USART_Enable>:
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f043 0201 	orr.w	r2, r3, #1
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	601a      	str	r2, [r3, #0]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_USART_ConfigAsyncMode>:
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	609a      	str	r2, [r3, #8]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	; 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	e853 3f00 	ldrex	r3, [r3]
 80024c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f043 0310 	orr.w	r3, r3, #16
 80024ce:	61fb      	str	r3, [r7, #28]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	61ba      	str	r2, [r7, #24]
 80024d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d8:	6979      	ldr	r1, [r7, #20]
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	e841 2300 	strex	r3, r2, [r1]
 80024e0:	613b      	str	r3, [r7, #16]
   return(result);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1e9      	bne.n	80024bc <LL_USART_EnableIT_IDLE+0x8>
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	3724      	adds	r7, #36	; 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b089      	sub	sp, #36	; 0x24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3308      	adds	r3, #8
 8002502:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	e853 3f00 	ldrex	r3, [r3]
 800250a:	60bb      	str	r3, [r7, #8]
   return(result);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3308      	adds	r3, #8
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	61ba      	str	r2, [r7, #24]
 800251c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800251e:	6979      	ldr	r1, [r7, #20]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	e841 2300 	strex	r3, r2, [r1]
 8002526:	613b      	str	r3, [r7, #16]
   return(result);
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1e7      	bne.n	80024fe <LL_USART_DisableIT_CTS+0x8>
}
 800252e:	bf00      	nop
 8002530:	bf00      	nop
 8002532:	3724      	adds	r7, #36	; 0x24
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	; 0x24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3308      	adds	r3, #8
 8002548:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	e853 3f00 	ldrex	r3, [r3]
 8002550:	60bb      	str	r3, [r7, #8]
   return(result);
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3308      	adds	r3, #8
 800255e:	69fa      	ldr	r2, [r7, #28]
 8002560:	61ba      	str	r2, [r7, #24]
 8002562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002564:	6979      	ldr	r1, [r7, #20]
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	e841 2300 	strex	r3, r2, [r1]
 800256c:	613b      	str	r3, [r7, #16]
   return(result);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1e7      	bne.n	8002544 <LL_USART_EnableDMAReq_RX+0x8>
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002582:	b480      	push	{r7}
 8002584:	b089      	sub	sp, #36	; 0x24
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3308      	adds	r3, #8
 800258e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	e853 3f00 	ldrex	r3, [r3]
 8002596:	60bb      	str	r3, [r7, #8]
   return(result);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3308      	adds	r3, #8
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	61ba      	str	r2, [r7, #24]
 80025a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025aa:	6979      	ldr	r1, [r7, #20]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	e841 2300 	strex	r3, r2, [r1]
 80025b2:	613b      	str	r3, [r7, #16]
   return(result);
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1e7      	bne.n	800258a <LL_USART_EnableDMAReq_TX+0x8>
}
 80025ba:	bf00      	nop
 80025bc:	bf00      	nop
 80025be:	3724      	adds	r7, #36	; 0x24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d103      	bne.n	80025e0 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3328      	adds	r3, #40	; 0x28
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	e002      	b.n	80025e6 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3324      	adds	r3, #36	; 0x24
 80025e4:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 80025e6:	68fb      	ldr	r3, [r7, #12]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <reinitializeBuffer>:

uint8_t bufferUSART2dma[DMA_USART2_BUFFER_SIZE];
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(uint8_t data) = 0;

void reinitializeBuffer() {
 80025f4:	b5b0      	push	{r4, r5, r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af02      	add	r7, sp, #8
	memset(bufferUSART2dma,0,DMA_USART2_BUFFER_SIZE); //set buffer memory to zeros
 80025fa:	22c8      	movs	r2, #200	; 0xc8
 80025fc:	2100      	movs	r1, #0
 80025fe:	4815      	ldr	r0, [pc, #84]	; (8002654 <reinitializeBuffer+0x60>)
 8002600:	f001 fa38 	bl	8003a74 <memset>
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);  //disabling DMA channel
 8002604:	2106      	movs	r1, #6
 8002606:	4814      	ldr	r0, [pc, #80]	; (8002658 <reinitializeBuffer+0x64>)
 8002608:	f7ff fcc2 	bl	8001f90 <LL_DMA_DisableChannel>
	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6,  //reconfiguring DMA
 800260c:	2101      	movs	r1, #1
 800260e:	4813      	ldr	r0, [pc, #76]	; (800265c <reinitializeBuffer+0x68>)
 8002610:	f7ff ffda 	bl	80025c8 <LL_USART_DMA_GetRegAddr>
 8002614:	4604      	mov	r4, r0
 8002616:	4d0f      	ldr	r5, [pc, #60]	; (8002654 <reinitializeBuffer+0x60>)
 8002618:	2106      	movs	r1, #6
 800261a:	480f      	ldr	r0, [pc, #60]	; (8002658 <reinitializeBuffer+0x64>)
 800261c:	f7ff fcfe 	bl	800201c <LL_DMA_GetDataTransferDirection>
 8002620:	4603      	mov	r3, r0
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	462b      	mov	r3, r5
 8002626:	4622      	mov	r2, r4
 8002628:	2106      	movs	r1, #6
 800262a:	480b      	ldr	r0, [pc, #44]	; (8002658 <reinitializeBuffer+0x64>)
 800262c:	f7ff fe20 	bl	8002270 <LL_DMA_ConfigAddresses>
	 						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
	 							(uint32_t)bufferUSART2dma,
	 							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002630:	22c8      	movs	r2, #200	; 0xc8
 8002632:	2106      	movs	r1, #6
 8002634:	4808      	ldr	r0, [pc, #32]	; (8002658 <reinitializeBuffer+0x64>)
 8002636:	f7ff fde1 	bl	80021fc <LL_DMA_SetDataLength>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800263a:	2106      	movs	r1, #6
 800263c:	4806      	ldr	r0, [pc, #24]	; (8002658 <reinitializeBuffer+0x64>)
 800263e:	f7ff fc87 	bl	8001f50 <LL_DMA_EnableChannel>
	LL_USART_EnableDMAReq_RX(USART2);
 8002642:	4806      	ldr	r0, [pc, #24]	; (800265c <reinitializeBuffer+0x68>)
 8002644:	f7ff ff7a 	bl	800253c <LL_USART_EnableDMAReq_RX>
	old_pos = 0; //set last reading position to start of buffer
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <reinitializeBuffer+0x6c>)
 800264a:	2200      	movs	r2, #0
 800264c:	801a      	strh	r2, [r3, #0]
}
 800264e:	bf00      	nop
 8002650:	46bd      	mov	sp, r7
 8002652:	bdb0      	pop	{r4, r5, r7, pc}
 8002654:	20000214 	.word	0x20000214
 8002658:	40020000 	.word	0x40020000
 800265c:	40004400 	.word	0x40004400
 8002660:	20000200 	.word	0x20000200

08002664 <getBufferState>:

uint16_t getBufferState() {
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
	return old_pos;
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <getBufferState+0x14>)
 800266a:	881b      	ldrh	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	20000200 	.word	0x20000200

0800267c <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800267c:	b5b0      	push	{r4, r5, r7, lr}
 800267e:	b090      	sub	sp, #64	; 0x40
 8002680:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002682:	f107 031c 	add.w	r3, r7, #28
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	609a      	str	r2, [r3, #8]
 800268e:	60da      	str	r2, [r3, #12]
 8002690:	611a      	str	r2, [r3, #16]
 8002692:	615a      	str	r2, [r3, #20]
 8002694:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002696:	1d3b      	adds	r3, r7, #4
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
 80026a4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80026a6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80026aa:	f7ff fec5 	bl	8002438 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80026ae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80026b2:	f7ff fea9 	bl	8002408 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 80026b6:	f248 0304 	movw	r3, #32772	; 0x8004
 80026ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026bc:	2302      	movs	r3, #2
 80026be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80026c0:	2303      	movs	r3, #3
 80026c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80026cc:	2307      	movs	r3, #7
 80026ce:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	4619      	mov	r1, r3
 80026d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d8:	f000 fa56 	bl	8002b88 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80026dc:	2200      	movs	r2, #0
 80026de:	2106      	movs	r1, #6
 80026e0:	4858      	ldr	r0, [pc, #352]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 80026e2:	f7ff fc75 	bl	8001fd0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 80026e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026ea:	2106      	movs	r1, #6
 80026ec:	4855      	ldr	r0, [pc, #340]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 80026ee:	f7ff fd61 	bl	80021b4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 80026f2:	2200      	movs	r2, #0
 80026f4:	2106      	movs	r1, #6
 80026f6:	4853      	ldr	r0, [pc, #332]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 80026f8:	f7ff fca8 	bl	800204c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80026fc:	2200      	movs	r2, #0
 80026fe:	2106      	movs	r1, #6
 8002700:	4850      	ldr	r0, [pc, #320]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 8002702:	f7ff fcc7 	bl	8002094 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8002706:	2280      	movs	r2, #128	; 0x80
 8002708:	2106      	movs	r1, #6
 800270a:	484e      	ldr	r0, [pc, #312]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 800270c:	f7ff fce6 	bl	80020dc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002710:	2200      	movs	r2, #0
 8002712:	2106      	movs	r1, #6
 8002714:	484b      	ldr	r0, [pc, #300]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 8002716:	f7ff fd05 	bl	8002124 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 800271a:	2200      	movs	r2, #0
 800271c:	2106      	movs	r1, #6
 800271e:	4849      	ldr	r0, [pc, #292]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 8002720:	f7ff fd24 	bl	800216c <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002724:	2210      	movs	r2, #16
 8002726:	2107      	movs	r1, #7
 8002728:	4846      	ldr	r0, [pc, #280]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 800272a:	f7ff fc51 	bl	8001fd0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 800272e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002732:	2107      	movs	r1, #7
 8002734:	4843      	ldr	r0, [pc, #268]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 8002736:	f7ff fd3d 	bl	80021b4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 800273a:	2200      	movs	r2, #0
 800273c:	2107      	movs	r1, #7
 800273e:	4841      	ldr	r0, [pc, #260]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 8002740:	f7ff fc84 	bl	800204c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8002744:	2200      	movs	r2, #0
 8002746:	2107      	movs	r1, #7
 8002748:	483e      	ldr	r0, [pc, #248]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 800274a:	f7ff fca3 	bl	8002094 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 800274e:	2280      	movs	r2, #128	; 0x80
 8002750:	2107      	movs	r1, #7
 8002752:	483c      	ldr	r0, [pc, #240]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 8002754:	f7ff fcc2 	bl	80020dc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8002758:	2200      	movs	r2, #0
 800275a:	2107      	movs	r1, #7
 800275c:	4839      	ldr	r0, [pc, #228]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 800275e:	f7ff fce1 	bl	8002124 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002762:	2200      	movs	r2, #0
 8002764:	2107      	movs	r1, #7
 8002766:	4837      	ldr	r0, [pc, #220]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 8002768:	f7ff fd00 	bl	800216c <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800276c:	f7ff fb66 	bl	8001e3c <__NVIC_GetPriorityGrouping>
 8002770:	4603      	mov	r3, r0
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fbb6 	bl	8001ee8 <NVIC_EncodePriority>
 800277c:	4603      	mov	r3, r0
 800277e:	4619      	mov	r1, r3
 8002780:	2026      	movs	r0, #38	; 0x26
 8002782:	f7ff fb87 	bl	8001e94 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002786:	2026      	movs	r0, #38	; 0x26
 8002788:	f7ff fb66 	bl	8001e58 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 800278c:	2106      	movs	r1, #6
 800278e:	482d      	ldr	r0, [pc, #180]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 8002790:	f7ff fdda 	bl	8002348 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 8002794:	2106      	movs	r1, #6
 8002796:	482b      	ldr	r0, [pc, #172]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 8002798:	f7ff fdf6 	bl	8002388 <LL_DMA_EnableIT_HT>
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 800279c:	2107      	movs	r1, #7
 800279e:	4829      	ldr	r0, [pc, #164]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 80027a0:	f7ff fe12 	bl	80023c8 <LL_DMA_EnableIT_TE>

  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6,  //configuring DMA
 80027a4:	2101      	movs	r1, #1
 80027a6:	4828      	ldr	r0, [pc, #160]	; (8002848 <MX_USART2_UART_Init+0x1cc>)
 80027a8:	f7ff ff0e 	bl	80025c8 <LL_USART_DMA_GetRegAddr>
 80027ac:	4604      	mov	r4, r0
 80027ae:	4d27      	ldr	r5, [pc, #156]	; (800284c <MX_USART2_UART_Init+0x1d0>)
 80027b0:	2106      	movs	r1, #6
 80027b2:	4824      	ldr	r0, [pc, #144]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 80027b4:	f7ff fc32 	bl	800201c <LL_DMA_GetDataTransferDirection>
 80027b8:	4603      	mov	r3, r0
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	462b      	mov	r3, r5
 80027be:	4622      	mov	r2, r4
 80027c0:	2106      	movs	r1, #6
 80027c2:	4820      	ldr	r0, [pc, #128]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 80027c4:	f7ff fd54 	bl	8002270 <LL_DMA_ConfigAddresses>
  	 						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
  	 							(uint32_t)bufferUSART2dma,
  	 							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 80027c8:	22c8      	movs	r2, #200	; 0xc8
 80027ca:	2106      	movs	r1, #6
 80027cc:	481d      	ldr	r0, [pc, #116]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 80027ce:	f7ff fd15 	bl	80021fc <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80027d2:	2106      	movs	r1, #6
 80027d4:	481b      	ldr	r0, [pc, #108]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 80027d6:	f7ff fbbb 	bl	8001f50 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 80027da:	481b      	ldr	r0, [pc, #108]	; (8002848 <MX_USART2_UART_Init+0x1cc>)
 80027dc:	f7ff feae 	bl	800253c <LL_USART_EnableDMAReq_RX>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 80027e0:	2100      	movs	r1, #0
 80027e2:	4819      	ldr	r0, [pc, #100]	; (8002848 <MX_USART2_UART_Init+0x1cc>)
 80027e4:	f7ff fef0 	bl	80025c8 <LL_USART_DMA_GetRegAddr>
 80027e8:	4603      	mov	r3, r0
 80027ea:	461a      	mov	r2, r3
 80027ec:	2107      	movs	r1, #7
 80027ee:	4815      	ldr	r0, [pc, #84]	; (8002844 <MX_USART2_UART_Init+0x1c8>)
 80027f0:	f7ff fd92 	bl	8002318 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 80027f4:	4814      	ldr	r0, [pc, #80]	; (8002848 <MX_USART2_UART_Init+0x1cc>)
 80027f6:	f7ff fec4 	bl	8002582 <LL_USART_EnableDMAReq_TX>
  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80027fa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80027fe:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002800:	2300      	movs	r3, #0
 8002802:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002804:	2300      	movs	r3, #0
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002808:	2300      	movs	r3, #0
 800280a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800280c:	230c      	movs	r3, #12
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002810:	2300      	movs	r3, #0
 8002812:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002814:	2300      	movs	r3, #0
 8002816:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002818:	f107 031c 	add.w	r3, r7, #28
 800281c:	4619      	mov	r1, r3
 800281e:	480a      	ldr	r0, [pc, #40]	; (8002848 <MX_USART2_UART_Init+0x1cc>)
 8002820:	f001 f834 	bl	800388c <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8002824:	4808      	ldr	r0, [pc, #32]	; (8002848 <MX_USART2_UART_Init+0x1cc>)
 8002826:	f7ff fe66 	bl	80024f6 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 800282a:	4807      	ldr	r0, [pc, #28]	; (8002848 <MX_USART2_UART_Init+0x1cc>)
 800282c:	f7ff fe2c 	bl	8002488 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002830:	4805      	ldr	r0, [pc, #20]	; (8002848 <MX_USART2_UART_Init+0x1cc>)
 8002832:	f7ff fe19 	bl	8002468 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  LL_USART_EnableIT_IDLE(USART2);
 8002836:	4804      	ldr	r0, [pc, #16]	; (8002848 <MX_USART2_UART_Init+0x1cc>)
 8002838:	f7ff fe3c 	bl	80024b4 <LL_USART_EnableIT_IDLE>
  /* USER CODE END USART2_Init 2 */

}
 800283c:	bf00      	nop
 800283e:	3738      	adds	r7, #56	; 0x38
 8002840:	46bd      	mov	sp, r7
 8002842:	bdb0      	pop	{r4, r5, r7, pc}
 8002844:	40020000 	.word	0x40020000
 8002848:	40004400 	.word	0x40004400
 800284c:	20000214 	.word	0x20000214

08002850 <USART2_RegisterCallback>:

/* USER CODE BEGIN 1 */
/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a03      	ldr	r2, [pc, #12]	; (8002870 <USART2_RegisterCallback+0x20>)
 8002862:	6013      	str	r3, [r2, #0]
	}
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	20000204 	.word	0x20000204

08002874 <USART2_PutBuffer>:

// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	461a      	mov	r2, r3
 8002884:	2107      	movs	r1, #7
 8002886:	480a      	ldr	r0, [pc, #40]	; (80028b0 <USART2_PutBuffer+0x3c>)
 8002888:	f7ff fd2e 	bl	80022e8 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	461a      	mov	r2, r3
 8002890:	2107      	movs	r1, #7
 8002892:	4807      	ldr	r0, [pc, #28]	; (80028b0 <USART2_PutBuffer+0x3c>)
 8002894:	f7ff fcb2 	bl	80021fc <LL_DMA_SetDataLength>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8002898:	2107      	movs	r1, #7
 800289a:	4805      	ldr	r0, [pc, #20]	; (80028b0 <USART2_PutBuffer+0x3c>)
 800289c:	f7ff fd54 	bl	8002348 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 80028a0:	2107      	movs	r1, #7
 80028a2:	4803      	ldr	r0, [pc, #12]	; (80028b0 <USART2_PutBuffer+0x3c>)
 80028a4:	f7ff fb54 	bl	8001f50 <LL_DMA_EnableChannel>
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40020000 	.word	0x40020000

080028b4 <USART2_CheckDmaReception>:

// Receive data from DMA
void USART2_CheckDmaReception(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
	//type your implementation here
	if(USART2_ProcessData == 0) return;
 80028ba:	4b18      	ldr	r3, [pc, #96]	; (800291c <USART2_CheckDmaReception+0x68>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d027      	beq.n	8002912 <USART2_CheckDmaReception+0x5e>

	//uint16_t test = LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 80028c2:	2106      	movs	r1, #6
 80028c4:	4816      	ldr	r0, [pc, #88]	; (8002920 <USART2_CheckDmaReception+0x6c>)
 80028c6:	f7ff fcbd 	bl	8002244 <LL_DMA_GetDataLength>
 80028ca:	4603      	mov	r3, r0
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80028d2:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = old_pos; i < pos; i++) { //reading from buffer from old_pos to pos, sending each char to callback function
 80028d4:	4b13      	ldr	r3, [pc, #76]	; (8002924 <USART2_CheckDmaReception+0x70>)
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	80fb      	strh	r3, [r7, #6]
 80028da:	e009      	b.n	80028f0 <USART2_CheckDmaReception+0x3c>
		USART2_ProcessData(bufferUSART2dma[i]);
 80028dc:	4b0f      	ldr	r3, [pc, #60]	; (800291c <USART2_CheckDmaReception+0x68>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	88fa      	ldrh	r2, [r7, #6]
 80028e2:	4911      	ldr	r1, [pc, #68]	; (8002928 <USART2_CheckDmaReception+0x74>)
 80028e4:	5c8a      	ldrb	r2, [r1, r2]
 80028e6:	4610      	mov	r0, r2
 80028e8:	4798      	blx	r3
	for (uint16_t i = old_pos; i < pos; i++) { //reading from buffer from old_pos to pos, sending each char to callback function
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	3301      	adds	r3, #1
 80028ee:	80fb      	strh	r3, [r7, #6]
 80028f0:	88fa      	ldrh	r2, [r7, #6]
 80028f2:	88bb      	ldrh	r3, [r7, #4]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d3f1      	bcc.n	80028dc <USART2_CheckDmaReception+0x28>
	}

	old_pos = pos;
 80028f8:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <USART2_CheckDmaReception+0x70>)
 80028fa:	88bb      	ldrh	r3, [r7, #4]
 80028fc:	8013      	strh	r3, [r2, #0]

	if(LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6) <= 20) { //if remaining buffer capacity is less than 20 characters
 80028fe:	2106      	movs	r1, #6
 8002900:	4807      	ldr	r0, [pc, #28]	; (8002920 <USART2_CheckDmaReception+0x6c>)
 8002902:	f7ff fc9f 	bl	8002244 <LL_DMA_GetDataLength>
 8002906:	4603      	mov	r3, r0
 8002908:	2b14      	cmp	r3, #20
 800290a:	d803      	bhi.n	8002914 <USART2_CheckDmaReception+0x60>
		reinitializeBuffer();
 800290c:	f7ff fe72 	bl	80025f4 <reinitializeBuffer>
 8002910:	e000      	b.n	8002914 <USART2_CheckDmaReception+0x60>
	if(USART2_ProcessData == 0) return;
 8002912:	bf00      	nop
	}
}
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000204 	.word	0x20000204
 8002920:	40020000 	.word	0x40020000
 8002924:	20000200 	.word	0x20000200
 8002928:	20000214 	.word	0x20000214

0800292c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800292c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002964 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002930:	480d      	ldr	r0, [pc, #52]	; (8002968 <LoopForever+0x6>)
  ldr r1, =_edata
 8002932:	490e      	ldr	r1, [pc, #56]	; (800296c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002934:	4a0e      	ldr	r2, [pc, #56]	; (8002970 <LoopForever+0xe>)
  movs r3, #0
 8002936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002938:	e002      	b.n	8002940 <LoopCopyDataInit>

0800293a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800293a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800293c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800293e:	3304      	adds	r3, #4

08002940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002944:	d3f9      	bcc.n	800293a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002946:	4a0b      	ldr	r2, [pc, #44]	; (8002974 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002948:	4c0b      	ldr	r4, [pc, #44]	; (8002978 <LoopForever+0x16>)
  movs r3, #0
 800294a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800294c:	e001      	b.n	8002952 <LoopFillZerobss>

0800294e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800294e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002950:	3204      	adds	r2, #4

08002952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002954:	d3fb      	bcc.n	800294e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002956:	f7fe ffe3 	bl	8001920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800295a:	f001 f867 	bl	8003a2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800295e:	f7fe fc2b 	bl	80011b8 <main>

08002962 <LoopForever>:

LoopForever:
    b LoopForever
 8002962:	e7fe      	b.n	8002962 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002964:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800296c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002970:	0800887c 	.word	0x0800887c
  ldr r2, =_sbss
 8002974:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002978:	200002ec 	.word	0x200002ec

0800297c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800297c:	e7fe      	b.n	800297c <ADC1_2_IRQHandler>

0800297e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800297e:	b480      	push	{r7}
 8002980:	b089      	sub	sp, #36	; 0x24
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	613b      	str	r3, [r7, #16]
  return result;
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	fab3 f383 	clz	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	2103      	movs	r1, #3
 80029a6:	fa01 f303 	lsl.w	r3, r1, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	401a      	ands	r2, r3
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	61bb      	str	r3, [r7, #24]
  return result;
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	fab3 f383 	clz	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ca:	431a      	orrs	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	601a      	str	r2, [r3, #0]
}
 80029d0:	bf00      	nop
 80029d2:	3724      	adds	r7, #36	; 0x24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	401a      	ands	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	431a      	orrs	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	605a      	str	r2, [r3, #4]
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b089      	sub	sp, #36	; 0x24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	613b      	str	r3, [r7, #16]
  return result;
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	2103      	movs	r1, #3
 8002a34:	fa01 f303 	lsl.w	r3, r1, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	61bb      	str	r3, [r7, #24]
  return result;
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002a5e:	bf00      	nop
 8002a60:	3724      	adds	r7, #36	; 0x24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b089      	sub	sp, #36	; 0x24
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	fa93 f3a3 	rbit	r3, r3
 8002a84:	613b      	str	r3, [r7, #16]
  return result;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	fab3 f383 	clz	r3, r3
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	2103      	movs	r1, #3
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	401a      	ands	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	61bb      	str	r3, [r7, #24]
  return result;
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	60da      	str	r2, [r3, #12]
}
 8002abc:	bf00      	nop
 8002abe:	3724      	adds	r7, #36	; 0x24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b089      	sub	sp, #36	; 0x24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a1a      	ldr	r2, [r3, #32]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	613b      	str	r3, [r7, #16]
  return result;
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	210f      	movs	r1, #15
 8002af0:	fa01 f303 	lsl.w	r3, r1, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	401a      	ands	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	61bb      	str	r3, [r7, #24]
  return result;
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	fab3 f383 	clz	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	fa01 f303 	lsl.w	r3, r1, r3
 8002b14:	431a      	orrs	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002b1a:	bf00      	nop
 8002b1c:	3724      	adds	r7, #36	; 0x24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b089      	sub	sp, #36	; 0x24
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	0a1b      	lsrs	r3, r3, #8
 8002b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	613b      	str	r3, [r7, #16]
  return result;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	210f      	movs	r1, #15
 8002b50:	fa01 f303 	lsl.w	r3, r1, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	401a      	ands	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	fa93 f3a3 	rbit	r3, r3
 8002b64:	61bb      	str	r3, [r7, #24]
  return result;
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	fab3 f383 	clz	r3, r3
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	431a      	orrs	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002b7c:	bf00      	nop
 8002b7e:	3724      	adds	r7, #36	; 0x24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	613b      	str	r3, [r7, #16]
  return result;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002baa:	e051      	b.n	8002c50 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d043      	beq.n	8002c4a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d003      	beq.n	8002bd2 <LL_GPIO_Init+0x4a>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d10e      	bne.n	8002bf0 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	69b9      	ldr	r1, [r7, #24]
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff ff16 	bl	8002a0c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	6819      	ldr	r1, [r3, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	461a      	mov	r2, r3
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff fef6 	bl	80029dc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	69b9      	ldr	r1, [r7, #24]
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff ff36 	bl	8002a6a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d11a      	bne.n	8002c3c <LL_GPIO_Init+0xb4>
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	60bb      	str	r3, [r7, #8]
  return result;
 8002c12:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002c14:	fab3 f383 	clz	r3, r3
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b07      	cmp	r3, #7
 8002c1c:	d807      	bhi.n	8002c2e <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	461a      	mov	r2, r3
 8002c24:	69b9      	ldr	r1, [r7, #24]
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7ff ff4e 	bl	8002ac8 <LL_GPIO_SetAFPin_0_7>
 8002c2c:	e006      	b.n	8002c3c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	461a      	mov	r2, r3
 8002c34:	69b9      	ldr	r1, [r7, #24]
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff ff75 	bl	8002b26 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	461a      	mov	r2, r3
 8002c42:	69b9      	ldr	r1, [r7, #24]
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff fe9a 	bl	800297e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1a6      	bne.n	8002bac <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3720      	adds	r7, #32
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <LL_RCC_HSI_IsReady>:
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <LL_RCC_HSI_IsReady+0x20>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	bf0c      	ite	eq
 8002c78:	2301      	moveq	r3, #1
 8002c7a:	2300      	movne	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	40021000 	.word	0x40021000

08002c8c <LL_RCC_LSE_IsReady>:
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <LL_RCC_LSE_IsReady+0x20>)
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	bf0c      	ite	eq
 8002c9c:	2301      	moveq	r3, #1
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	40021000 	.word	0x40021000

08002cb0 <LL_RCC_GetSysClkSource>:
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002cb4:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <LL_RCC_GetSysClkSource+0x18>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 030c 	and.w	r3, r3, #12
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000

08002ccc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002cd0:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <LL_RCC_GetAHBPrescaler+0x18>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40021000 	.word	0x40021000

08002ce8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40021000 	.word	0x40021000

08002d04 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002d08:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <LL_RCC_GetAPB2Prescaler+0x18>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000

08002d20 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8002d28:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <LL_RCC_GetUSARTClockSource+0x28>)
 8002d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d2c:	2103      	movs	r1, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	fa01 f303 	lsl.w	r3, r1, r3
 8002d34:	401a      	ands	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	061b      	lsls	r3, r3, #24
 8002d3a:	4313      	orrs	r3, r2
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	40021000 	.word	0x40021000

08002d4c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002d50:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <LL_RCC_PLL_GetMainSource+0x18>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40021000 	.word	0x40021000

08002d68 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000

08002d84 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <LL_RCC_PLL_GetPrediv+0x18>)
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	f003 030f 	and.w	r3, r3, #15
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000

08002da0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002da8:	f000 f864 	bl	8002e74 <RCC_GetSystemClockFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 f882 	bl	8002ec0 <RCC_GetHCLKClockFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f890 	bl	8002eec <RCC_GetPCLK1ClockFreq>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f89c 	bl	8002f14 <RCC_GetPCLK2ClockFreq>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	60da      	str	r2, [r3, #12]
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d12d      	bne.n	8002e5a <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff ff8e 	bl	8002d20 <LL_RCC_GetUSARTClockSource>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d00a      	beq.n	8002e20 <LL_RCC_GetUSARTClockFreq+0x34>
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d819      	bhi.n	8002e42 <LL_RCC_GetUSARTClockFreq+0x56>
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d002      	beq.n	8002e18 <LL_RCC_GetUSARTClockFreq+0x2c>
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d00c      	beq.n	8002e30 <LL_RCC_GetUSARTClockFreq+0x44>
 8002e16:	e014      	b.n	8002e42 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002e18:	f000 f82c 	bl	8002e74 <RCC_GetSystemClockFreq>
 8002e1c:	60f8      	str	r0, [r7, #12]
        break;
 8002e1e:	e021      	b.n	8002e64 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002e20:	f7ff ff22 	bl	8002c68 <LL_RCC_HSI_IsReady>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d019      	beq.n	8002e5e <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8002e2a:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <LL_RCC_GetUSARTClockFreq+0x84>)
 8002e2c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002e2e:	e016      	b.n	8002e5e <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002e30:	f7ff ff2c 	bl	8002c8c <LL_RCC_LSE_IsReady>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d013      	beq.n	8002e62 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8002e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e3e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002e40:	e00f      	b.n	8002e62 <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002e42:	f000 f817 	bl	8002e74 <RCC_GetSystemClockFreq>
 8002e46:	4603      	mov	r3, r0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 f839 	bl	8002ec0 <RCC_GetHCLKClockFreq>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 f84b 	bl	8002eec <RCC_GetPCLK1ClockFreq>
 8002e56:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8002e58:	e004      	b.n	8002e64 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 8002e5a:	bf00      	nop
 8002e5c:	e002      	b.n	8002e64 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002e5e:	bf00      	nop
 8002e60:	e000      	b.n	8002e64 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002e62:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002e64:	68fb      	ldr	r3, [r7, #12]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	007a1200 	.word	0x007a1200

08002e74 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002e7e:	f7ff ff17 	bl	8002cb0 <LL_RCC_GetSysClkSource>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d00c      	beq.n	8002ea2 <RCC_GetSystemClockFreq+0x2e>
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d80e      	bhi.n	8002eaa <RCC_GetSystemClockFreq+0x36>
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <RCC_GetSystemClockFreq+0x22>
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d003      	beq.n	8002e9c <RCC_GetSystemClockFreq+0x28>
 8002e94:	e009      	b.n	8002eaa <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002e96:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <RCC_GetSystemClockFreq+0x48>)
 8002e98:	607b      	str	r3, [r7, #4]
      break;
 8002e9a:	e009      	b.n	8002eb0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002e9c:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <RCC_GetSystemClockFreq+0x48>)
 8002e9e:	607b      	str	r3, [r7, #4]
      break;
 8002ea0:	e006      	b.n	8002eb0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002ea2:	f000 f84b 	bl	8002f3c <RCC_PLL_GetFreqDomain_SYS>
 8002ea6:	6078      	str	r0, [r7, #4]
      break;
 8002ea8:	e002      	b.n	8002eb0 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002eaa:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <RCC_GetSystemClockFreq+0x48>)
 8002eac:	607b      	str	r3, [r7, #4]
      break;
 8002eae:	bf00      	nop
  }

  return frequency;
 8002eb0:	687b      	ldr	r3, [r7, #4]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	007a1200 	.word	0x007a1200

08002ec0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002ec8:	f7ff ff00 	bl	8002ccc <LL_RCC_GetAHBPrescaler>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	4a04      	ldr	r2, [pc, #16]	; (8002ee8 <RCC_GetHCLKClockFreq+0x28>)
 8002ed6:	5cd3      	ldrb	r3, [r2, r3]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	40d3      	lsrs	r3, r2
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	08008388 	.word	0x08008388

08002eec <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002ef4:	f7ff fef8 	bl	8002ce8 <LL_RCC_GetAPB1Prescaler>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	0a1b      	lsrs	r3, r3, #8
 8002efc:	4a04      	ldr	r2, [pc, #16]	; (8002f10 <RCC_GetPCLK1ClockFreq+0x24>)
 8002efe:	5cd3      	ldrb	r3, [r2, r3]
 8002f00:	461a      	mov	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	40d3      	lsrs	r3, r2
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	08008398 	.word	0x08008398

08002f14 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002f1c:	f7ff fef2 	bl	8002d04 <LL_RCC_GetAPB2Prescaler>
 8002f20:	4603      	mov	r3, r0
 8002f22:	0adb      	lsrs	r3, r3, #11
 8002f24:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <RCC_GetPCLK2ClockFreq+0x24>)
 8002f26:	5cd3      	ldrb	r3, [r2, r3]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	40d3      	lsrs	r3, r2
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	08008398 	.word	0x08008398

08002f3c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002f3c:	b590      	push	{r4, r7, lr}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002f4a:	f7ff feff 	bl	8002d4c <LL_RCC_PLL_GetMainSource>
 8002f4e:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d004      	beq.n	8002f60 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f5c:	d003      	beq.n	8002f66 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002f5e:	e005      	b.n	8002f6c <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002f60:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002f62:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002f64:	e005      	b.n	8002f72 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002f66:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002f68:	60fb      	str	r3, [r7, #12]
      break;
 8002f6a:	e002      	b.n	8002f72 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8002f6c:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002f6e:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002f70:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002f72:	f7ff ff07 	bl	8002d84 <LL_RCC_PLL_GetPrediv>
 8002f76:	4603      	mov	r3, r0
 8002f78:	3301      	adds	r3, #1
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	fbb2 f4f3 	udiv	r4, r2, r3
 8002f80:	f7ff fef2 	bl	8002d68 <LL_RCC_PLL_GetMultiplicator>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f8a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002f8e:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	fa92 f2a2 	rbit	r2, r2
 8002f96:	603a      	str	r2, [r7, #0]
  return result;
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	fab2 f282 	clz	r2, r2
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	40d3      	lsrs	r3, r2
 8002fa2:	3302      	adds	r3, #2
 8002fa4:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd90      	pop	{r4, r7, pc}
 8002fb0:	003d0900 	.word	0x003d0900
 8002fb4:	007a1200 	.word	0x007a1200

08002fb8 <LL_TIM_SetPrescaler>:
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <LL_TIM_SetAutoReload>:
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <LL_TIM_SetRepetitionCounter>:
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <LL_TIM_OC_SetCompareCH1>:
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <LL_TIM_OC_SetCompareCH2>:
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_TIM_OC_SetCompareCH3>:
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_TIM_OC_SetCompareCH4>:
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <LL_TIM_OC_SetCompareCH5>:
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <LL_TIM_OC_SetCompareCH6>:
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f043 0201 	orr.w	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	615a      	str	r2, [r3, #20]
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a2f      	ldr	r2, [pc, #188]	; (80031a8 <LL_TIM_Init+0xd0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d007      	beq.n	8003100 <LL_TIM_Init+0x28>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f6:	d003      	beq.n	8003100 <LL_TIM_Init+0x28>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a2c      	ldr	r2, [pc, #176]	; (80031ac <LL_TIM_Init+0xd4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d106      	bne.n	800310e <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4313      	orrs	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a25      	ldr	r2, [pc, #148]	; (80031a8 <LL_TIM_Init+0xd0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <LL_TIM_Init+0x66>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311c:	d00f      	beq.n	800313e <LL_TIM_Init+0x66>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a22      	ldr	r2, [pc, #136]	; (80031ac <LL_TIM_Init+0xd4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00b      	beq.n	800313e <LL_TIM_Init+0x66>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a21      	ldr	r2, [pc, #132]	; (80031b0 <LL_TIM_Init+0xd8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d007      	beq.n	800313e <LL_TIM_Init+0x66>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a20      	ldr	r2, [pc, #128]	; (80031b4 <LL_TIM_Init+0xdc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d003      	beq.n	800313e <LL_TIM_Init+0x66>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a1f      	ldr	r2, [pc, #124]	; (80031b8 <LL_TIM_Init+0xe0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d106      	bne.n	800314c <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4313      	orrs	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	4619      	mov	r1, r3
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff ff3b 	bl	8002fd4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	4619      	mov	r1, r3
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff ff27 	bl	8002fb8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a0e      	ldr	r2, [pc, #56]	; (80031a8 <LL_TIM_Init+0xd0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00b      	beq.n	800318a <LL_TIM_Init+0xb2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a0e      	ldr	r2, [pc, #56]	; (80031b0 <LL_TIM_Init+0xd8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d007      	beq.n	800318a <LL_TIM_Init+0xb2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a0d      	ldr	r2, [pc, #52]	; (80031b4 <LL_TIM_Init+0xdc>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d003      	beq.n	800318a <LL_TIM_Init+0xb2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a0c      	ldr	r2, [pc, #48]	; (80031b8 <LL_TIM_Init+0xe0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d105      	bne.n	8003196 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	4619      	mov	r1, r3
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ff2d 	bl	8002ff0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff ff8e 	bl	80030b8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40012c00 	.word	0x40012c00
 80031ac:	40000400 	.word	0x40000400
 80031b0:	40014000 	.word	0x40014000
 80031b4:	40014400 	.word	0x40014400
 80031b8:	40014800 	.word	0x40014800

080031bc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031d2:	d045      	beq.n	8003260 <LL_TIM_OC_Init+0xa4>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031da:	d848      	bhi.n	800326e <LL_TIM_OC_Init+0xb2>
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e2:	d036      	beq.n	8003252 <LL_TIM_OC_Init+0x96>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ea:	d840      	bhi.n	800326e <LL_TIM_OC_Init+0xb2>
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f2:	d027      	beq.n	8003244 <LL_TIM_OC_Init+0x88>
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fa:	d838      	bhi.n	800326e <LL_TIM_OC_Init+0xb2>
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003202:	d018      	beq.n	8003236 <LL_TIM_OC_Init+0x7a>
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800320a:	d830      	bhi.n	800326e <LL_TIM_OC_Init+0xb2>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d003      	beq.n	800321a <LL_TIM_OC_Init+0x5e>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b10      	cmp	r3, #16
 8003216:	d007      	beq.n	8003228 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8003218:	e029      	b.n	800326e <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f82d 	bl	800327c <OC1Config>
 8003222:	4603      	mov	r3, r0
 8003224:	75fb      	strb	r3, [r7, #23]
      break;
 8003226:	e023      	b.n	8003270 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f8a0 	bl	8003370 <OC2Config>
 8003230:	4603      	mov	r3, r0
 8003232:	75fb      	strb	r3, [r7, #23]
      break;
 8003234:	e01c      	b.n	8003270 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f917 	bl	800346c <OC3Config>
 800323e:	4603      	mov	r3, r0
 8003240:	75fb      	strb	r3, [r7, #23]
      break;
 8003242:	e015      	b.n	8003270 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f98e 	bl	8003568 <OC4Config>
 800324c:	4603      	mov	r3, r0
 800324e:	75fb      	strb	r3, [r7, #23]
      break;
 8003250:	e00e      	b.n	8003270 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f9ed 	bl	8003634 <OC5Config>
 800325a:	4603      	mov	r3, r0
 800325c:	75fb      	strb	r3, [r7, #23]
      break;
 800325e:	e007      	b.n	8003270 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 fa44 	bl	80036f0 <OC6Config>
 8003268:	4603      	mov	r3, r0
 800326a:	75fb      	strb	r3, [r7, #23]
      break;
 800326c:	e000      	b.n	8003270 <LL_TIM_OC_Init+0xb4>
      break;
 800326e:	bf00      	nop
  }

  return result;
 8003270:	7dfb      	ldrb	r3, [r7, #23]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	f023 0201 	bic.w	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0303 	bic.w	r3, r3, #3
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	6812      	ldr	r2, [r2, #0]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f023 0202 	bic.w	r2, r3, #2
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f023 0201 	bic.w	r2, r3, #1
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a20      	ldr	r2, [pc, #128]	; (8003360 <OC1Config+0xe4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00b      	beq.n	80032fa <OC1Config+0x7e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a1f      	ldr	r2, [pc, #124]	; (8003364 <OC1Config+0xe8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d007      	beq.n	80032fa <OC1Config+0x7e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a1e      	ldr	r2, [pc, #120]	; (8003368 <OC1Config+0xec>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d003      	beq.n	80032fa <OC1Config+0x7e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a1d      	ldr	r2, [pc, #116]	; (800336c <OC1Config+0xf0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d11e      	bne.n	8003338 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f023 0208 	bic.w	r2, r3, #8
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f023 0204 	bic.w	r2, r3, #4
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4619      	mov	r1, r3
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff fe5e 	bl	800300c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40012c00 	.word	0x40012c00
 8003364:	40014000 	.word	0x40014000
 8003368:	40014400 	.word	0x40014400
 800336c:	40014800 	.word	0x40014800

08003370 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	f023 0210 	bic.w	r2, r3, #16
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	6812      	ldr	r2, [r2, #0]
 80033ae:	0212      	lsls	r2, r2, #8
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f023 0220 	bic.w	r2, r3, #32
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f023 0210 	bic.w	r2, r3, #16
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	4313      	orrs	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a21      	ldr	r2, [pc, #132]	; (800345c <OC2Config+0xec>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00b      	beq.n	80033f4 <OC2Config+0x84>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a20      	ldr	r2, [pc, #128]	; (8003460 <OC2Config+0xf0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d007      	beq.n	80033f4 <OC2Config+0x84>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a1f      	ldr	r2, [pc, #124]	; (8003464 <OC2Config+0xf4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d003      	beq.n	80033f4 <OC2Config+0x84>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a1e      	ldr	r2, [pc, #120]	; (8003468 <OC2Config+0xf8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d11f      	bne.n	8003434 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	019b      	lsls	r3, r3, #6
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	019b      	lsls	r3, r3, #6
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4619      	mov	r1, r3
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff fdee 	bl	8003028 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40012c00 	.word	0x40012c00
 8003460:	40014000 	.word	0x40014000
 8003464:	40014400 	.word	0x40014400
 8003468:	40014800 	.word	0x40014800

0800346c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0303 	bic.w	r3, r3, #3
 800349a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	6812      	ldr	r2, [r2, #0]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a21      	ldr	r2, [pc, #132]	; (8003558 <OC3Config+0xec>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00b      	beq.n	80034ee <OC3Config+0x82>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a20      	ldr	r2, [pc, #128]	; (800355c <OC3Config+0xf0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d007      	beq.n	80034ee <OC3Config+0x82>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a1f      	ldr	r2, [pc, #124]	; (8003560 <OC3Config+0xf4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d003      	beq.n	80034ee <OC3Config+0x82>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a1e      	ldr	r2, [pc, #120]	; (8003564 <OC3Config+0xf8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d11f      	bne.n	800352e <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	029b      	lsls	r3, r3, #10
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	029b      	lsls	r3, r3, #10
 800350a:	4313      	orrs	r3, r2
 800350c:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	015b      	lsls	r3, r3, #5
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	4619      	mov	r1, r3
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff fd7f 	bl	8003044 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40012c00 	.word	0x40012c00
 800355c:	40014000 	.word	0x40014000
 8003560:	40014400 	.word	0x40014400
 8003564:	40014800 	.word	0x40014800

08003568 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800359e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	0212      	lsls	r2, r2, #8
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	031b      	lsls	r3, r3, #12
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	031b      	lsls	r3, r3, #12
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a15      	ldr	r2, [pc, #84]	; (8003624 <OC4Config+0xbc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00b      	beq.n	80035ec <OC4Config+0x84>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a14      	ldr	r2, [pc, #80]	; (8003628 <OC4Config+0xc0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d007      	beq.n	80035ec <OC4Config+0x84>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a13      	ldr	r2, [pc, #76]	; (800362c <OC4Config+0xc4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d003      	beq.n	80035ec <OC4Config+0x84>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a12      	ldr	r2, [pc, #72]	; (8003630 <OC4Config+0xc8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d107      	bne.n	80035fc <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	019b      	lsls	r3, r3, #6
 80035f8:	4313      	orrs	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4619      	mov	r1, r3
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff fd26 	bl	8003060 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40012c00 	.word	0x40012c00
 8003628:	40014000 	.word	0x40014000
 800362c:	40014400 	.word	0x40014400
 8003630:	40014800 	.word	0x40014800

08003634 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003654:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	4313      	orrs	r3, r2
 8003666:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	041b      	lsls	r3, r3, #16
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	041b      	lsls	r3, r3, #16
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a15      	ldr	r2, [pc, #84]	; (80036e0 <OC5Config+0xac>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00b      	beq.n	80036a8 <OC5Config+0x74>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a14      	ldr	r2, [pc, #80]	; (80036e4 <OC5Config+0xb0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d007      	beq.n	80036a8 <OC5Config+0x74>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a13      	ldr	r2, [pc, #76]	; (80036e8 <OC5Config+0xb4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <OC5Config+0x74>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a12      	ldr	r2, [pc, #72]	; (80036ec <OC5Config+0xb8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d109      	bne.n	80036bc <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	021b      	lsls	r3, r3, #8
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	4619      	mov	r1, r3
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff fcd7 	bl	800307c <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40012c00 	.word	0x40012c00
 80036e4:	40014000 	.word	0x40014000
 80036e8:	40014400 	.word	0x40014400
 80036ec:	40014800 	.word	0x40014800

080036f0 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003710:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	6812      	ldr	r2, [r2, #0]
 8003720:	0212      	lsls	r2, r2, #8
 8003722:	4313      	orrs	r3, r2
 8003724:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	051b      	lsls	r3, r3, #20
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	051b      	lsls	r3, r3, #20
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a14      	ldr	r2, [pc, #80]	; (800379c <OC6Config+0xac>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00b      	beq.n	8003766 <OC6Config+0x76>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a13      	ldr	r2, [pc, #76]	; (80037a0 <OC6Config+0xb0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d007      	beq.n	8003766 <OC6Config+0x76>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a12      	ldr	r2, [pc, #72]	; (80037a4 <OC6Config+0xb4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d003      	beq.n	8003766 <OC6Config+0x76>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a11      	ldr	r2, [pc, #68]	; (80037a8 <OC6Config+0xb8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d109      	bne.n	800377a <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	029b      	lsls	r3, r3, #10
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4619      	mov	r1, r3
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff fc88 	bl	800309c <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40012c00 	.word	0x40012c00
 80037a0:	40014000 	.word	0x40014000
 80037a4:	40014400 	.word	0x40014400
 80037a8:	40014800 	.word	0x40014800

080037ac <LL_USART_IsEnabled>:
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <LL_USART_IsEnabled+0x18>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <LL_USART_IsEnabled+0x1a>
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <LL_USART_SetStopBitsLength>:
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	605a      	str	r2, [r3, #4]
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <LL_USART_SetHWFlowCtrl>:
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	609a      	str	r2, [r3, #8]
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <LL_USART_SetBaudRate>:
{
 800381e:	b480      	push	{r7}
 8003820:	b087      	sub	sp, #28
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
 800382a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003832:	d11a      	bne.n	800386a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	005a      	lsls	r2, r3, #1
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	085b      	lsrs	r3, r3, #1
 800383c:	441a      	add	r2, r3
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	fbb2 f3f3 	udiv	r3, r2, r3
 8003844:	b29b      	uxth	r3, r3
 8003846:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800384e:	4013      	ands	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	085b      	lsrs	r3, r3, #1
 8003856:	b29b      	uxth	r3, r3
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	60da      	str	r2, [r3, #12]
}
 8003868:	e00a      	b.n	8003880 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	085a      	lsrs	r2, r3, #1
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	441a      	add	r2, r3
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	fbb2 f3f3 	udiv	r3, r2, r3
 8003878:	b29b      	uxth	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	60da      	str	r2, [r3, #12]
}
 8003880:	bf00      	nop
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800389a:	2300      	movs	r3, #0
 800389c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff ff84 	bl	80037ac <LL_USART_IsEnabled>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d14e      	bne.n	8003948 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	4b29      	ldr	r3, [pc, #164]	; (8003954 <LL_USART_Init+0xc8>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	6851      	ldr	r1, [r2, #4]
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	68d2      	ldr	r2, [r2, #12]
 80038ba:	4311      	orrs	r1, r2
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	6912      	ldr	r2, [r2, #16]
 80038c0:	4311      	orrs	r1, r2
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	6992      	ldr	r2, [r2, #24]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	4619      	mov	r1, r3
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff ff7c 	bl	80037d2 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	4619      	mov	r1, r3
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff ff89 	bl	80037f8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a1b      	ldr	r2, [pc, #108]	; (8003958 <LL_USART_Init+0xcc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d104      	bne.n	80038f8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80038ee:	2000      	movs	r0, #0
 80038f0:	f7ff fa7c 	bl	8002dec <LL_RCC_GetUSARTClockFreq>
 80038f4:	61b8      	str	r0, [r7, #24]
 80038f6:	e016      	b.n	8003926 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a18      	ldr	r2, [pc, #96]	; (800395c <LL_USART_Init+0xd0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d107      	bne.n	8003910 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8003900:	f107 0308 	add.w	r3, r7, #8
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fa4b 	bl	8002da0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	e00a      	b.n	8003926 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a13      	ldr	r2, [pc, #76]	; (8003960 <LL_USART_Init+0xd4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d106      	bne.n	8003926 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8003918:	f107 0308 	add.w	r3, r7, #8
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff fa3f 	bl	8002da0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00d      	beq.n	8003948 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d009      	beq.n	8003948 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8003934:	2300      	movs	r3, #0
 8003936:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	699a      	ldr	r2, [r3, #24]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69b9      	ldr	r1, [r7, #24]
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff ff6b 	bl	800381e <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003948:	7ffb      	ldrb	r3, [r7, #31]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3720      	adds	r7, #32
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	efff69f3 	.word	0xefff69f3
 8003958:	40013800 	.word	0x40013800
 800395c:	40004400 	.word	0x40004400
 8003960:	40004800 	.word	0x40004800

08003964 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	fbb2 f3f3 	udiv	r3, r2, r3
 8003976:	4a07      	ldr	r2, [pc, #28]	; (8003994 <LL_InitTick+0x30>)
 8003978:	3b01      	subs	r3, #1
 800397a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <LL_InitTick+0x30>)
 800397e:	2200      	movs	r2, #0
 8003980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003982:	4b04      	ldr	r3, [pc, #16]	; (8003994 <LL_InitTick+0x30>)
 8003984:	2205      	movs	r2, #5
 8003986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	e000e010 	.word	0xe000e010

08003998 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80039a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff ffdd 	bl	8003964 <LL_InitTick>
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80039bc:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <LL_mDelay+0x48>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80039c2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ca:	d00c      	beq.n	80039e6 <LL_mDelay+0x32>
  {
    Delay++;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3301      	adds	r3, #1
 80039d0:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80039d2:	e008      	b.n	80039e6 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80039d4:	4b09      	ldr	r3, [pc, #36]	; (80039fc <LL_mDelay+0x48>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <LL_mDelay+0x32>
    {
      Delay--;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	607b      	str	r3, [r7, #4]
  while (Delay)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f3      	bne.n	80039d4 <LL_mDelay+0x20>
    }
  }
}
 80039ec:	bf00      	nop
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	e000e010 	.word	0xe000e010

08003a00 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003a08:	4a04      	ldr	r2, [pc, #16]	; (8003a1c <LL_SetSystemCoreClock+0x1c>)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6013      	str	r3, [r2, #0]
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000004 	.word	0x20000004

08003a20 <__errno>:
 8003a20:	4b01      	ldr	r3, [pc, #4]	; (8003a28 <__errno+0x8>)
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20000008 	.word	0x20000008

08003a2c <__libc_init_array>:
 8003a2c:	b570      	push	{r4, r5, r6, lr}
 8003a2e:	4d0d      	ldr	r5, [pc, #52]	; (8003a64 <__libc_init_array+0x38>)
 8003a30:	4c0d      	ldr	r4, [pc, #52]	; (8003a68 <__libc_init_array+0x3c>)
 8003a32:	1b64      	subs	r4, r4, r5
 8003a34:	10a4      	asrs	r4, r4, #2
 8003a36:	2600      	movs	r6, #0
 8003a38:	42a6      	cmp	r6, r4
 8003a3a:	d109      	bne.n	8003a50 <__libc_init_array+0x24>
 8003a3c:	4d0b      	ldr	r5, [pc, #44]	; (8003a6c <__libc_init_array+0x40>)
 8003a3e:	4c0c      	ldr	r4, [pc, #48]	; (8003a70 <__libc_init_array+0x44>)
 8003a40:	f004 fc46 	bl	80082d0 <_init>
 8003a44:	1b64      	subs	r4, r4, r5
 8003a46:	10a4      	asrs	r4, r4, #2
 8003a48:	2600      	movs	r6, #0
 8003a4a:	42a6      	cmp	r6, r4
 8003a4c:	d105      	bne.n	8003a5a <__libc_init_array+0x2e>
 8003a4e:	bd70      	pop	{r4, r5, r6, pc}
 8003a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a54:	4798      	blx	r3
 8003a56:	3601      	adds	r6, #1
 8003a58:	e7ee      	b.n	8003a38 <__libc_init_array+0xc>
 8003a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a5e:	4798      	blx	r3
 8003a60:	3601      	adds	r6, #1
 8003a62:	e7f2      	b.n	8003a4a <__libc_init_array+0x1e>
 8003a64:	08008874 	.word	0x08008874
 8003a68:	08008874 	.word	0x08008874
 8003a6c:	08008874 	.word	0x08008874
 8003a70:	08008878 	.word	0x08008878

08003a74 <memset>:
 8003a74:	4402      	add	r2, r0
 8003a76:	4603      	mov	r3, r0
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d100      	bne.n	8003a7e <memset+0xa>
 8003a7c:	4770      	bx	lr
 8003a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a82:	e7f9      	b.n	8003a78 <memset+0x4>

08003a84 <__cvt>:
 8003a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a88:	ec55 4b10 	vmov	r4, r5, d0
 8003a8c:	2d00      	cmp	r5, #0
 8003a8e:	460e      	mov	r6, r1
 8003a90:	4619      	mov	r1, r3
 8003a92:	462b      	mov	r3, r5
 8003a94:	bfbb      	ittet	lt
 8003a96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003a9a:	461d      	movlt	r5, r3
 8003a9c:	2300      	movge	r3, #0
 8003a9e:	232d      	movlt	r3, #45	; 0x2d
 8003aa0:	700b      	strb	r3, [r1, #0]
 8003aa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003aa4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003aa8:	4691      	mov	r9, r2
 8003aaa:	f023 0820 	bic.w	r8, r3, #32
 8003aae:	bfbc      	itt	lt
 8003ab0:	4622      	movlt	r2, r4
 8003ab2:	4614      	movlt	r4, r2
 8003ab4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ab8:	d005      	beq.n	8003ac6 <__cvt+0x42>
 8003aba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003abe:	d100      	bne.n	8003ac2 <__cvt+0x3e>
 8003ac0:	3601      	adds	r6, #1
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	e000      	b.n	8003ac8 <__cvt+0x44>
 8003ac6:	2103      	movs	r1, #3
 8003ac8:	ab03      	add	r3, sp, #12
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	ab02      	add	r3, sp, #8
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	ec45 4b10 	vmov	d0, r4, r5
 8003ad4:	4653      	mov	r3, sl
 8003ad6:	4632      	mov	r2, r6
 8003ad8:	f001 fdb6 	bl	8005648 <_dtoa_r>
 8003adc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003ae0:	4607      	mov	r7, r0
 8003ae2:	d102      	bne.n	8003aea <__cvt+0x66>
 8003ae4:	f019 0f01 	tst.w	r9, #1
 8003ae8:	d022      	beq.n	8003b30 <__cvt+0xac>
 8003aea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003aee:	eb07 0906 	add.w	r9, r7, r6
 8003af2:	d110      	bne.n	8003b16 <__cvt+0x92>
 8003af4:	783b      	ldrb	r3, [r7, #0]
 8003af6:	2b30      	cmp	r3, #48	; 0x30
 8003af8:	d10a      	bne.n	8003b10 <__cvt+0x8c>
 8003afa:	2200      	movs	r2, #0
 8003afc:	2300      	movs	r3, #0
 8003afe:	4620      	mov	r0, r4
 8003b00:	4629      	mov	r1, r5
 8003b02:	f7fc ffe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b06:	b918      	cbnz	r0, 8003b10 <__cvt+0x8c>
 8003b08:	f1c6 0601 	rsb	r6, r6, #1
 8003b0c:	f8ca 6000 	str.w	r6, [sl]
 8003b10:	f8da 3000 	ldr.w	r3, [sl]
 8003b14:	4499      	add	r9, r3
 8003b16:	2200      	movs	r2, #0
 8003b18:	2300      	movs	r3, #0
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	4629      	mov	r1, r5
 8003b1e:	f7fc ffd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b22:	b108      	cbz	r0, 8003b28 <__cvt+0xa4>
 8003b24:	f8cd 900c 	str.w	r9, [sp, #12]
 8003b28:	2230      	movs	r2, #48	; 0x30
 8003b2a:	9b03      	ldr	r3, [sp, #12]
 8003b2c:	454b      	cmp	r3, r9
 8003b2e:	d307      	bcc.n	8003b40 <__cvt+0xbc>
 8003b30:	9b03      	ldr	r3, [sp, #12]
 8003b32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b34:	1bdb      	subs	r3, r3, r7
 8003b36:	4638      	mov	r0, r7
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	b004      	add	sp, #16
 8003b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b40:	1c59      	adds	r1, r3, #1
 8003b42:	9103      	str	r1, [sp, #12]
 8003b44:	701a      	strb	r2, [r3, #0]
 8003b46:	e7f0      	b.n	8003b2a <__cvt+0xa6>

08003b48 <__exponent>:
 8003b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2900      	cmp	r1, #0
 8003b4e:	bfb8      	it	lt
 8003b50:	4249      	neglt	r1, r1
 8003b52:	f803 2b02 	strb.w	r2, [r3], #2
 8003b56:	bfb4      	ite	lt
 8003b58:	222d      	movlt	r2, #45	; 0x2d
 8003b5a:	222b      	movge	r2, #43	; 0x2b
 8003b5c:	2909      	cmp	r1, #9
 8003b5e:	7042      	strb	r2, [r0, #1]
 8003b60:	dd2a      	ble.n	8003bb8 <__exponent+0x70>
 8003b62:	f10d 0407 	add.w	r4, sp, #7
 8003b66:	46a4      	mov	ip, r4
 8003b68:	270a      	movs	r7, #10
 8003b6a:	46a6      	mov	lr, r4
 8003b6c:	460a      	mov	r2, r1
 8003b6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003b72:	fb07 1516 	mls	r5, r7, r6, r1
 8003b76:	3530      	adds	r5, #48	; 0x30
 8003b78:	2a63      	cmp	r2, #99	; 0x63
 8003b7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8003b7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003b82:	4631      	mov	r1, r6
 8003b84:	dcf1      	bgt.n	8003b6a <__exponent+0x22>
 8003b86:	3130      	adds	r1, #48	; 0x30
 8003b88:	f1ae 0502 	sub.w	r5, lr, #2
 8003b8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003b90:	1c44      	adds	r4, r0, #1
 8003b92:	4629      	mov	r1, r5
 8003b94:	4561      	cmp	r1, ip
 8003b96:	d30a      	bcc.n	8003bae <__exponent+0x66>
 8003b98:	f10d 0209 	add.w	r2, sp, #9
 8003b9c:	eba2 020e 	sub.w	r2, r2, lr
 8003ba0:	4565      	cmp	r5, ip
 8003ba2:	bf88      	it	hi
 8003ba4:	2200      	movhi	r2, #0
 8003ba6:	4413      	add	r3, r2
 8003ba8:	1a18      	subs	r0, r3, r0
 8003baa:	b003      	add	sp, #12
 8003bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bb2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003bb6:	e7ed      	b.n	8003b94 <__exponent+0x4c>
 8003bb8:	2330      	movs	r3, #48	; 0x30
 8003bba:	3130      	adds	r1, #48	; 0x30
 8003bbc:	7083      	strb	r3, [r0, #2]
 8003bbe:	70c1      	strb	r1, [r0, #3]
 8003bc0:	1d03      	adds	r3, r0, #4
 8003bc2:	e7f1      	b.n	8003ba8 <__exponent+0x60>

08003bc4 <_printf_float>:
 8003bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bc8:	ed2d 8b02 	vpush	{d8}
 8003bcc:	b08d      	sub	sp, #52	; 0x34
 8003bce:	460c      	mov	r4, r1
 8003bd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003bd4:	4616      	mov	r6, r2
 8003bd6:	461f      	mov	r7, r3
 8003bd8:	4605      	mov	r5, r0
 8003bda:	f002 fe91 	bl	8006900 <_localeconv_r>
 8003bde:	f8d0 a000 	ldr.w	sl, [r0]
 8003be2:	4650      	mov	r0, sl
 8003be4:	f7fc faf4 	bl	80001d0 <strlen>
 8003be8:	2300      	movs	r3, #0
 8003bea:	930a      	str	r3, [sp, #40]	; 0x28
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	9305      	str	r3, [sp, #20]
 8003bf0:	f8d8 3000 	ldr.w	r3, [r8]
 8003bf4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003bf8:	3307      	adds	r3, #7
 8003bfa:	f023 0307 	bic.w	r3, r3, #7
 8003bfe:	f103 0208 	add.w	r2, r3, #8
 8003c02:	f8c8 2000 	str.w	r2, [r8]
 8003c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003c0e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003c12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003c16:	9307      	str	r3, [sp, #28]
 8003c18:	f8cd 8018 	str.w	r8, [sp, #24]
 8003c1c:	ee08 0a10 	vmov	s16, r0
 8003c20:	4b9f      	ldr	r3, [pc, #636]	; (8003ea0 <_printf_float+0x2dc>)
 8003c22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c26:	f04f 32ff 	mov.w	r2, #4294967295
 8003c2a:	f7fc ff7f 	bl	8000b2c <__aeabi_dcmpun>
 8003c2e:	bb88      	cbnz	r0, 8003c94 <_printf_float+0xd0>
 8003c30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c34:	4b9a      	ldr	r3, [pc, #616]	; (8003ea0 <_printf_float+0x2dc>)
 8003c36:	f04f 32ff 	mov.w	r2, #4294967295
 8003c3a:	f7fc ff59 	bl	8000af0 <__aeabi_dcmple>
 8003c3e:	bb48      	cbnz	r0, 8003c94 <_printf_float+0xd0>
 8003c40:	2200      	movs	r2, #0
 8003c42:	2300      	movs	r3, #0
 8003c44:	4640      	mov	r0, r8
 8003c46:	4649      	mov	r1, r9
 8003c48:	f7fc ff48 	bl	8000adc <__aeabi_dcmplt>
 8003c4c:	b110      	cbz	r0, 8003c54 <_printf_float+0x90>
 8003c4e:	232d      	movs	r3, #45	; 0x2d
 8003c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c54:	4b93      	ldr	r3, [pc, #588]	; (8003ea4 <_printf_float+0x2e0>)
 8003c56:	4894      	ldr	r0, [pc, #592]	; (8003ea8 <_printf_float+0x2e4>)
 8003c58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003c5c:	bf94      	ite	ls
 8003c5e:	4698      	movls	r8, r3
 8003c60:	4680      	movhi	r8, r0
 8003c62:	2303      	movs	r3, #3
 8003c64:	6123      	str	r3, [r4, #16]
 8003c66:	9b05      	ldr	r3, [sp, #20]
 8003c68:	f023 0204 	bic.w	r2, r3, #4
 8003c6c:	6022      	str	r2, [r4, #0]
 8003c6e:	f04f 0900 	mov.w	r9, #0
 8003c72:	9700      	str	r7, [sp, #0]
 8003c74:	4633      	mov	r3, r6
 8003c76:	aa0b      	add	r2, sp, #44	; 0x2c
 8003c78:	4621      	mov	r1, r4
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	f000 f9d8 	bl	8004030 <_printf_common>
 8003c80:	3001      	adds	r0, #1
 8003c82:	f040 8090 	bne.w	8003da6 <_printf_float+0x1e2>
 8003c86:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8a:	b00d      	add	sp, #52	; 0x34
 8003c8c:	ecbd 8b02 	vpop	{d8}
 8003c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c94:	4642      	mov	r2, r8
 8003c96:	464b      	mov	r3, r9
 8003c98:	4640      	mov	r0, r8
 8003c9a:	4649      	mov	r1, r9
 8003c9c:	f7fc ff46 	bl	8000b2c <__aeabi_dcmpun>
 8003ca0:	b140      	cbz	r0, 8003cb4 <_printf_float+0xf0>
 8003ca2:	464b      	mov	r3, r9
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bfbc      	itt	lt
 8003ca8:	232d      	movlt	r3, #45	; 0x2d
 8003caa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003cae:	487f      	ldr	r0, [pc, #508]	; (8003eac <_printf_float+0x2e8>)
 8003cb0:	4b7f      	ldr	r3, [pc, #508]	; (8003eb0 <_printf_float+0x2ec>)
 8003cb2:	e7d1      	b.n	8003c58 <_printf_float+0x94>
 8003cb4:	6863      	ldr	r3, [r4, #4]
 8003cb6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003cba:	9206      	str	r2, [sp, #24]
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	d13f      	bne.n	8003d40 <_printf_float+0x17c>
 8003cc0:	2306      	movs	r3, #6
 8003cc2:	6063      	str	r3, [r4, #4]
 8003cc4:	9b05      	ldr	r3, [sp, #20]
 8003cc6:	6861      	ldr	r1, [r4, #4]
 8003cc8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003ccc:	2300      	movs	r3, #0
 8003cce:	9303      	str	r3, [sp, #12]
 8003cd0:	ab0a      	add	r3, sp, #40	; 0x28
 8003cd2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003cd6:	ab09      	add	r3, sp, #36	; 0x24
 8003cd8:	ec49 8b10 	vmov	d0, r8, r9
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	6022      	str	r2, [r4, #0]
 8003ce0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	f7ff fecd 	bl	8003a84 <__cvt>
 8003cea:	9b06      	ldr	r3, [sp, #24]
 8003cec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003cee:	2b47      	cmp	r3, #71	; 0x47
 8003cf0:	4680      	mov	r8, r0
 8003cf2:	d108      	bne.n	8003d06 <_printf_float+0x142>
 8003cf4:	1cc8      	adds	r0, r1, #3
 8003cf6:	db02      	blt.n	8003cfe <_printf_float+0x13a>
 8003cf8:	6863      	ldr	r3, [r4, #4]
 8003cfa:	4299      	cmp	r1, r3
 8003cfc:	dd41      	ble.n	8003d82 <_printf_float+0x1be>
 8003cfe:	f1ab 0b02 	sub.w	fp, fp, #2
 8003d02:	fa5f fb8b 	uxtb.w	fp, fp
 8003d06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003d0a:	d820      	bhi.n	8003d4e <_printf_float+0x18a>
 8003d0c:	3901      	subs	r1, #1
 8003d0e:	465a      	mov	r2, fp
 8003d10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003d14:	9109      	str	r1, [sp, #36]	; 0x24
 8003d16:	f7ff ff17 	bl	8003b48 <__exponent>
 8003d1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d1c:	1813      	adds	r3, r2, r0
 8003d1e:	2a01      	cmp	r2, #1
 8003d20:	4681      	mov	r9, r0
 8003d22:	6123      	str	r3, [r4, #16]
 8003d24:	dc02      	bgt.n	8003d2c <_printf_float+0x168>
 8003d26:	6822      	ldr	r2, [r4, #0]
 8003d28:	07d2      	lsls	r2, r2, #31
 8003d2a:	d501      	bpl.n	8003d30 <_printf_float+0x16c>
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	6123      	str	r3, [r4, #16]
 8003d30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d09c      	beq.n	8003c72 <_printf_float+0xae>
 8003d38:	232d      	movs	r3, #45	; 0x2d
 8003d3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d3e:	e798      	b.n	8003c72 <_printf_float+0xae>
 8003d40:	9a06      	ldr	r2, [sp, #24]
 8003d42:	2a47      	cmp	r2, #71	; 0x47
 8003d44:	d1be      	bne.n	8003cc4 <_printf_float+0x100>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1bc      	bne.n	8003cc4 <_printf_float+0x100>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e7b9      	b.n	8003cc2 <_printf_float+0xfe>
 8003d4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003d52:	d118      	bne.n	8003d86 <_printf_float+0x1c2>
 8003d54:	2900      	cmp	r1, #0
 8003d56:	6863      	ldr	r3, [r4, #4]
 8003d58:	dd0b      	ble.n	8003d72 <_printf_float+0x1ae>
 8003d5a:	6121      	str	r1, [r4, #16]
 8003d5c:	b913      	cbnz	r3, 8003d64 <_printf_float+0x1a0>
 8003d5e:	6822      	ldr	r2, [r4, #0]
 8003d60:	07d0      	lsls	r0, r2, #31
 8003d62:	d502      	bpl.n	8003d6a <_printf_float+0x1a6>
 8003d64:	3301      	adds	r3, #1
 8003d66:	440b      	add	r3, r1
 8003d68:	6123      	str	r3, [r4, #16]
 8003d6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8003d6c:	f04f 0900 	mov.w	r9, #0
 8003d70:	e7de      	b.n	8003d30 <_printf_float+0x16c>
 8003d72:	b913      	cbnz	r3, 8003d7a <_printf_float+0x1b6>
 8003d74:	6822      	ldr	r2, [r4, #0]
 8003d76:	07d2      	lsls	r2, r2, #31
 8003d78:	d501      	bpl.n	8003d7e <_printf_float+0x1ba>
 8003d7a:	3302      	adds	r3, #2
 8003d7c:	e7f4      	b.n	8003d68 <_printf_float+0x1a4>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e7f2      	b.n	8003d68 <_printf_float+0x1a4>
 8003d82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d88:	4299      	cmp	r1, r3
 8003d8a:	db05      	blt.n	8003d98 <_printf_float+0x1d4>
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	6121      	str	r1, [r4, #16]
 8003d90:	07d8      	lsls	r0, r3, #31
 8003d92:	d5ea      	bpl.n	8003d6a <_printf_float+0x1a6>
 8003d94:	1c4b      	adds	r3, r1, #1
 8003d96:	e7e7      	b.n	8003d68 <_printf_float+0x1a4>
 8003d98:	2900      	cmp	r1, #0
 8003d9a:	bfd4      	ite	le
 8003d9c:	f1c1 0202 	rsble	r2, r1, #2
 8003da0:	2201      	movgt	r2, #1
 8003da2:	4413      	add	r3, r2
 8003da4:	e7e0      	b.n	8003d68 <_printf_float+0x1a4>
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	055a      	lsls	r2, r3, #21
 8003daa:	d407      	bmi.n	8003dbc <_printf_float+0x1f8>
 8003dac:	6923      	ldr	r3, [r4, #16]
 8003dae:	4642      	mov	r2, r8
 8003db0:	4631      	mov	r1, r6
 8003db2:	4628      	mov	r0, r5
 8003db4:	47b8      	blx	r7
 8003db6:	3001      	adds	r0, #1
 8003db8:	d12c      	bne.n	8003e14 <_printf_float+0x250>
 8003dba:	e764      	b.n	8003c86 <_printf_float+0xc2>
 8003dbc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003dc0:	f240 80e0 	bls.w	8003f84 <_printf_float+0x3c0>
 8003dc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f7fc fe7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	d034      	beq.n	8003e3e <_printf_float+0x27a>
 8003dd4:	4a37      	ldr	r2, [pc, #220]	; (8003eb4 <_printf_float+0x2f0>)
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	4631      	mov	r1, r6
 8003dda:	4628      	mov	r0, r5
 8003ddc:	47b8      	blx	r7
 8003dde:	3001      	adds	r0, #1
 8003de0:	f43f af51 	beq.w	8003c86 <_printf_float+0xc2>
 8003de4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003de8:	429a      	cmp	r2, r3
 8003dea:	db02      	blt.n	8003df2 <_printf_float+0x22e>
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	07d8      	lsls	r0, r3, #31
 8003df0:	d510      	bpl.n	8003e14 <_printf_float+0x250>
 8003df2:	ee18 3a10 	vmov	r3, s16
 8003df6:	4652      	mov	r2, sl
 8003df8:	4631      	mov	r1, r6
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	47b8      	blx	r7
 8003dfe:	3001      	adds	r0, #1
 8003e00:	f43f af41 	beq.w	8003c86 <_printf_float+0xc2>
 8003e04:	f04f 0800 	mov.w	r8, #0
 8003e08:	f104 091a 	add.w	r9, r4, #26
 8003e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	4543      	cmp	r3, r8
 8003e12:	dc09      	bgt.n	8003e28 <_printf_float+0x264>
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	079b      	lsls	r3, r3, #30
 8003e18:	f100 8105 	bmi.w	8004026 <_printf_float+0x462>
 8003e1c:	68e0      	ldr	r0, [r4, #12]
 8003e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e20:	4298      	cmp	r0, r3
 8003e22:	bfb8      	it	lt
 8003e24:	4618      	movlt	r0, r3
 8003e26:	e730      	b.n	8003c8a <_printf_float+0xc6>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	464a      	mov	r2, r9
 8003e2c:	4631      	mov	r1, r6
 8003e2e:	4628      	mov	r0, r5
 8003e30:	47b8      	blx	r7
 8003e32:	3001      	adds	r0, #1
 8003e34:	f43f af27 	beq.w	8003c86 <_printf_float+0xc2>
 8003e38:	f108 0801 	add.w	r8, r8, #1
 8003e3c:	e7e6      	b.n	8003e0c <_printf_float+0x248>
 8003e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	dc39      	bgt.n	8003eb8 <_printf_float+0x2f4>
 8003e44:	4a1b      	ldr	r2, [pc, #108]	; (8003eb4 <_printf_float+0x2f0>)
 8003e46:	2301      	movs	r3, #1
 8003e48:	4631      	mov	r1, r6
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	47b8      	blx	r7
 8003e4e:	3001      	adds	r0, #1
 8003e50:	f43f af19 	beq.w	8003c86 <_printf_float+0xc2>
 8003e54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	d102      	bne.n	8003e62 <_printf_float+0x29e>
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	07d9      	lsls	r1, r3, #31
 8003e60:	d5d8      	bpl.n	8003e14 <_printf_float+0x250>
 8003e62:	ee18 3a10 	vmov	r3, s16
 8003e66:	4652      	mov	r2, sl
 8003e68:	4631      	mov	r1, r6
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	47b8      	blx	r7
 8003e6e:	3001      	adds	r0, #1
 8003e70:	f43f af09 	beq.w	8003c86 <_printf_float+0xc2>
 8003e74:	f04f 0900 	mov.w	r9, #0
 8003e78:	f104 0a1a 	add.w	sl, r4, #26
 8003e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e7e:	425b      	negs	r3, r3
 8003e80:	454b      	cmp	r3, r9
 8003e82:	dc01      	bgt.n	8003e88 <_printf_float+0x2c4>
 8003e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e86:	e792      	b.n	8003dae <_printf_float+0x1ea>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	4652      	mov	r2, sl
 8003e8c:	4631      	mov	r1, r6
 8003e8e:	4628      	mov	r0, r5
 8003e90:	47b8      	blx	r7
 8003e92:	3001      	adds	r0, #1
 8003e94:	f43f aef7 	beq.w	8003c86 <_printf_float+0xc2>
 8003e98:	f109 0901 	add.w	r9, r9, #1
 8003e9c:	e7ee      	b.n	8003e7c <_printf_float+0x2b8>
 8003e9e:	bf00      	nop
 8003ea0:	7fefffff 	.word	0x7fefffff
 8003ea4:	080083c4 	.word	0x080083c4
 8003ea8:	080083c8 	.word	0x080083c8
 8003eac:	080083d0 	.word	0x080083d0
 8003eb0:	080083cc 	.word	0x080083cc
 8003eb4:	080083d4 	.word	0x080083d4
 8003eb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003eba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	bfa8      	it	ge
 8003ec0:	461a      	movge	r2, r3
 8003ec2:	2a00      	cmp	r2, #0
 8003ec4:	4691      	mov	r9, r2
 8003ec6:	dc37      	bgt.n	8003f38 <_printf_float+0x374>
 8003ec8:	f04f 0b00 	mov.w	fp, #0
 8003ecc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ed0:	f104 021a 	add.w	r2, r4, #26
 8003ed4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ed6:	9305      	str	r3, [sp, #20]
 8003ed8:	eba3 0309 	sub.w	r3, r3, r9
 8003edc:	455b      	cmp	r3, fp
 8003ede:	dc33      	bgt.n	8003f48 <_printf_float+0x384>
 8003ee0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	db3b      	blt.n	8003f60 <_printf_float+0x39c>
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	07da      	lsls	r2, r3, #31
 8003eec:	d438      	bmi.n	8003f60 <_printf_float+0x39c>
 8003eee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ef0:	9b05      	ldr	r3, [sp, #20]
 8003ef2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	eba2 0901 	sub.w	r9, r2, r1
 8003efa:	4599      	cmp	r9, r3
 8003efc:	bfa8      	it	ge
 8003efe:	4699      	movge	r9, r3
 8003f00:	f1b9 0f00 	cmp.w	r9, #0
 8003f04:	dc35      	bgt.n	8003f72 <_printf_float+0x3ae>
 8003f06:	f04f 0800 	mov.w	r8, #0
 8003f0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f0e:	f104 0a1a 	add.w	sl, r4, #26
 8003f12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	eba3 0309 	sub.w	r3, r3, r9
 8003f1c:	4543      	cmp	r3, r8
 8003f1e:	f77f af79 	ble.w	8003e14 <_printf_float+0x250>
 8003f22:	2301      	movs	r3, #1
 8003f24:	4652      	mov	r2, sl
 8003f26:	4631      	mov	r1, r6
 8003f28:	4628      	mov	r0, r5
 8003f2a:	47b8      	blx	r7
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	f43f aeaa 	beq.w	8003c86 <_printf_float+0xc2>
 8003f32:	f108 0801 	add.w	r8, r8, #1
 8003f36:	e7ec      	b.n	8003f12 <_printf_float+0x34e>
 8003f38:	4613      	mov	r3, r2
 8003f3a:	4631      	mov	r1, r6
 8003f3c:	4642      	mov	r2, r8
 8003f3e:	4628      	mov	r0, r5
 8003f40:	47b8      	blx	r7
 8003f42:	3001      	adds	r0, #1
 8003f44:	d1c0      	bne.n	8003ec8 <_printf_float+0x304>
 8003f46:	e69e      	b.n	8003c86 <_printf_float+0xc2>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	4631      	mov	r1, r6
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	9205      	str	r2, [sp, #20]
 8003f50:	47b8      	blx	r7
 8003f52:	3001      	adds	r0, #1
 8003f54:	f43f ae97 	beq.w	8003c86 <_printf_float+0xc2>
 8003f58:	9a05      	ldr	r2, [sp, #20]
 8003f5a:	f10b 0b01 	add.w	fp, fp, #1
 8003f5e:	e7b9      	b.n	8003ed4 <_printf_float+0x310>
 8003f60:	ee18 3a10 	vmov	r3, s16
 8003f64:	4652      	mov	r2, sl
 8003f66:	4631      	mov	r1, r6
 8003f68:	4628      	mov	r0, r5
 8003f6a:	47b8      	blx	r7
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	d1be      	bne.n	8003eee <_printf_float+0x32a>
 8003f70:	e689      	b.n	8003c86 <_printf_float+0xc2>
 8003f72:	9a05      	ldr	r2, [sp, #20]
 8003f74:	464b      	mov	r3, r9
 8003f76:	4442      	add	r2, r8
 8003f78:	4631      	mov	r1, r6
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	47b8      	blx	r7
 8003f7e:	3001      	adds	r0, #1
 8003f80:	d1c1      	bne.n	8003f06 <_printf_float+0x342>
 8003f82:	e680      	b.n	8003c86 <_printf_float+0xc2>
 8003f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f86:	2a01      	cmp	r2, #1
 8003f88:	dc01      	bgt.n	8003f8e <_printf_float+0x3ca>
 8003f8a:	07db      	lsls	r3, r3, #31
 8003f8c:	d538      	bpl.n	8004000 <_printf_float+0x43c>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	4642      	mov	r2, r8
 8003f92:	4631      	mov	r1, r6
 8003f94:	4628      	mov	r0, r5
 8003f96:	47b8      	blx	r7
 8003f98:	3001      	adds	r0, #1
 8003f9a:	f43f ae74 	beq.w	8003c86 <_printf_float+0xc2>
 8003f9e:	ee18 3a10 	vmov	r3, s16
 8003fa2:	4652      	mov	r2, sl
 8003fa4:	4631      	mov	r1, r6
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	47b8      	blx	r7
 8003faa:	3001      	adds	r0, #1
 8003fac:	f43f ae6b 	beq.w	8003c86 <_printf_float+0xc2>
 8003fb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f7fc fd86 	bl	8000ac8 <__aeabi_dcmpeq>
 8003fbc:	b9d8      	cbnz	r0, 8003ff6 <_printf_float+0x432>
 8003fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fc0:	f108 0201 	add.w	r2, r8, #1
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	4631      	mov	r1, r6
 8003fc8:	4628      	mov	r0, r5
 8003fca:	47b8      	blx	r7
 8003fcc:	3001      	adds	r0, #1
 8003fce:	d10e      	bne.n	8003fee <_printf_float+0x42a>
 8003fd0:	e659      	b.n	8003c86 <_printf_float+0xc2>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	4652      	mov	r2, sl
 8003fd6:	4631      	mov	r1, r6
 8003fd8:	4628      	mov	r0, r5
 8003fda:	47b8      	blx	r7
 8003fdc:	3001      	adds	r0, #1
 8003fde:	f43f ae52 	beq.w	8003c86 <_printf_float+0xc2>
 8003fe2:	f108 0801 	add.w	r8, r8, #1
 8003fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	4543      	cmp	r3, r8
 8003fec:	dcf1      	bgt.n	8003fd2 <_printf_float+0x40e>
 8003fee:	464b      	mov	r3, r9
 8003ff0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003ff4:	e6dc      	b.n	8003db0 <_printf_float+0x1ec>
 8003ff6:	f04f 0800 	mov.w	r8, #0
 8003ffa:	f104 0a1a 	add.w	sl, r4, #26
 8003ffe:	e7f2      	b.n	8003fe6 <_printf_float+0x422>
 8004000:	2301      	movs	r3, #1
 8004002:	4642      	mov	r2, r8
 8004004:	e7df      	b.n	8003fc6 <_printf_float+0x402>
 8004006:	2301      	movs	r3, #1
 8004008:	464a      	mov	r2, r9
 800400a:	4631      	mov	r1, r6
 800400c:	4628      	mov	r0, r5
 800400e:	47b8      	blx	r7
 8004010:	3001      	adds	r0, #1
 8004012:	f43f ae38 	beq.w	8003c86 <_printf_float+0xc2>
 8004016:	f108 0801 	add.w	r8, r8, #1
 800401a:	68e3      	ldr	r3, [r4, #12]
 800401c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800401e:	1a5b      	subs	r3, r3, r1
 8004020:	4543      	cmp	r3, r8
 8004022:	dcf0      	bgt.n	8004006 <_printf_float+0x442>
 8004024:	e6fa      	b.n	8003e1c <_printf_float+0x258>
 8004026:	f04f 0800 	mov.w	r8, #0
 800402a:	f104 0919 	add.w	r9, r4, #25
 800402e:	e7f4      	b.n	800401a <_printf_float+0x456>

08004030 <_printf_common>:
 8004030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004034:	4616      	mov	r6, r2
 8004036:	4699      	mov	r9, r3
 8004038:	688a      	ldr	r2, [r1, #8]
 800403a:	690b      	ldr	r3, [r1, #16]
 800403c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004040:	4293      	cmp	r3, r2
 8004042:	bfb8      	it	lt
 8004044:	4613      	movlt	r3, r2
 8004046:	6033      	str	r3, [r6, #0]
 8004048:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800404c:	4607      	mov	r7, r0
 800404e:	460c      	mov	r4, r1
 8004050:	b10a      	cbz	r2, 8004056 <_printf_common+0x26>
 8004052:	3301      	adds	r3, #1
 8004054:	6033      	str	r3, [r6, #0]
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	0699      	lsls	r1, r3, #26
 800405a:	bf42      	ittt	mi
 800405c:	6833      	ldrmi	r3, [r6, #0]
 800405e:	3302      	addmi	r3, #2
 8004060:	6033      	strmi	r3, [r6, #0]
 8004062:	6825      	ldr	r5, [r4, #0]
 8004064:	f015 0506 	ands.w	r5, r5, #6
 8004068:	d106      	bne.n	8004078 <_printf_common+0x48>
 800406a:	f104 0a19 	add.w	sl, r4, #25
 800406e:	68e3      	ldr	r3, [r4, #12]
 8004070:	6832      	ldr	r2, [r6, #0]
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	42ab      	cmp	r3, r5
 8004076:	dc26      	bgt.n	80040c6 <_printf_common+0x96>
 8004078:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800407c:	1e13      	subs	r3, r2, #0
 800407e:	6822      	ldr	r2, [r4, #0]
 8004080:	bf18      	it	ne
 8004082:	2301      	movne	r3, #1
 8004084:	0692      	lsls	r2, r2, #26
 8004086:	d42b      	bmi.n	80040e0 <_printf_common+0xb0>
 8004088:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800408c:	4649      	mov	r1, r9
 800408e:	4638      	mov	r0, r7
 8004090:	47c0      	blx	r8
 8004092:	3001      	adds	r0, #1
 8004094:	d01e      	beq.n	80040d4 <_printf_common+0xa4>
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	68e5      	ldr	r5, [r4, #12]
 800409a:	6832      	ldr	r2, [r6, #0]
 800409c:	f003 0306 	and.w	r3, r3, #6
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	bf08      	it	eq
 80040a4:	1aad      	subeq	r5, r5, r2
 80040a6:	68a3      	ldr	r3, [r4, #8]
 80040a8:	6922      	ldr	r2, [r4, #16]
 80040aa:	bf0c      	ite	eq
 80040ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040b0:	2500      	movne	r5, #0
 80040b2:	4293      	cmp	r3, r2
 80040b4:	bfc4      	itt	gt
 80040b6:	1a9b      	subgt	r3, r3, r2
 80040b8:	18ed      	addgt	r5, r5, r3
 80040ba:	2600      	movs	r6, #0
 80040bc:	341a      	adds	r4, #26
 80040be:	42b5      	cmp	r5, r6
 80040c0:	d11a      	bne.n	80040f8 <_printf_common+0xc8>
 80040c2:	2000      	movs	r0, #0
 80040c4:	e008      	b.n	80040d8 <_printf_common+0xa8>
 80040c6:	2301      	movs	r3, #1
 80040c8:	4652      	mov	r2, sl
 80040ca:	4649      	mov	r1, r9
 80040cc:	4638      	mov	r0, r7
 80040ce:	47c0      	blx	r8
 80040d0:	3001      	adds	r0, #1
 80040d2:	d103      	bne.n	80040dc <_printf_common+0xac>
 80040d4:	f04f 30ff 	mov.w	r0, #4294967295
 80040d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040dc:	3501      	adds	r5, #1
 80040de:	e7c6      	b.n	800406e <_printf_common+0x3e>
 80040e0:	18e1      	adds	r1, r4, r3
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	2030      	movs	r0, #48	; 0x30
 80040e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040ea:	4422      	add	r2, r4
 80040ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040f4:	3302      	adds	r3, #2
 80040f6:	e7c7      	b.n	8004088 <_printf_common+0x58>
 80040f8:	2301      	movs	r3, #1
 80040fa:	4622      	mov	r2, r4
 80040fc:	4649      	mov	r1, r9
 80040fe:	4638      	mov	r0, r7
 8004100:	47c0      	blx	r8
 8004102:	3001      	adds	r0, #1
 8004104:	d0e6      	beq.n	80040d4 <_printf_common+0xa4>
 8004106:	3601      	adds	r6, #1
 8004108:	e7d9      	b.n	80040be <_printf_common+0x8e>
	...

0800410c <_printf_i>:
 800410c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004110:	460c      	mov	r4, r1
 8004112:	4691      	mov	r9, r2
 8004114:	7e27      	ldrb	r7, [r4, #24]
 8004116:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004118:	2f78      	cmp	r7, #120	; 0x78
 800411a:	4680      	mov	r8, r0
 800411c:	469a      	mov	sl, r3
 800411e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004122:	d807      	bhi.n	8004134 <_printf_i+0x28>
 8004124:	2f62      	cmp	r7, #98	; 0x62
 8004126:	d80a      	bhi.n	800413e <_printf_i+0x32>
 8004128:	2f00      	cmp	r7, #0
 800412a:	f000 80d8 	beq.w	80042de <_printf_i+0x1d2>
 800412e:	2f58      	cmp	r7, #88	; 0x58
 8004130:	f000 80a3 	beq.w	800427a <_printf_i+0x16e>
 8004134:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004138:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800413c:	e03a      	b.n	80041b4 <_printf_i+0xa8>
 800413e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004142:	2b15      	cmp	r3, #21
 8004144:	d8f6      	bhi.n	8004134 <_printf_i+0x28>
 8004146:	a001      	add	r0, pc, #4	; (adr r0, 800414c <_printf_i+0x40>)
 8004148:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800414c:	080041a5 	.word	0x080041a5
 8004150:	080041b9 	.word	0x080041b9
 8004154:	08004135 	.word	0x08004135
 8004158:	08004135 	.word	0x08004135
 800415c:	08004135 	.word	0x08004135
 8004160:	08004135 	.word	0x08004135
 8004164:	080041b9 	.word	0x080041b9
 8004168:	08004135 	.word	0x08004135
 800416c:	08004135 	.word	0x08004135
 8004170:	08004135 	.word	0x08004135
 8004174:	08004135 	.word	0x08004135
 8004178:	080042c5 	.word	0x080042c5
 800417c:	080041e9 	.word	0x080041e9
 8004180:	080042a7 	.word	0x080042a7
 8004184:	08004135 	.word	0x08004135
 8004188:	08004135 	.word	0x08004135
 800418c:	080042e7 	.word	0x080042e7
 8004190:	08004135 	.word	0x08004135
 8004194:	080041e9 	.word	0x080041e9
 8004198:	08004135 	.word	0x08004135
 800419c:	08004135 	.word	0x08004135
 80041a0:	080042af 	.word	0x080042af
 80041a4:	680b      	ldr	r3, [r1, #0]
 80041a6:	1d1a      	adds	r2, r3, #4
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	600a      	str	r2, [r1, #0]
 80041ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0a3      	b.n	8004300 <_printf_i+0x1f4>
 80041b8:	6825      	ldr	r5, [r4, #0]
 80041ba:	6808      	ldr	r0, [r1, #0]
 80041bc:	062e      	lsls	r6, r5, #24
 80041be:	f100 0304 	add.w	r3, r0, #4
 80041c2:	d50a      	bpl.n	80041da <_printf_i+0xce>
 80041c4:	6805      	ldr	r5, [r0, #0]
 80041c6:	600b      	str	r3, [r1, #0]
 80041c8:	2d00      	cmp	r5, #0
 80041ca:	da03      	bge.n	80041d4 <_printf_i+0xc8>
 80041cc:	232d      	movs	r3, #45	; 0x2d
 80041ce:	426d      	negs	r5, r5
 80041d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041d4:	485e      	ldr	r0, [pc, #376]	; (8004350 <_printf_i+0x244>)
 80041d6:	230a      	movs	r3, #10
 80041d8:	e019      	b.n	800420e <_printf_i+0x102>
 80041da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80041de:	6805      	ldr	r5, [r0, #0]
 80041e0:	600b      	str	r3, [r1, #0]
 80041e2:	bf18      	it	ne
 80041e4:	b22d      	sxthne	r5, r5
 80041e6:	e7ef      	b.n	80041c8 <_printf_i+0xbc>
 80041e8:	680b      	ldr	r3, [r1, #0]
 80041ea:	6825      	ldr	r5, [r4, #0]
 80041ec:	1d18      	adds	r0, r3, #4
 80041ee:	6008      	str	r0, [r1, #0]
 80041f0:	0628      	lsls	r0, r5, #24
 80041f2:	d501      	bpl.n	80041f8 <_printf_i+0xec>
 80041f4:	681d      	ldr	r5, [r3, #0]
 80041f6:	e002      	b.n	80041fe <_printf_i+0xf2>
 80041f8:	0669      	lsls	r1, r5, #25
 80041fa:	d5fb      	bpl.n	80041f4 <_printf_i+0xe8>
 80041fc:	881d      	ldrh	r5, [r3, #0]
 80041fe:	4854      	ldr	r0, [pc, #336]	; (8004350 <_printf_i+0x244>)
 8004200:	2f6f      	cmp	r7, #111	; 0x6f
 8004202:	bf0c      	ite	eq
 8004204:	2308      	moveq	r3, #8
 8004206:	230a      	movne	r3, #10
 8004208:	2100      	movs	r1, #0
 800420a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800420e:	6866      	ldr	r6, [r4, #4]
 8004210:	60a6      	str	r6, [r4, #8]
 8004212:	2e00      	cmp	r6, #0
 8004214:	bfa2      	ittt	ge
 8004216:	6821      	ldrge	r1, [r4, #0]
 8004218:	f021 0104 	bicge.w	r1, r1, #4
 800421c:	6021      	strge	r1, [r4, #0]
 800421e:	b90d      	cbnz	r5, 8004224 <_printf_i+0x118>
 8004220:	2e00      	cmp	r6, #0
 8004222:	d04d      	beq.n	80042c0 <_printf_i+0x1b4>
 8004224:	4616      	mov	r6, r2
 8004226:	fbb5 f1f3 	udiv	r1, r5, r3
 800422a:	fb03 5711 	mls	r7, r3, r1, r5
 800422e:	5dc7      	ldrb	r7, [r0, r7]
 8004230:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004234:	462f      	mov	r7, r5
 8004236:	42bb      	cmp	r3, r7
 8004238:	460d      	mov	r5, r1
 800423a:	d9f4      	bls.n	8004226 <_printf_i+0x11a>
 800423c:	2b08      	cmp	r3, #8
 800423e:	d10b      	bne.n	8004258 <_printf_i+0x14c>
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	07df      	lsls	r7, r3, #31
 8004244:	d508      	bpl.n	8004258 <_printf_i+0x14c>
 8004246:	6923      	ldr	r3, [r4, #16]
 8004248:	6861      	ldr	r1, [r4, #4]
 800424a:	4299      	cmp	r1, r3
 800424c:	bfde      	ittt	le
 800424e:	2330      	movle	r3, #48	; 0x30
 8004250:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004254:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004258:	1b92      	subs	r2, r2, r6
 800425a:	6122      	str	r2, [r4, #16]
 800425c:	f8cd a000 	str.w	sl, [sp]
 8004260:	464b      	mov	r3, r9
 8004262:	aa03      	add	r2, sp, #12
 8004264:	4621      	mov	r1, r4
 8004266:	4640      	mov	r0, r8
 8004268:	f7ff fee2 	bl	8004030 <_printf_common>
 800426c:	3001      	adds	r0, #1
 800426e:	d14c      	bne.n	800430a <_printf_i+0x1fe>
 8004270:	f04f 30ff 	mov.w	r0, #4294967295
 8004274:	b004      	add	sp, #16
 8004276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800427a:	4835      	ldr	r0, [pc, #212]	; (8004350 <_printf_i+0x244>)
 800427c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	680e      	ldr	r6, [r1, #0]
 8004284:	061f      	lsls	r7, r3, #24
 8004286:	f856 5b04 	ldr.w	r5, [r6], #4
 800428a:	600e      	str	r6, [r1, #0]
 800428c:	d514      	bpl.n	80042b8 <_printf_i+0x1ac>
 800428e:	07d9      	lsls	r1, r3, #31
 8004290:	bf44      	itt	mi
 8004292:	f043 0320 	orrmi.w	r3, r3, #32
 8004296:	6023      	strmi	r3, [r4, #0]
 8004298:	b91d      	cbnz	r5, 80042a2 <_printf_i+0x196>
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	f023 0320 	bic.w	r3, r3, #32
 80042a0:	6023      	str	r3, [r4, #0]
 80042a2:	2310      	movs	r3, #16
 80042a4:	e7b0      	b.n	8004208 <_printf_i+0xfc>
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	f043 0320 	orr.w	r3, r3, #32
 80042ac:	6023      	str	r3, [r4, #0]
 80042ae:	2378      	movs	r3, #120	; 0x78
 80042b0:	4828      	ldr	r0, [pc, #160]	; (8004354 <_printf_i+0x248>)
 80042b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042b6:	e7e3      	b.n	8004280 <_printf_i+0x174>
 80042b8:	065e      	lsls	r6, r3, #25
 80042ba:	bf48      	it	mi
 80042bc:	b2ad      	uxthmi	r5, r5
 80042be:	e7e6      	b.n	800428e <_printf_i+0x182>
 80042c0:	4616      	mov	r6, r2
 80042c2:	e7bb      	b.n	800423c <_printf_i+0x130>
 80042c4:	680b      	ldr	r3, [r1, #0]
 80042c6:	6826      	ldr	r6, [r4, #0]
 80042c8:	6960      	ldr	r0, [r4, #20]
 80042ca:	1d1d      	adds	r5, r3, #4
 80042cc:	600d      	str	r5, [r1, #0]
 80042ce:	0635      	lsls	r5, r6, #24
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	d501      	bpl.n	80042d8 <_printf_i+0x1cc>
 80042d4:	6018      	str	r0, [r3, #0]
 80042d6:	e002      	b.n	80042de <_printf_i+0x1d2>
 80042d8:	0671      	lsls	r1, r6, #25
 80042da:	d5fb      	bpl.n	80042d4 <_printf_i+0x1c8>
 80042dc:	8018      	strh	r0, [r3, #0]
 80042de:	2300      	movs	r3, #0
 80042e0:	6123      	str	r3, [r4, #16]
 80042e2:	4616      	mov	r6, r2
 80042e4:	e7ba      	b.n	800425c <_printf_i+0x150>
 80042e6:	680b      	ldr	r3, [r1, #0]
 80042e8:	1d1a      	adds	r2, r3, #4
 80042ea:	600a      	str	r2, [r1, #0]
 80042ec:	681e      	ldr	r6, [r3, #0]
 80042ee:	6862      	ldr	r2, [r4, #4]
 80042f0:	2100      	movs	r1, #0
 80042f2:	4630      	mov	r0, r6
 80042f4:	f7fb ff74 	bl	80001e0 <memchr>
 80042f8:	b108      	cbz	r0, 80042fe <_printf_i+0x1f2>
 80042fa:	1b80      	subs	r0, r0, r6
 80042fc:	6060      	str	r0, [r4, #4]
 80042fe:	6863      	ldr	r3, [r4, #4]
 8004300:	6123      	str	r3, [r4, #16]
 8004302:	2300      	movs	r3, #0
 8004304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004308:	e7a8      	b.n	800425c <_printf_i+0x150>
 800430a:	6923      	ldr	r3, [r4, #16]
 800430c:	4632      	mov	r2, r6
 800430e:	4649      	mov	r1, r9
 8004310:	4640      	mov	r0, r8
 8004312:	47d0      	blx	sl
 8004314:	3001      	adds	r0, #1
 8004316:	d0ab      	beq.n	8004270 <_printf_i+0x164>
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	079b      	lsls	r3, r3, #30
 800431c:	d413      	bmi.n	8004346 <_printf_i+0x23a>
 800431e:	68e0      	ldr	r0, [r4, #12]
 8004320:	9b03      	ldr	r3, [sp, #12]
 8004322:	4298      	cmp	r0, r3
 8004324:	bfb8      	it	lt
 8004326:	4618      	movlt	r0, r3
 8004328:	e7a4      	b.n	8004274 <_printf_i+0x168>
 800432a:	2301      	movs	r3, #1
 800432c:	4632      	mov	r2, r6
 800432e:	4649      	mov	r1, r9
 8004330:	4640      	mov	r0, r8
 8004332:	47d0      	blx	sl
 8004334:	3001      	adds	r0, #1
 8004336:	d09b      	beq.n	8004270 <_printf_i+0x164>
 8004338:	3501      	adds	r5, #1
 800433a:	68e3      	ldr	r3, [r4, #12]
 800433c:	9903      	ldr	r1, [sp, #12]
 800433e:	1a5b      	subs	r3, r3, r1
 8004340:	42ab      	cmp	r3, r5
 8004342:	dcf2      	bgt.n	800432a <_printf_i+0x21e>
 8004344:	e7eb      	b.n	800431e <_printf_i+0x212>
 8004346:	2500      	movs	r5, #0
 8004348:	f104 0619 	add.w	r6, r4, #25
 800434c:	e7f5      	b.n	800433a <_printf_i+0x22e>
 800434e:	bf00      	nop
 8004350:	080083d6 	.word	0x080083d6
 8004354:	080083e7 	.word	0x080083e7

08004358 <_scanf_float>:
 8004358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800435c:	b087      	sub	sp, #28
 800435e:	4617      	mov	r7, r2
 8004360:	9303      	str	r3, [sp, #12]
 8004362:	688b      	ldr	r3, [r1, #8]
 8004364:	1e5a      	subs	r2, r3, #1
 8004366:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800436a:	bf83      	ittte	hi
 800436c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004370:	195b      	addhi	r3, r3, r5
 8004372:	9302      	strhi	r3, [sp, #8]
 8004374:	2300      	movls	r3, #0
 8004376:	bf86      	itte	hi
 8004378:	f240 135d 	movwhi	r3, #349	; 0x15d
 800437c:	608b      	strhi	r3, [r1, #8]
 800437e:	9302      	strls	r3, [sp, #8]
 8004380:	680b      	ldr	r3, [r1, #0]
 8004382:	468b      	mov	fp, r1
 8004384:	2500      	movs	r5, #0
 8004386:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800438a:	f84b 3b1c 	str.w	r3, [fp], #28
 800438e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004392:	4680      	mov	r8, r0
 8004394:	460c      	mov	r4, r1
 8004396:	465e      	mov	r6, fp
 8004398:	46aa      	mov	sl, r5
 800439a:	46a9      	mov	r9, r5
 800439c:	9501      	str	r5, [sp, #4]
 800439e:	68a2      	ldr	r2, [r4, #8]
 80043a0:	b152      	cbz	r2, 80043b8 <_scanf_float+0x60>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b4e      	cmp	r3, #78	; 0x4e
 80043a8:	d864      	bhi.n	8004474 <_scanf_float+0x11c>
 80043aa:	2b40      	cmp	r3, #64	; 0x40
 80043ac:	d83c      	bhi.n	8004428 <_scanf_float+0xd0>
 80043ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80043b2:	b2c8      	uxtb	r0, r1
 80043b4:	280e      	cmp	r0, #14
 80043b6:	d93a      	bls.n	800442e <_scanf_float+0xd6>
 80043b8:	f1b9 0f00 	cmp.w	r9, #0
 80043bc:	d003      	beq.n	80043c6 <_scanf_float+0x6e>
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043c4:	6023      	str	r3, [r4, #0]
 80043c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043ca:	f1ba 0f01 	cmp.w	sl, #1
 80043ce:	f200 8113 	bhi.w	80045f8 <_scanf_float+0x2a0>
 80043d2:	455e      	cmp	r6, fp
 80043d4:	f200 8105 	bhi.w	80045e2 <_scanf_float+0x28a>
 80043d8:	2501      	movs	r5, #1
 80043da:	4628      	mov	r0, r5
 80043dc:	b007      	add	sp, #28
 80043de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80043e6:	2a0d      	cmp	r2, #13
 80043e8:	d8e6      	bhi.n	80043b8 <_scanf_float+0x60>
 80043ea:	a101      	add	r1, pc, #4	; (adr r1, 80043f0 <_scanf_float+0x98>)
 80043ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80043f0:	0800452f 	.word	0x0800452f
 80043f4:	080043b9 	.word	0x080043b9
 80043f8:	080043b9 	.word	0x080043b9
 80043fc:	080043b9 	.word	0x080043b9
 8004400:	0800458f 	.word	0x0800458f
 8004404:	08004567 	.word	0x08004567
 8004408:	080043b9 	.word	0x080043b9
 800440c:	080043b9 	.word	0x080043b9
 8004410:	0800453d 	.word	0x0800453d
 8004414:	080043b9 	.word	0x080043b9
 8004418:	080043b9 	.word	0x080043b9
 800441c:	080043b9 	.word	0x080043b9
 8004420:	080043b9 	.word	0x080043b9
 8004424:	080044f5 	.word	0x080044f5
 8004428:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800442c:	e7db      	b.n	80043e6 <_scanf_float+0x8e>
 800442e:	290e      	cmp	r1, #14
 8004430:	d8c2      	bhi.n	80043b8 <_scanf_float+0x60>
 8004432:	a001      	add	r0, pc, #4	; (adr r0, 8004438 <_scanf_float+0xe0>)
 8004434:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004438:	080044e7 	.word	0x080044e7
 800443c:	080043b9 	.word	0x080043b9
 8004440:	080044e7 	.word	0x080044e7
 8004444:	0800457b 	.word	0x0800457b
 8004448:	080043b9 	.word	0x080043b9
 800444c:	08004495 	.word	0x08004495
 8004450:	080044d1 	.word	0x080044d1
 8004454:	080044d1 	.word	0x080044d1
 8004458:	080044d1 	.word	0x080044d1
 800445c:	080044d1 	.word	0x080044d1
 8004460:	080044d1 	.word	0x080044d1
 8004464:	080044d1 	.word	0x080044d1
 8004468:	080044d1 	.word	0x080044d1
 800446c:	080044d1 	.word	0x080044d1
 8004470:	080044d1 	.word	0x080044d1
 8004474:	2b6e      	cmp	r3, #110	; 0x6e
 8004476:	d809      	bhi.n	800448c <_scanf_float+0x134>
 8004478:	2b60      	cmp	r3, #96	; 0x60
 800447a:	d8b2      	bhi.n	80043e2 <_scanf_float+0x8a>
 800447c:	2b54      	cmp	r3, #84	; 0x54
 800447e:	d077      	beq.n	8004570 <_scanf_float+0x218>
 8004480:	2b59      	cmp	r3, #89	; 0x59
 8004482:	d199      	bne.n	80043b8 <_scanf_float+0x60>
 8004484:	2d07      	cmp	r5, #7
 8004486:	d197      	bne.n	80043b8 <_scanf_float+0x60>
 8004488:	2508      	movs	r5, #8
 800448a:	e029      	b.n	80044e0 <_scanf_float+0x188>
 800448c:	2b74      	cmp	r3, #116	; 0x74
 800448e:	d06f      	beq.n	8004570 <_scanf_float+0x218>
 8004490:	2b79      	cmp	r3, #121	; 0x79
 8004492:	e7f6      	b.n	8004482 <_scanf_float+0x12a>
 8004494:	6821      	ldr	r1, [r4, #0]
 8004496:	05c8      	lsls	r0, r1, #23
 8004498:	d51a      	bpl.n	80044d0 <_scanf_float+0x178>
 800449a:	9b02      	ldr	r3, [sp, #8]
 800449c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80044a0:	6021      	str	r1, [r4, #0]
 80044a2:	f109 0901 	add.w	r9, r9, #1
 80044a6:	b11b      	cbz	r3, 80044b0 <_scanf_float+0x158>
 80044a8:	3b01      	subs	r3, #1
 80044aa:	3201      	adds	r2, #1
 80044ac:	9302      	str	r3, [sp, #8]
 80044ae:	60a2      	str	r2, [r4, #8]
 80044b0:	68a3      	ldr	r3, [r4, #8]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	60a3      	str	r3, [r4, #8]
 80044b6:	6923      	ldr	r3, [r4, #16]
 80044b8:	3301      	adds	r3, #1
 80044ba:	6123      	str	r3, [r4, #16]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3b01      	subs	r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	607b      	str	r3, [r7, #4]
 80044c4:	f340 8084 	ble.w	80045d0 <_scanf_float+0x278>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	3301      	adds	r3, #1
 80044cc:	603b      	str	r3, [r7, #0]
 80044ce:	e766      	b.n	800439e <_scanf_float+0x46>
 80044d0:	eb1a 0f05 	cmn.w	sl, r5
 80044d4:	f47f af70 	bne.w	80043b8 <_scanf_float+0x60>
 80044d8:	6822      	ldr	r2, [r4, #0]
 80044da:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80044de:	6022      	str	r2, [r4, #0]
 80044e0:	f806 3b01 	strb.w	r3, [r6], #1
 80044e4:	e7e4      	b.n	80044b0 <_scanf_float+0x158>
 80044e6:	6822      	ldr	r2, [r4, #0]
 80044e8:	0610      	lsls	r0, r2, #24
 80044ea:	f57f af65 	bpl.w	80043b8 <_scanf_float+0x60>
 80044ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044f2:	e7f4      	b.n	80044de <_scanf_float+0x186>
 80044f4:	f1ba 0f00 	cmp.w	sl, #0
 80044f8:	d10e      	bne.n	8004518 <_scanf_float+0x1c0>
 80044fa:	f1b9 0f00 	cmp.w	r9, #0
 80044fe:	d10e      	bne.n	800451e <_scanf_float+0x1c6>
 8004500:	6822      	ldr	r2, [r4, #0]
 8004502:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004506:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800450a:	d108      	bne.n	800451e <_scanf_float+0x1c6>
 800450c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004510:	6022      	str	r2, [r4, #0]
 8004512:	f04f 0a01 	mov.w	sl, #1
 8004516:	e7e3      	b.n	80044e0 <_scanf_float+0x188>
 8004518:	f1ba 0f02 	cmp.w	sl, #2
 800451c:	d055      	beq.n	80045ca <_scanf_float+0x272>
 800451e:	2d01      	cmp	r5, #1
 8004520:	d002      	beq.n	8004528 <_scanf_float+0x1d0>
 8004522:	2d04      	cmp	r5, #4
 8004524:	f47f af48 	bne.w	80043b8 <_scanf_float+0x60>
 8004528:	3501      	adds	r5, #1
 800452a:	b2ed      	uxtb	r5, r5
 800452c:	e7d8      	b.n	80044e0 <_scanf_float+0x188>
 800452e:	f1ba 0f01 	cmp.w	sl, #1
 8004532:	f47f af41 	bne.w	80043b8 <_scanf_float+0x60>
 8004536:	f04f 0a02 	mov.w	sl, #2
 800453a:	e7d1      	b.n	80044e0 <_scanf_float+0x188>
 800453c:	b97d      	cbnz	r5, 800455e <_scanf_float+0x206>
 800453e:	f1b9 0f00 	cmp.w	r9, #0
 8004542:	f47f af3c 	bne.w	80043be <_scanf_float+0x66>
 8004546:	6822      	ldr	r2, [r4, #0]
 8004548:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800454c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004550:	f47f af39 	bne.w	80043c6 <_scanf_float+0x6e>
 8004554:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004558:	6022      	str	r2, [r4, #0]
 800455a:	2501      	movs	r5, #1
 800455c:	e7c0      	b.n	80044e0 <_scanf_float+0x188>
 800455e:	2d03      	cmp	r5, #3
 8004560:	d0e2      	beq.n	8004528 <_scanf_float+0x1d0>
 8004562:	2d05      	cmp	r5, #5
 8004564:	e7de      	b.n	8004524 <_scanf_float+0x1cc>
 8004566:	2d02      	cmp	r5, #2
 8004568:	f47f af26 	bne.w	80043b8 <_scanf_float+0x60>
 800456c:	2503      	movs	r5, #3
 800456e:	e7b7      	b.n	80044e0 <_scanf_float+0x188>
 8004570:	2d06      	cmp	r5, #6
 8004572:	f47f af21 	bne.w	80043b8 <_scanf_float+0x60>
 8004576:	2507      	movs	r5, #7
 8004578:	e7b2      	b.n	80044e0 <_scanf_float+0x188>
 800457a:	6822      	ldr	r2, [r4, #0]
 800457c:	0591      	lsls	r1, r2, #22
 800457e:	f57f af1b 	bpl.w	80043b8 <_scanf_float+0x60>
 8004582:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004586:	6022      	str	r2, [r4, #0]
 8004588:	f8cd 9004 	str.w	r9, [sp, #4]
 800458c:	e7a8      	b.n	80044e0 <_scanf_float+0x188>
 800458e:	6822      	ldr	r2, [r4, #0]
 8004590:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004594:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004598:	d006      	beq.n	80045a8 <_scanf_float+0x250>
 800459a:	0550      	lsls	r0, r2, #21
 800459c:	f57f af0c 	bpl.w	80043b8 <_scanf_float+0x60>
 80045a0:	f1b9 0f00 	cmp.w	r9, #0
 80045a4:	f43f af0f 	beq.w	80043c6 <_scanf_float+0x6e>
 80045a8:	0591      	lsls	r1, r2, #22
 80045aa:	bf58      	it	pl
 80045ac:	9901      	ldrpl	r1, [sp, #4]
 80045ae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80045b2:	bf58      	it	pl
 80045b4:	eba9 0101 	subpl.w	r1, r9, r1
 80045b8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80045bc:	bf58      	it	pl
 80045be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80045c2:	6022      	str	r2, [r4, #0]
 80045c4:	f04f 0900 	mov.w	r9, #0
 80045c8:	e78a      	b.n	80044e0 <_scanf_float+0x188>
 80045ca:	f04f 0a03 	mov.w	sl, #3
 80045ce:	e787      	b.n	80044e0 <_scanf_float+0x188>
 80045d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80045d4:	4639      	mov	r1, r7
 80045d6:	4640      	mov	r0, r8
 80045d8:	4798      	blx	r3
 80045da:	2800      	cmp	r0, #0
 80045dc:	f43f aedf 	beq.w	800439e <_scanf_float+0x46>
 80045e0:	e6ea      	b.n	80043b8 <_scanf_float+0x60>
 80045e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80045e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80045ea:	463a      	mov	r2, r7
 80045ec:	4640      	mov	r0, r8
 80045ee:	4798      	blx	r3
 80045f0:	6923      	ldr	r3, [r4, #16]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	6123      	str	r3, [r4, #16]
 80045f6:	e6ec      	b.n	80043d2 <_scanf_float+0x7a>
 80045f8:	1e6b      	subs	r3, r5, #1
 80045fa:	2b06      	cmp	r3, #6
 80045fc:	d825      	bhi.n	800464a <_scanf_float+0x2f2>
 80045fe:	2d02      	cmp	r5, #2
 8004600:	d836      	bhi.n	8004670 <_scanf_float+0x318>
 8004602:	455e      	cmp	r6, fp
 8004604:	f67f aee8 	bls.w	80043d8 <_scanf_float+0x80>
 8004608:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800460c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004610:	463a      	mov	r2, r7
 8004612:	4640      	mov	r0, r8
 8004614:	4798      	blx	r3
 8004616:	6923      	ldr	r3, [r4, #16]
 8004618:	3b01      	subs	r3, #1
 800461a:	6123      	str	r3, [r4, #16]
 800461c:	e7f1      	b.n	8004602 <_scanf_float+0x2aa>
 800461e:	9802      	ldr	r0, [sp, #8]
 8004620:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004624:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004628:	9002      	str	r0, [sp, #8]
 800462a:	463a      	mov	r2, r7
 800462c:	4640      	mov	r0, r8
 800462e:	4798      	blx	r3
 8004630:	6923      	ldr	r3, [r4, #16]
 8004632:	3b01      	subs	r3, #1
 8004634:	6123      	str	r3, [r4, #16]
 8004636:	f10a 3aff 	add.w	sl, sl, #4294967295
 800463a:	fa5f fa8a 	uxtb.w	sl, sl
 800463e:	f1ba 0f02 	cmp.w	sl, #2
 8004642:	d1ec      	bne.n	800461e <_scanf_float+0x2c6>
 8004644:	3d03      	subs	r5, #3
 8004646:	b2ed      	uxtb	r5, r5
 8004648:	1b76      	subs	r6, r6, r5
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	05da      	lsls	r2, r3, #23
 800464e:	d52f      	bpl.n	80046b0 <_scanf_float+0x358>
 8004650:	055b      	lsls	r3, r3, #21
 8004652:	d510      	bpl.n	8004676 <_scanf_float+0x31e>
 8004654:	455e      	cmp	r6, fp
 8004656:	f67f aebf 	bls.w	80043d8 <_scanf_float+0x80>
 800465a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800465e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004662:	463a      	mov	r2, r7
 8004664:	4640      	mov	r0, r8
 8004666:	4798      	blx	r3
 8004668:	6923      	ldr	r3, [r4, #16]
 800466a:	3b01      	subs	r3, #1
 800466c:	6123      	str	r3, [r4, #16]
 800466e:	e7f1      	b.n	8004654 <_scanf_float+0x2fc>
 8004670:	46aa      	mov	sl, r5
 8004672:	9602      	str	r6, [sp, #8]
 8004674:	e7df      	b.n	8004636 <_scanf_float+0x2de>
 8004676:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800467a:	6923      	ldr	r3, [r4, #16]
 800467c:	2965      	cmp	r1, #101	; 0x65
 800467e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004682:	f106 35ff 	add.w	r5, r6, #4294967295
 8004686:	6123      	str	r3, [r4, #16]
 8004688:	d00c      	beq.n	80046a4 <_scanf_float+0x34c>
 800468a:	2945      	cmp	r1, #69	; 0x45
 800468c:	d00a      	beq.n	80046a4 <_scanf_float+0x34c>
 800468e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004692:	463a      	mov	r2, r7
 8004694:	4640      	mov	r0, r8
 8004696:	4798      	blx	r3
 8004698:	6923      	ldr	r3, [r4, #16]
 800469a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800469e:	3b01      	subs	r3, #1
 80046a0:	1eb5      	subs	r5, r6, #2
 80046a2:	6123      	str	r3, [r4, #16]
 80046a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046a8:	463a      	mov	r2, r7
 80046aa:	4640      	mov	r0, r8
 80046ac:	4798      	blx	r3
 80046ae:	462e      	mov	r6, r5
 80046b0:	6825      	ldr	r5, [r4, #0]
 80046b2:	f015 0510 	ands.w	r5, r5, #16
 80046b6:	d158      	bne.n	800476a <_scanf_float+0x412>
 80046b8:	7035      	strb	r5, [r6, #0]
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c4:	d11c      	bne.n	8004700 <_scanf_float+0x3a8>
 80046c6:	9b01      	ldr	r3, [sp, #4]
 80046c8:	454b      	cmp	r3, r9
 80046ca:	eba3 0209 	sub.w	r2, r3, r9
 80046ce:	d124      	bne.n	800471a <_scanf_float+0x3c2>
 80046d0:	2200      	movs	r2, #0
 80046d2:	4659      	mov	r1, fp
 80046d4:	4640      	mov	r0, r8
 80046d6:	f000 fe9d 	bl	8005414 <_strtod_r>
 80046da:	9b03      	ldr	r3, [sp, #12]
 80046dc:	6821      	ldr	r1, [r4, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f011 0f02 	tst.w	r1, #2
 80046e4:	ec57 6b10 	vmov	r6, r7, d0
 80046e8:	f103 0204 	add.w	r2, r3, #4
 80046ec:	d020      	beq.n	8004730 <_scanf_float+0x3d8>
 80046ee:	9903      	ldr	r1, [sp, #12]
 80046f0:	600a      	str	r2, [r1, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	e9c3 6700 	strd	r6, r7, [r3]
 80046f8:	68e3      	ldr	r3, [r4, #12]
 80046fa:	3301      	adds	r3, #1
 80046fc:	60e3      	str	r3, [r4, #12]
 80046fe:	e66c      	b.n	80043da <_scanf_float+0x82>
 8004700:	9b04      	ldr	r3, [sp, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0e4      	beq.n	80046d0 <_scanf_float+0x378>
 8004706:	9905      	ldr	r1, [sp, #20]
 8004708:	230a      	movs	r3, #10
 800470a:	462a      	mov	r2, r5
 800470c:	3101      	adds	r1, #1
 800470e:	4640      	mov	r0, r8
 8004710:	f000 ff0a 	bl	8005528 <_strtol_r>
 8004714:	9b04      	ldr	r3, [sp, #16]
 8004716:	9e05      	ldr	r6, [sp, #20]
 8004718:	1ac2      	subs	r2, r0, r3
 800471a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800471e:	429e      	cmp	r6, r3
 8004720:	bf28      	it	cs
 8004722:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004726:	4912      	ldr	r1, [pc, #72]	; (8004770 <_scanf_float+0x418>)
 8004728:	4630      	mov	r0, r6
 800472a:	f000 f82b 	bl	8004784 <siprintf>
 800472e:	e7cf      	b.n	80046d0 <_scanf_float+0x378>
 8004730:	f011 0f04 	tst.w	r1, #4
 8004734:	9903      	ldr	r1, [sp, #12]
 8004736:	600a      	str	r2, [r1, #0]
 8004738:	d1db      	bne.n	80046f2 <_scanf_float+0x39a>
 800473a:	f8d3 8000 	ldr.w	r8, [r3]
 800473e:	ee10 2a10 	vmov	r2, s0
 8004742:	ee10 0a10 	vmov	r0, s0
 8004746:	463b      	mov	r3, r7
 8004748:	4639      	mov	r1, r7
 800474a:	f7fc f9ef 	bl	8000b2c <__aeabi_dcmpun>
 800474e:	b128      	cbz	r0, 800475c <_scanf_float+0x404>
 8004750:	4808      	ldr	r0, [pc, #32]	; (8004774 <_scanf_float+0x41c>)
 8004752:	f000 f811 	bl	8004778 <nanf>
 8004756:	ed88 0a00 	vstr	s0, [r8]
 800475a:	e7cd      	b.n	80046f8 <_scanf_float+0x3a0>
 800475c:	4630      	mov	r0, r6
 800475e:	4639      	mov	r1, r7
 8004760:	f7fc fa42 	bl	8000be8 <__aeabi_d2f>
 8004764:	f8c8 0000 	str.w	r0, [r8]
 8004768:	e7c6      	b.n	80046f8 <_scanf_float+0x3a0>
 800476a:	2500      	movs	r5, #0
 800476c:	e635      	b.n	80043da <_scanf_float+0x82>
 800476e:	bf00      	nop
 8004770:	080083f8 	.word	0x080083f8
 8004774:	08008810 	.word	0x08008810

08004778 <nanf>:
 8004778:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004780 <nanf+0x8>
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	7fc00000 	.word	0x7fc00000

08004784 <siprintf>:
 8004784:	b40e      	push	{r1, r2, r3}
 8004786:	b500      	push	{lr}
 8004788:	b09c      	sub	sp, #112	; 0x70
 800478a:	ab1d      	add	r3, sp, #116	; 0x74
 800478c:	9002      	str	r0, [sp, #8]
 800478e:	9006      	str	r0, [sp, #24]
 8004790:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004794:	4809      	ldr	r0, [pc, #36]	; (80047bc <siprintf+0x38>)
 8004796:	9107      	str	r1, [sp, #28]
 8004798:	9104      	str	r1, [sp, #16]
 800479a:	4909      	ldr	r1, [pc, #36]	; (80047c0 <siprintf+0x3c>)
 800479c:	f853 2b04 	ldr.w	r2, [r3], #4
 80047a0:	9105      	str	r1, [sp, #20]
 80047a2:	6800      	ldr	r0, [r0, #0]
 80047a4:	9301      	str	r3, [sp, #4]
 80047a6:	a902      	add	r1, sp, #8
 80047a8:	f002 fea6 	bl	80074f8 <_svfiprintf_r>
 80047ac:	9b02      	ldr	r3, [sp, #8]
 80047ae:	2200      	movs	r2, #0
 80047b0:	701a      	strb	r2, [r3, #0]
 80047b2:	b01c      	add	sp, #112	; 0x70
 80047b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047b8:	b003      	add	sp, #12
 80047ba:	4770      	bx	lr
 80047bc:	20000008 	.word	0x20000008
 80047c0:	ffff0208 	.word	0xffff0208

080047c4 <sulp>:
 80047c4:	b570      	push	{r4, r5, r6, lr}
 80047c6:	4604      	mov	r4, r0
 80047c8:	460d      	mov	r5, r1
 80047ca:	ec45 4b10 	vmov	d0, r4, r5
 80047ce:	4616      	mov	r6, r2
 80047d0:	f002 fc2e 	bl	8007030 <__ulp>
 80047d4:	ec51 0b10 	vmov	r0, r1, d0
 80047d8:	b17e      	cbz	r6, 80047fa <sulp+0x36>
 80047da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80047de:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	dd09      	ble.n	80047fa <sulp+0x36>
 80047e6:	051b      	lsls	r3, r3, #20
 80047e8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80047ec:	2400      	movs	r4, #0
 80047ee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80047f2:	4622      	mov	r2, r4
 80047f4:	462b      	mov	r3, r5
 80047f6:	f7fb feff 	bl	80005f8 <__aeabi_dmul>
 80047fa:	bd70      	pop	{r4, r5, r6, pc}
 80047fc:	0000      	movs	r0, r0
	...

08004800 <_strtod_l>:
 8004800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004804:	b0a3      	sub	sp, #140	; 0x8c
 8004806:	461f      	mov	r7, r3
 8004808:	2300      	movs	r3, #0
 800480a:	931e      	str	r3, [sp, #120]	; 0x78
 800480c:	4ba4      	ldr	r3, [pc, #656]	; (8004aa0 <_strtod_l+0x2a0>)
 800480e:	9219      	str	r2, [sp, #100]	; 0x64
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	9307      	str	r3, [sp, #28]
 8004814:	4604      	mov	r4, r0
 8004816:	4618      	mov	r0, r3
 8004818:	4688      	mov	r8, r1
 800481a:	f7fb fcd9 	bl	80001d0 <strlen>
 800481e:	f04f 0a00 	mov.w	sl, #0
 8004822:	4605      	mov	r5, r0
 8004824:	f04f 0b00 	mov.w	fp, #0
 8004828:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800482c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800482e:	781a      	ldrb	r2, [r3, #0]
 8004830:	2a2b      	cmp	r2, #43	; 0x2b
 8004832:	d04c      	beq.n	80048ce <_strtod_l+0xce>
 8004834:	d839      	bhi.n	80048aa <_strtod_l+0xaa>
 8004836:	2a0d      	cmp	r2, #13
 8004838:	d832      	bhi.n	80048a0 <_strtod_l+0xa0>
 800483a:	2a08      	cmp	r2, #8
 800483c:	d832      	bhi.n	80048a4 <_strtod_l+0xa4>
 800483e:	2a00      	cmp	r2, #0
 8004840:	d03c      	beq.n	80048bc <_strtod_l+0xbc>
 8004842:	2300      	movs	r3, #0
 8004844:	930e      	str	r3, [sp, #56]	; 0x38
 8004846:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004848:	7833      	ldrb	r3, [r6, #0]
 800484a:	2b30      	cmp	r3, #48	; 0x30
 800484c:	f040 80b4 	bne.w	80049b8 <_strtod_l+0x1b8>
 8004850:	7873      	ldrb	r3, [r6, #1]
 8004852:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004856:	2b58      	cmp	r3, #88	; 0x58
 8004858:	d16c      	bne.n	8004934 <_strtod_l+0x134>
 800485a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800485c:	9301      	str	r3, [sp, #4]
 800485e:	ab1e      	add	r3, sp, #120	; 0x78
 8004860:	9702      	str	r7, [sp, #8]
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	4a8f      	ldr	r2, [pc, #572]	; (8004aa4 <_strtod_l+0x2a4>)
 8004866:	ab1f      	add	r3, sp, #124	; 0x7c
 8004868:	a91d      	add	r1, sp, #116	; 0x74
 800486a:	4620      	mov	r0, r4
 800486c:	f001 fd40 	bl	80062f0 <__gethex>
 8004870:	f010 0707 	ands.w	r7, r0, #7
 8004874:	4605      	mov	r5, r0
 8004876:	d005      	beq.n	8004884 <_strtod_l+0x84>
 8004878:	2f06      	cmp	r7, #6
 800487a:	d12a      	bne.n	80048d2 <_strtod_l+0xd2>
 800487c:	3601      	adds	r6, #1
 800487e:	2300      	movs	r3, #0
 8004880:	961d      	str	r6, [sp, #116]	; 0x74
 8004882:	930e      	str	r3, [sp, #56]	; 0x38
 8004884:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004886:	2b00      	cmp	r3, #0
 8004888:	f040 8596 	bne.w	80053b8 <_strtod_l+0xbb8>
 800488c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800488e:	b1db      	cbz	r3, 80048c8 <_strtod_l+0xc8>
 8004890:	4652      	mov	r2, sl
 8004892:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004896:	ec43 2b10 	vmov	d0, r2, r3
 800489a:	b023      	add	sp, #140	; 0x8c
 800489c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a0:	2a20      	cmp	r2, #32
 80048a2:	d1ce      	bne.n	8004842 <_strtod_l+0x42>
 80048a4:	3301      	adds	r3, #1
 80048a6:	931d      	str	r3, [sp, #116]	; 0x74
 80048a8:	e7c0      	b.n	800482c <_strtod_l+0x2c>
 80048aa:	2a2d      	cmp	r2, #45	; 0x2d
 80048ac:	d1c9      	bne.n	8004842 <_strtod_l+0x42>
 80048ae:	2201      	movs	r2, #1
 80048b0:	920e      	str	r2, [sp, #56]	; 0x38
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	921d      	str	r2, [sp, #116]	; 0x74
 80048b6:	785b      	ldrb	r3, [r3, #1]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1c4      	bne.n	8004846 <_strtod_l+0x46>
 80048bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80048be:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f040 8576 	bne.w	80053b4 <_strtod_l+0xbb4>
 80048c8:	4652      	mov	r2, sl
 80048ca:	465b      	mov	r3, fp
 80048cc:	e7e3      	b.n	8004896 <_strtod_l+0x96>
 80048ce:	2200      	movs	r2, #0
 80048d0:	e7ee      	b.n	80048b0 <_strtod_l+0xb0>
 80048d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80048d4:	b13a      	cbz	r2, 80048e6 <_strtod_l+0xe6>
 80048d6:	2135      	movs	r1, #53	; 0x35
 80048d8:	a820      	add	r0, sp, #128	; 0x80
 80048da:	f002 fcb4 	bl	8007246 <__copybits>
 80048de:	991e      	ldr	r1, [sp, #120]	; 0x78
 80048e0:	4620      	mov	r0, r4
 80048e2:	f002 f879 	bl	80069d8 <_Bfree>
 80048e6:	3f01      	subs	r7, #1
 80048e8:	2f05      	cmp	r7, #5
 80048ea:	d807      	bhi.n	80048fc <_strtod_l+0xfc>
 80048ec:	e8df f007 	tbb	[pc, r7]
 80048f0:	1d180b0e 	.word	0x1d180b0e
 80048f4:	030e      	.short	0x030e
 80048f6:	f04f 0b00 	mov.w	fp, #0
 80048fa:	46da      	mov	sl, fp
 80048fc:	0728      	lsls	r0, r5, #28
 80048fe:	d5c1      	bpl.n	8004884 <_strtod_l+0x84>
 8004900:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004904:	e7be      	b.n	8004884 <_strtod_l+0x84>
 8004906:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800490a:	e7f7      	b.n	80048fc <_strtod_l+0xfc>
 800490c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8004910:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004912:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004916:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800491a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800491e:	e7ed      	b.n	80048fc <_strtod_l+0xfc>
 8004920:	f8df b184 	ldr.w	fp, [pc, #388]	; 8004aa8 <_strtod_l+0x2a8>
 8004924:	f04f 0a00 	mov.w	sl, #0
 8004928:	e7e8      	b.n	80048fc <_strtod_l+0xfc>
 800492a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800492e:	f04f 3aff 	mov.w	sl, #4294967295
 8004932:	e7e3      	b.n	80048fc <_strtod_l+0xfc>
 8004934:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	921d      	str	r2, [sp, #116]	; 0x74
 800493a:	785b      	ldrb	r3, [r3, #1]
 800493c:	2b30      	cmp	r3, #48	; 0x30
 800493e:	d0f9      	beq.n	8004934 <_strtod_l+0x134>
 8004940:	2b00      	cmp	r3, #0
 8004942:	d09f      	beq.n	8004884 <_strtod_l+0x84>
 8004944:	2301      	movs	r3, #1
 8004946:	f04f 0900 	mov.w	r9, #0
 800494a:	9304      	str	r3, [sp, #16]
 800494c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800494e:	930a      	str	r3, [sp, #40]	; 0x28
 8004950:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004954:	464f      	mov	r7, r9
 8004956:	220a      	movs	r2, #10
 8004958:	981d      	ldr	r0, [sp, #116]	; 0x74
 800495a:	7806      	ldrb	r6, [r0, #0]
 800495c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004960:	b2d9      	uxtb	r1, r3
 8004962:	2909      	cmp	r1, #9
 8004964:	d92a      	bls.n	80049bc <_strtod_l+0x1bc>
 8004966:	9907      	ldr	r1, [sp, #28]
 8004968:	462a      	mov	r2, r5
 800496a:	f002 fedd 	bl	8007728 <strncmp>
 800496e:	b398      	cbz	r0, 80049d8 <_strtod_l+0x1d8>
 8004970:	2000      	movs	r0, #0
 8004972:	4633      	mov	r3, r6
 8004974:	463d      	mov	r5, r7
 8004976:	9007      	str	r0, [sp, #28]
 8004978:	4602      	mov	r2, r0
 800497a:	2b65      	cmp	r3, #101	; 0x65
 800497c:	d001      	beq.n	8004982 <_strtod_l+0x182>
 800497e:	2b45      	cmp	r3, #69	; 0x45
 8004980:	d118      	bne.n	80049b4 <_strtod_l+0x1b4>
 8004982:	b91d      	cbnz	r5, 800498c <_strtod_l+0x18c>
 8004984:	9b04      	ldr	r3, [sp, #16]
 8004986:	4303      	orrs	r3, r0
 8004988:	d098      	beq.n	80048bc <_strtod_l+0xbc>
 800498a:	2500      	movs	r5, #0
 800498c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8004990:	f108 0301 	add.w	r3, r8, #1
 8004994:	931d      	str	r3, [sp, #116]	; 0x74
 8004996:	f898 3001 	ldrb.w	r3, [r8, #1]
 800499a:	2b2b      	cmp	r3, #43	; 0x2b
 800499c:	d075      	beq.n	8004a8a <_strtod_l+0x28a>
 800499e:	2b2d      	cmp	r3, #45	; 0x2d
 80049a0:	d07b      	beq.n	8004a9a <_strtod_l+0x29a>
 80049a2:	f04f 0c00 	mov.w	ip, #0
 80049a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80049aa:	2909      	cmp	r1, #9
 80049ac:	f240 8082 	bls.w	8004ab4 <_strtod_l+0x2b4>
 80049b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80049b4:	2600      	movs	r6, #0
 80049b6:	e09d      	b.n	8004af4 <_strtod_l+0x2f4>
 80049b8:	2300      	movs	r3, #0
 80049ba:	e7c4      	b.n	8004946 <_strtod_l+0x146>
 80049bc:	2f08      	cmp	r7, #8
 80049be:	bfd8      	it	le
 80049c0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80049c2:	f100 0001 	add.w	r0, r0, #1
 80049c6:	bfda      	itte	le
 80049c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80049cc:	9309      	strle	r3, [sp, #36]	; 0x24
 80049ce:	fb02 3909 	mlagt	r9, r2, r9, r3
 80049d2:	3701      	adds	r7, #1
 80049d4:	901d      	str	r0, [sp, #116]	; 0x74
 80049d6:	e7bf      	b.n	8004958 <_strtod_l+0x158>
 80049d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80049da:	195a      	adds	r2, r3, r5
 80049dc:	921d      	str	r2, [sp, #116]	; 0x74
 80049de:	5d5b      	ldrb	r3, [r3, r5]
 80049e0:	2f00      	cmp	r7, #0
 80049e2:	d037      	beq.n	8004a54 <_strtod_l+0x254>
 80049e4:	9007      	str	r0, [sp, #28]
 80049e6:	463d      	mov	r5, r7
 80049e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80049ec:	2a09      	cmp	r2, #9
 80049ee:	d912      	bls.n	8004a16 <_strtod_l+0x216>
 80049f0:	2201      	movs	r2, #1
 80049f2:	e7c2      	b.n	800497a <_strtod_l+0x17a>
 80049f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	921d      	str	r2, [sp, #116]	; 0x74
 80049fa:	785b      	ldrb	r3, [r3, #1]
 80049fc:	3001      	adds	r0, #1
 80049fe:	2b30      	cmp	r3, #48	; 0x30
 8004a00:	d0f8      	beq.n	80049f4 <_strtod_l+0x1f4>
 8004a02:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004a06:	2a08      	cmp	r2, #8
 8004a08:	f200 84db 	bhi.w	80053c2 <_strtod_l+0xbc2>
 8004a0c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004a0e:	9007      	str	r0, [sp, #28]
 8004a10:	2000      	movs	r0, #0
 8004a12:	920a      	str	r2, [sp, #40]	; 0x28
 8004a14:	4605      	mov	r5, r0
 8004a16:	3b30      	subs	r3, #48	; 0x30
 8004a18:	f100 0201 	add.w	r2, r0, #1
 8004a1c:	d014      	beq.n	8004a48 <_strtod_l+0x248>
 8004a1e:	9907      	ldr	r1, [sp, #28]
 8004a20:	4411      	add	r1, r2
 8004a22:	9107      	str	r1, [sp, #28]
 8004a24:	462a      	mov	r2, r5
 8004a26:	eb00 0e05 	add.w	lr, r0, r5
 8004a2a:	210a      	movs	r1, #10
 8004a2c:	4572      	cmp	r2, lr
 8004a2e:	d113      	bne.n	8004a58 <_strtod_l+0x258>
 8004a30:	182a      	adds	r2, r5, r0
 8004a32:	2a08      	cmp	r2, #8
 8004a34:	f105 0501 	add.w	r5, r5, #1
 8004a38:	4405      	add	r5, r0
 8004a3a:	dc1c      	bgt.n	8004a76 <_strtod_l+0x276>
 8004a3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a3e:	220a      	movs	r2, #10
 8004a40:	fb02 3301 	mla	r3, r2, r1, r3
 8004a44:	9309      	str	r3, [sp, #36]	; 0x24
 8004a46:	2200      	movs	r2, #0
 8004a48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004a4a:	1c59      	adds	r1, r3, #1
 8004a4c:	911d      	str	r1, [sp, #116]	; 0x74
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	4610      	mov	r0, r2
 8004a52:	e7c9      	b.n	80049e8 <_strtod_l+0x1e8>
 8004a54:	4638      	mov	r0, r7
 8004a56:	e7d2      	b.n	80049fe <_strtod_l+0x1fe>
 8004a58:	2a08      	cmp	r2, #8
 8004a5a:	dc04      	bgt.n	8004a66 <_strtod_l+0x266>
 8004a5c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004a5e:	434e      	muls	r6, r1
 8004a60:	9609      	str	r6, [sp, #36]	; 0x24
 8004a62:	3201      	adds	r2, #1
 8004a64:	e7e2      	b.n	8004a2c <_strtod_l+0x22c>
 8004a66:	f102 0c01 	add.w	ip, r2, #1
 8004a6a:	f1bc 0f10 	cmp.w	ip, #16
 8004a6e:	bfd8      	it	le
 8004a70:	fb01 f909 	mulle.w	r9, r1, r9
 8004a74:	e7f5      	b.n	8004a62 <_strtod_l+0x262>
 8004a76:	2d10      	cmp	r5, #16
 8004a78:	bfdc      	itt	le
 8004a7a:	220a      	movle	r2, #10
 8004a7c:	fb02 3909 	mlale	r9, r2, r9, r3
 8004a80:	e7e1      	b.n	8004a46 <_strtod_l+0x246>
 8004a82:	2300      	movs	r3, #0
 8004a84:	9307      	str	r3, [sp, #28]
 8004a86:	2201      	movs	r2, #1
 8004a88:	e77c      	b.n	8004984 <_strtod_l+0x184>
 8004a8a:	f04f 0c00 	mov.w	ip, #0
 8004a8e:	f108 0302 	add.w	r3, r8, #2
 8004a92:	931d      	str	r3, [sp, #116]	; 0x74
 8004a94:	f898 3002 	ldrb.w	r3, [r8, #2]
 8004a98:	e785      	b.n	80049a6 <_strtod_l+0x1a6>
 8004a9a:	f04f 0c01 	mov.w	ip, #1
 8004a9e:	e7f6      	b.n	8004a8e <_strtod_l+0x28e>
 8004aa0:	08008650 	.word	0x08008650
 8004aa4:	08008400 	.word	0x08008400
 8004aa8:	7ff00000 	.word	0x7ff00000
 8004aac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004aae:	1c59      	adds	r1, r3, #1
 8004ab0:	911d      	str	r1, [sp, #116]	; 0x74
 8004ab2:	785b      	ldrb	r3, [r3, #1]
 8004ab4:	2b30      	cmp	r3, #48	; 0x30
 8004ab6:	d0f9      	beq.n	8004aac <_strtod_l+0x2ac>
 8004ab8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004abc:	2908      	cmp	r1, #8
 8004abe:	f63f af79 	bhi.w	80049b4 <_strtod_l+0x1b4>
 8004ac2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004ac6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004ac8:	9308      	str	r3, [sp, #32]
 8004aca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004acc:	1c59      	adds	r1, r3, #1
 8004ace:	911d      	str	r1, [sp, #116]	; 0x74
 8004ad0:	785b      	ldrb	r3, [r3, #1]
 8004ad2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8004ad6:	2e09      	cmp	r6, #9
 8004ad8:	d937      	bls.n	8004b4a <_strtod_l+0x34a>
 8004ada:	9e08      	ldr	r6, [sp, #32]
 8004adc:	1b89      	subs	r1, r1, r6
 8004ade:	2908      	cmp	r1, #8
 8004ae0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004ae4:	dc02      	bgt.n	8004aec <_strtod_l+0x2ec>
 8004ae6:	4576      	cmp	r6, lr
 8004ae8:	bfa8      	it	ge
 8004aea:	4676      	movge	r6, lr
 8004aec:	f1bc 0f00 	cmp.w	ip, #0
 8004af0:	d000      	beq.n	8004af4 <_strtod_l+0x2f4>
 8004af2:	4276      	negs	r6, r6
 8004af4:	2d00      	cmp	r5, #0
 8004af6:	d14f      	bne.n	8004b98 <_strtod_l+0x398>
 8004af8:	9904      	ldr	r1, [sp, #16]
 8004afa:	4301      	orrs	r1, r0
 8004afc:	f47f aec2 	bne.w	8004884 <_strtod_l+0x84>
 8004b00:	2a00      	cmp	r2, #0
 8004b02:	f47f aedb 	bne.w	80048bc <_strtod_l+0xbc>
 8004b06:	2b69      	cmp	r3, #105	; 0x69
 8004b08:	d027      	beq.n	8004b5a <_strtod_l+0x35a>
 8004b0a:	dc24      	bgt.n	8004b56 <_strtod_l+0x356>
 8004b0c:	2b49      	cmp	r3, #73	; 0x49
 8004b0e:	d024      	beq.n	8004b5a <_strtod_l+0x35a>
 8004b10:	2b4e      	cmp	r3, #78	; 0x4e
 8004b12:	f47f aed3 	bne.w	80048bc <_strtod_l+0xbc>
 8004b16:	499e      	ldr	r1, [pc, #632]	; (8004d90 <_strtod_l+0x590>)
 8004b18:	a81d      	add	r0, sp, #116	; 0x74
 8004b1a:	f001 fe41 	bl	80067a0 <__match>
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	f43f aecc 	beq.w	80048bc <_strtod_l+0xbc>
 8004b24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b28      	cmp	r3, #40	; 0x28
 8004b2a:	d12d      	bne.n	8004b88 <_strtod_l+0x388>
 8004b2c:	4999      	ldr	r1, [pc, #612]	; (8004d94 <_strtod_l+0x594>)
 8004b2e:	aa20      	add	r2, sp, #128	; 0x80
 8004b30:	a81d      	add	r0, sp, #116	; 0x74
 8004b32:	f001 fe49 	bl	80067c8 <__hexnan>
 8004b36:	2805      	cmp	r0, #5
 8004b38:	d126      	bne.n	8004b88 <_strtod_l+0x388>
 8004b3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b3c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8004b40:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004b44:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004b48:	e69c      	b.n	8004884 <_strtod_l+0x84>
 8004b4a:	210a      	movs	r1, #10
 8004b4c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004b50:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004b54:	e7b9      	b.n	8004aca <_strtod_l+0x2ca>
 8004b56:	2b6e      	cmp	r3, #110	; 0x6e
 8004b58:	e7db      	b.n	8004b12 <_strtod_l+0x312>
 8004b5a:	498f      	ldr	r1, [pc, #572]	; (8004d98 <_strtod_l+0x598>)
 8004b5c:	a81d      	add	r0, sp, #116	; 0x74
 8004b5e:	f001 fe1f 	bl	80067a0 <__match>
 8004b62:	2800      	cmp	r0, #0
 8004b64:	f43f aeaa 	beq.w	80048bc <_strtod_l+0xbc>
 8004b68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004b6a:	498c      	ldr	r1, [pc, #560]	; (8004d9c <_strtod_l+0x59c>)
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	a81d      	add	r0, sp, #116	; 0x74
 8004b70:	931d      	str	r3, [sp, #116]	; 0x74
 8004b72:	f001 fe15 	bl	80067a0 <__match>
 8004b76:	b910      	cbnz	r0, 8004b7e <_strtod_l+0x37e>
 8004b78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	931d      	str	r3, [sp, #116]	; 0x74
 8004b7e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8004dac <_strtod_l+0x5ac>
 8004b82:	f04f 0a00 	mov.w	sl, #0
 8004b86:	e67d      	b.n	8004884 <_strtod_l+0x84>
 8004b88:	4885      	ldr	r0, [pc, #532]	; (8004da0 <_strtod_l+0x5a0>)
 8004b8a:	f002 fdb5 	bl	80076f8 <nan>
 8004b8e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004b92:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004b96:	e675      	b.n	8004884 <_strtod_l+0x84>
 8004b98:	9b07      	ldr	r3, [sp, #28]
 8004b9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b9c:	1af3      	subs	r3, r6, r3
 8004b9e:	2f00      	cmp	r7, #0
 8004ba0:	bf08      	it	eq
 8004ba2:	462f      	moveq	r7, r5
 8004ba4:	2d10      	cmp	r5, #16
 8004ba6:	9308      	str	r3, [sp, #32]
 8004ba8:	46a8      	mov	r8, r5
 8004baa:	bfa8      	it	ge
 8004bac:	f04f 0810 	movge.w	r8, #16
 8004bb0:	f7fb fca8 	bl	8000504 <__aeabi_ui2d>
 8004bb4:	2d09      	cmp	r5, #9
 8004bb6:	4682      	mov	sl, r0
 8004bb8:	468b      	mov	fp, r1
 8004bba:	dd13      	ble.n	8004be4 <_strtod_l+0x3e4>
 8004bbc:	4b79      	ldr	r3, [pc, #484]	; (8004da4 <_strtod_l+0x5a4>)
 8004bbe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004bc2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004bc6:	f7fb fd17 	bl	80005f8 <__aeabi_dmul>
 8004bca:	4682      	mov	sl, r0
 8004bcc:	4648      	mov	r0, r9
 8004bce:	468b      	mov	fp, r1
 8004bd0:	f7fb fc98 	bl	8000504 <__aeabi_ui2d>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4650      	mov	r0, sl
 8004bda:	4659      	mov	r1, fp
 8004bdc:	f7fb fb56 	bl	800028c <__adddf3>
 8004be0:	4682      	mov	sl, r0
 8004be2:	468b      	mov	fp, r1
 8004be4:	2d0f      	cmp	r5, #15
 8004be6:	dc38      	bgt.n	8004c5a <_strtod_l+0x45a>
 8004be8:	9b08      	ldr	r3, [sp, #32]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f43f ae4a 	beq.w	8004884 <_strtod_l+0x84>
 8004bf0:	dd24      	ble.n	8004c3c <_strtod_l+0x43c>
 8004bf2:	2b16      	cmp	r3, #22
 8004bf4:	dc0b      	bgt.n	8004c0e <_strtod_l+0x40e>
 8004bf6:	4d6b      	ldr	r5, [pc, #428]	; (8004da4 <_strtod_l+0x5a4>)
 8004bf8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8004bfc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004c00:	4652      	mov	r2, sl
 8004c02:	465b      	mov	r3, fp
 8004c04:	f7fb fcf8 	bl	80005f8 <__aeabi_dmul>
 8004c08:	4682      	mov	sl, r0
 8004c0a:	468b      	mov	fp, r1
 8004c0c:	e63a      	b.n	8004884 <_strtod_l+0x84>
 8004c0e:	9a08      	ldr	r2, [sp, #32]
 8004c10:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004c14:	4293      	cmp	r3, r2
 8004c16:	db20      	blt.n	8004c5a <_strtod_l+0x45a>
 8004c18:	4c62      	ldr	r4, [pc, #392]	; (8004da4 <_strtod_l+0x5a4>)
 8004c1a:	f1c5 050f 	rsb	r5, r5, #15
 8004c1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004c22:	4652      	mov	r2, sl
 8004c24:	465b      	mov	r3, fp
 8004c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c2a:	f7fb fce5 	bl	80005f8 <__aeabi_dmul>
 8004c2e:	9b08      	ldr	r3, [sp, #32]
 8004c30:	1b5d      	subs	r5, r3, r5
 8004c32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004c36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004c3a:	e7e3      	b.n	8004c04 <_strtod_l+0x404>
 8004c3c:	9b08      	ldr	r3, [sp, #32]
 8004c3e:	3316      	adds	r3, #22
 8004c40:	db0b      	blt.n	8004c5a <_strtod_l+0x45a>
 8004c42:	9b07      	ldr	r3, [sp, #28]
 8004c44:	4a57      	ldr	r2, [pc, #348]	; (8004da4 <_strtod_l+0x5a4>)
 8004c46:	1b9e      	subs	r6, r3, r6
 8004c48:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8004c4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004c50:	4650      	mov	r0, sl
 8004c52:	4659      	mov	r1, fp
 8004c54:	f7fb fdfa 	bl	800084c <__aeabi_ddiv>
 8004c58:	e7d6      	b.n	8004c08 <_strtod_l+0x408>
 8004c5a:	9b08      	ldr	r3, [sp, #32]
 8004c5c:	eba5 0808 	sub.w	r8, r5, r8
 8004c60:	4498      	add	r8, r3
 8004c62:	f1b8 0f00 	cmp.w	r8, #0
 8004c66:	dd71      	ble.n	8004d4c <_strtod_l+0x54c>
 8004c68:	f018 030f 	ands.w	r3, r8, #15
 8004c6c:	d00a      	beq.n	8004c84 <_strtod_l+0x484>
 8004c6e:	494d      	ldr	r1, [pc, #308]	; (8004da4 <_strtod_l+0x5a4>)
 8004c70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004c74:	4652      	mov	r2, sl
 8004c76:	465b      	mov	r3, fp
 8004c78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c7c:	f7fb fcbc 	bl	80005f8 <__aeabi_dmul>
 8004c80:	4682      	mov	sl, r0
 8004c82:	468b      	mov	fp, r1
 8004c84:	f038 080f 	bics.w	r8, r8, #15
 8004c88:	d04d      	beq.n	8004d26 <_strtod_l+0x526>
 8004c8a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004c8e:	dd22      	ble.n	8004cd6 <_strtod_l+0x4d6>
 8004c90:	2500      	movs	r5, #0
 8004c92:	462e      	mov	r6, r5
 8004c94:	9509      	str	r5, [sp, #36]	; 0x24
 8004c96:	9507      	str	r5, [sp, #28]
 8004c98:	2322      	movs	r3, #34	; 0x22
 8004c9a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8004dac <_strtod_l+0x5ac>
 8004c9e:	6023      	str	r3, [r4, #0]
 8004ca0:	f04f 0a00 	mov.w	sl, #0
 8004ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f43f adec 	beq.w	8004884 <_strtod_l+0x84>
 8004cac:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004cae:	4620      	mov	r0, r4
 8004cb0:	f001 fe92 	bl	80069d8 <_Bfree>
 8004cb4:	9907      	ldr	r1, [sp, #28]
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f001 fe8e 	bl	80069d8 <_Bfree>
 8004cbc:	4631      	mov	r1, r6
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f001 fe8a 	bl	80069d8 <_Bfree>
 8004cc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f001 fe86 	bl	80069d8 <_Bfree>
 8004ccc:	4629      	mov	r1, r5
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f001 fe82 	bl	80069d8 <_Bfree>
 8004cd4:	e5d6      	b.n	8004884 <_strtod_l+0x84>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004cdc:	4650      	mov	r0, sl
 8004cde:	4659      	mov	r1, fp
 8004ce0:	4699      	mov	r9, r3
 8004ce2:	f1b8 0f01 	cmp.w	r8, #1
 8004ce6:	dc21      	bgt.n	8004d2c <_strtod_l+0x52c>
 8004ce8:	b10b      	cbz	r3, 8004cee <_strtod_l+0x4ee>
 8004cea:	4682      	mov	sl, r0
 8004cec:	468b      	mov	fp, r1
 8004cee:	4b2e      	ldr	r3, [pc, #184]	; (8004da8 <_strtod_l+0x5a8>)
 8004cf0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004cf4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004cf8:	4652      	mov	r2, sl
 8004cfa:	465b      	mov	r3, fp
 8004cfc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004d00:	f7fb fc7a 	bl	80005f8 <__aeabi_dmul>
 8004d04:	4b29      	ldr	r3, [pc, #164]	; (8004dac <_strtod_l+0x5ac>)
 8004d06:	460a      	mov	r2, r1
 8004d08:	400b      	ands	r3, r1
 8004d0a:	4929      	ldr	r1, [pc, #164]	; (8004db0 <_strtod_l+0x5b0>)
 8004d0c:	428b      	cmp	r3, r1
 8004d0e:	4682      	mov	sl, r0
 8004d10:	d8be      	bhi.n	8004c90 <_strtod_l+0x490>
 8004d12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004d16:	428b      	cmp	r3, r1
 8004d18:	bf86      	itte	hi
 8004d1a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8004db4 <_strtod_l+0x5b4>
 8004d1e:	f04f 3aff 	movhi.w	sl, #4294967295
 8004d22:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004d26:	2300      	movs	r3, #0
 8004d28:	9304      	str	r3, [sp, #16]
 8004d2a:	e081      	b.n	8004e30 <_strtod_l+0x630>
 8004d2c:	f018 0f01 	tst.w	r8, #1
 8004d30:	d007      	beq.n	8004d42 <_strtod_l+0x542>
 8004d32:	4b1d      	ldr	r3, [pc, #116]	; (8004da8 <_strtod_l+0x5a8>)
 8004d34:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3c:	f7fb fc5c 	bl	80005f8 <__aeabi_dmul>
 8004d40:	2301      	movs	r3, #1
 8004d42:	f109 0901 	add.w	r9, r9, #1
 8004d46:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004d4a:	e7ca      	b.n	8004ce2 <_strtod_l+0x4e2>
 8004d4c:	d0eb      	beq.n	8004d26 <_strtod_l+0x526>
 8004d4e:	f1c8 0800 	rsb	r8, r8, #0
 8004d52:	f018 020f 	ands.w	r2, r8, #15
 8004d56:	d00a      	beq.n	8004d6e <_strtod_l+0x56e>
 8004d58:	4b12      	ldr	r3, [pc, #72]	; (8004da4 <_strtod_l+0x5a4>)
 8004d5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d5e:	4650      	mov	r0, sl
 8004d60:	4659      	mov	r1, fp
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	f7fb fd71 	bl	800084c <__aeabi_ddiv>
 8004d6a:	4682      	mov	sl, r0
 8004d6c:	468b      	mov	fp, r1
 8004d6e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004d72:	d0d8      	beq.n	8004d26 <_strtod_l+0x526>
 8004d74:	f1b8 0f1f 	cmp.w	r8, #31
 8004d78:	dd1e      	ble.n	8004db8 <_strtod_l+0x5b8>
 8004d7a:	2500      	movs	r5, #0
 8004d7c:	462e      	mov	r6, r5
 8004d7e:	9509      	str	r5, [sp, #36]	; 0x24
 8004d80:	9507      	str	r5, [sp, #28]
 8004d82:	2322      	movs	r3, #34	; 0x22
 8004d84:	f04f 0a00 	mov.w	sl, #0
 8004d88:	f04f 0b00 	mov.w	fp, #0
 8004d8c:	6023      	str	r3, [r4, #0]
 8004d8e:	e789      	b.n	8004ca4 <_strtod_l+0x4a4>
 8004d90:	080083d1 	.word	0x080083d1
 8004d94:	08008414 	.word	0x08008414
 8004d98:	080083c9 	.word	0x080083c9
 8004d9c:	08008554 	.word	0x08008554
 8004da0:	08008810 	.word	0x08008810
 8004da4:	080086f0 	.word	0x080086f0
 8004da8:	080086c8 	.word	0x080086c8
 8004dac:	7ff00000 	.word	0x7ff00000
 8004db0:	7ca00000 	.word	0x7ca00000
 8004db4:	7fefffff 	.word	0x7fefffff
 8004db8:	f018 0310 	ands.w	r3, r8, #16
 8004dbc:	bf18      	it	ne
 8004dbe:	236a      	movne	r3, #106	; 0x6a
 8004dc0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005178 <_strtod_l+0x978>
 8004dc4:	9304      	str	r3, [sp, #16]
 8004dc6:	4650      	mov	r0, sl
 8004dc8:	4659      	mov	r1, fp
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f018 0f01 	tst.w	r8, #1
 8004dd0:	d004      	beq.n	8004ddc <_strtod_l+0x5dc>
 8004dd2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004dd6:	f7fb fc0f 	bl	80005f8 <__aeabi_dmul>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004de0:	f109 0908 	add.w	r9, r9, #8
 8004de4:	d1f2      	bne.n	8004dcc <_strtod_l+0x5cc>
 8004de6:	b10b      	cbz	r3, 8004dec <_strtod_l+0x5ec>
 8004de8:	4682      	mov	sl, r0
 8004dea:	468b      	mov	fp, r1
 8004dec:	9b04      	ldr	r3, [sp, #16]
 8004dee:	b1bb      	cbz	r3, 8004e20 <_strtod_l+0x620>
 8004df0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004df4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	4659      	mov	r1, fp
 8004dfc:	dd10      	ble.n	8004e20 <_strtod_l+0x620>
 8004dfe:	2b1f      	cmp	r3, #31
 8004e00:	f340 8128 	ble.w	8005054 <_strtod_l+0x854>
 8004e04:	2b34      	cmp	r3, #52	; 0x34
 8004e06:	bfde      	ittt	le
 8004e08:	3b20      	suble	r3, #32
 8004e0a:	f04f 32ff 	movle.w	r2, #4294967295
 8004e0e:	fa02 f303 	lslle.w	r3, r2, r3
 8004e12:	f04f 0a00 	mov.w	sl, #0
 8004e16:	bfcc      	ite	gt
 8004e18:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004e1c:	ea03 0b01 	andle.w	fp, r3, r1
 8004e20:	2200      	movs	r2, #0
 8004e22:	2300      	movs	r3, #0
 8004e24:	4650      	mov	r0, sl
 8004e26:	4659      	mov	r1, fp
 8004e28:	f7fb fe4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d1a4      	bne.n	8004d7a <_strtod_l+0x57a>
 8004e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e36:	462b      	mov	r3, r5
 8004e38:	463a      	mov	r2, r7
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f001 fe38 	bl	8006ab0 <__s2b>
 8004e40:	9009      	str	r0, [sp, #36]	; 0x24
 8004e42:	2800      	cmp	r0, #0
 8004e44:	f43f af24 	beq.w	8004c90 <_strtod_l+0x490>
 8004e48:	9b07      	ldr	r3, [sp, #28]
 8004e4a:	1b9e      	subs	r6, r3, r6
 8004e4c:	9b08      	ldr	r3, [sp, #32]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	bfb4      	ite	lt
 8004e52:	4633      	movlt	r3, r6
 8004e54:	2300      	movge	r3, #0
 8004e56:	9310      	str	r3, [sp, #64]	; 0x40
 8004e58:	9b08      	ldr	r3, [sp, #32]
 8004e5a:	2500      	movs	r5, #0
 8004e5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004e60:	9318      	str	r3, [sp, #96]	; 0x60
 8004e62:	462e      	mov	r6, r5
 8004e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e66:	4620      	mov	r0, r4
 8004e68:	6859      	ldr	r1, [r3, #4]
 8004e6a:	f001 fd75 	bl	8006958 <_Balloc>
 8004e6e:	9007      	str	r0, [sp, #28]
 8004e70:	2800      	cmp	r0, #0
 8004e72:	f43f af11 	beq.w	8004c98 <_strtod_l+0x498>
 8004e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	3202      	adds	r2, #2
 8004e7c:	f103 010c 	add.w	r1, r3, #12
 8004e80:	0092      	lsls	r2, r2, #2
 8004e82:	300c      	adds	r0, #12
 8004e84:	f001 fd5a 	bl	800693c <memcpy>
 8004e88:	ec4b ab10 	vmov	d0, sl, fp
 8004e8c:	aa20      	add	r2, sp, #128	; 0x80
 8004e8e:	a91f      	add	r1, sp, #124	; 0x7c
 8004e90:	4620      	mov	r0, r4
 8004e92:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004e96:	f002 f947 	bl	8007128 <__d2b>
 8004e9a:	901e      	str	r0, [sp, #120]	; 0x78
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	f43f aefb 	beq.w	8004c98 <_strtod_l+0x498>
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	f001 fe9d 	bl	8006be4 <__i2b>
 8004eaa:	4606      	mov	r6, r0
 8004eac:	2800      	cmp	r0, #0
 8004eae:	f43f aef3 	beq.w	8004c98 <_strtod_l+0x498>
 8004eb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004eb4:	9904      	ldr	r1, [sp, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	bfab      	itete	ge
 8004eba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8004ebc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8004ebe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8004ec0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8004ec4:	bfac      	ite	ge
 8004ec6:	eb03 0902 	addge.w	r9, r3, r2
 8004eca:	1ad7      	sublt	r7, r2, r3
 8004ecc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004ece:	eba3 0801 	sub.w	r8, r3, r1
 8004ed2:	4490      	add	r8, r2
 8004ed4:	4ba3      	ldr	r3, [pc, #652]	; (8005164 <_strtod_l+0x964>)
 8004ed6:	f108 38ff 	add.w	r8, r8, #4294967295
 8004eda:	4598      	cmp	r8, r3
 8004edc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004ee0:	f280 80cc 	bge.w	800507c <_strtod_l+0x87c>
 8004ee4:	eba3 0308 	sub.w	r3, r3, r8
 8004ee8:	2b1f      	cmp	r3, #31
 8004eea:	eba2 0203 	sub.w	r2, r2, r3
 8004eee:	f04f 0101 	mov.w	r1, #1
 8004ef2:	f300 80b6 	bgt.w	8005062 <_strtod_l+0x862>
 8004ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8004efa:	9311      	str	r3, [sp, #68]	; 0x44
 8004efc:	2300      	movs	r3, #0
 8004efe:	930c      	str	r3, [sp, #48]	; 0x30
 8004f00:	eb09 0802 	add.w	r8, r9, r2
 8004f04:	9b04      	ldr	r3, [sp, #16]
 8004f06:	45c1      	cmp	r9, r8
 8004f08:	4417      	add	r7, r2
 8004f0a:	441f      	add	r7, r3
 8004f0c:	464b      	mov	r3, r9
 8004f0e:	bfa8      	it	ge
 8004f10:	4643      	movge	r3, r8
 8004f12:	42bb      	cmp	r3, r7
 8004f14:	bfa8      	it	ge
 8004f16:	463b      	movge	r3, r7
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bfc2      	ittt	gt
 8004f1c:	eba8 0803 	subgt.w	r8, r8, r3
 8004f20:	1aff      	subgt	r7, r7, r3
 8004f22:	eba9 0903 	subgt.w	r9, r9, r3
 8004f26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	dd17      	ble.n	8004f5c <_strtod_l+0x75c>
 8004f2c:	4631      	mov	r1, r6
 8004f2e:	461a      	mov	r2, r3
 8004f30:	4620      	mov	r0, r4
 8004f32:	f001 ff13 	bl	8006d5c <__pow5mult>
 8004f36:	4606      	mov	r6, r0
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	f43f aead 	beq.w	8004c98 <_strtod_l+0x498>
 8004f3e:	4601      	mov	r1, r0
 8004f40:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004f42:	4620      	mov	r0, r4
 8004f44:	f001 fe64 	bl	8006c10 <__multiply>
 8004f48:	900f      	str	r0, [sp, #60]	; 0x3c
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	f43f aea4 	beq.w	8004c98 <_strtod_l+0x498>
 8004f50:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004f52:	4620      	mov	r0, r4
 8004f54:	f001 fd40 	bl	80069d8 <_Bfree>
 8004f58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f5a:	931e      	str	r3, [sp, #120]	; 0x78
 8004f5c:	f1b8 0f00 	cmp.w	r8, #0
 8004f60:	f300 8091 	bgt.w	8005086 <_strtod_l+0x886>
 8004f64:	9b08      	ldr	r3, [sp, #32]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	dd08      	ble.n	8004f7c <_strtod_l+0x77c>
 8004f6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004f6c:	9907      	ldr	r1, [sp, #28]
 8004f6e:	4620      	mov	r0, r4
 8004f70:	f001 fef4 	bl	8006d5c <__pow5mult>
 8004f74:	9007      	str	r0, [sp, #28]
 8004f76:	2800      	cmp	r0, #0
 8004f78:	f43f ae8e 	beq.w	8004c98 <_strtod_l+0x498>
 8004f7c:	2f00      	cmp	r7, #0
 8004f7e:	dd08      	ble.n	8004f92 <_strtod_l+0x792>
 8004f80:	9907      	ldr	r1, [sp, #28]
 8004f82:	463a      	mov	r2, r7
 8004f84:	4620      	mov	r0, r4
 8004f86:	f001 ff43 	bl	8006e10 <__lshift>
 8004f8a:	9007      	str	r0, [sp, #28]
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	f43f ae83 	beq.w	8004c98 <_strtod_l+0x498>
 8004f92:	f1b9 0f00 	cmp.w	r9, #0
 8004f96:	dd08      	ble.n	8004faa <_strtod_l+0x7aa>
 8004f98:	4631      	mov	r1, r6
 8004f9a:	464a      	mov	r2, r9
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f001 ff37 	bl	8006e10 <__lshift>
 8004fa2:	4606      	mov	r6, r0
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	f43f ae77 	beq.w	8004c98 <_strtod_l+0x498>
 8004faa:	9a07      	ldr	r2, [sp, #28]
 8004fac:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f001 ffb6 	bl	8006f20 <__mdiff>
 8004fb4:	4605      	mov	r5, r0
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	f43f ae6e 	beq.w	8004c98 <_strtod_l+0x498>
 8004fbc:	68c3      	ldr	r3, [r0, #12]
 8004fbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60c3      	str	r3, [r0, #12]
 8004fc4:	4631      	mov	r1, r6
 8004fc6:	f001 ff8f 	bl	8006ee8 <__mcmp>
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	da65      	bge.n	800509a <_strtod_l+0x89a>
 8004fce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fd0:	ea53 030a 	orrs.w	r3, r3, sl
 8004fd4:	f040 8087 	bne.w	80050e6 <_strtod_l+0x8e6>
 8004fd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f040 8082 	bne.w	80050e6 <_strtod_l+0x8e6>
 8004fe2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004fe6:	0d1b      	lsrs	r3, r3, #20
 8004fe8:	051b      	lsls	r3, r3, #20
 8004fea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004fee:	d97a      	bls.n	80050e6 <_strtod_l+0x8e6>
 8004ff0:	696b      	ldr	r3, [r5, #20]
 8004ff2:	b913      	cbnz	r3, 8004ffa <_strtod_l+0x7fa>
 8004ff4:	692b      	ldr	r3, [r5, #16]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	dd75      	ble.n	80050e6 <_strtod_l+0x8e6>
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	4620      	mov	r0, r4
 8005000:	f001 ff06 	bl	8006e10 <__lshift>
 8005004:	4631      	mov	r1, r6
 8005006:	4605      	mov	r5, r0
 8005008:	f001 ff6e 	bl	8006ee8 <__mcmp>
 800500c:	2800      	cmp	r0, #0
 800500e:	dd6a      	ble.n	80050e6 <_strtod_l+0x8e6>
 8005010:	9904      	ldr	r1, [sp, #16]
 8005012:	4a55      	ldr	r2, [pc, #340]	; (8005168 <_strtod_l+0x968>)
 8005014:	465b      	mov	r3, fp
 8005016:	2900      	cmp	r1, #0
 8005018:	f000 8085 	beq.w	8005126 <_strtod_l+0x926>
 800501c:	ea02 010b 	and.w	r1, r2, fp
 8005020:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005024:	dc7f      	bgt.n	8005126 <_strtod_l+0x926>
 8005026:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800502a:	f77f aeaa 	ble.w	8004d82 <_strtod_l+0x582>
 800502e:	4a4f      	ldr	r2, [pc, #316]	; (800516c <_strtod_l+0x96c>)
 8005030:	2300      	movs	r3, #0
 8005032:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8005036:	4650      	mov	r0, sl
 8005038:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800503c:	4659      	mov	r1, fp
 800503e:	f7fb fadb 	bl	80005f8 <__aeabi_dmul>
 8005042:	460b      	mov	r3, r1
 8005044:	4303      	orrs	r3, r0
 8005046:	bf08      	it	eq
 8005048:	2322      	moveq	r3, #34	; 0x22
 800504a:	4682      	mov	sl, r0
 800504c:	468b      	mov	fp, r1
 800504e:	bf08      	it	eq
 8005050:	6023      	streq	r3, [r4, #0]
 8005052:	e62b      	b.n	8004cac <_strtod_l+0x4ac>
 8005054:	f04f 32ff 	mov.w	r2, #4294967295
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	ea03 0a0a 	and.w	sl, r3, sl
 8005060:	e6de      	b.n	8004e20 <_strtod_l+0x620>
 8005062:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005066:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800506a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800506e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005072:	fa01 f308 	lsl.w	r3, r1, r8
 8005076:	930c      	str	r3, [sp, #48]	; 0x30
 8005078:	9111      	str	r1, [sp, #68]	; 0x44
 800507a:	e741      	b.n	8004f00 <_strtod_l+0x700>
 800507c:	2300      	movs	r3, #0
 800507e:	930c      	str	r3, [sp, #48]	; 0x30
 8005080:	2301      	movs	r3, #1
 8005082:	9311      	str	r3, [sp, #68]	; 0x44
 8005084:	e73c      	b.n	8004f00 <_strtod_l+0x700>
 8005086:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005088:	4642      	mov	r2, r8
 800508a:	4620      	mov	r0, r4
 800508c:	f001 fec0 	bl	8006e10 <__lshift>
 8005090:	901e      	str	r0, [sp, #120]	; 0x78
 8005092:	2800      	cmp	r0, #0
 8005094:	f47f af66 	bne.w	8004f64 <_strtod_l+0x764>
 8005098:	e5fe      	b.n	8004c98 <_strtod_l+0x498>
 800509a:	465f      	mov	r7, fp
 800509c:	d16e      	bne.n	800517c <_strtod_l+0x97c>
 800509e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80050a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80050a4:	b342      	cbz	r2, 80050f8 <_strtod_l+0x8f8>
 80050a6:	4a32      	ldr	r2, [pc, #200]	; (8005170 <_strtod_l+0x970>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d128      	bne.n	80050fe <_strtod_l+0x8fe>
 80050ac:	9b04      	ldr	r3, [sp, #16]
 80050ae:	4650      	mov	r0, sl
 80050b0:	b1eb      	cbz	r3, 80050ee <_strtod_l+0x8ee>
 80050b2:	4a2d      	ldr	r2, [pc, #180]	; (8005168 <_strtod_l+0x968>)
 80050b4:	403a      	ands	r2, r7
 80050b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80050ba:	f04f 31ff 	mov.w	r1, #4294967295
 80050be:	d819      	bhi.n	80050f4 <_strtod_l+0x8f4>
 80050c0:	0d12      	lsrs	r2, r2, #20
 80050c2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80050c6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ca:	4298      	cmp	r0, r3
 80050cc:	d117      	bne.n	80050fe <_strtod_l+0x8fe>
 80050ce:	4b29      	ldr	r3, [pc, #164]	; (8005174 <_strtod_l+0x974>)
 80050d0:	429f      	cmp	r7, r3
 80050d2:	d102      	bne.n	80050da <_strtod_l+0x8da>
 80050d4:	3001      	adds	r0, #1
 80050d6:	f43f addf 	beq.w	8004c98 <_strtod_l+0x498>
 80050da:	4b23      	ldr	r3, [pc, #140]	; (8005168 <_strtod_l+0x968>)
 80050dc:	403b      	ands	r3, r7
 80050de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80050e2:	f04f 0a00 	mov.w	sl, #0
 80050e6:	9b04      	ldr	r3, [sp, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1a0      	bne.n	800502e <_strtod_l+0x82e>
 80050ec:	e5de      	b.n	8004cac <_strtod_l+0x4ac>
 80050ee:	f04f 33ff 	mov.w	r3, #4294967295
 80050f2:	e7ea      	b.n	80050ca <_strtod_l+0x8ca>
 80050f4:	460b      	mov	r3, r1
 80050f6:	e7e8      	b.n	80050ca <_strtod_l+0x8ca>
 80050f8:	ea53 030a 	orrs.w	r3, r3, sl
 80050fc:	d088      	beq.n	8005010 <_strtod_l+0x810>
 80050fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005100:	b1db      	cbz	r3, 800513a <_strtod_l+0x93a>
 8005102:	423b      	tst	r3, r7
 8005104:	d0ef      	beq.n	80050e6 <_strtod_l+0x8e6>
 8005106:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005108:	9a04      	ldr	r2, [sp, #16]
 800510a:	4650      	mov	r0, sl
 800510c:	4659      	mov	r1, fp
 800510e:	b1c3      	cbz	r3, 8005142 <_strtod_l+0x942>
 8005110:	f7ff fb58 	bl	80047c4 <sulp>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800511c:	f7fb f8b6 	bl	800028c <__adddf3>
 8005120:	4682      	mov	sl, r0
 8005122:	468b      	mov	fp, r1
 8005124:	e7df      	b.n	80050e6 <_strtod_l+0x8e6>
 8005126:	4013      	ands	r3, r2
 8005128:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800512c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005130:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005134:	f04f 3aff 	mov.w	sl, #4294967295
 8005138:	e7d5      	b.n	80050e6 <_strtod_l+0x8e6>
 800513a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800513c:	ea13 0f0a 	tst.w	r3, sl
 8005140:	e7e0      	b.n	8005104 <_strtod_l+0x904>
 8005142:	f7ff fb3f 	bl	80047c4 <sulp>
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800514e:	f7fb f89b 	bl	8000288 <__aeabi_dsub>
 8005152:	2200      	movs	r2, #0
 8005154:	2300      	movs	r3, #0
 8005156:	4682      	mov	sl, r0
 8005158:	468b      	mov	fp, r1
 800515a:	f7fb fcb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800515e:	2800      	cmp	r0, #0
 8005160:	d0c1      	beq.n	80050e6 <_strtod_l+0x8e6>
 8005162:	e60e      	b.n	8004d82 <_strtod_l+0x582>
 8005164:	fffffc02 	.word	0xfffffc02
 8005168:	7ff00000 	.word	0x7ff00000
 800516c:	39500000 	.word	0x39500000
 8005170:	000fffff 	.word	0x000fffff
 8005174:	7fefffff 	.word	0x7fefffff
 8005178:	08008428 	.word	0x08008428
 800517c:	4631      	mov	r1, r6
 800517e:	4628      	mov	r0, r5
 8005180:	f002 f82e 	bl	80071e0 <__ratio>
 8005184:	ec59 8b10 	vmov	r8, r9, d0
 8005188:	ee10 0a10 	vmov	r0, s0
 800518c:	2200      	movs	r2, #0
 800518e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005192:	4649      	mov	r1, r9
 8005194:	f7fb fcac 	bl	8000af0 <__aeabi_dcmple>
 8005198:	2800      	cmp	r0, #0
 800519a:	d07c      	beq.n	8005296 <_strtod_l+0xa96>
 800519c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d04c      	beq.n	800523c <_strtod_l+0xa3c>
 80051a2:	4b95      	ldr	r3, [pc, #596]	; (80053f8 <_strtod_l+0xbf8>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80051aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80053f8 <_strtod_l+0xbf8>
 80051ae:	f04f 0800 	mov.w	r8, #0
 80051b2:	4b92      	ldr	r3, [pc, #584]	; (80053fc <_strtod_l+0xbfc>)
 80051b4:	403b      	ands	r3, r7
 80051b6:	9311      	str	r3, [sp, #68]	; 0x44
 80051b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80051ba:	4b91      	ldr	r3, [pc, #580]	; (8005400 <_strtod_l+0xc00>)
 80051bc:	429a      	cmp	r2, r3
 80051be:	f040 80b2 	bne.w	8005326 <_strtod_l+0xb26>
 80051c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80051c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051ca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80051ce:	ec4b ab10 	vmov	d0, sl, fp
 80051d2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80051d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80051da:	f001 ff29 	bl	8007030 <__ulp>
 80051de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051e2:	ec53 2b10 	vmov	r2, r3, d0
 80051e6:	f7fb fa07 	bl	80005f8 <__aeabi_dmul>
 80051ea:	4652      	mov	r2, sl
 80051ec:	465b      	mov	r3, fp
 80051ee:	f7fb f84d 	bl	800028c <__adddf3>
 80051f2:	460b      	mov	r3, r1
 80051f4:	4981      	ldr	r1, [pc, #516]	; (80053fc <_strtod_l+0xbfc>)
 80051f6:	4a83      	ldr	r2, [pc, #524]	; (8005404 <_strtod_l+0xc04>)
 80051f8:	4019      	ands	r1, r3
 80051fa:	4291      	cmp	r1, r2
 80051fc:	4682      	mov	sl, r0
 80051fe:	d95e      	bls.n	80052be <_strtod_l+0xabe>
 8005200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005202:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005206:	4293      	cmp	r3, r2
 8005208:	d103      	bne.n	8005212 <_strtod_l+0xa12>
 800520a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800520c:	3301      	adds	r3, #1
 800520e:	f43f ad43 	beq.w	8004c98 <_strtod_l+0x498>
 8005212:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8005410 <_strtod_l+0xc10>
 8005216:	f04f 3aff 	mov.w	sl, #4294967295
 800521a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800521c:	4620      	mov	r0, r4
 800521e:	f001 fbdb 	bl	80069d8 <_Bfree>
 8005222:	9907      	ldr	r1, [sp, #28]
 8005224:	4620      	mov	r0, r4
 8005226:	f001 fbd7 	bl	80069d8 <_Bfree>
 800522a:	4631      	mov	r1, r6
 800522c:	4620      	mov	r0, r4
 800522e:	f001 fbd3 	bl	80069d8 <_Bfree>
 8005232:	4629      	mov	r1, r5
 8005234:	4620      	mov	r0, r4
 8005236:	f001 fbcf 	bl	80069d8 <_Bfree>
 800523a:	e613      	b.n	8004e64 <_strtod_l+0x664>
 800523c:	f1ba 0f00 	cmp.w	sl, #0
 8005240:	d11b      	bne.n	800527a <_strtod_l+0xa7a>
 8005242:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005246:	b9f3      	cbnz	r3, 8005286 <_strtod_l+0xa86>
 8005248:	4b6b      	ldr	r3, [pc, #428]	; (80053f8 <_strtod_l+0xbf8>)
 800524a:	2200      	movs	r2, #0
 800524c:	4640      	mov	r0, r8
 800524e:	4649      	mov	r1, r9
 8005250:	f7fb fc44 	bl	8000adc <__aeabi_dcmplt>
 8005254:	b9d0      	cbnz	r0, 800528c <_strtod_l+0xa8c>
 8005256:	4640      	mov	r0, r8
 8005258:	4649      	mov	r1, r9
 800525a:	4b6b      	ldr	r3, [pc, #428]	; (8005408 <_strtod_l+0xc08>)
 800525c:	2200      	movs	r2, #0
 800525e:	f7fb f9cb 	bl	80005f8 <__aeabi_dmul>
 8005262:	4680      	mov	r8, r0
 8005264:	4689      	mov	r9, r1
 8005266:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800526a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800526e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005270:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8005274:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005278:	e79b      	b.n	80051b2 <_strtod_l+0x9b2>
 800527a:	f1ba 0f01 	cmp.w	sl, #1
 800527e:	d102      	bne.n	8005286 <_strtod_l+0xa86>
 8005280:	2f00      	cmp	r7, #0
 8005282:	f43f ad7e 	beq.w	8004d82 <_strtod_l+0x582>
 8005286:	4b61      	ldr	r3, [pc, #388]	; (800540c <_strtod_l+0xc0c>)
 8005288:	2200      	movs	r2, #0
 800528a:	e78c      	b.n	80051a6 <_strtod_l+0x9a6>
 800528c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005408 <_strtod_l+0xc08>
 8005290:	f04f 0800 	mov.w	r8, #0
 8005294:	e7e7      	b.n	8005266 <_strtod_l+0xa66>
 8005296:	4b5c      	ldr	r3, [pc, #368]	; (8005408 <_strtod_l+0xc08>)
 8005298:	4640      	mov	r0, r8
 800529a:	4649      	mov	r1, r9
 800529c:	2200      	movs	r2, #0
 800529e:	f7fb f9ab 	bl	80005f8 <__aeabi_dmul>
 80052a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052a4:	4680      	mov	r8, r0
 80052a6:	4689      	mov	r9, r1
 80052a8:	b933      	cbnz	r3, 80052b8 <_strtod_l+0xab8>
 80052aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052ae:	9012      	str	r0, [sp, #72]	; 0x48
 80052b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80052b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80052b6:	e7dd      	b.n	8005274 <_strtod_l+0xa74>
 80052b8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80052bc:	e7f9      	b.n	80052b2 <_strtod_l+0xab2>
 80052be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80052c2:	9b04      	ldr	r3, [sp, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1a8      	bne.n	800521a <_strtod_l+0xa1a>
 80052c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80052cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80052ce:	0d1b      	lsrs	r3, r3, #20
 80052d0:	051b      	lsls	r3, r3, #20
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d1a1      	bne.n	800521a <_strtod_l+0xa1a>
 80052d6:	4640      	mov	r0, r8
 80052d8:	4649      	mov	r1, r9
 80052da:	f7fb fcd5 	bl	8000c88 <__aeabi_d2lz>
 80052de:	f7fb f95d 	bl	800059c <__aeabi_l2d>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4640      	mov	r0, r8
 80052e8:	4649      	mov	r1, r9
 80052ea:	f7fa ffcd 	bl	8000288 <__aeabi_dsub>
 80052ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80052f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80052f4:	ea43 030a 	orr.w	r3, r3, sl
 80052f8:	4313      	orrs	r3, r2
 80052fa:	4680      	mov	r8, r0
 80052fc:	4689      	mov	r9, r1
 80052fe:	d053      	beq.n	80053a8 <_strtod_l+0xba8>
 8005300:	a335      	add	r3, pc, #212	; (adr r3, 80053d8 <_strtod_l+0xbd8>)
 8005302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005306:	f7fb fbe9 	bl	8000adc <__aeabi_dcmplt>
 800530a:	2800      	cmp	r0, #0
 800530c:	f47f acce 	bne.w	8004cac <_strtod_l+0x4ac>
 8005310:	a333      	add	r3, pc, #204	; (adr r3, 80053e0 <_strtod_l+0xbe0>)
 8005312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005316:	4640      	mov	r0, r8
 8005318:	4649      	mov	r1, r9
 800531a:	f7fb fbfd 	bl	8000b18 <__aeabi_dcmpgt>
 800531e:	2800      	cmp	r0, #0
 8005320:	f43f af7b 	beq.w	800521a <_strtod_l+0xa1a>
 8005324:	e4c2      	b.n	8004cac <_strtod_l+0x4ac>
 8005326:	9b04      	ldr	r3, [sp, #16]
 8005328:	b333      	cbz	r3, 8005378 <_strtod_l+0xb78>
 800532a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800532c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005330:	d822      	bhi.n	8005378 <_strtod_l+0xb78>
 8005332:	a32d      	add	r3, pc, #180	; (adr r3, 80053e8 <_strtod_l+0xbe8>)
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	4640      	mov	r0, r8
 800533a:	4649      	mov	r1, r9
 800533c:	f7fb fbd8 	bl	8000af0 <__aeabi_dcmple>
 8005340:	b1a0      	cbz	r0, 800536c <_strtod_l+0xb6c>
 8005342:	4649      	mov	r1, r9
 8005344:	4640      	mov	r0, r8
 8005346:	f7fb fc2f 	bl	8000ba8 <__aeabi_d2uiz>
 800534a:	2801      	cmp	r0, #1
 800534c:	bf38      	it	cc
 800534e:	2001      	movcc	r0, #1
 8005350:	f7fb f8d8 	bl	8000504 <__aeabi_ui2d>
 8005354:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005356:	4680      	mov	r8, r0
 8005358:	4689      	mov	r9, r1
 800535a:	bb13      	cbnz	r3, 80053a2 <_strtod_l+0xba2>
 800535c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005360:	9014      	str	r0, [sp, #80]	; 0x50
 8005362:	9315      	str	r3, [sp, #84]	; 0x54
 8005364:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005368:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800536c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800536e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005370:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005374:	1a9b      	subs	r3, r3, r2
 8005376:	930d      	str	r3, [sp, #52]	; 0x34
 8005378:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800537c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005380:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005384:	f001 fe54 	bl	8007030 <__ulp>
 8005388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800538c:	ec53 2b10 	vmov	r2, r3, d0
 8005390:	f7fb f932 	bl	80005f8 <__aeabi_dmul>
 8005394:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005398:	f7fa ff78 	bl	800028c <__adddf3>
 800539c:	4682      	mov	sl, r0
 800539e:	468b      	mov	fp, r1
 80053a0:	e78f      	b.n	80052c2 <_strtod_l+0xac2>
 80053a2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80053a6:	e7dd      	b.n	8005364 <_strtod_l+0xb64>
 80053a8:	a311      	add	r3, pc, #68	; (adr r3, 80053f0 <_strtod_l+0xbf0>)
 80053aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ae:	f7fb fb95 	bl	8000adc <__aeabi_dcmplt>
 80053b2:	e7b4      	b.n	800531e <_strtod_l+0xb1e>
 80053b4:	2300      	movs	r3, #0
 80053b6:	930e      	str	r3, [sp, #56]	; 0x38
 80053b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80053ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	f7ff ba65 	b.w	800488c <_strtod_l+0x8c>
 80053c2:	2b65      	cmp	r3, #101	; 0x65
 80053c4:	f43f ab5d 	beq.w	8004a82 <_strtod_l+0x282>
 80053c8:	2b45      	cmp	r3, #69	; 0x45
 80053ca:	f43f ab5a 	beq.w	8004a82 <_strtod_l+0x282>
 80053ce:	2201      	movs	r2, #1
 80053d0:	f7ff bb92 	b.w	8004af8 <_strtod_l+0x2f8>
 80053d4:	f3af 8000 	nop.w
 80053d8:	94a03595 	.word	0x94a03595
 80053dc:	3fdfffff 	.word	0x3fdfffff
 80053e0:	35afe535 	.word	0x35afe535
 80053e4:	3fe00000 	.word	0x3fe00000
 80053e8:	ffc00000 	.word	0xffc00000
 80053ec:	41dfffff 	.word	0x41dfffff
 80053f0:	94a03595 	.word	0x94a03595
 80053f4:	3fcfffff 	.word	0x3fcfffff
 80053f8:	3ff00000 	.word	0x3ff00000
 80053fc:	7ff00000 	.word	0x7ff00000
 8005400:	7fe00000 	.word	0x7fe00000
 8005404:	7c9fffff 	.word	0x7c9fffff
 8005408:	3fe00000 	.word	0x3fe00000
 800540c:	bff00000 	.word	0xbff00000
 8005410:	7fefffff 	.word	0x7fefffff

08005414 <_strtod_r>:
 8005414:	4b01      	ldr	r3, [pc, #4]	; (800541c <_strtod_r+0x8>)
 8005416:	f7ff b9f3 	b.w	8004800 <_strtod_l>
 800541a:	bf00      	nop
 800541c:	20000070 	.word	0x20000070

08005420 <_strtol_l.isra.0>:
 8005420:	2b01      	cmp	r3, #1
 8005422:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005426:	d001      	beq.n	800542c <_strtol_l.isra.0+0xc>
 8005428:	2b24      	cmp	r3, #36	; 0x24
 800542a:	d906      	bls.n	800543a <_strtol_l.isra.0+0x1a>
 800542c:	f7fe faf8 	bl	8003a20 <__errno>
 8005430:	2316      	movs	r3, #22
 8005432:	6003      	str	r3, [r0, #0]
 8005434:	2000      	movs	r0, #0
 8005436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800543a:	4f3a      	ldr	r7, [pc, #232]	; (8005524 <_strtol_l.isra.0+0x104>)
 800543c:	468e      	mov	lr, r1
 800543e:	4676      	mov	r6, lr
 8005440:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005444:	5de5      	ldrb	r5, [r4, r7]
 8005446:	f015 0508 	ands.w	r5, r5, #8
 800544a:	d1f8      	bne.n	800543e <_strtol_l.isra.0+0x1e>
 800544c:	2c2d      	cmp	r4, #45	; 0x2d
 800544e:	d134      	bne.n	80054ba <_strtol_l.isra.0+0x9a>
 8005450:	f89e 4000 	ldrb.w	r4, [lr]
 8005454:	f04f 0801 	mov.w	r8, #1
 8005458:	f106 0e02 	add.w	lr, r6, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d05c      	beq.n	800551a <_strtol_l.isra.0+0xfa>
 8005460:	2b10      	cmp	r3, #16
 8005462:	d10c      	bne.n	800547e <_strtol_l.isra.0+0x5e>
 8005464:	2c30      	cmp	r4, #48	; 0x30
 8005466:	d10a      	bne.n	800547e <_strtol_l.isra.0+0x5e>
 8005468:	f89e 4000 	ldrb.w	r4, [lr]
 800546c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005470:	2c58      	cmp	r4, #88	; 0x58
 8005472:	d14d      	bne.n	8005510 <_strtol_l.isra.0+0xf0>
 8005474:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005478:	2310      	movs	r3, #16
 800547a:	f10e 0e02 	add.w	lr, lr, #2
 800547e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005482:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005486:	2600      	movs	r6, #0
 8005488:	fbbc f9f3 	udiv	r9, ip, r3
 800548c:	4635      	mov	r5, r6
 800548e:	fb03 ca19 	mls	sl, r3, r9, ip
 8005492:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005496:	2f09      	cmp	r7, #9
 8005498:	d818      	bhi.n	80054cc <_strtol_l.isra.0+0xac>
 800549a:	463c      	mov	r4, r7
 800549c:	42a3      	cmp	r3, r4
 800549e:	dd24      	ble.n	80054ea <_strtol_l.isra.0+0xca>
 80054a0:	2e00      	cmp	r6, #0
 80054a2:	db1f      	blt.n	80054e4 <_strtol_l.isra.0+0xc4>
 80054a4:	45a9      	cmp	r9, r5
 80054a6:	d31d      	bcc.n	80054e4 <_strtol_l.isra.0+0xc4>
 80054a8:	d101      	bne.n	80054ae <_strtol_l.isra.0+0x8e>
 80054aa:	45a2      	cmp	sl, r4
 80054ac:	db1a      	blt.n	80054e4 <_strtol_l.isra.0+0xc4>
 80054ae:	fb05 4503 	mla	r5, r5, r3, r4
 80054b2:	2601      	movs	r6, #1
 80054b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80054b8:	e7eb      	b.n	8005492 <_strtol_l.isra.0+0x72>
 80054ba:	2c2b      	cmp	r4, #43	; 0x2b
 80054bc:	bf08      	it	eq
 80054be:	f89e 4000 	ldrbeq.w	r4, [lr]
 80054c2:	46a8      	mov	r8, r5
 80054c4:	bf08      	it	eq
 80054c6:	f106 0e02 	addeq.w	lr, r6, #2
 80054ca:	e7c7      	b.n	800545c <_strtol_l.isra.0+0x3c>
 80054cc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80054d0:	2f19      	cmp	r7, #25
 80054d2:	d801      	bhi.n	80054d8 <_strtol_l.isra.0+0xb8>
 80054d4:	3c37      	subs	r4, #55	; 0x37
 80054d6:	e7e1      	b.n	800549c <_strtol_l.isra.0+0x7c>
 80054d8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80054dc:	2f19      	cmp	r7, #25
 80054de:	d804      	bhi.n	80054ea <_strtol_l.isra.0+0xca>
 80054e0:	3c57      	subs	r4, #87	; 0x57
 80054e2:	e7db      	b.n	800549c <_strtol_l.isra.0+0x7c>
 80054e4:	f04f 36ff 	mov.w	r6, #4294967295
 80054e8:	e7e4      	b.n	80054b4 <_strtol_l.isra.0+0x94>
 80054ea:	2e00      	cmp	r6, #0
 80054ec:	da05      	bge.n	80054fa <_strtol_l.isra.0+0xda>
 80054ee:	2322      	movs	r3, #34	; 0x22
 80054f0:	6003      	str	r3, [r0, #0]
 80054f2:	4665      	mov	r5, ip
 80054f4:	b942      	cbnz	r2, 8005508 <_strtol_l.isra.0+0xe8>
 80054f6:	4628      	mov	r0, r5
 80054f8:	e79d      	b.n	8005436 <_strtol_l.isra.0+0x16>
 80054fa:	f1b8 0f00 	cmp.w	r8, #0
 80054fe:	d000      	beq.n	8005502 <_strtol_l.isra.0+0xe2>
 8005500:	426d      	negs	r5, r5
 8005502:	2a00      	cmp	r2, #0
 8005504:	d0f7      	beq.n	80054f6 <_strtol_l.isra.0+0xd6>
 8005506:	b10e      	cbz	r6, 800550c <_strtol_l.isra.0+0xec>
 8005508:	f10e 31ff 	add.w	r1, lr, #4294967295
 800550c:	6011      	str	r1, [r2, #0]
 800550e:	e7f2      	b.n	80054f6 <_strtol_l.isra.0+0xd6>
 8005510:	2430      	movs	r4, #48	; 0x30
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1b3      	bne.n	800547e <_strtol_l.isra.0+0x5e>
 8005516:	2308      	movs	r3, #8
 8005518:	e7b1      	b.n	800547e <_strtol_l.isra.0+0x5e>
 800551a:	2c30      	cmp	r4, #48	; 0x30
 800551c:	d0a4      	beq.n	8005468 <_strtol_l.isra.0+0x48>
 800551e:	230a      	movs	r3, #10
 8005520:	e7ad      	b.n	800547e <_strtol_l.isra.0+0x5e>
 8005522:	bf00      	nop
 8005524:	08008451 	.word	0x08008451

08005528 <_strtol_r>:
 8005528:	f7ff bf7a 	b.w	8005420 <_strtol_l.isra.0>

0800552c <quorem>:
 800552c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005530:	6903      	ldr	r3, [r0, #16]
 8005532:	690c      	ldr	r4, [r1, #16]
 8005534:	42a3      	cmp	r3, r4
 8005536:	4607      	mov	r7, r0
 8005538:	f2c0 8081 	blt.w	800563e <quorem+0x112>
 800553c:	3c01      	subs	r4, #1
 800553e:	f101 0814 	add.w	r8, r1, #20
 8005542:	f100 0514 	add.w	r5, r0, #20
 8005546:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800554a:	9301      	str	r3, [sp, #4]
 800554c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005550:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005554:	3301      	adds	r3, #1
 8005556:	429a      	cmp	r2, r3
 8005558:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800555c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005560:	fbb2 f6f3 	udiv	r6, r2, r3
 8005564:	d331      	bcc.n	80055ca <quorem+0x9e>
 8005566:	f04f 0e00 	mov.w	lr, #0
 800556a:	4640      	mov	r0, r8
 800556c:	46ac      	mov	ip, r5
 800556e:	46f2      	mov	sl, lr
 8005570:	f850 2b04 	ldr.w	r2, [r0], #4
 8005574:	b293      	uxth	r3, r2
 8005576:	fb06 e303 	mla	r3, r6, r3, lr
 800557a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800557e:	b29b      	uxth	r3, r3
 8005580:	ebaa 0303 	sub.w	r3, sl, r3
 8005584:	0c12      	lsrs	r2, r2, #16
 8005586:	f8dc a000 	ldr.w	sl, [ip]
 800558a:	fb06 e202 	mla	r2, r6, r2, lr
 800558e:	fa13 f38a 	uxtah	r3, r3, sl
 8005592:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005596:	fa1f fa82 	uxth.w	sl, r2
 800559a:	f8dc 2000 	ldr.w	r2, [ip]
 800559e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80055a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055ac:	4581      	cmp	r9, r0
 80055ae:	f84c 3b04 	str.w	r3, [ip], #4
 80055b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80055b6:	d2db      	bcs.n	8005570 <quorem+0x44>
 80055b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80055bc:	b92b      	cbnz	r3, 80055ca <quorem+0x9e>
 80055be:	9b01      	ldr	r3, [sp, #4]
 80055c0:	3b04      	subs	r3, #4
 80055c2:	429d      	cmp	r5, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	d32e      	bcc.n	8005626 <quorem+0xfa>
 80055c8:	613c      	str	r4, [r7, #16]
 80055ca:	4638      	mov	r0, r7
 80055cc:	f001 fc8c 	bl	8006ee8 <__mcmp>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	db24      	blt.n	800561e <quorem+0xf2>
 80055d4:	3601      	adds	r6, #1
 80055d6:	4628      	mov	r0, r5
 80055d8:	f04f 0c00 	mov.w	ip, #0
 80055dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80055e0:	f8d0 e000 	ldr.w	lr, [r0]
 80055e4:	b293      	uxth	r3, r2
 80055e6:	ebac 0303 	sub.w	r3, ip, r3
 80055ea:	0c12      	lsrs	r2, r2, #16
 80055ec:	fa13 f38e 	uxtah	r3, r3, lr
 80055f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80055f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055fe:	45c1      	cmp	r9, r8
 8005600:	f840 3b04 	str.w	r3, [r0], #4
 8005604:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005608:	d2e8      	bcs.n	80055dc <quorem+0xb0>
 800560a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800560e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005612:	b922      	cbnz	r2, 800561e <quorem+0xf2>
 8005614:	3b04      	subs	r3, #4
 8005616:	429d      	cmp	r5, r3
 8005618:	461a      	mov	r2, r3
 800561a:	d30a      	bcc.n	8005632 <quorem+0x106>
 800561c:	613c      	str	r4, [r7, #16]
 800561e:	4630      	mov	r0, r6
 8005620:	b003      	add	sp, #12
 8005622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005626:	6812      	ldr	r2, [r2, #0]
 8005628:	3b04      	subs	r3, #4
 800562a:	2a00      	cmp	r2, #0
 800562c:	d1cc      	bne.n	80055c8 <quorem+0x9c>
 800562e:	3c01      	subs	r4, #1
 8005630:	e7c7      	b.n	80055c2 <quorem+0x96>
 8005632:	6812      	ldr	r2, [r2, #0]
 8005634:	3b04      	subs	r3, #4
 8005636:	2a00      	cmp	r2, #0
 8005638:	d1f0      	bne.n	800561c <quorem+0xf0>
 800563a:	3c01      	subs	r4, #1
 800563c:	e7eb      	b.n	8005616 <quorem+0xea>
 800563e:	2000      	movs	r0, #0
 8005640:	e7ee      	b.n	8005620 <quorem+0xf4>
 8005642:	0000      	movs	r0, r0
 8005644:	0000      	movs	r0, r0
	...

08005648 <_dtoa_r>:
 8005648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564c:	ed2d 8b02 	vpush	{d8}
 8005650:	ec57 6b10 	vmov	r6, r7, d0
 8005654:	b095      	sub	sp, #84	; 0x54
 8005656:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005658:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800565c:	9105      	str	r1, [sp, #20]
 800565e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005662:	4604      	mov	r4, r0
 8005664:	9209      	str	r2, [sp, #36]	; 0x24
 8005666:	930f      	str	r3, [sp, #60]	; 0x3c
 8005668:	b975      	cbnz	r5, 8005688 <_dtoa_r+0x40>
 800566a:	2010      	movs	r0, #16
 800566c:	f001 f94c 	bl	8006908 <malloc>
 8005670:	4602      	mov	r2, r0
 8005672:	6260      	str	r0, [r4, #36]	; 0x24
 8005674:	b920      	cbnz	r0, 8005680 <_dtoa_r+0x38>
 8005676:	4bb2      	ldr	r3, [pc, #712]	; (8005940 <_dtoa_r+0x2f8>)
 8005678:	21ea      	movs	r1, #234	; 0xea
 800567a:	48b2      	ldr	r0, [pc, #712]	; (8005944 <_dtoa_r+0x2fc>)
 800567c:	f002 f874 	bl	8007768 <__assert_func>
 8005680:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005684:	6005      	str	r5, [r0, #0]
 8005686:	60c5      	str	r5, [r0, #12]
 8005688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800568a:	6819      	ldr	r1, [r3, #0]
 800568c:	b151      	cbz	r1, 80056a4 <_dtoa_r+0x5c>
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	604a      	str	r2, [r1, #4]
 8005692:	2301      	movs	r3, #1
 8005694:	4093      	lsls	r3, r2
 8005696:	608b      	str	r3, [r1, #8]
 8005698:	4620      	mov	r0, r4
 800569a:	f001 f99d 	bl	80069d8 <_Bfree>
 800569e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	1e3b      	subs	r3, r7, #0
 80056a6:	bfb9      	ittee	lt
 80056a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80056ac:	9303      	strlt	r3, [sp, #12]
 80056ae:	2300      	movge	r3, #0
 80056b0:	f8c8 3000 	strge.w	r3, [r8]
 80056b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80056b8:	4ba3      	ldr	r3, [pc, #652]	; (8005948 <_dtoa_r+0x300>)
 80056ba:	bfbc      	itt	lt
 80056bc:	2201      	movlt	r2, #1
 80056be:	f8c8 2000 	strlt.w	r2, [r8]
 80056c2:	ea33 0309 	bics.w	r3, r3, r9
 80056c6:	d11b      	bne.n	8005700 <_dtoa_r+0xb8>
 80056c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80056ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80056d4:	4333      	orrs	r3, r6
 80056d6:	f000 857a 	beq.w	80061ce <_dtoa_r+0xb86>
 80056da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056dc:	b963      	cbnz	r3, 80056f8 <_dtoa_r+0xb0>
 80056de:	4b9b      	ldr	r3, [pc, #620]	; (800594c <_dtoa_r+0x304>)
 80056e0:	e024      	b.n	800572c <_dtoa_r+0xe4>
 80056e2:	4b9b      	ldr	r3, [pc, #620]	; (8005950 <_dtoa_r+0x308>)
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	3308      	adds	r3, #8
 80056e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056ea:	6013      	str	r3, [r2, #0]
 80056ec:	9800      	ldr	r0, [sp, #0]
 80056ee:	b015      	add	sp, #84	; 0x54
 80056f0:	ecbd 8b02 	vpop	{d8}
 80056f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f8:	4b94      	ldr	r3, [pc, #592]	; (800594c <_dtoa_r+0x304>)
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	3303      	adds	r3, #3
 80056fe:	e7f3      	b.n	80056e8 <_dtoa_r+0xa0>
 8005700:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005704:	2200      	movs	r2, #0
 8005706:	ec51 0b17 	vmov	r0, r1, d7
 800570a:	2300      	movs	r3, #0
 800570c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005710:	f7fb f9da 	bl	8000ac8 <__aeabi_dcmpeq>
 8005714:	4680      	mov	r8, r0
 8005716:	b158      	cbz	r0, 8005730 <_dtoa_r+0xe8>
 8005718:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800571a:	2301      	movs	r3, #1
 800571c:	6013      	str	r3, [r2, #0]
 800571e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 8551 	beq.w	80061c8 <_dtoa_r+0xb80>
 8005726:	488b      	ldr	r0, [pc, #556]	; (8005954 <_dtoa_r+0x30c>)
 8005728:	6018      	str	r0, [r3, #0]
 800572a:	1e43      	subs	r3, r0, #1
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	e7dd      	b.n	80056ec <_dtoa_r+0xa4>
 8005730:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005734:	aa12      	add	r2, sp, #72	; 0x48
 8005736:	a913      	add	r1, sp, #76	; 0x4c
 8005738:	4620      	mov	r0, r4
 800573a:	f001 fcf5 	bl	8007128 <__d2b>
 800573e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005742:	4683      	mov	fp, r0
 8005744:	2d00      	cmp	r5, #0
 8005746:	d07c      	beq.n	8005842 <_dtoa_r+0x1fa>
 8005748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800574a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800574e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005752:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005756:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800575a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800575e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005762:	4b7d      	ldr	r3, [pc, #500]	; (8005958 <_dtoa_r+0x310>)
 8005764:	2200      	movs	r2, #0
 8005766:	4630      	mov	r0, r6
 8005768:	4639      	mov	r1, r7
 800576a:	f7fa fd8d 	bl	8000288 <__aeabi_dsub>
 800576e:	a36e      	add	r3, pc, #440	; (adr r3, 8005928 <_dtoa_r+0x2e0>)
 8005770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005774:	f7fa ff40 	bl	80005f8 <__aeabi_dmul>
 8005778:	a36d      	add	r3, pc, #436	; (adr r3, 8005930 <_dtoa_r+0x2e8>)
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	f7fa fd85 	bl	800028c <__adddf3>
 8005782:	4606      	mov	r6, r0
 8005784:	4628      	mov	r0, r5
 8005786:	460f      	mov	r7, r1
 8005788:	f7fa fecc 	bl	8000524 <__aeabi_i2d>
 800578c:	a36a      	add	r3, pc, #424	; (adr r3, 8005938 <_dtoa_r+0x2f0>)
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f7fa ff31 	bl	80005f8 <__aeabi_dmul>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4630      	mov	r0, r6
 800579c:	4639      	mov	r1, r7
 800579e:	f7fa fd75 	bl	800028c <__adddf3>
 80057a2:	4606      	mov	r6, r0
 80057a4:	460f      	mov	r7, r1
 80057a6:	f7fb f9d7 	bl	8000b58 <__aeabi_d2iz>
 80057aa:	2200      	movs	r2, #0
 80057ac:	4682      	mov	sl, r0
 80057ae:	2300      	movs	r3, #0
 80057b0:	4630      	mov	r0, r6
 80057b2:	4639      	mov	r1, r7
 80057b4:	f7fb f992 	bl	8000adc <__aeabi_dcmplt>
 80057b8:	b148      	cbz	r0, 80057ce <_dtoa_r+0x186>
 80057ba:	4650      	mov	r0, sl
 80057bc:	f7fa feb2 	bl	8000524 <__aeabi_i2d>
 80057c0:	4632      	mov	r2, r6
 80057c2:	463b      	mov	r3, r7
 80057c4:	f7fb f980 	bl	8000ac8 <__aeabi_dcmpeq>
 80057c8:	b908      	cbnz	r0, 80057ce <_dtoa_r+0x186>
 80057ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057ce:	f1ba 0f16 	cmp.w	sl, #22
 80057d2:	d854      	bhi.n	800587e <_dtoa_r+0x236>
 80057d4:	4b61      	ldr	r3, [pc, #388]	; (800595c <_dtoa_r+0x314>)
 80057d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80057da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057e2:	f7fb f97b 	bl	8000adc <__aeabi_dcmplt>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d04b      	beq.n	8005882 <_dtoa_r+0x23a>
 80057ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057ee:	2300      	movs	r3, #0
 80057f0:	930e      	str	r3, [sp, #56]	; 0x38
 80057f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057f4:	1b5d      	subs	r5, r3, r5
 80057f6:	1e6b      	subs	r3, r5, #1
 80057f8:	9304      	str	r3, [sp, #16]
 80057fa:	bf43      	ittte	mi
 80057fc:	2300      	movmi	r3, #0
 80057fe:	f1c5 0801 	rsbmi	r8, r5, #1
 8005802:	9304      	strmi	r3, [sp, #16]
 8005804:	f04f 0800 	movpl.w	r8, #0
 8005808:	f1ba 0f00 	cmp.w	sl, #0
 800580c:	db3b      	blt.n	8005886 <_dtoa_r+0x23e>
 800580e:	9b04      	ldr	r3, [sp, #16]
 8005810:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005814:	4453      	add	r3, sl
 8005816:	9304      	str	r3, [sp, #16]
 8005818:	2300      	movs	r3, #0
 800581a:	9306      	str	r3, [sp, #24]
 800581c:	9b05      	ldr	r3, [sp, #20]
 800581e:	2b09      	cmp	r3, #9
 8005820:	d869      	bhi.n	80058f6 <_dtoa_r+0x2ae>
 8005822:	2b05      	cmp	r3, #5
 8005824:	bfc4      	itt	gt
 8005826:	3b04      	subgt	r3, #4
 8005828:	9305      	strgt	r3, [sp, #20]
 800582a:	9b05      	ldr	r3, [sp, #20]
 800582c:	f1a3 0302 	sub.w	r3, r3, #2
 8005830:	bfcc      	ite	gt
 8005832:	2500      	movgt	r5, #0
 8005834:	2501      	movle	r5, #1
 8005836:	2b03      	cmp	r3, #3
 8005838:	d869      	bhi.n	800590e <_dtoa_r+0x2c6>
 800583a:	e8df f003 	tbb	[pc, r3]
 800583e:	4e2c      	.short	0x4e2c
 8005840:	5a4c      	.short	0x5a4c
 8005842:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005846:	441d      	add	r5, r3
 8005848:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800584c:	2b20      	cmp	r3, #32
 800584e:	bfc1      	itttt	gt
 8005850:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005854:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005858:	fa09 f303 	lslgt.w	r3, r9, r3
 800585c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005860:	bfda      	itte	le
 8005862:	f1c3 0320 	rsble	r3, r3, #32
 8005866:	fa06 f003 	lslle.w	r0, r6, r3
 800586a:	4318      	orrgt	r0, r3
 800586c:	f7fa fe4a 	bl	8000504 <__aeabi_ui2d>
 8005870:	2301      	movs	r3, #1
 8005872:	4606      	mov	r6, r0
 8005874:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005878:	3d01      	subs	r5, #1
 800587a:	9310      	str	r3, [sp, #64]	; 0x40
 800587c:	e771      	b.n	8005762 <_dtoa_r+0x11a>
 800587e:	2301      	movs	r3, #1
 8005880:	e7b6      	b.n	80057f0 <_dtoa_r+0x1a8>
 8005882:	900e      	str	r0, [sp, #56]	; 0x38
 8005884:	e7b5      	b.n	80057f2 <_dtoa_r+0x1aa>
 8005886:	f1ca 0300 	rsb	r3, sl, #0
 800588a:	9306      	str	r3, [sp, #24]
 800588c:	2300      	movs	r3, #0
 800588e:	eba8 080a 	sub.w	r8, r8, sl
 8005892:	930d      	str	r3, [sp, #52]	; 0x34
 8005894:	e7c2      	b.n	800581c <_dtoa_r+0x1d4>
 8005896:	2300      	movs	r3, #0
 8005898:	9308      	str	r3, [sp, #32]
 800589a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800589c:	2b00      	cmp	r3, #0
 800589e:	dc39      	bgt.n	8005914 <_dtoa_r+0x2cc>
 80058a0:	f04f 0901 	mov.w	r9, #1
 80058a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80058a8:	464b      	mov	r3, r9
 80058aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80058ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80058b0:	2200      	movs	r2, #0
 80058b2:	6042      	str	r2, [r0, #4]
 80058b4:	2204      	movs	r2, #4
 80058b6:	f102 0614 	add.w	r6, r2, #20
 80058ba:	429e      	cmp	r6, r3
 80058bc:	6841      	ldr	r1, [r0, #4]
 80058be:	d92f      	bls.n	8005920 <_dtoa_r+0x2d8>
 80058c0:	4620      	mov	r0, r4
 80058c2:	f001 f849 	bl	8006958 <_Balloc>
 80058c6:	9000      	str	r0, [sp, #0]
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d14b      	bne.n	8005964 <_dtoa_r+0x31c>
 80058cc:	4b24      	ldr	r3, [pc, #144]	; (8005960 <_dtoa_r+0x318>)
 80058ce:	4602      	mov	r2, r0
 80058d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80058d4:	e6d1      	b.n	800567a <_dtoa_r+0x32>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e7de      	b.n	8005898 <_dtoa_r+0x250>
 80058da:	2300      	movs	r3, #0
 80058dc:	9308      	str	r3, [sp, #32]
 80058de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058e0:	eb0a 0903 	add.w	r9, sl, r3
 80058e4:	f109 0301 	add.w	r3, r9, #1
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	9301      	str	r3, [sp, #4]
 80058ec:	bfb8      	it	lt
 80058ee:	2301      	movlt	r3, #1
 80058f0:	e7dd      	b.n	80058ae <_dtoa_r+0x266>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e7f2      	b.n	80058dc <_dtoa_r+0x294>
 80058f6:	2501      	movs	r5, #1
 80058f8:	2300      	movs	r3, #0
 80058fa:	9305      	str	r3, [sp, #20]
 80058fc:	9508      	str	r5, [sp, #32]
 80058fe:	f04f 39ff 	mov.w	r9, #4294967295
 8005902:	2200      	movs	r2, #0
 8005904:	f8cd 9004 	str.w	r9, [sp, #4]
 8005908:	2312      	movs	r3, #18
 800590a:	9209      	str	r2, [sp, #36]	; 0x24
 800590c:	e7cf      	b.n	80058ae <_dtoa_r+0x266>
 800590e:	2301      	movs	r3, #1
 8005910:	9308      	str	r3, [sp, #32]
 8005912:	e7f4      	b.n	80058fe <_dtoa_r+0x2b6>
 8005914:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005918:	f8cd 9004 	str.w	r9, [sp, #4]
 800591c:	464b      	mov	r3, r9
 800591e:	e7c6      	b.n	80058ae <_dtoa_r+0x266>
 8005920:	3101      	adds	r1, #1
 8005922:	6041      	str	r1, [r0, #4]
 8005924:	0052      	lsls	r2, r2, #1
 8005926:	e7c6      	b.n	80058b6 <_dtoa_r+0x26e>
 8005928:	636f4361 	.word	0x636f4361
 800592c:	3fd287a7 	.word	0x3fd287a7
 8005930:	8b60c8b3 	.word	0x8b60c8b3
 8005934:	3fc68a28 	.word	0x3fc68a28
 8005938:	509f79fb 	.word	0x509f79fb
 800593c:	3fd34413 	.word	0x3fd34413
 8005940:	0800855e 	.word	0x0800855e
 8005944:	08008575 	.word	0x08008575
 8005948:	7ff00000 	.word	0x7ff00000
 800594c:	0800855a 	.word	0x0800855a
 8005950:	08008551 	.word	0x08008551
 8005954:	080083d5 	.word	0x080083d5
 8005958:	3ff80000 	.word	0x3ff80000
 800595c:	080086f0 	.word	0x080086f0
 8005960:	080085d4 	.word	0x080085d4
 8005964:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005966:	9a00      	ldr	r2, [sp, #0]
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	9b01      	ldr	r3, [sp, #4]
 800596c:	2b0e      	cmp	r3, #14
 800596e:	f200 80ad 	bhi.w	8005acc <_dtoa_r+0x484>
 8005972:	2d00      	cmp	r5, #0
 8005974:	f000 80aa 	beq.w	8005acc <_dtoa_r+0x484>
 8005978:	f1ba 0f00 	cmp.w	sl, #0
 800597c:	dd36      	ble.n	80059ec <_dtoa_r+0x3a4>
 800597e:	4ac3      	ldr	r2, [pc, #780]	; (8005c8c <_dtoa_r+0x644>)
 8005980:	f00a 030f 	and.w	r3, sl, #15
 8005984:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005988:	ed93 7b00 	vldr	d7, [r3]
 800598c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005990:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005994:	eeb0 8a47 	vmov.f32	s16, s14
 8005998:	eef0 8a67 	vmov.f32	s17, s15
 800599c:	d016      	beq.n	80059cc <_dtoa_r+0x384>
 800599e:	4bbc      	ldr	r3, [pc, #752]	; (8005c90 <_dtoa_r+0x648>)
 80059a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80059a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059a8:	f7fa ff50 	bl	800084c <__aeabi_ddiv>
 80059ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059b0:	f007 070f 	and.w	r7, r7, #15
 80059b4:	2503      	movs	r5, #3
 80059b6:	4eb6      	ldr	r6, [pc, #728]	; (8005c90 <_dtoa_r+0x648>)
 80059b8:	b957      	cbnz	r7, 80059d0 <_dtoa_r+0x388>
 80059ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059be:	ec53 2b18 	vmov	r2, r3, d8
 80059c2:	f7fa ff43 	bl	800084c <__aeabi_ddiv>
 80059c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059ca:	e029      	b.n	8005a20 <_dtoa_r+0x3d8>
 80059cc:	2502      	movs	r5, #2
 80059ce:	e7f2      	b.n	80059b6 <_dtoa_r+0x36e>
 80059d0:	07f9      	lsls	r1, r7, #31
 80059d2:	d508      	bpl.n	80059e6 <_dtoa_r+0x39e>
 80059d4:	ec51 0b18 	vmov	r0, r1, d8
 80059d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80059dc:	f7fa fe0c 	bl	80005f8 <__aeabi_dmul>
 80059e0:	ec41 0b18 	vmov	d8, r0, r1
 80059e4:	3501      	adds	r5, #1
 80059e6:	107f      	asrs	r7, r7, #1
 80059e8:	3608      	adds	r6, #8
 80059ea:	e7e5      	b.n	80059b8 <_dtoa_r+0x370>
 80059ec:	f000 80a6 	beq.w	8005b3c <_dtoa_r+0x4f4>
 80059f0:	f1ca 0600 	rsb	r6, sl, #0
 80059f4:	4ba5      	ldr	r3, [pc, #660]	; (8005c8c <_dtoa_r+0x644>)
 80059f6:	4fa6      	ldr	r7, [pc, #664]	; (8005c90 <_dtoa_r+0x648>)
 80059f8:	f006 020f 	and.w	r2, r6, #15
 80059fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a08:	f7fa fdf6 	bl	80005f8 <__aeabi_dmul>
 8005a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a10:	1136      	asrs	r6, r6, #4
 8005a12:	2300      	movs	r3, #0
 8005a14:	2502      	movs	r5, #2
 8005a16:	2e00      	cmp	r6, #0
 8005a18:	f040 8085 	bne.w	8005b26 <_dtoa_r+0x4de>
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1d2      	bne.n	80059c6 <_dtoa_r+0x37e>
 8005a20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 808c 	beq.w	8005b40 <_dtoa_r+0x4f8>
 8005a28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a2c:	4b99      	ldr	r3, [pc, #612]	; (8005c94 <_dtoa_r+0x64c>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	4630      	mov	r0, r6
 8005a32:	4639      	mov	r1, r7
 8005a34:	f7fb f852 	bl	8000adc <__aeabi_dcmplt>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	f000 8081 	beq.w	8005b40 <_dtoa_r+0x4f8>
 8005a3e:	9b01      	ldr	r3, [sp, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d07d      	beq.n	8005b40 <_dtoa_r+0x4f8>
 8005a44:	f1b9 0f00 	cmp.w	r9, #0
 8005a48:	dd3c      	ble.n	8005ac4 <_dtoa_r+0x47c>
 8005a4a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005a4e:	9307      	str	r3, [sp, #28]
 8005a50:	2200      	movs	r2, #0
 8005a52:	4b91      	ldr	r3, [pc, #580]	; (8005c98 <_dtoa_r+0x650>)
 8005a54:	4630      	mov	r0, r6
 8005a56:	4639      	mov	r1, r7
 8005a58:	f7fa fdce 	bl	80005f8 <__aeabi_dmul>
 8005a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a60:	3501      	adds	r5, #1
 8005a62:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005a66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	f7fa fd5a 	bl	8000524 <__aeabi_i2d>
 8005a70:	4632      	mov	r2, r6
 8005a72:	463b      	mov	r3, r7
 8005a74:	f7fa fdc0 	bl	80005f8 <__aeabi_dmul>
 8005a78:	4b88      	ldr	r3, [pc, #544]	; (8005c9c <_dtoa_r+0x654>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f7fa fc06 	bl	800028c <__adddf3>
 8005a80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005a84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a88:	9303      	str	r3, [sp, #12]
 8005a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d15c      	bne.n	8005b4a <_dtoa_r+0x502>
 8005a90:	4b83      	ldr	r3, [pc, #524]	; (8005ca0 <_dtoa_r+0x658>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	4630      	mov	r0, r6
 8005a96:	4639      	mov	r1, r7
 8005a98:	f7fa fbf6 	bl	8000288 <__aeabi_dsub>
 8005a9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005aa0:	4606      	mov	r6, r0
 8005aa2:	460f      	mov	r7, r1
 8005aa4:	f7fb f838 	bl	8000b18 <__aeabi_dcmpgt>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	f040 8296 	bne.w	8005fda <_dtoa_r+0x992>
 8005aae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ab8:	4639      	mov	r1, r7
 8005aba:	f7fb f80f 	bl	8000adc <__aeabi_dcmplt>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	f040 8288 	bne.w	8005fd4 <_dtoa_r+0x98c>
 8005ac4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ac8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005acc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f2c0 8158 	blt.w	8005d84 <_dtoa_r+0x73c>
 8005ad4:	f1ba 0f0e 	cmp.w	sl, #14
 8005ad8:	f300 8154 	bgt.w	8005d84 <_dtoa_r+0x73c>
 8005adc:	4b6b      	ldr	r3, [pc, #428]	; (8005c8c <_dtoa_r+0x644>)
 8005ade:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005ae2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f280 80e3 	bge.w	8005cb4 <_dtoa_r+0x66c>
 8005aee:	9b01      	ldr	r3, [sp, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f300 80df 	bgt.w	8005cb4 <_dtoa_r+0x66c>
 8005af6:	f040 826d 	bne.w	8005fd4 <_dtoa_r+0x98c>
 8005afa:	4b69      	ldr	r3, [pc, #420]	; (8005ca0 <_dtoa_r+0x658>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	4640      	mov	r0, r8
 8005b00:	4649      	mov	r1, r9
 8005b02:	f7fa fd79 	bl	80005f8 <__aeabi_dmul>
 8005b06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b0a:	f7fa fffb 	bl	8000b04 <__aeabi_dcmpge>
 8005b0e:	9e01      	ldr	r6, [sp, #4]
 8005b10:	4637      	mov	r7, r6
 8005b12:	2800      	cmp	r0, #0
 8005b14:	f040 8243 	bne.w	8005f9e <_dtoa_r+0x956>
 8005b18:	9d00      	ldr	r5, [sp, #0]
 8005b1a:	2331      	movs	r3, #49	; 0x31
 8005b1c:	f805 3b01 	strb.w	r3, [r5], #1
 8005b20:	f10a 0a01 	add.w	sl, sl, #1
 8005b24:	e23f      	b.n	8005fa6 <_dtoa_r+0x95e>
 8005b26:	07f2      	lsls	r2, r6, #31
 8005b28:	d505      	bpl.n	8005b36 <_dtoa_r+0x4ee>
 8005b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b2e:	f7fa fd63 	bl	80005f8 <__aeabi_dmul>
 8005b32:	3501      	adds	r5, #1
 8005b34:	2301      	movs	r3, #1
 8005b36:	1076      	asrs	r6, r6, #1
 8005b38:	3708      	adds	r7, #8
 8005b3a:	e76c      	b.n	8005a16 <_dtoa_r+0x3ce>
 8005b3c:	2502      	movs	r5, #2
 8005b3e:	e76f      	b.n	8005a20 <_dtoa_r+0x3d8>
 8005b40:	9b01      	ldr	r3, [sp, #4]
 8005b42:	f8cd a01c 	str.w	sl, [sp, #28]
 8005b46:	930c      	str	r3, [sp, #48]	; 0x30
 8005b48:	e78d      	b.n	8005a66 <_dtoa_r+0x41e>
 8005b4a:	9900      	ldr	r1, [sp, #0]
 8005b4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005b4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b50:	4b4e      	ldr	r3, [pc, #312]	; (8005c8c <_dtoa_r+0x644>)
 8005b52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b56:	4401      	add	r1, r0
 8005b58:	9102      	str	r1, [sp, #8]
 8005b5a:	9908      	ldr	r1, [sp, #32]
 8005b5c:	eeb0 8a47 	vmov.f32	s16, s14
 8005b60:	eef0 8a67 	vmov.f32	s17, s15
 8005b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b6c:	2900      	cmp	r1, #0
 8005b6e:	d045      	beq.n	8005bfc <_dtoa_r+0x5b4>
 8005b70:	494c      	ldr	r1, [pc, #304]	; (8005ca4 <_dtoa_r+0x65c>)
 8005b72:	2000      	movs	r0, #0
 8005b74:	f7fa fe6a 	bl	800084c <__aeabi_ddiv>
 8005b78:	ec53 2b18 	vmov	r2, r3, d8
 8005b7c:	f7fa fb84 	bl	8000288 <__aeabi_dsub>
 8005b80:	9d00      	ldr	r5, [sp, #0]
 8005b82:	ec41 0b18 	vmov	d8, r0, r1
 8005b86:	4639      	mov	r1, r7
 8005b88:	4630      	mov	r0, r6
 8005b8a:	f7fa ffe5 	bl	8000b58 <__aeabi_d2iz>
 8005b8e:	900c      	str	r0, [sp, #48]	; 0x30
 8005b90:	f7fa fcc8 	bl	8000524 <__aeabi_i2d>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4630      	mov	r0, r6
 8005b9a:	4639      	mov	r1, r7
 8005b9c:	f7fa fb74 	bl	8000288 <__aeabi_dsub>
 8005ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ba2:	3330      	adds	r3, #48	; 0x30
 8005ba4:	f805 3b01 	strb.w	r3, [r5], #1
 8005ba8:	ec53 2b18 	vmov	r2, r3, d8
 8005bac:	4606      	mov	r6, r0
 8005bae:	460f      	mov	r7, r1
 8005bb0:	f7fa ff94 	bl	8000adc <__aeabi_dcmplt>
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	d165      	bne.n	8005c84 <_dtoa_r+0x63c>
 8005bb8:	4632      	mov	r2, r6
 8005bba:	463b      	mov	r3, r7
 8005bbc:	4935      	ldr	r1, [pc, #212]	; (8005c94 <_dtoa_r+0x64c>)
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	f7fa fb62 	bl	8000288 <__aeabi_dsub>
 8005bc4:	ec53 2b18 	vmov	r2, r3, d8
 8005bc8:	f7fa ff88 	bl	8000adc <__aeabi_dcmplt>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	f040 80b9 	bne.w	8005d44 <_dtoa_r+0x6fc>
 8005bd2:	9b02      	ldr	r3, [sp, #8]
 8005bd4:	429d      	cmp	r5, r3
 8005bd6:	f43f af75 	beq.w	8005ac4 <_dtoa_r+0x47c>
 8005bda:	4b2f      	ldr	r3, [pc, #188]	; (8005c98 <_dtoa_r+0x650>)
 8005bdc:	ec51 0b18 	vmov	r0, r1, d8
 8005be0:	2200      	movs	r2, #0
 8005be2:	f7fa fd09 	bl	80005f8 <__aeabi_dmul>
 8005be6:	4b2c      	ldr	r3, [pc, #176]	; (8005c98 <_dtoa_r+0x650>)
 8005be8:	ec41 0b18 	vmov	d8, r0, r1
 8005bec:	2200      	movs	r2, #0
 8005bee:	4630      	mov	r0, r6
 8005bf0:	4639      	mov	r1, r7
 8005bf2:	f7fa fd01 	bl	80005f8 <__aeabi_dmul>
 8005bf6:	4606      	mov	r6, r0
 8005bf8:	460f      	mov	r7, r1
 8005bfa:	e7c4      	b.n	8005b86 <_dtoa_r+0x53e>
 8005bfc:	ec51 0b17 	vmov	r0, r1, d7
 8005c00:	f7fa fcfa 	bl	80005f8 <__aeabi_dmul>
 8005c04:	9b02      	ldr	r3, [sp, #8]
 8005c06:	9d00      	ldr	r5, [sp, #0]
 8005c08:	930c      	str	r3, [sp, #48]	; 0x30
 8005c0a:	ec41 0b18 	vmov	d8, r0, r1
 8005c0e:	4639      	mov	r1, r7
 8005c10:	4630      	mov	r0, r6
 8005c12:	f7fa ffa1 	bl	8000b58 <__aeabi_d2iz>
 8005c16:	9011      	str	r0, [sp, #68]	; 0x44
 8005c18:	f7fa fc84 	bl	8000524 <__aeabi_i2d>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4630      	mov	r0, r6
 8005c22:	4639      	mov	r1, r7
 8005c24:	f7fa fb30 	bl	8000288 <__aeabi_dsub>
 8005c28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c2a:	3330      	adds	r3, #48	; 0x30
 8005c2c:	f805 3b01 	strb.w	r3, [r5], #1
 8005c30:	9b02      	ldr	r3, [sp, #8]
 8005c32:	429d      	cmp	r5, r3
 8005c34:	4606      	mov	r6, r0
 8005c36:	460f      	mov	r7, r1
 8005c38:	f04f 0200 	mov.w	r2, #0
 8005c3c:	d134      	bne.n	8005ca8 <_dtoa_r+0x660>
 8005c3e:	4b19      	ldr	r3, [pc, #100]	; (8005ca4 <_dtoa_r+0x65c>)
 8005c40:	ec51 0b18 	vmov	r0, r1, d8
 8005c44:	f7fa fb22 	bl	800028c <__adddf3>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	4639      	mov	r1, r7
 8005c50:	f7fa ff62 	bl	8000b18 <__aeabi_dcmpgt>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d175      	bne.n	8005d44 <_dtoa_r+0x6fc>
 8005c58:	ec53 2b18 	vmov	r2, r3, d8
 8005c5c:	4911      	ldr	r1, [pc, #68]	; (8005ca4 <_dtoa_r+0x65c>)
 8005c5e:	2000      	movs	r0, #0
 8005c60:	f7fa fb12 	bl	8000288 <__aeabi_dsub>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	4630      	mov	r0, r6
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	f7fa ff36 	bl	8000adc <__aeabi_dcmplt>
 8005c70:	2800      	cmp	r0, #0
 8005c72:	f43f af27 	beq.w	8005ac4 <_dtoa_r+0x47c>
 8005c76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c78:	1e6b      	subs	r3, r5, #1
 8005c7a:	930c      	str	r3, [sp, #48]	; 0x30
 8005c7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c80:	2b30      	cmp	r3, #48	; 0x30
 8005c82:	d0f8      	beq.n	8005c76 <_dtoa_r+0x62e>
 8005c84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005c88:	e04a      	b.n	8005d20 <_dtoa_r+0x6d8>
 8005c8a:	bf00      	nop
 8005c8c:	080086f0 	.word	0x080086f0
 8005c90:	080086c8 	.word	0x080086c8
 8005c94:	3ff00000 	.word	0x3ff00000
 8005c98:	40240000 	.word	0x40240000
 8005c9c:	401c0000 	.word	0x401c0000
 8005ca0:	40140000 	.word	0x40140000
 8005ca4:	3fe00000 	.word	0x3fe00000
 8005ca8:	4baf      	ldr	r3, [pc, #700]	; (8005f68 <_dtoa_r+0x920>)
 8005caa:	f7fa fca5 	bl	80005f8 <__aeabi_dmul>
 8005cae:	4606      	mov	r6, r0
 8005cb0:	460f      	mov	r7, r1
 8005cb2:	e7ac      	b.n	8005c0e <_dtoa_r+0x5c6>
 8005cb4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005cb8:	9d00      	ldr	r5, [sp, #0]
 8005cba:	4642      	mov	r2, r8
 8005cbc:	464b      	mov	r3, r9
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	4639      	mov	r1, r7
 8005cc2:	f7fa fdc3 	bl	800084c <__aeabi_ddiv>
 8005cc6:	f7fa ff47 	bl	8000b58 <__aeabi_d2iz>
 8005cca:	9002      	str	r0, [sp, #8]
 8005ccc:	f7fa fc2a 	bl	8000524 <__aeabi_i2d>
 8005cd0:	4642      	mov	r2, r8
 8005cd2:	464b      	mov	r3, r9
 8005cd4:	f7fa fc90 	bl	80005f8 <__aeabi_dmul>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4630      	mov	r0, r6
 8005cde:	4639      	mov	r1, r7
 8005ce0:	f7fa fad2 	bl	8000288 <__aeabi_dsub>
 8005ce4:	9e02      	ldr	r6, [sp, #8]
 8005ce6:	9f01      	ldr	r7, [sp, #4]
 8005ce8:	3630      	adds	r6, #48	; 0x30
 8005cea:	f805 6b01 	strb.w	r6, [r5], #1
 8005cee:	9e00      	ldr	r6, [sp, #0]
 8005cf0:	1bae      	subs	r6, r5, r6
 8005cf2:	42b7      	cmp	r7, r6
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	d137      	bne.n	8005d6a <_dtoa_r+0x722>
 8005cfa:	f7fa fac7 	bl	800028c <__adddf3>
 8005cfe:	4642      	mov	r2, r8
 8005d00:	464b      	mov	r3, r9
 8005d02:	4606      	mov	r6, r0
 8005d04:	460f      	mov	r7, r1
 8005d06:	f7fa ff07 	bl	8000b18 <__aeabi_dcmpgt>
 8005d0a:	b9c8      	cbnz	r0, 8005d40 <_dtoa_r+0x6f8>
 8005d0c:	4642      	mov	r2, r8
 8005d0e:	464b      	mov	r3, r9
 8005d10:	4630      	mov	r0, r6
 8005d12:	4639      	mov	r1, r7
 8005d14:	f7fa fed8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d18:	b110      	cbz	r0, 8005d20 <_dtoa_r+0x6d8>
 8005d1a:	9b02      	ldr	r3, [sp, #8]
 8005d1c:	07d9      	lsls	r1, r3, #31
 8005d1e:	d40f      	bmi.n	8005d40 <_dtoa_r+0x6f8>
 8005d20:	4620      	mov	r0, r4
 8005d22:	4659      	mov	r1, fp
 8005d24:	f000 fe58 	bl	80069d8 <_Bfree>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	702b      	strb	r3, [r5, #0]
 8005d2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d2e:	f10a 0001 	add.w	r0, sl, #1
 8005d32:	6018      	str	r0, [r3, #0]
 8005d34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f43f acd8 	beq.w	80056ec <_dtoa_r+0xa4>
 8005d3c:	601d      	str	r5, [r3, #0]
 8005d3e:	e4d5      	b.n	80056ec <_dtoa_r+0xa4>
 8005d40:	f8cd a01c 	str.w	sl, [sp, #28]
 8005d44:	462b      	mov	r3, r5
 8005d46:	461d      	mov	r5, r3
 8005d48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d4c:	2a39      	cmp	r2, #57	; 0x39
 8005d4e:	d108      	bne.n	8005d62 <_dtoa_r+0x71a>
 8005d50:	9a00      	ldr	r2, [sp, #0]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d1f7      	bne.n	8005d46 <_dtoa_r+0x6fe>
 8005d56:	9a07      	ldr	r2, [sp, #28]
 8005d58:	9900      	ldr	r1, [sp, #0]
 8005d5a:	3201      	adds	r2, #1
 8005d5c:	9207      	str	r2, [sp, #28]
 8005d5e:	2230      	movs	r2, #48	; 0x30
 8005d60:	700a      	strb	r2, [r1, #0]
 8005d62:	781a      	ldrb	r2, [r3, #0]
 8005d64:	3201      	adds	r2, #1
 8005d66:	701a      	strb	r2, [r3, #0]
 8005d68:	e78c      	b.n	8005c84 <_dtoa_r+0x63c>
 8005d6a:	4b7f      	ldr	r3, [pc, #508]	; (8005f68 <_dtoa_r+0x920>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f7fa fc43 	bl	80005f8 <__aeabi_dmul>
 8005d72:	2200      	movs	r2, #0
 8005d74:	2300      	movs	r3, #0
 8005d76:	4606      	mov	r6, r0
 8005d78:	460f      	mov	r7, r1
 8005d7a:	f7fa fea5 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d09b      	beq.n	8005cba <_dtoa_r+0x672>
 8005d82:	e7cd      	b.n	8005d20 <_dtoa_r+0x6d8>
 8005d84:	9a08      	ldr	r2, [sp, #32]
 8005d86:	2a00      	cmp	r2, #0
 8005d88:	f000 80c4 	beq.w	8005f14 <_dtoa_r+0x8cc>
 8005d8c:	9a05      	ldr	r2, [sp, #20]
 8005d8e:	2a01      	cmp	r2, #1
 8005d90:	f300 80a8 	bgt.w	8005ee4 <_dtoa_r+0x89c>
 8005d94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d96:	2a00      	cmp	r2, #0
 8005d98:	f000 80a0 	beq.w	8005edc <_dtoa_r+0x894>
 8005d9c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005da0:	9e06      	ldr	r6, [sp, #24]
 8005da2:	4645      	mov	r5, r8
 8005da4:	9a04      	ldr	r2, [sp, #16]
 8005da6:	2101      	movs	r1, #1
 8005da8:	441a      	add	r2, r3
 8005daa:	4620      	mov	r0, r4
 8005dac:	4498      	add	r8, r3
 8005dae:	9204      	str	r2, [sp, #16]
 8005db0:	f000 ff18 	bl	8006be4 <__i2b>
 8005db4:	4607      	mov	r7, r0
 8005db6:	2d00      	cmp	r5, #0
 8005db8:	dd0b      	ble.n	8005dd2 <_dtoa_r+0x78a>
 8005dba:	9b04      	ldr	r3, [sp, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	dd08      	ble.n	8005dd2 <_dtoa_r+0x78a>
 8005dc0:	42ab      	cmp	r3, r5
 8005dc2:	9a04      	ldr	r2, [sp, #16]
 8005dc4:	bfa8      	it	ge
 8005dc6:	462b      	movge	r3, r5
 8005dc8:	eba8 0803 	sub.w	r8, r8, r3
 8005dcc:	1aed      	subs	r5, r5, r3
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	9304      	str	r3, [sp, #16]
 8005dd2:	9b06      	ldr	r3, [sp, #24]
 8005dd4:	b1fb      	cbz	r3, 8005e16 <_dtoa_r+0x7ce>
 8005dd6:	9b08      	ldr	r3, [sp, #32]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 809f 	beq.w	8005f1c <_dtoa_r+0x8d4>
 8005dde:	2e00      	cmp	r6, #0
 8005de0:	dd11      	ble.n	8005e06 <_dtoa_r+0x7be>
 8005de2:	4639      	mov	r1, r7
 8005de4:	4632      	mov	r2, r6
 8005de6:	4620      	mov	r0, r4
 8005de8:	f000 ffb8 	bl	8006d5c <__pow5mult>
 8005dec:	465a      	mov	r2, fp
 8005dee:	4601      	mov	r1, r0
 8005df0:	4607      	mov	r7, r0
 8005df2:	4620      	mov	r0, r4
 8005df4:	f000 ff0c 	bl	8006c10 <__multiply>
 8005df8:	4659      	mov	r1, fp
 8005dfa:	9007      	str	r0, [sp, #28]
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f000 fdeb 	bl	80069d8 <_Bfree>
 8005e02:	9b07      	ldr	r3, [sp, #28]
 8005e04:	469b      	mov	fp, r3
 8005e06:	9b06      	ldr	r3, [sp, #24]
 8005e08:	1b9a      	subs	r2, r3, r6
 8005e0a:	d004      	beq.n	8005e16 <_dtoa_r+0x7ce>
 8005e0c:	4659      	mov	r1, fp
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f000 ffa4 	bl	8006d5c <__pow5mult>
 8005e14:	4683      	mov	fp, r0
 8005e16:	2101      	movs	r1, #1
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 fee3 	bl	8006be4 <__i2b>
 8005e1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	4606      	mov	r6, r0
 8005e24:	dd7c      	ble.n	8005f20 <_dtoa_r+0x8d8>
 8005e26:	461a      	mov	r2, r3
 8005e28:	4601      	mov	r1, r0
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f000 ff96 	bl	8006d5c <__pow5mult>
 8005e30:	9b05      	ldr	r3, [sp, #20]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	4606      	mov	r6, r0
 8005e36:	dd76      	ble.n	8005f26 <_dtoa_r+0x8de>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	9306      	str	r3, [sp, #24]
 8005e3c:	6933      	ldr	r3, [r6, #16]
 8005e3e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e42:	6918      	ldr	r0, [r3, #16]
 8005e44:	f000 fe7e 	bl	8006b44 <__hi0bits>
 8005e48:	f1c0 0020 	rsb	r0, r0, #32
 8005e4c:	9b04      	ldr	r3, [sp, #16]
 8005e4e:	4418      	add	r0, r3
 8005e50:	f010 001f 	ands.w	r0, r0, #31
 8005e54:	f000 8086 	beq.w	8005f64 <_dtoa_r+0x91c>
 8005e58:	f1c0 0320 	rsb	r3, r0, #32
 8005e5c:	2b04      	cmp	r3, #4
 8005e5e:	dd7f      	ble.n	8005f60 <_dtoa_r+0x918>
 8005e60:	f1c0 001c 	rsb	r0, r0, #28
 8005e64:	9b04      	ldr	r3, [sp, #16]
 8005e66:	4403      	add	r3, r0
 8005e68:	4480      	add	r8, r0
 8005e6a:	4405      	add	r5, r0
 8005e6c:	9304      	str	r3, [sp, #16]
 8005e6e:	f1b8 0f00 	cmp.w	r8, #0
 8005e72:	dd05      	ble.n	8005e80 <_dtoa_r+0x838>
 8005e74:	4659      	mov	r1, fp
 8005e76:	4642      	mov	r2, r8
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f000 ffc9 	bl	8006e10 <__lshift>
 8005e7e:	4683      	mov	fp, r0
 8005e80:	9b04      	ldr	r3, [sp, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	dd05      	ble.n	8005e92 <_dtoa_r+0x84a>
 8005e86:	4631      	mov	r1, r6
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f000 ffc0 	bl	8006e10 <__lshift>
 8005e90:	4606      	mov	r6, r0
 8005e92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d069      	beq.n	8005f6c <_dtoa_r+0x924>
 8005e98:	4631      	mov	r1, r6
 8005e9a:	4658      	mov	r0, fp
 8005e9c:	f001 f824 	bl	8006ee8 <__mcmp>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	da63      	bge.n	8005f6c <_dtoa_r+0x924>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	4659      	mov	r1, fp
 8005ea8:	220a      	movs	r2, #10
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f000 fdb6 	bl	8006a1c <__multadd>
 8005eb0:	9b08      	ldr	r3, [sp, #32]
 8005eb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005eb6:	4683      	mov	fp, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 818f 	beq.w	80061dc <_dtoa_r+0xb94>
 8005ebe:	4639      	mov	r1, r7
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	220a      	movs	r2, #10
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f000 fda9 	bl	8006a1c <__multadd>
 8005eca:	f1b9 0f00 	cmp.w	r9, #0
 8005ece:	4607      	mov	r7, r0
 8005ed0:	f300 808e 	bgt.w	8005ff0 <_dtoa_r+0x9a8>
 8005ed4:	9b05      	ldr	r3, [sp, #20]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	dc50      	bgt.n	8005f7c <_dtoa_r+0x934>
 8005eda:	e089      	b.n	8005ff0 <_dtoa_r+0x9a8>
 8005edc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ede:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005ee2:	e75d      	b.n	8005da0 <_dtoa_r+0x758>
 8005ee4:	9b01      	ldr	r3, [sp, #4]
 8005ee6:	1e5e      	subs	r6, r3, #1
 8005ee8:	9b06      	ldr	r3, [sp, #24]
 8005eea:	42b3      	cmp	r3, r6
 8005eec:	bfbf      	itttt	lt
 8005eee:	9b06      	ldrlt	r3, [sp, #24]
 8005ef0:	9606      	strlt	r6, [sp, #24]
 8005ef2:	1af2      	sublt	r2, r6, r3
 8005ef4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005ef6:	bfb6      	itet	lt
 8005ef8:	189b      	addlt	r3, r3, r2
 8005efa:	1b9e      	subge	r6, r3, r6
 8005efc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005efe:	9b01      	ldr	r3, [sp, #4]
 8005f00:	bfb8      	it	lt
 8005f02:	2600      	movlt	r6, #0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	bfb5      	itete	lt
 8005f08:	eba8 0503 	sublt.w	r5, r8, r3
 8005f0c:	9b01      	ldrge	r3, [sp, #4]
 8005f0e:	2300      	movlt	r3, #0
 8005f10:	4645      	movge	r5, r8
 8005f12:	e747      	b.n	8005da4 <_dtoa_r+0x75c>
 8005f14:	9e06      	ldr	r6, [sp, #24]
 8005f16:	9f08      	ldr	r7, [sp, #32]
 8005f18:	4645      	mov	r5, r8
 8005f1a:	e74c      	b.n	8005db6 <_dtoa_r+0x76e>
 8005f1c:	9a06      	ldr	r2, [sp, #24]
 8005f1e:	e775      	b.n	8005e0c <_dtoa_r+0x7c4>
 8005f20:	9b05      	ldr	r3, [sp, #20]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	dc18      	bgt.n	8005f58 <_dtoa_r+0x910>
 8005f26:	9b02      	ldr	r3, [sp, #8]
 8005f28:	b9b3      	cbnz	r3, 8005f58 <_dtoa_r+0x910>
 8005f2a:	9b03      	ldr	r3, [sp, #12]
 8005f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f30:	b9a3      	cbnz	r3, 8005f5c <_dtoa_r+0x914>
 8005f32:	9b03      	ldr	r3, [sp, #12]
 8005f34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f38:	0d1b      	lsrs	r3, r3, #20
 8005f3a:	051b      	lsls	r3, r3, #20
 8005f3c:	b12b      	cbz	r3, 8005f4a <_dtoa_r+0x902>
 8005f3e:	9b04      	ldr	r3, [sp, #16]
 8005f40:	3301      	adds	r3, #1
 8005f42:	9304      	str	r3, [sp, #16]
 8005f44:	f108 0801 	add.w	r8, r8, #1
 8005f48:	2301      	movs	r3, #1
 8005f4a:	9306      	str	r3, [sp, #24]
 8005f4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f47f af74 	bne.w	8005e3c <_dtoa_r+0x7f4>
 8005f54:	2001      	movs	r0, #1
 8005f56:	e779      	b.n	8005e4c <_dtoa_r+0x804>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	e7f6      	b.n	8005f4a <_dtoa_r+0x902>
 8005f5c:	9b02      	ldr	r3, [sp, #8]
 8005f5e:	e7f4      	b.n	8005f4a <_dtoa_r+0x902>
 8005f60:	d085      	beq.n	8005e6e <_dtoa_r+0x826>
 8005f62:	4618      	mov	r0, r3
 8005f64:	301c      	adds	r0, #28
 8005f66:	e77d      	b.n	8005e64 <_dtoa_r+0x81c>
 8005f68:	40240000 	.word	0x40240000
 8005f6c:	9b01      	ldr	r3, [sp, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	dc38      	bgt.n	8005fe4 <_dtoa_r+0x99c>
 8005f72:	9b05      	ldr	r3, [sp, #20]
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	dd35      	ble.n	8005fe4 <_dtoa_r+0x99c>
 8005f78:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005f7c:	f1b9 0f00 	cmp.w	r9, #0
 8005f80:	d10d      	bne.n	8005f9e <_dtoa_r+0x956>
 8005f82:	4631      	mov	r1, r6
 8005f84:	464b      	mov	r3, r9
 8005f86:	2205      	movs	r2, #5
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f000 fd47 	bl	8006a1c <__multadd>
 8005f8e:	4601      	mov	r1, r0
 8005f90:	4606      	mov	r6, r0
 8005f92:	4658      	mov	r0, fp
 8005f94:	f000 ffa8 	bl	8006ee8 <__mcmp>
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	f73f adbd 	bgt.w	8005b18 <_dtoa_r+0x4d0>
 8005f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa0:	9d00      	ldr	r5, [sp, #0]
 8005fa2:	ea6f 0a03 	mvn.w	sl, r3
 8005fa6:	f04f 0800 	mov.w	r8, #0
 8005faa:	4631      	mov	r1, r6
 8005fac:	4620      	mov	r0, r4
 8005fae:	f000 fd13 	bl	80069d8 <_Bfree>
 8005fb2:	2f00      	cmp	r7, #0
 8005fb4:	f43f aeb4 	beq.w	8005d20 <_dtoa_r+0x6d8>
 8005fb8:	f1b8 0f00 	cmp.w	r8, #0
 8005fbc:	d005      	beq.n	8005fca <_dtoa_r+0x982>
 8005fbe:	45b8      	cmp	r8, r7
 8005fc0:	d003      	beq.n	8005fca <_dtoa_r+0x982>
 8005fc2:	4641      	mov	r1, r8
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f000 fd07 	bl	80069d8 <_Bfree>
 8005fca:	4639      	mov	r1, r7
 8005fcc:	4620      	mov	r0, r4
 8005fce:	f000 fd03 	bl	80069d8 <_Bfree>
 8005fd2:	e6a5      	b.n	8005d20 <_dtoa_r+0x6d8>
 8005fd4:	2600      	movs	r6, #0
 8005fd6:	4637      	mov	r7, r6
 8005fd8:	e7e1      	b.n	8005f9e <_dtoa_r+0x956>
 8005fda:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005fdc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005fe0:	4637      	mov	r7, r6
 8005fe2:	e599      	b.n	8005b18 <_dtoa_r+0x4d0>
 8005fe4:	9b08      	ldr	r3, [sp, #32]
 8005fe6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 80fd 	beq.w	80061ea <_dtoa_r+0xba2>
 8005ff0:	2d00      	cmp	r5, #0
 8005ff2:	dd05      	ble.n	8006000 <_dtoa_r+0x9b8>
 8005ff4:	4639      	mov	r1, r7
 8005ff6:	462a      	mov	r2, r5
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f000 ff09 	bl	8006e10 <__lshift>
 8005ffe:	4607      	mov	r7, r0
 8006000:	9b06      	ldr	r3, [sp, #24]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d05c      	beq.n	80060c0 <_dtoa_r+0xa78>
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	4620      	mov	r0, r4
 800600a:	f000 fca5 	bl	8006958 <_Balloc>
 800600e:	4605      	mov	r5, r0
 8006010:	b928      	cbnz	r0, 800601e <_dtoa_r+0x9d6>
 8006012:	4b80      	ldr	r3, [pc, #512]	; (8006214 <_dtoa_r+0xbcc>)
 8006014:	4602      	mov	r2, r0
 8006016:	f240 21ea 	movw	r1, #746	; 0x2ea
 800601a:	f7ff bb2e 	b.w	800567a <_dtoa_r+0x32>
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	3202      	adds	r2, #2
 8006022:	0092      	lsls	r2, r2, #2
 8006024:	f107 010c 	add.w	r1, r7, #12
 8006028:	300c      	adds	r0, #12
 800602a:	f000 fc87 	bl	800693c <memcpy>
 800602e:	2201      	movs	r2, #1
 8006030:	4629      	mov	r1, r5
 8006032:	4620      	mov	r0, r4
 8006034:	f000 feec 	bl	8006e10 <__lshift>
 8006038:	9b00      	ldr	r3, [sp, #0]
 800603a:	3301      	adds	r3, #1
 800603c:	9301      	str	r3, [sp, #4]
 800603e:	9b00      	ldr	r3, [sp, #0]
 8006040:	444b      	add	r3, r9
 8006042:	9307      	str	r3, [sp, #28]
 8006044:	9b02      	ldr	r3, [sp, #8]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	46b8      	mov	r8, r7
 800604c:	9306      	str	r3, [sp, #24]
 800604e:	4607      	mov	r7, r0
 8006050:	9b01      	ldr	r3, [sp, #4]
 8006052:	4631      	mov	r1, r6
 8006054:	3b01      	subs	r3, #1
 8006056:	4658      	mov	r0, fp
 8006058:	9302      	str	r3, [sp, #8]
 800605a:	f7ff fa67 	bl	800552c <quorem>
 800605e:	4603      	mov	r3, r0
 8006060:	3330      	adds	r3, #48	; 0x30
 8006062:	9004      	str	r0, [sp, #16]
 8006064:	4641      	mov	r1, r8
 8006066:	4658      	mov	r0, fp
 8006068:	9308      	str	r3, [sp, #32]
 800606a:	f000 ff3d 	bl	8006ee8 <__mcmp>
 800606e:	463a      	mov	r2, r7
 8006070:	4681      	mov	r9, r0
 8006072:	4631      	mov	r1, r6
 8006074:	4620      	mov	r0, r4
 8006076:	f000 ff53 	bl	8006f20 <__mdiff>
 800607a:	68c2      	ldr	r2, [r0, #12]
 800607c:	9b08      	ldr	r3, [sp, #32]
 800607e:	4605      	mov	r5, r0
 8006080:	bb02      	cbnz	r2, 80060c4 <_dtoa_r+0xa7c>
 8006082:	4601      	mov	r1, r0
 8006084:	4658      	mov	r0, fp
 8006086:	f000 ff2f 	bl	8006ee8 <__mcmp>
 800608a:	9b08      	ldr	r3, [sp, #32]
 800608c:	4602      	mov	r2, r0
 800608e:	4629      	mov	r1, r5
 8006090:	4620      	mov	r0, r4
 8006092:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006096:	f000 fc9f 	bl	80069d8 <_Bfree>
 800609a:	9b05      	ldr	r3, [sp, #20]
 800609c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800609e:	9d01      	ldr	r5, [sp, #4]
 80060a0:	ea43 0102 	orr.w	r1, r3, r2
 80060a4:	9b06      	ldr	r3, [sp, #24]
 80060a6:	430b      	orrs	r3, r1
 80060a8:	9b08      	ldr	r3, [sp, #32]
 80060aa:	d10d      	bne.n	80060c8 <_dtoa_r+0xa80>
 80060ac:	2b39      	cmp	r3, #57	; 0x39
 80060ae:	d029      	beq.n	8006104 <_dtoa_r+0xabc>
 80060b0:	f1b9 0f00 	cmp.w	r9, #0
 80060b4:	dd01      	ble.n	80060ba <_dtoa_r+0xa72>
 80060b6:	9b04      	ldr	r3, [sp, #16]
 80060b8:	3331      	adds	r3, #49	; 0x31
 80060ba:	9a02      	ldr	r2, [sp, #8]
 80060bc:	7013      	strb	r3, [r2, #0]
 80060be:	e774      	b.n	8005faa <_dtoa_r+0x962>
 80060c0:	4638      	mov	r0, r7
 80060c2:	e7b9      	b.n	8006038 <_dtoa_r+0x9f0>
 80060c4:	2201      	movs	r2, #1
 80060c6:	e7e2      	b.n	800608e <_dtoa_r+0xa46>
 80060c8:	f1b9 0f00 	cmp.w	r9, #0
 80060cc:	db06      	blt.n	80060dc <_dtoa_r+0xa94>
 80060ce:	9905      	ldr	r1, [sp, #20]
 80060d0:	ea41 0909 	orr.w	r9, r1, r9
 80060d4:	9906      	ldr	r1, [sp, #24]
 80060d6:	ea59 0101 	orrs.w	r1, r9, r1
 80060da:	d120      	bne.n	800611e <_dtoa_r+0xad6>
 80060dc:	2a00      	cmp	r2, #0
 80060de:	ddec      	ble.n	80060ba <_dtoa_r+0xa72>
 80060e0:	4659      	mov	r1, fp
 80060e2:	2201      	movs	r2, #1
 80060e4:	4620      	mov	r0, r4
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	f000 fe92 	bl	8006e10 <__lshift>
 80060ec:	4631      	mov	r1, r6
 80060ee:	4683      	mov	fp, r0
 80060f0:	f000 fefa 	bl	8006ee8 <__mcmp>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	9b01      	ldr	r3, [sp, #4]
 80060f8:	dc02      	bgt.n	8006100 <_dtoa_r+0xab8>
 80060fa:	d1de      	bne.n	80060ba <_dtoa_r+0xa72>
 80060fc:	07da      	lsls	r2, r3, #31
 80060fe:	d5dc      	bpl.n	80060ba <_dtoa_r+0xa72>
 8006100:	2b39      	cmp	r3, #57	; 0x39
 8006102:	d1d8      	bne.n	80060b6 <_dtoa_r+0xa6e>
 8006104:	9a02      	ldr	r2, [sp, #8]
 8006106:	2339      	movs	r3, #57	; 0x39
 8006108:	7013      	strb	r3, [r2, #0]
 800610a:	462b      	mov	r3, r5
 800610c:	461d      	mov	r5, r3
 800610e:	3b01      	subs	r3, #1
 8006110:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006114:	2a39      	cmp	r2, #57	; 0x39
 8006116:	d050      	beq.n	80061ba <_dtoa_r+0xb72>
 8006118:	3201      	adds	r2, #1
 800611a:	701a      	strb	r2, [r3, #0]
 800611c:	e745      	b.n	8005faa <_dtoa_r+0x962>
 800611e:	2a00      	cmp	r2, #0
 8006120:	dd03      	ble.n	800612a <_dtoa_r+0xae2>
 8006122:	2b39      	cmp	r3, #57	; 0x39
 8006124:	d0ee      	beq.n	8006104 <_dtoa_r+0xabc>
 8006126:	3301      	adds	r3, #1
 8006128:	e7c7      	b.n	80060ba <_dtoa_r+0xa72>
 800612a:	9a01      	ldr	r2, [sp, #4]
 800612c:	9907      	ldr	r1, [sp, #28]
 800612e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006132:	428a      	cmp	r2, r1
 8006134:	d02a      	beq.n	800618c <_dtoa_r+0xb44>
 8006136:	4659      	mov	r1, fp
 8006138:	2300      	movs	r3, #0
 800613a:	220a      	movs	r2, #10
 800613c:	4620      	mov	r0, r4
 800613e:	f000 fc6d 	bl	8006a1c <__multadd>
 8006142:	45b8      	cmp	r8, r7
 8006144:	4683      	mov	fp, r0
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	f04f 020a 	mov.w	r2, #10
 800614e:	4641      	mov	r1, r8
 8006150:	4620      	mov	r0, r4
 8006152:	d107      	bne.n	8006164 <_dtoa_r+0xb1c>
 8006154:	f000 fc62 	bl	8006a1c <__multadd>
 8006158:	4680      	mov	r8, r0
 800615a:	4607      	mov	r7, r0
 800615c:	9b01      	ldr	r3, [sp, #4]
 800615e:	3301      	adds	r3, #1
 8006160:	9301      	str	r3, [sp, #4]
 8006162:	e775      	b.n	8006050 <_dtoa_r+0xa08>
 8006164:	f000 fc5a 	bl	8006a1c <__multadd>
 8006168:	4639      	mov	r1, r7
 800616a:	4680      	mov	r8, r0
 800616c:	2300      	movs	r3, #0
 800616e:	220a      	movs	r2, #10
 8006170:	4620      	mov	r0, r4
 8006172:	f000 fc53 	bl	8006a1c <__multadd>
 8006176:	4607      	mov	r7, r0
 8006178:	e7f0      	b.n	800615c <_dtoa_r+0xb14>
 800617a:	f1b9 0f00 	cmp.w	r9, #0
 800617e:	9a00      	ldr	r2, [sp, #0]
 8006180:	bfcc      	ite	gt
 8006182:	464d      	movgt	r5, r9
 8006184:	2501      	movle	r5, #1
 8006186:	4415      	add	r5, r2
 8006188:	f04f 0800 	mov.w	r8, #0
 800618c:	4659      	mov	r1, fp
 800618e:	2201      	movs	r2, #1
 8006190:	4620      	mov	r0, r4
 8006192:	9301      	str	r3, [sp, #4]
 8006194:	f000 fe3c 	bl	8006e10 <__lshift>
 8006198:	4631      	mov	r1, r6
 800619a:	4683      	mov	fp, r0
 800619c:	f000 fea4 	bl	8006ee8 <__mcmp>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	dcb2      	bgt.n	800610a <_dtoa_r+0xac2>
 80061a4:	d102      	bne.n	80061ac <_dtoa_r+0xb64>
 80061a6:	9b01      	ldr	r3, [sp, #4]
 80061a8:	07db      	lsls	r3, r3, #31
 80061aa:	d4ae      	bmi.n	800610a <_dtoa_r+0xac2>
 80061ac:	462b      	mov	r3, r5
 80061ae:	461d      	mov	r5, r3
 80061b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061b4:	2a30      	cmp	r2, #48	; 0x30
 80061b6:	d0fa      	beq.n	80061ae <_dtoa_r+0xb66>
 80061b8:	e6f7      	b.n	8005faa <_dtoa_r+0x962>
 80061ba:	9a00      	ldr	r2, [sp, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d1a5      	bne.n	800610c <_dtoa_r+0xac4>
 80061c0:	f10a 0a01 	add.w	sl, sl, #1
 80061c4:	2331      	movs	r3, #49	; 0x31
 80061c6:	e779      	b.n	80060bc <_dtoa_r+0xa74>
 80061c8:	4b13      	ldr	r3, [pc, #76]	; (8006218 <_dtoa_r+0xbd0>)
 80061ca:	f7ff baaf 	b.w	800572c <_dtoa_r+0xe4>
 80061ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f47f aa86 	bne.w	80056e2 <_dtoa_r+0x9a>
 80061d6:	4b11      	ldr	r3, [pc, #68]	; (800621c <_dtoa_r+0xbd4>)
 80061d8:	f7ff baa8 	b.w	800572c <_dtoa_r+0xe4>
 80061dc:	f1b9 0f00 	cmp.w	r9, #0
 80061e0:	dc03      	bgt.n	80061ea <_dtoa_r+0xba2>
 80061e2:	9b05      	ldr	r3, [sp, #20]
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	f73f aec9 	bgt.w	8005f7c <_dtoa_r+0x934>
 80061ea:	9d00      	ldr	r5, [sp, #0]
 80061ec:	4631      	mov	r1, r6
 80061ee:	4658      	mov	r0, fp
 80061f0:	f7ff f99c 	bl	800552c <quorem>
 80061f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80061f8:	f805 3b01 	strb.w	r3, [r5], #1
 80061fc:	9a00      	ldr	r2, [sp, #0]
 80061fe:	1aaa      	subs	r2, r5, r2
 8006200:	4591      	cmp	r9, r2
 8006202:	ddba      	ble.n	800617a <_dtoa_r+0xb32>
 8006204:	4659      	mov	r1, fp
 8006206:	2300      	movs	r3, #0
 8006208:	220a      	movs	r2, #10
 800620a:	4620      	mov	r0, r4
 800620c:	f000 fc06 	bl	8006a1c <__multadd>
 8006210:	4683      	mov	fp, r0
 8006212:	e7eb      	b.n	80061ec <_dtoa_r+0xba4>
 8006214:	080085d4 	.word	0x080085d4
 8006218:	080083d4 	.word	0x080083d4
 800621c:	08008551 	.word	0x08008551

08006220 <rshift>:
 8006220:	6903      	ldr	r3, [r0, #16]
 8006222:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006226:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800622a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800622e:	f100 0414 	add.w	r4, r0, #20
 8006232:	dd45      	ble.n	80062c0 <rshift+0xa0>
 8006234:	f011 011f 	ands.w	r1, r1, #31
 8006238:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800623c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006240:	d10c      	bne.n	800625c <rshift+0x3c>
 8006242:	f100 0710 	add.w	r7, r0, #16
 8006246:	4629      	mov	r1, r5
 8006248:	42b1      	cmp	r1, r6
 800624a:	d334      	bcc.n	80062b6 <rshift+0x96>
 800624c:	1a9b      	subs	r3, r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	1eea      	subs	r2, r5, #3
 8006252:	4296      	cmp	r6, r2
 8006254:	bf38      	it	cc
 8006256:	2300      	movcc	r3, #0
 8006258:	4423      	add	r3, r4
 800625a:	e015      	b.n	8006288 <rshift+0x68>
 800625c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006260:	f1c1 0820 	rsb	r8, r1, #32
 8006264:	40cf      	lsrs	r7, r1
 8006266:	f105 0e04 	add.w	lr, r5, #4
 800626a:	46a1      	mov	r9, r4
 800626c:	4576      	cmp	r6, lr
 800626e:	46f4      	mov	ip, lr
 8006270:	d815      	bhi.n	800629e <rshift+0x7e>
 8006272:	1a9b      	subs	r3, r3, r2
 8006274:	009a      	lsls	r2, r3, #2
 8006276:	3a04      	subs	r2, #4
 8006278:	3501      	adds	r5, #1
 800627a:	42ae      	cmp	r6, r5
 800627c:	bf38      	it	cc
 800627e:	2200      	movcc	r2, #0
 8006280:	18a3      	adds	r3, r4, r2
 8006282:	50a7      	str	r7, [r4, r2]
 8006284:	b107      	cbz	r7, 8006288 <rshift+0x68>
 8006286:	3304      	adds	r3, #4
 8006288:	1b1a      	subs	r2, r3, r4
 800628a:	42a3      	cmp	r3, r4
 800628c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006290:	bf08      	it	eq
 8006292:	2300      	moveq	r3, #0
 8006294:	6102      	str	r2, [r0, #16]
 8006296:	bf08      	it	eq
 8006298:	6143      	streq	r3, [r0, #20]
 800629a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800629e:	f8dc c000 	ldr.w	ip, [ip]
 80062a2:	fa0c fc08 	lsl.w	ip, ip, r8
 80062a6:	ea4c 0707 	orr.w	r7, ip, r7
 80062aa:	f849 7b04 	str.w	r7, [r9], #4
 80062ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80062b2:	40cf      	lsrs	r7, r1
 80062b4:	e7da      	b.n	800626c <rshift+0x4c>
 80062b6:	f851 cb04 	ldr.w	ip, [r1], #4
 80062ba:	f847 cf04 	str.w	ip, [r7, #4]!
 80062be:	e7c3      	b.n	8006248 <rshift+0x28>
 80062c0:	4623      	mov	r3, r4
 80062c2:	e7e1      	b.n	8006288 <rshift+0x68>

080062c4 <__hexdig_fun>:
 80062c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80062c8:	2b09      	cmp	r3, #9
 80062ca:	d802      	bhi.n	80062d2 <__hexdig_fun+0xe>
 80062cc:	3820      	subs	r0, #32
 80062ce:	b2c0      	uxtb	r0, r0
 80062d0:	4770      	bx	lr
 80062d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80062d6:	2b05      	cmp	r3, #5
 80062d8:	d801      	bhi.n	80062de <__hexdig_fun+0x1a>
 80062da:	3847      	subs	r0, #71	; 0x47
 80062dc:	e7f7      	b.n	80062ce <__hexdig_fun+0xa>
 80062de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80062e2:	2b05      	cmp	r3, #5
 80062e4:	d801      	bhi.n	80062ea <__hexdig_fun+0x26>
 80062e6:	3827      	subs	r0, #39	; 0x27
 80062e8:	e7f1      	b.n	80062ce <__hexdig_fun+0xa>
 80062ea:	2000      	movs	r0, #0
 80062ec:	4770      	bx	lr
	...

080062f0 <__gethex>:
 80062f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f4:	ed2d 8b02 	vpush	{d8}
 80062f8:	b089      	sub	sp, #36	; 0x24
 80062fa:	ee08 0a10 	vmov	s16, r0
 80062fe:	9304      	str	r3, [sp, #16]
 8006300:	4bbc      	ldr	r3, [pc, #752]	; (80065f4 <__gethex+0x304>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	9301      	str	r3, [sp, #4]
 8006306:	4618      	mov	r0, r3
 8006308:	468b      	mov	fp, r1
 800630a:	4690      	mov	r8, r2
 800630c:	f7f9 ff60 	bl	80001d0 <strlen>
 8006310:	9b01      	ldr	r3, [sp, #4]
 8006312:	f8db 2000 	ldr.w	r2, [fp]
 8006316:	4403      	add	r3, r0
 8006318:	4682      	mov	sl, r0
 800631a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800631e:	9305      	str	r3, [sp, #20]
 8006320:	1c93      	adds	r3, r2, #2
 8006322:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006326:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800632a:	32fe      	adds	r2, #254	; 0xfe
 800632c:	18d1      	adds	r1, r2, r3
 800632e:	461f      	mov	r7, r3
 8006330:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006334:	9100      	str	r1, [sp, #0]
 8006336:	2830      	cmp	r0, #48	; 0x30
 8006338:	d0f8      	beq.n	800632c <__gethex+0x3c>
 800633a:	f7ff ffc3 	bl	80062c4 <__hexdig_fun>
 800633e:	4604      	mov	r4, r0
 8006340:	2800      	cmp	r0, #0
 8006342:	d13a      	bne.n	80063ba <__gethex+0xca>
 8006344:	9901      	ldr	r1, [sp, #4]
 8006346:	4652      	mov	r2, sl
 8006348:	4638      	mov	r0, r7
 800634a:	f001 f9ed 	bl	8007728 <strncmp>
 800634e:	4605      	mov	r5, r0
 8006350:	2800      	cmp	r0, #0
 8006352:	d168      	bne.n	8006426 <__gethex+0x136>
 8006354:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006358:	eb07 060a 	add.w	r6, r7, sl
 800635c:	f7ff ffb2 	bl	80062c4 <__hexdig_fun>
 8006360:	2800      	cmp	r0, #0
 8006362:	d062      	beq.n	800642a <__gethex+0x13a>
 8006364:	4633      	mov	r3, r6
 8006366:	7818      	ldrb	r0, [r3, #0]
 8006368:	2830      	cmp	r0, #48	; 0x30
 800636a:	461f      	mov	r7, r3
 800636c:	f103 0301 	add.w	r3, r3, #1
 8006370:	d0f9      	beq.n	8006366 <__gethex+0x76>
 8006372:	f7ff ffa7 	bl	80062c4 <__hexdig_fun>
 8006376:	2301      	movs	r3, #1
 8006378:	fab0 f480 	clz	r4, r0
 800637c:	0964      	lsrs	r4, r4, #5
 800637e:	4635      	mov	r5, r6
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	463a      	mov	r2, r7
 8006384:	4616      	mov	r6, r2
 8006386:	3201      	adds	r2, #1
 8006388:	7830      	ldrb	r0, [r6, #0]
 800638a:	f7ff ff9b 	bl	80062c4 <__hexdig_fun>
 800638e:	2800      	cmp	r0, #0
 8006390:	d1f8      	bne.n	8006384 <__gethex+0x94>
 8006392:	9901      	ldr	r1, [sp, #4]
 8006394:	4652      	mov	r2, sl
 8006396:	4630      	mov	r0, r6
 8006398:	f001 f9c6 	bl	8007728 <strncmp>
 800639c:	b980      	cbnz	r0, 80063c0 <__gethex+0xd0>
 800639e:	b94d      	cbnz	r5, 80063b4 <__gethex+0xc4>
 80063a0:	eb06 050a 	add.w	r5, r6, sl
 80063a4:	462a      	mov	r2, r5
 80063a6:	4616      	mov	r6, r2
 80063a8:	3201      	adds	r2, #1
 80063aa:	7830      	ldrb	r0, [r6, #0]
 80063ac:	f7ff ff8a 	bl	80062c4 <__hexdig_fun>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d1f8      	bne.n	80063a6 <__gethex+0xb6>
 80063b4:	1bad      	subs	r5, r5, r6
 80063b6:	00ad      	lsls	r5, r5, #2
 80063b8:	e004      	b.n	80063c4 <__gethex+0xd4>
 80063ba:	2400      	movs	r4, #0
 80063bc:	4625      	mov	r5, r4
 80063be:	e7e0      	b.n	8006382 <__gethex+0x92>
 80063c0:	2d00      	cmp	r5, #0
 80063c2:	d1f7      	bne.n	80063b4 <__gethex+0xc4>
 80063c4:	7833      	ldrb	r3, [r6, #0]
 80063c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80063ca:	2b50      	cmp	r3, #80	; 0x50
 80063cc:	d13b      	bne.n	8006446 <__gethex+0x156>
 80063ce:	7873      	ldrb	r3, [r6, #1]
 80063d0:	2b2b      	cmp	r3, #43	; 0x2b
 80063d2:	d02c      	beq.n	800642e <__gethex+0x13e>
 80063d4:	2b2d      	cmp	r3, #45	; 0x2d
 80063d6:	d02e      	beq.n	8006436 <__gethex+0x146>
 80063d8:	1c71      	adds	r1, r6, #1
 80063da:	f04f 0900 	mov.w	r9, #0
 80063de:	7808      	ldrb	r0, [r1, #0]
 80063e0:	f7ff ff70 	bl	80062c4 <__hexdig_fun>
 80063e4:	1e43      	subs	r3, r0, #1
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b18      	cmp	r3, #24
 80063ea:	d82c      	bhi.n	8006446 <__gethex+0x156>
 80063ec:	f1a0 0210 	sub.w	r2, r0, #16
 80063f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80063f4:	f7ff ff66 	bl	80062c4 <__hexdig_fun>
 80063f8:	1e43      	subs	r3, r0, #1
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b18      	cmp	r3, #24
 80063fe:	d91d      	bls.n	800643c <__gethex+0x14c>
 8006400:	f1b9 0f00 	cmp.w	r9, #0
 8006404:	d000      	beq.n	8006408 <__gethex+0x118>
 8006406:	4252      	negs	r2, r2
 8006408:	4415      	add	r5, r2
 800640a:	f8cb 1000 	str.w	r1, [fp]
 800640e:	b1e4      	cbz	r4, 800644a <__gethex+0x15a>
 8006410:	9b00      	ldr	r3, [sp, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	bf14      	ite	ne
 8006416:	2700      	movne	r7, #0
 8006418:	2706      	moveq	r7, #6
 800641a:	4638      	mov	r0, r7
 800641c:	b009      	add	sp, #36	; 0x24
 800641e:	ecbd 8b02 	vpop	{d8}
 8006422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006426:	463e      	mov	r6, r7
 8006428:	4625      	mov	r5, r4
 800642a:	2401      	movs	r4, #1
 800642c:	e7ca      	b.n	80063c4 <__gethex+0xd4>
 800642e:	f04f 0900 	mov.w	r9, #0
 8006432:	1cb1      	adds	r1, r6, #2
 8006434:	e7d3      	b.n	80063de <__gethex+0xee>
 8006436:	f04f 0901 	mov.w	r9, #1
 800643a:	e7fa      	b.n	8006432 <__gethex+0x142>
 800643c:	230a      	movs	r3, #10
 800643e:	fb03 0202 	mla	r2, r3, r2, r0
 8006442:	3a10      	subs	r2, #16
 8006444:	e7d4      	b.n	80063f0 <__gethex+0x100>
 8006446:	4631      	mov	r1, r6
 8006448:	e7df      	b.n	800640a <__gethex+0x11a>
 800644a:	1bf3      	subs	r3, r6, r7
 800644c:	3b01      	subs	r3, #1
 800644e:	4621      	mov	r1, r4
 8006450:	2b07      	cmp	r3, #7
 8006452:	dc0b      	bgt.n	800646c <__gethex+0x17c>
 8006454:	ee18 0a10 	vmov	r0, s16
 8006458:	f000 fa7e 	bl	8006958 <_Balloc>
 800645c:	4604      	mov	r4, r0
 800645e:	b940      	cbnz	r0, 8006472 <__gethex+0x182>
 8006460:	4b65      	ldr	r3, [pc, #404]	; (80065f8 <__gethex+0x308>)
 8006462:	4602      	mov	r2, r0
 8006464:	21de      	movs	r1, #222	; 0xde
 8006466:	4865      	ldr	r0, [pc, #404]	; (80065fc <__gethex+0x30c>)
 8006468:	f001 f97e 	bl	8007768 <__assert_func>
 800646c:	3101      	adds	r1, #1
 800646e:	105b      	asrs	r3, r3, #1
 8006470:	e7ee      	b.n	8006450 <__gethex+0x160>
 8006472:	f100 0914 	add.w	r9, r0, #20
 8006476:	f04f 0b00 	mov.w	fp, #0
 800647a:	f1ca 0301 	rsb	r3, sl, #1
 800647e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006482:	f8cd b000 	str.w	fp, [sp]
 8006486:	9306      	str	r3, [sp, #24]
 8006488:	42b7      	cmp	r7, r6
 800648a:	d340      	bcc.n	800650e <__gethex+0x21e>
 800648c:	9802      	ldr	r0, [sp, #8]
 800648e:	9b00      	ldr	r3, [sp, #0]
 8006490:	f840 3b04 	str.w	r3, [r0], #4
 8006494:	eba0 0009 	sub.w	r0, r0, r9
 8006498:	1080      	asrs	r0, r0, #2
 800649a:	0146      	lsls	r6, r0, #5
 800649c:	6120      	str	r0, [r4, #16]
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 fb50 	bl	8006b44 <__hi0bits>
 80064a4:	1a30      	subs	r0, r6, r0
 80064a6:	f8d8 6000 	ldr.w	r6, [r8]
 80064aa:	42b0      	cmp	r0, r6
 80064ac:	dd63      	ble.n	8006576 <__gethex+0x286>
 80064ae:	1b87      	subs	r7, r0, r6
 80064b0:	4639      	mov	r1, r7
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 feea 	bl	800728c <__any_on>
 80064b8:	4682      	mov	sl, r0
 80064ba:	b1a8      	cbz	r0, 80064e8 <__gethex+0x1f8>
 80064bc:	1e7b      	subs	r3, r7, #1
 80064be:	1159      	asrs	r1, r3, #5
 80064c0:	f003 021f 	and.w	r2, r3, #31
 80064c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80064c8:	f04f 0a01 	mov.w	sl, #1
 80064cc:	fa0a f202 	lsl.w	r2, sl, r2
 80064d0:	420a      	tst	r2, r1
 80064d2:	d009      	beq.n	80064e8 <__gethex+0x1f8>
 80064d4:	4553      	cmp	r3, sl
 80064d6:	dd05      	ble.n	80064e4 <__gethex+0x1f4>
 80064d8:	1eb9      	subs	r1, r7, #2
 80064da:	4620      	mov	r0, r4
 80064dc:	f000 fed6 	bl	800728c <__any_on>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d145      	bne.n	8006570 <__gethex+0x280>
 80064e4:	f04f 0a02 	mov.w	sl, #2
 80064e8:	4639      	mov	r1, r7
 80064ea:	4620      	mov	r0, r4
 80064ec:	f7ff fe98 	bl	8006220 <rshift>
 80064f0:	443d      	add	r5, r7
 80064f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80064f6:	42ab      	cmp	r3, r5
 80064f8:	da4c      	bge.n	8006594 <__gethex+0x2a4>
 80064fa:	ee18 0a10 	vmov	r0, s16
 80064fe:	4621      	mov	r1, r4
 8006500:	f000 fa6a 	bl	80069d8 <_Bfree>
 8006504:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006506:	2300      	movs	r3, #0
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	27a3      	movs	r7, #163	; 0xa3
 800650c:	e785      	b.n	800641a <__gethex+0x12a>
 800650e:	1e73      	subs	r3, r6, #1
 8006510:	9a05      	ldr	r2, [sp, #20]
 8006512:	9303      	str	r3, [sp, #12]
 8006514:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006518:	4293      	cmp	r3, r2
 800651a:	d019      	beq.n	8006550 <__gethex+0x260>
 800651c:	f1bb 0f20 	cmp.w	fp, #32
 8006520:	d107      	bne.n	8006532 <__gethex+0x242>
 8006522:	9b02      	ldr	r3, [sp, #8]
 8006524:	9a00      	ldr	r2, [sp, #0]
 8006526:	f843 2b04 	str.w	r2, [r3], #4
 800652a:	9302      	str	r3, [sp, #8]
 800652c:	2300      	movs	r3, #0
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	469b      	mov	fp, r3
 8006532:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006536:	f7ff fec5 	bl	80062c4 <__hexdig_fun>
 800653a:	9b00      	ldr	r3, [sp, #0]
 800653c:	f000 000f 	and.w	r0, r0, #15
 8006540:	fa00 f00b 	lsl.w	r0, r0, fp
 8006544:	4303      	orrs	r3, r0
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	f10b 0b04 	add.w	fp, fp, #4
 800654c:	9b03      	ldr	r3, [sp, #12]
 800654e:	e00d      	b.n	800656c <__gethex+0x27c>
 8006550:	9b03      	ldr	r3, [sp, #12]
 8006552:	9a06      	ldr	r2, [sp, #24]
 8006554:	4413      	add	r3, r2
 8006556:	42bb      	cmp	r3, r7
 8006558:	d3e0      	bcc.n	800651c <__gethex+0x22c>
 800655a:	4618      	mov	r0, r3
 800655c:	9901      	ldr	r1, [sp, #4]
 800655e:	9307      	str	r3, [sp, #28]
 8006560:	4652      	mov	r2, sl
 8006562:	f001 f8e1 	bl	8007728 <strncmp>
 8006566:	9b07      	ldr	r3, [sp, #28]
 8006568:	2800      	cmp	r0, #0
 800656a:	d1d7      	bne.n	800651c <__gethex+0x22c>
 800656c:	461e      	mov	r6, r3
 800656e:	e78b      	b.n	8006488 <__gethex+0x198>
 8006570:	f04f 0a03 	mov.w	sl, #3
 8006574:	e7b8      	b.n	80064e8 <__gethex+0x1f8>
 8006576:	da0a      	bge.n	800658e <__gethex+0x29e>
 8006578:	1a37      	subs	r7, r6, r0
 800657a:	4621      	mov	r1, r4
 800657c:	ee18 0a10 	vmov	r0, s16
 8006580:	463a      	mov	r2, r7
 8006582:	f000 fc45 	bl	8006e10 <__lshift>
 8006586:	1bed      	subs	r5, r5, r7
 8006588:	4604      	mov	r4, r0
 800658a:	f100 0914 	add.w	r9, r0, #20
 800658e:	f04f 0a00 	mov.w	sl, #0
 8006592:	e7ae      	b.n	80064f2 <__gethex+0x202>
 8006594:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006598:	42a8      	cmp	r0, r5
 800659a:	dd72      	ble.n	8006682 <__gethex+0x392>
 800659c:	1b45      	subs	r5, r0, r5
 800659e:	42ae      	cmp	r6, r5
 80065a0:	dc36      	bgt.n	8006610 <__gethex+0x320>
 80065a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d02a      	beq.n	8006600 <__gethex+0x310>
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d02c      	beq.n	8006608 <__gethex+0x318>
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d115      	bne.n	80065de <__gethex+0x2ee>
 80065b2:	42ae      	cmp	r6, r5
 80065b4:	d113      	bne.n	80065de <__gethex+0x2ee>
 80065b6:	2e01      	cmp	r6, #1
 80065b8:	d10b      	bne.n	80065d2 <__gethex+0x2e2>
 80065ba:	9a04      	ldr	r2, [sp, #16]
 80065bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80065c0:	6013      	str	r3, [r2, #0]
 80065c2:	2301      	movs	r3, #1
 80065c4:	6123      	str	r3, [r4, #16]
 80065c6:	f8c9 3000 	str.w	r3, [r9]
 80065ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80065cc:	2762      	movs	r7, #98	; 0x62
 80065ce:	601c      	str	r4, [r3, #0]
 80065d0:	e723      	b.n	800641a <__gethex+0x12a>
 80065d2:	1e71      	subs	r1, r6, #1
 80065d4:	4620      	mov	r0, r4
 80065d6:	f000 fe59 	bl	800728c <__any_on>
 80065da:	2800      	cmp	r0, #0
 80065dc:	d1ed      	bne.n	80065ba <__gethex+0x2ca>
 80065de:	ee18 0a10 	vmov	r0, s16
 80065e2:	4621      	mov	r1, r4
 80065e4:	f000 f9f8 	bl	80069d8 <_Bfree>
 80065e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80065ea:	2300      	movs	r3, #0
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	2750      	movs	r7, #80	; 0x50
 80065f0:	e713      	b.n	800641a <__gethex+0x12a>
 80065f2:	bf00      	nop
 80065f4:	08008650 	.word	0x08008650
 80065f8:	080085d4 	.word	0x080085d4
 80065fc:	080085e5 	.word	0x080085e5
 8006600:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1eb      	bne.n	80065de <__gethex+0x2ee>
 8006606:	e7d8      	b.n	80065ba <__gethex+0x2ca>
 8006608:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1d5      	bne.n	80065ba <__gethex+0x2ca>
 800660e:	e7e6      	b.n	80065de <__gethex+0x2ee>
 8006610:	1e6f      	subs	r7, r5, #1
 8006612:	f1ba 0f00 	cmp.w	sl, #0
 8006616:	d131      	bne.n	800667c <__gethex+0x38c>
 8006618:	b127      	cbz	r7, 8006624 <__gethex+0x334>
 800661a:	4639      	mov	r1, r7
 800661c:	4620      	mov	r0, r4
 800661e:	f000 fe35 	bl	800728c <__any_on>
 8006622:	4682      	mov	sl, r0
 8006624:	117b      	asrs	r3, r7, #5
 8006626:	2101      	movs	r1, #1
 8006628:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800662c:	f007 071f 	and.w	r7, r7, #31
 8006630:	fa01 f707 	lsl.w	r7, r1, r7
 8006634:	421f      	tst	r7, r3
 8006636:	4629      	mov	r1, r5
 8006638:	4620      	mov	r0, r4
 800663a:	bf18      	it	ne
 800663c:	f04a 0a02 	orrne.w	sl, sl, #2
 8006640:	1b76      	subs	r6, r6, r5
 8006642:	f7ff fded 	bl	8006220 <rshift>
 8006646:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800664a:	2702      	movs	r7, #2
 800664c:	f1ba 0f00 	cmp.w	sl, #0
 8006650:	d048      	beq.n	80066e4 <__gethex+0x3f4>
 8006652:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006656:	2b02      	cmp	r3, #2
 8006658:	d015      	beq.n	8006686 <__gethex+0x396>
 800665a:	2b03      	cmp	r3, #3
 800665c:	d017      	beq.n	800668e <__gethex+0x39e>
 800665e:	2b01      	cmp	r3, #1
 8006660:	d109      	bne.n	8006676 <__gethex+0x386>
 8006662:	f01a 0f02 	tst.w	sl, #2
 8006666:	d006      	beq.n	8006676 <__gethex+0x386>
 8006668:	f8d9 0000 	ldr.w	r0, [r9]
 800666c:	ea4a 0a00 	orr.w	sl, sl, r0
 8006670:	f01a 0f01 	tst.w	sl, #1
 8006674:	d10e      	bne.n	8006694 <__gethex+0x3a4>
 8006676:	f047 0710 	orr.w	r7, r7, #16
 800667a:	e033      	b.n	80066e4 <__gethex+0x3f4>
 800667c:	f04f 0a01 	mov.w	sl, #1
 8006680:	e7d0      	b.n	8006624 <__gethex+0x334>
 8006682:	2701      	movs	r7, #1
 8006684:	e7e2      	b.n	800664c <__gethex+0x35c>
 8006686:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006688:	f1c3 0301 	rsb	r3, r3, #1
 800668c:	9315      	str	r3, [sp, #84]	; 0x54
 800668e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0f0      	beq.n	8006676 <__gethex+0x386>
 8006694:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006698:	f104 0314 	add.w	r3, r4, #20
 800669c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80066a0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80066a4:	f04f 0c00 	mov.w	ip, #0
 80066a8:	4618      	mov	r0, r3
 80066aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ae:	f1b2 3fff 	cmp.w	r2, #4294967295
 80066b2:	d01c      	beq.n	80066ee <__gethex+0x3fe>
 80066b4:	3201      	adds	r2, #1
 80066b6:	6002      	str	r2, [r0, #0]
 80066b8:	2f02      	cmp	r7, #2
 80066ba:	f104 0314 	add.w	r3, r4, #20
 80066be:	d13f      	bne.n	8006740 <__gethex+0x450>
 80066c0:	f8d8 2000 	ldr.w	r2, [r8]
 80066c4:	3a01      	subs	r2, #1
 80066c6:	42b2      	cmp	r2, r6
 80066c8:	d10a      	bne.n	80066e0 <__gethex+0x3f0>
 80066ca:	1171      	asrs	r1, r6, #5
 80066cc:	2201      	movs	r2, #1
 80066ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80066d2:	f006 061f 	and.w	r6, r6, #31
 80066d6:	fa02 f606 	lsl.w	r6, r2, r6
 80066da:	421e      	tst	r6, r3
 80066dc:	bf18      	it	ne
 80066de:	4617      	movne	r7, r2
 80066e0:	f047 0720 	orr.w	r7, r7, #32
 80066e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80066e6:	601c      	str	r4, [r3, #0]
 80066e8:	9b04      	ldr	r3, [sp, #16]
 80066ea:	601d      	str	r5, [r3, #0]
 80066ec:	e695      	b.n	800641a <__gethex+0x12a>
 80066ee:	4299      	cmp	r1, r3
 80066f0:	f843 cc04 	str.w	ip, [r3, #-4]
 80066f4:	d8d8      	bhi.n	80066a8 <__gethex+0x3b8>
 80066f6:	68a3      	ldr	r3, [r4, #8]
 80066f8:	459b      	cmp	fp, r3
 80066fa:	db19      	blt.n	8006730 <__gethex+0x440>
 80066fc:	6861      	ldr	r1, [r4, #4]
 80066fe:	ee18 0a10 	vmov	r0, s16
 8006702:	3101      	adds	r1, #1
 8006704:	f000 f928 	bl	8006958 <_Balloc>
 8006708:	4681      	mov	r9, r0
 800670a:	b918      	cbnz	r0, 8006714 <__gethex+0x424>
 800670c:	4b1a      	ldr	r3, [pc, #104]	; (8006778 <__gethex+0x488>)
 800670e:	4602      	mov	r2, r0
 8006710:	2184      	movs	r1, #132	; 0x84
 8006712:	e6a8      	b.n	8006466 <__gethex+0x176>
 8006714:	6922      	ldr	r2, [r4, #16]
 8006716:	3202      	adds	r2, #2
 8006718:	f104 010c 	add.w	r1, r4, #12
 800671c:	0092      	lsls	r2, r2, #2
 800671e:	300c      	adds	r0, #12
 8006720:	f000 f90c 	bl	800693c <memcpy>
 8006724:	4621      	mov	r1, r4
 8006726:	ee18 0a10 	vmov	r0, s16
 800672a:	f000 f955 	bl	80069d8 <_Bfree>
 800672e:	464c      	mov	r4, r9
 8006730:	6923      	ldr	r3, [r4, #16]
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006738:	6122      	str	r2, [r4, #16]
 800673a:	2201      	movs	r2, #1
 800673c:	615a      	str	r2, [r3, #20]
 800673e:	e7bb      	b.n	80066b8 <__gethex+0x3c8>
 8006740:	6922      	ldr	r2, [r4, #16]
 8006742:	455a      	cmp	r2, fp
 8006744:	dd0b      	ble.n	800675e <__gethex+0x46e>
 8006746:	2101      	movs	r1, #1
 8006748:	4620      	mov	r0, r4
 800674a:	f7ff fd69 	bl	8006220 <rshift>
 800674e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006752:	3501      	adds	r5, #1
 8006754:	42ab      	cmp	r3, r5
 8006756:	f6ff aed0 	blt.w	80064fa <__gethex+0x20a>
 800675a:	2701      	movs	r7, #1
 800675c:	e7c0      	b.n	80066e0 <__gethex+0x3f0>
 800675e:	f016 061f 	ands.w	r6, r6, #31
 8006762:	d0fa      	beq.n	800675a <__gethex+0x46a>
 8006764:	449a      	add	sl, r3
 8006766:	f1c6 0620 	rsb	r6, r6, #32
 800676a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800676e:	f000 f9e9 	bl	8006b44 <__hi0bits>
 8006772:	42b0      	cmp	r0, r6
 8006774:	dbe7      	blt.n	8006746 <__gethex+0x456>
 8006776:	e7f0      	b.n	800675a <__gethex+0x46a>
 8006778:	080085d4 	.word	0x080085d4

0800677c <L_shift>:
 800677c:	f1c2 0208 	rsb	r2, r2, #8
 8006780:	0092      	lsls	r2, r2, #2
 8006782:	b570      	push	{r4, r5, r6, lr}
 8006784:	f1c2 0620 	rsb	r6, r2, #32
 8006788:	6843      	ldr	r3, [r0, #4]
 800678a:	6804      	ldr	r4, [r0, #0]
 800678c:	fa03 f506 	lsl.w	r5, r3, r6
 8006790:	432c      	orrs	r4, r5
 8006792:	40d3      	lsrs	r3, r2
 8006794:	6004      	str	r4, [r0, #0]
 8006796:	f840 3f04 	str.w	r3, [r0, #4]!
 800679a:	4288      	cmp	r0, r1
 800679c:	d3f4      	bcc.n	8006788 <L_shift+0xc>
 800679e:	bd70      	pop	{r4, r5, r6, pc}

080067a0 <__match>:
 80067a0:	b530      	push	{r4, r5, lr}
 80067a2:	6803      	ldr	r3, [r0, #0]
 80067a4:	3301      	adds	r3, #1
 80067a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067aa:	b914      	cbnz	r4, 80067b2 <__match+0x12>
 80067ac:	6003      	str	r3, [r0, #0]
 80067ae:	2001      	movs	r0, #1
 80067b0:	bd30      	pop	{r4, r5, pc}
 80067b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80067ba:	2d19      	cmp	r5, #25
 80067bc:	bf98      	it	ls
 80067be:	3220      	addls	r2, #32
 80067c0:	42a2      	cmp	r2, r4
 80067c2:	d0f0      	beq.n	80067a6 <__match+0x6>
 80067c4:	2000      	movs	r0, #0
 80067c6:	e7f3      	b.n	80067b0 <__match+0x10>

080067c8 <__hexnan>:
 80067c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067cc:	680b      	ldr	r3, [r1, #0]
 80067ce:	6801      	ldr	r1, [r0, #0]
 80067d0:	115e      	asrs	r6, r3, #5
 80067d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80067d6:	f013 031f 	ands.w	r3, r3, #31
 80067da:	b087      	sub	sp, #28
 80067dc:	bf18      	it	ne
 80067de:	3604      	addne	r6, #4
 80067e0:	2500      	movs	r5, #0
 80067e2:	1f37      	subs	r7, r6, #4
 80067e4:	4682      	mov	sl, r0
 80067e6:	4690      	mov	r8, r2
 80067e8:	9301      	str	r3, [sp, #4]
 80067ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80067ee:	46b9      	mov	r9, r7
 80067f0:	463c      	mov	r4, r7
 80067f2:	9502      	str	r5, [sp, #8]
 80067f4:	46ab      	mov	fp, r5
 80067f6:	784a      	ldrb	r2, [r1, #1]
 80067f8:	1c4b      	adds	r3, r1, #1
 80067fa:	9303      	str	r3, [sp, #12]
 80067fc:	b342      	cbz	r2, 8006850 <__hexnan+0x88>
 80067fe:	4610      	mov	r0, r2
 8006800:	9105      	str	r1, [sp, #20]
 8006802:	9204      	str	r2, [sp, #16]
 8006804:	f7ff fd5e 	bl	80062c4 <__hexdig_fun>
 8006808:	2800      	cmp	r0, #0
 800680a:	d14f      	bne.n	80068ac <__hexnan+0xe4>
 800680c:	9a04      	ldr	r2, [sp, #16]
 800680e:	9905      	ldr	r1, [sp, #20]
 8006810:	2a20      	cmp	r2, #32
 8006812:	d818      	bhi.n	8006846 <__hexnan+0x7e>
 8006814:	9b02      	ldr	r3, [sp, #8]
 8006816:	459b      	cmp	fp, r3
 8006818:	dd13      	ble.n	8006842 <__hexnan+0x7a>
 800681a:	454c      	cmp	r4, r9
 800681c:	d206      	bcs.n	800682c <__hexnan+0x64>
 800681e:	2d07      	cmp	r5, #7
 8006820:	dc04      	bgt.n	800682c <__hexnan+0x64>
 8006822:	462a      	mov	r2, r5
 8006824:	4649      	mov	r1, r9
 8006826:	4620      	mov	r0, r4
 8006828:	f7ff ffa8 	bl	800677c <L_shift>
 800682c:	4544      	cmp	r4, r8
 800682e:	d950      	bls.n	80068d2 <__hexnan+0x10a>
 8006830:	2300      	movs	r3, #0
 8006832:	f1a4 0904 	sub.w	r9, r4, #4
 8006836:	f844 3c04 	str.w	r3, [r4, #-4]
 800683a:	f8cd b008 	str.w	fp, [sp, #8]
 800683e:	464c      	mov	r4, r9
 8006840:	461d      	mov	r5, r3
 8006842:	9903      	ldr	r1, [sp, #12]
 8006844:	e7d7      	b.n	80067f6 <__hexnan+0x2e>
 8006846:	2a29      	cmp	r2, #41	; 0x29
 8006848:	d156      	bne.n	80068f8 <__hexnan+0x130>
 800684a:	3102      	adds	r1, #2
 800684c:	f8ca 1000 	str.w	r1, [sl]
 8006850:	f1bb 0f00 	cmp.w	fp, #0
 8006854:	d050      	beq.n	80068f8 <__hexnan+0x130>
 8006856:	454c      	cmp	r4, r9
 8006858:	d206      	bcs.n	8006868 <__hexnan+0xa0>
 800685a:	2d07      	cmp	r5, #7
 800685c:	dc04      	bgt.n	8006868 <__hexnan+0xa0>
 800685e:	462a      	mov	r2, r5
 8006860:	4649      	mov	r1, r9
 8006862:	4620      	mov	r0, r4
 8006864:	f7ff ff8a 	bl	800677c <L_shift>
 8006868:	4544      	cmp	r4, r8
 800686a:	d934      	bls.n	80068d6 <__hexnan+0x10e>
 800686c:	f1a8 0204 	sub.w	r2, r8, #4
 8006870:	4623      	mov	r3, r4
 8006872:	f853 1b04 	ldr.w	r1, [r3], #4
 8006876:	f842 1f04 	str.w	r1, [r2, #4]!
 800687a:	429f      	cmp	r7, r3
 800687c:	d2f9      	bcs.n	8006872 <__hexnan+0xaa>
 800687e:	1b3b      	subs	r3, r7, r4
 8006880:	f023 0303 	bic.w	r3, r3, #3
 8006884:	3304      	adds	r3, #4
 8006886:	3401      	adds	r4, #1
 8006888:	3e03      	subs	r6, #3
 800688a:	42b4      	cmp	r4, r6
 800688c:	bf88      	it	hi
 800688e:	2304      	movhi	r3, #4
 8006890:	4443      	add	r3, r8
 8006892:	2200      	movs	r2, #0
 8006894:	f843 2b04 	str.w	r2, [r3], #4
 8006898:	429f      	cmp	r7, r3
 800689a:	d2fb      	bcs.n	8006894 <__hexnan+0xcc>
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	b91b      	cbnz	r3, 80068a8 <__hexnan+0xe0>
 80068a0:	4547      	cmp	r7, r8
 80068a2:	d127      	bne.n	80068f4 <__hexnan+0x12c>
 80068a4:	2301      	movs	r3, #1
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	2005      	movs	r0, #5
 80068aa:	e026      	b.n	80068fa <__hexnan+0x132>
 80068ac:	3501      	adds	r5, #1
 80068ae:	2d08      	cmp	r5, #8
 80068b0:	f10b 0b01 	add.w	fp, fp, #1
 80068b4:	dd06      	ble.n	80068c4 <__hexnan+0xfc>
 80068b6:	4544      	cmp	r4, r8
 80068b8:	d9c3      	bls.n	8006842 <__hexnan+0x7a>
 80068ba:	2300      	movs	r3, #0
 80068bc:	f844 3c04 	str.w	r3, [r4, #-4]
 80068c0:	2501      	movs	r5, #1
 80068c2:	3c04      	subs	r4, #4
 80068c4:	6822      	ldr	r2, [r4, #0]
 80068c6:	f000 000f 	and.w	r0, r0, #15
 80068ca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80068ce:	6022      	str	r2, [r4, #0]
 80068d0:	e7b7      	b.n	8006842 <__hexnan+0x7a>
 80068d2:	2508      	movs	r5, #8
 80068d4:	e7b5      	b.n	8006842 <__hexnan+0x7a>
 80068d6:	9b01      	ldr	r3, [sp, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d0df      	beq.n	800689c <__hexnan+0xd4>
 80068dc:	f04f 32ff 	mov.w	r2, #4294967295
 80068e0:	f1c3 0320 	rsb	r3, r3, #32
 80068e4:	fa22 f303 	lsr.w	r3, r2, r3
 80068e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80068ec:	401a      	ands	r2, r3
 80068ee:	f846 2c04 	str.w	r2, [r6, #-4]
 80068f2:	e7d3      	b.n	800689c <__hexnan+0xd4>
 80068f4:	3f04      	subs	r7, #4
 80068f6:	e7d1      	b.n	800689c <__hexnan+0xd4>
 80068f8:	2004      	movs	r0, #4
 80068fa:	b007      	add	sp, #28
 80068fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006900 <_localeconv_r>:
 8006900:	4800      	ldr	r0, [pc, #0]	; (8006904 <_localeconv_r+0x4>)
 8006902:	4770      	bx	lr
 8006904:	20000160 	.word	0x20000160

08006908 <malloc>:
 8006908:	4b02      	ldr	r3, [pc, #8]	; (8006914 <malloc+0xc>)
 800690a:	4601      	mov	r1, r0
 800690c:	6818      	ldr	r0, [r3, #0]
 800690e:	f000 bd3d 	b.w	800738c <_malloc_r>
 8006912:	bf00      	nop
 8006914:	20000008 	.word	0x20000008

08006918 <__ascii_mbtowc>:
 8006918:	b082      	sub	sp, #8
 800691a:	b901      	cbnz	r1, 800691e <__ascii_mbtowc+0x6>
 800691c:	a901      	add	r1, sp, #4
 800691e:	b142      	cbz	r2, 8006932 <__ascii_mbtowc+0x1a>
 8006920:	b14b      	cbz	r3, 8006936 <__ascii_mbtowc+0x1e>
 8006922:	7813      	ldrb	r3, [r2, #0]
 8006924:	600b      	str	r3, [r1, #0]
 8006926:	7812      	ldrb	r2, [r2, #0]
 8006928:	1e10      	subs	r0, r2, #0
 800692a:	bf18      	it	ne
 800692c:	2001      	movne	r0, #1
 800692e:	b002      	add	sp, #8
 8006930:	4770      	bx	lr
 8006932:	4610      	mov	r0, r2
 8006934:	e7fb      	b.n	800692e <__ascii_mbtowc+0x16>
 8006936:	f06f 0001 	mvn.w	r0, #1
 800693a:	e7f8      	b.n	800692e <__ascii_mbtowc+0x16>

0800693c <memcpy>:
 800693c:	440a      	add	r2, r1
 800693e:	4291      	cmp	r1, r2
 8006940:	f100 33ff 	add.w	r3, r0, #4294967295
 8006944:	d100      	bne.n	8006948 <memcpy+0xc>
 8006946:	4770      	bx	lr
 8006948:	b510      	push	{r4, lr}
 800694a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800694e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006952:	4291      	cmp	r1, r2
 8006954:	d1f9      	bne.n	800694a <memcpy+0xe>
 8006956:	bd10      	pop	{r4, pc}

08006958 <_Balloc>:
 8006958:	b570      	push	{r4, r5, r6, lr}
 800695a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800695c:	4604      	mov	r4, r0
 800695e:	460d      	mov	r5, r1
 8006960:	b976      	cbnz	r6, 8006980 <_Balloc+0x28>
 8006962:	2010      	movs	r0, #16
 8006964:	f7ff ffd0 	bl	8006908 <malloc>
 8006968:	4602      	mov	r2, r0
 800696a:	6260      	str	r0, [r4, #36]	; 0x24
 800696c:	b920      	cbnz	r0, 8006978 <_Balloc+0x20>
 800696e:	4b18      	ldr	r3, [pc, #96]	; (80069d0 <_Balloc+0x78>)
 8006970:	4818      	ldr	r0, [pc, #96]	; (80069d4 <_Balloc+0x7c>)
 8006972:	2166      	movs	r1, #102	; 0x66
 8006974:	f000 fef8 	bl	8007768 <__assert_func>
 8006978:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800697c:	6006      	str	r6, [r0, #0]
 800697e:	60c6      	str	r6, [r0, #12]
 8006980:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006982:	68f3      	ldr	r3, [r6, #12]
 8006984:	b183      	cbz	r3, 80069a8 <_Balloc+0x50>
 8006986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800698e:	b9b8      	cbnz	r0, 80069c0 <_Balloc+0x68>
 8006990:	2101      	movs	r1, #1
 8006992:	fa01 f605 	lsl.w	r6, r1, r5
 8006996:	1d72      	adds	r2, r6, #5
 8006998:	0092      	lsls	r2, r2, #2
 800699a:	4620      	mov	r0, r4
 800699c:	f000 fc97 	bl	80072ce <_calloc_r>
 80069a0:	b160      	cbz	r0, 80069bc <_Balloc+0x64>
 80069a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069a6:	e00e      	b.n	80069c6 <_Balloc+0x6e>
 80069a8:	2221      	movs	r2, #33	; 0x21
 80069aa:	2104      	movs	r1, #4
 80069ac:	4620      	mov	r0, r4
 80069ae:	f000 fc8e 	bl	80072ce <_calloc_r>
 80069b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069b4:	60f0      	str	r0, [r6, #12]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e4      	bne.n	8006986 <_Balloc+0x2e>
 80069bc:	2000      	movs	r0, #0
 80069be:	bd70      	pop	{r4, r5, r6, pc}
 80069c0:	6802      	ldr	r2, [r0, #0]
 80069c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069c6:	2300      	movs	r3, #0
 80069c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069cc:	e7f7      	b.n	80069be <_Balloc+0x66>
 80069ce:	bf00      	nop
 80069d0:	0800855e 	.word	0x0800855e
 80069d4:	08008664 	.word	0x08008664

080069d8 <_Bfree>:
 80069d8:	b570      	push	{r4, r5, r6, lr}
 80069da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80069dc:	4605      	mov	r5, r0
 80069de:	460c      	mov	r4, r1
 80069e0:	b976      	cbnz	r6, 8006a00 <_Bfree+0x28>
 80069e2:	2010      	movs	r0, #16
 80069e4:	f7ff ff90 	bl	8006908 <malloc>
 80069e8:	4602      	mov	r2, r0
 80069ea:	6268      	str	r0, [r5, #36]	; 0x24
 80069ec:	b920      	cbnz	r0, 80069f8 <_Bfree+0x20>
 80069ee:	4b09      	ldr	r3, [pc, #36]	; (8006a14 <_Bfree+0x3c>)
 80069f0:	4809      	ldr	r0, [pc, #36]	; (8006a18 <_Bfree+0x40>)
 80069f2:	218a      	movs	r1, #138	; 0x8a
 80069f4:	f000 feb8 	bl	8007768 <__assert_func>
 80069f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069fc:	6006      	str	r6, [r0, #0]
 80069fe:	60c6      	str	r6, [r0, #12]
 8006a00:	b13c      	cbz	r4, 8006a12 <_Bfree+0x3a>
 8006a02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a04:	6862      	ldr	r2, [r4, #4]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a0c:	6021      	str	r1, [r4, #0]
 8006a0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a12:	bd70      	pop	{r4, r5, r6, pc}
 8006a14:	0800855e 	.word	0x0800855e
 8006a18:	08008664 	.word	0x08008664

08006a1c <__multadd>:
 8006a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a20:	690e      	ldr	r6, [r1, #16]
 8006a22:	4607      	mov	r7, r0
 8006a24:	4698      	mov	r8, r3
 8006a26:	460c      	mov	r4, r1
 8006a28:	f101 0014 	add.w	r0, r1, #20
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	6805      	ldr	r5, [r0, #0]
 8006a30:	b2a9      	uxth	r1, r5
 8006a32:	fb02 8101 	mla	r1, r2, r1, r8
 8006a36:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006a3a:	0c2d      	lsrs	r5, r5, #16
 8006a3c:	fb02 c505 	mla	r5, r2, r5, ip
 8006a40:	b289      	uxth	r1, r1
 8006a42:	3301      	adds	r3, #1
 8006a44:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006a48:	429e      	cmp	r6, r3
 8006a4a:	f840 1b04 	str.w	r1, [r0], #4
 8006a4e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006a52:	dcec      	bgt.n	8006a2e <__multadd+0x12>
 8006a54:	f1b8 0f00 	cmp.w	r8, #0
 8006a58:	d022      	beq.n	8006aa0 <__multadd+0x84>
 8006a5a:	68a3      	ldr	r3, [r4, #8]
 8006a5c:	42b3      	cmp	r3, r6
 8006a5e:	dc19      	bgt.n	8006a94 <__multadd+0x78>
 8006a60:	6861      	ldr	r1, [r4, #4]
 8006a62:	4638      	mov	r0, r7
 8006a64:	3101      	adds	r1, #1
 8006a66:	f7ff ff77 	bl	8006958 <_Balloc>
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	b928      	cbnz	r0, 8006a7a <__multadd+0x5e>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	4b0d      	ldr	r3, [pc, #52]	; (8006aa8 <__multadd+0x8c>)
 8006a72:	480e      	ldr	r0, [pc, #56]	; (8006aac <__multadd+0x90>)
 8006a74:	21b5      	movs	r1, #181	; 0xb5
 8006a76:	f000 fe77 	bl	8007768 <__assert_func>
 8006a7a:	6922      	ldr	r2, [r4, #16]
 8006a7c:	3202      	adds	r2, #2
 8006a7e:	f104 010c 	add.w	r1, r4, #12
 8006a82:	0092      	lsls	r2, r2, #2
 8006a84:	300c      	adds	r0, #12
 8006a86:	f7ff ff59 	bl	800693c <memcpy>
 8006a8a:	4621      	mov	r1, r4
 8006a8c:	4638      	mov	r0, r7
 8006a8e:	f7ff ffa3 	bl	80069d8 <_Bfree>
 8006a92:	462c      	mov	r4, r5
 8006a94:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006a98:	3601      	adds	r6, #1
 8006a9a:	f8c3 8014 	str.w	r8, [r3, #20]
 8006a9e:	6126      	str	r6, [r4, #16]
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aa6:	bf00      	nop
 8006aa8:	080085d4 	.word	0x080085d4
 8006aac:	08008664 	.word	0x08008664

08006ab0 <__s2b>:
 8006ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	4615      	mov	r5, r2
 8006ab8:	461f      	mov	r7, r3
 8006aba:	2209      	movs	r2, #9
 8006abc:	3308      	adds	r3, #8
 8006abe:	4606      	mov	r6, r0
 8006ac0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	db09      	blt.n	8006ae0 <__s2b+0x30>
 8006acc:	4630      	mov	r0, r6
 8006ace:	f7ff ff43 	bl	8006958 <_Balloc>
 8006ad2:	b940      	cbnz	r0, 8006ae6 <__s2b+0x36>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	4b19      	ldr	r3, [pc, #100]	; (8006b3c <__s2b+0x8c>)
 8006ad8:	4819      	ldr	r0, [pc, #100]	; (8006b40 <__s2b+0x90>)
 8006ada:	21ce      	movs	r1, #206	; 0xce
 8006adc:	f000 fe44 	bl	8007768 <__assert_func>
 8006ae0:	0052      	lsls	r2, r2, #1
 8006ae2:	3101      	adds	r1, #1
 8006ae4:	e7f0      	b.n	8006ac8 <__s2b+0x18>
 8006ae6:	9b08      	ldr	r3, [sp, #32]
 8006ae8:	6143      	str	r3, [r0, #20]
 8006aea:	2d09      	cmp	r5, #9
 8006aec:	f04f 0301 	mov.w	r3, #1
 8006af0:	6103      	str	r3, [r0, #16]
 8006af2:	dd16      	ble.n	8006b22 <__s2b+0x72>
 8006af4:	f104 0909 	add.w	r9, r4, #9
 8006af8:	46c8      	mov	r8, r9
 8006afa:	442c      	add	r4, r5
 8006afc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006b00:	4601      	mov	r1, r0
 8006b02:	3b30      	subs	r3, #48	; 0x30
 8006b04:	220a      	movs	r2, #10
 8006b06:	4630      	mov	r0, r6
 8006b08:	f7ff ff88 	bl	8006a1c <__multadd>
 8006b0c:	45a0      	cmp	r8, r4
 8006b0e:	d1f5      	bne.n	8006afc <__s2b+0x4c>
 8006b10:	f1a5 0408 	sub.w	r4, r5, #8
 8006b14:	444c      	add	r4, r9
 8006b16:	1b2d      	subs	r5, r5, r4
 8006b18:	1963      	adds	r3, r4, r5
 8006b1a:	42bb      	cmp	r3, r7
 8006b1c:	db04      	blt.n	8006b28 <__s2b+0x78>
 8006b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b22:	340a      	adds	r4, #10
 8006b24:	2509      	movs	r5, #9
 8006b26:	e7f6      	b.n	8006b16 <__s2b+0x66>
 8006b28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006b2c:	4601      	mov	r1, r0
 8006b2e:	3b30      	subs	r3, #48	; 0x30
 8006b30:	220a      	movs	r2, #10
 8006b32:	4630      	mov	r0, r6
 8006b34:	f7ff ff72 	bl	8006a1c <__multadd>
 8006b38:	e7ee      	b.n	8006b18 <__s2b+0x68>
 8006b3a:	bf00      	nop
 8006b3c:	080085d4 	.word	0x080085d4
 8006b40:	08008664 	.word	0x08008664

08006b44 <__hi0bits>:
 8006b44:	0c03      	lsrs	r3, r0, #16
 8006b46:	041b      	lsls	r3, r3, #16
 8006b48:	b9d3      	cbnz	r3, 8006b80 <__hi0bits+0x3c>
 8006b4a:	0400      	lsls	r0, r0, #16
 8006b4c:	2310      	movs	r3, #16
 8006b4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006b52:	bf04      	itt	eq
 8006b54:	0200      	lsleq	r0, r0, #8
 8006b56:	3308      	addeq	r3, #8
 8006b58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006b5c:	bf04      	itt	eq
 8006b5e:	0100      	lsleq	r0, r0, #4
 8006b60:	3304      	addeq	r3, #4
 8006b62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006b66:	bf04      	itt	eq
 8006b68:	0080      	lsleq	r0, r0, #2
 8006b6a:	3302      	addeq	r3, #2
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	db05      	blt.n	8006b7c <__hi0bits+0x38>
 8006b70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006b74:	f103 0301 	add.w	r3, r3, #1
 8006b78:	bf08      	it	eq
 8006b7a:	2320      	moveq	r3, #32
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	4770      	bx	lr
 8006b80:	2300      	movs	r3, #0
 8006b82:	e7e4      	b.n	8006b4e <__hi0bits+0xa>

08006b84 <__lo0bits>:
 8006b84:	6803      	ldr	r3, [r0, #0]
 8006b86:	f013 0207 	ands.w	r2, r3, #7
 8006b8a:	4601      	mov	r1, r0
 8006b8c:	d00b      	beq.n	8006ba6 <__lo0bits+0x22>
 8006b8e:	07da      	lsls	r2, r3, #31
 8006b90:	d424      	bmi.n	8006bdc <__lo0bits+0x58>
 8006b92:	0798      	lsls	r0, r3, #30
 8006b94:	bf49      	itett	mi
 8006b96:	085b      	lsrmi	r3, r3, #1
 8006b98:	089b      	lsrpl	r3, r3, #2
 8006b9a:	2001      	movmi	r0, #1
 8006b9c:	600b      	strmi	r3, [r1, #0]
 8006b9e:	bf5c      	itt	pl
 8006ba0:	600b      	strpl	r3, [r1, #0]
 8006ba2:	2002      	movpl	r0, #2
 8006ba4:	4770      	bx	lr
 8006ba6:	b298      	uxth	r0, r3
 8006ba8:	b9b0      	cbnz	r0, 8006bd8 <__lo0bits+0x54>
 8006baa:	0c1b      	lsrs	r3, r3, #16
 8006bac:	2010      	movs	r0, #16
 8006bae:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006bb2:	bf04      	itt	eq
 8006bb4:	0a1b      	lsreq	r3, r3, #8
 8006bb6:	3008      	addeq	r0, #8
 8006bb8:	071a      	lsls	r2, r3, #28
 8006bba:	bf04      	itt	eq
 8006bbc:	091b      	lsreq	r3, r3, #4
 8006bbe:	3004      	addeq	r0, #4
 8006bc0:	079a      	lsls	r2, r3, #30
 8006bc2:	bf04      	itt	eq
 8006bc4:	089b      	lsreq	r3, r3, #2
 8006bc6:	3002      	addeq	r0, #2
 8006bc8:	07da      	lsls	r2, r3, #31
 8006bca:	d403      	bmi.n	8006bd4 <__lo0bits+0x50>
 8006bcc:	085b      	lsrs	r3, r3, #1
 8006bce:	f100 0001 	add.w	r0, r0, #1
 8006bd2:	d005      	beq.n	8006be0 <__lo0bits+0x5c>
 8006bd4:	600b      	str	r3, [r1, #0]
 8006bd6:	4770      	bx	lr
 8006bd8:	4610      	mov	r0, r2
 8006bda:	e7e8      	b.n	8006bae <__lo0bits+0x2a>
 8006bdc:	2000      	movs	r0, #0
 8006bde:	4770      	bx	lr
 8006be0:	2020      	movs	r0, #32
 8006be2:	4770      	bx	lr

08006be4 <__i2b>:
 8006be4:	b510      	push	{r4, lr}
 8006be6:	460c      	mov	r4, r1
 8006be8:	2101      	movs	r1, #1
 8006bea:	f7ff feb5 	bl	8006958 <_Balloc>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	b928      	cbnz	r0, 8006bfe <__i2b+0x1a>
 8006bf2:	4b05      	ldr	r3, [pc, #20]	; (8006c08 <__i2b+0x24>)
 8006bf4:	4805      	ldr	r0, [pc, #20]	; (8006c0c <__i2b+0x28>)
 8006bf6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006bfa:	f000 fdb5 	bl	8007768 <__assert_func>
 8006bfe:	2301      	movs	r3, #1
 8006c00:	6144      	str	r4, [r0, #20]
 8006c02:	6103      	str	r3, [r0, #16]
 8006c04:	bd10      	pop	{r4, pc}
 8006c06:	bf00      	nop
 8006c08:	080085d4 	.word	0x080085d4
 8006c0c:	08008664 	.word	0x08008664

08006c10 <__multiply>:
 8006c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c14:	4614      	mov	r4, r2
 8006c16:	690a      	ldr	r2, [r1, #16]
 8006c18:	6923      	ldr	r3, [r4, #16]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	bfb8      	it	lt
 8006c1e:	460b      	movlt	r3, r1
 8006c20:	460d      	mov	r5, r1
 8006c22:	bfbc      	itt	lt
 8006c24:	4625      	movlt	r5, r4
 8006c26:	461c      	movlt	r4, r3
 8006c28:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006c2c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006c30:	68ab      	ldr	r3, [r5, #8]
 8006c32:	6869      	ldr	r1, [r5, #4]
 8006c34:	eb0a 0709 	add.w	r7, sl, r9
 8006c38:	42bb      	cmp	r3, r7
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	bfb8      	it	lt
 8006c3e:	3101      	addlt	r1, #1
 8006c40:	f7ff fe8a 	bl	8006958 <_Balloc>
 8006c44:	b930      	cbnz	r0, 8006c54 <__multiply+0x44>
 8006c46:	4602      	mov	r2, r0
 8006c48:	4b42      	ldr	r3, [pc, #264]	; (8006d54 <__multiply+0x144>)
 8006c4a:	4843      	ldr	r0, [pc, #268]	; (8006d58 <__multiply+0x148>)
 8006c4c:	f240 115d 	movw	r1, #349	; 0x15d
 8006c50:	f000 fd8a 	bl	8007768 <__assert_func>
 8006c54:	f100 0614 	add.w	r6, r0, #20
 8006c58:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006c5c:	4633      	mov	r3, r6
 8006c5e:	2200      	movs	r2, #0
 8006c60:	4543      	cmp	r3, r8
 8006c62:	d31e      	bcc.n	8006ca2 <__multiply+0x92>
 8006c64:	f105 0c14 	add.w	ip, r5, #20
 8006c68:	f104 0314 	add.w	r3, r4, #20
 8006c6c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006c70:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006c74:	9202      	str	r2, [sp, #8]
 8006c76:	ebac 0205 	sub.w	r2, ip, r5
 8006c7a:	3a15      	subs	r2, #21
 8006c7c:	f022 0203 	bic.w	r2, r2, #3
 8006c80:	3204      	adds	r2, #4
 8006c82:	f105 0115 	add.w	r1, r5, #21
 8006c86:	458c      	cmp	ip, r1
 8006c88:	bf38      	it	cc
 8006c8a:	2204      	movcc	r2, #4
 8006c8c:	9201      	str	r2, [sp, #4]
 8006c8e:	9a02      	ldr	r2, [sp, #8]
 8006c90:	9303      	str	r3, [sp, #12]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d808      	bhi.n	8006ca8 <__multiply+0x98>
 8006c96:	2f00      	cmp	r7, #0
 8006c98:	dc55      	bgt.n	8006d46 <__multiply+0x136>
 8006c9a:	6107      	str	r7, [r0, #16]
 8006c9c:	b005      	add	sp, #20
 8006c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca2:	f843 2b04 	str.w	r2, [r3], #4
 8006ca6:	e7db      	b.n	8006c60 <__multiply+0x50>
 8006ca8:	f8b3 a000 	ldrh.w	sl, [r3]
 8006cac:	f1ba 0f00 	cmp.w	sl, #0
 8006cb0:	d020      	beq.n	8006cf4 <__multiply+0xe4>
 8006cb2:	f105 0e14 	add.w	lr, r5, #20
 8006cb6:	46b1      	mov	r9, r6
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006cbe:	f8d9 b000 	ldr.w	fp, [r9]
 8006cc2:	b2a1      	uxth	r1, r4
 8006cc4:	fa1f fb8b 	uxth.w	fp, fp
 8006cc8:	fb0a b101 	mla	r1, sl, r1, fp
 8006ccc:	4411      	add	r1, r2
 8006cce:	f8d9 2000 	ldr.w	r2, [r9]
 8006cd2:	0c24      	lsrs	r4, r4, #16
 8006cd4:	0c12      	lsrs	r2, r2, #16
 8006cd6:	fb0a 2404 	mla	r4, sl, r4, r2
 8006cda:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006cde:	b289      	uxth	r1, r1
 8006ce0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006ce4:	45f4      	cmp	ip, lr
 8006ce6:	f849 1b04 	str.w	r1, [r9], #4
 8006cea:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006cee:	d8e4      	bhi.n	8006cba <__multiply+0xaa>
 8006cf0:	9901      	ldr	r1, [sp, #4]
 8006cf2:	5072      	str	r2, [r6, r1]
 8006cf4:	9a03      	ldr	r2, [sp, #12]
 8006cf6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	f1b9 0f00 	cmp.w	r9, #0
 8006d00:	d01f      	beq.n	8006d42 <__multiply+0x132>
 8006d02:	6834      	ldr	r4, [r6, #0]
 8006d04:	f105 0114 	add.w	r1, r5, #20
 8006d08:	46b6      	mov	lr, r6
 8006d0a:	f04f 0a00 	mov.w	sl, #0
 8006d0e:	880a      	ldrh	r2, [r1, #0]
 8006d10:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006d14:	fb09 b202 	mla	r2, r9, r2, fp
 8006d18:	4492      	add	sl, r2
 8006d1a:	b2a4      	uxth	r4, r4
 8006d1c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006d20:	f84e 4b04 	str.w	r4, [lr], #4
 8006d24:	f851 4b04 	ldr.w	r4, [r1], #4
 8006d28:	f8be 2000 	ldrh.w	r2, [lr]
 8006d2c:	0c24      	lsrs	r4, r4, #16
 8006d2e:	fb09 2404 	mla	r4, r9, r4, r2
 8006d32:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006d36:	458c      	cmp	ip, r1
 8006d38:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006d3c:	d8e7      	bhi.n	8006d0e <__multiply+0xfe>
 8006d3e:	9a01      	ldr	r2, [sp, #4]
 8006d40:	50b4      	str	r4, [r6, r2]
 8006d42:	3604      	adds	r6, #4
 8006d44:	e7a3      	b.n	8006c8e <__multiply+0x7e>
 8006d46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1a5      	bne.n	8006c9a <__multiply+0x8a>
 8006d4e:	3f01      	subs	r7, #1
 8006d50:	e7a1      	b.n	8006c96 <__multiply+0x86>
 8006d52:	bf00      	nop
 8006d54:	080085d4 	.word	0x080085d4
 8006d58:	08008664 	.word	0x08008664

08006d5c <__pow5mult>:
 8006d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d60:	4615      	mov	r5, r2
 8006d62:	f012 0203 	ands.w	r2, r2, #3
 8006d66:	4606      	mov	r6, r0
 8006d68:	460f      	mov	r7, r1
 8006d6a:	d007      	beq.n	8006d7c <__pow5mult+0x20>
 8006d6c:	4c25      	ldr	r4, [pc, #148]	; (8006e04 <__pow5mult+0xa8>)
 8006d6e:	3a01      	subs	r2, #1
 8006d70:	2300      	movs	r3, #0
 8006d72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d76:	f7ff fe51 	bl	8006a1c <__multadd>
 8006d7a:	4607      	mov	r7, r0
 8006d7c:	10ad      	asrs	r5, r5, #2
 8006d7e:	d03d      	beq.n	8006dfc <__pow5mult+0xa0>
 8006d80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d82:	b97c      	cbnz	r4, 8006da4 <__pow5mult+0x48>
 8006d84:	2010      	movs	r0, #16
 8006d86:	f7ff fdbf 	bl	8006908 <malloc>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	6270      	str	r0, [r6, #36]	; 0x24
 8006d8e:	b928      	cbnz	r0, 8006d9c <__pow5mult+0x40>
 8006d90:	4b1d      	ldr	r3, [pc, #116]	; (8006e08 <__pow5mult+0xac>)
 8006d92:	481e      	ldr	r0, [pc, #120]	; (8006e0c <__pow5mult+0xb0>)
 8006d94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006d98:	f000 fce6 	bl	8007768 <__assert_func>
 8006d9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006da0:	6004      	str	r4, [r0, #0]
 8006da2:	60c4      	str	r4, [r0, #12]
 8006da4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006da8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006dac:	b94c      	cbnz	r4, 8006dc2 <__pow5mult+0x66>
 8006dae:	f240 2171 	movw	r1, #625	; 0x271
 8006db2:	4630      	mov	r0, r6
 8006db4:	f7ff ff16 	bl	8006be4 <__i2b>
 8006db8:	2300      	movs	r3, #0
 8006dba:	f8c8 0008 	str.w	r0, [r8, #8]
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	6003      	str	r3, [r0, #0]
 8006dc2:	f04f 0900 	mov.w	r9, #0
 8006dc6:	07eb      	lsls	r3, r5, #31
 8006dc8:	d50a      	bpl.n	8006de0 <__pow5mult+0x84>
 8006dca:	4639      	mov	r1, r7
 8006dcc:	4622      	mov	r2, r4
 8006dce:	4630      	mov	r0, r6
 8006dd0:	f7ff ff1e 	bl	8006c10 <__multiply>
 8006dd4:	4639      	mov	r1, r7
 8006dd6:	4680      	mov	r8, r0
 8006dd8:	4630      	mov	r0, r6
 8006dda:	f7ff fdfd 	bl	80069d8 <_Bfree>
 8006dde:	4647      	mov	r7, r8
 8006de0:	106d      	asrs	r5, r5, #1
 8006de2:	d00b      	beq.n	8006dfc <__pow5mult+0xa0>
 8006de4:	6820      	ldr	r0, [r4, #0]
 8006de6:	b938      	cbnz	r0, 8006df8 <__pow5mult+0x9c>
 8006de8:	4622      	mov	r2, r4
 8006dea:	4621      	mov	r1, r4
 8006dec:	4630      	mov	r0, r6
 8006dee:	f7ff ff0f 	bl	8006c10 <__multiply>
 8006df2:	6020      	str	r0, [r4, #0]
 8006df4:	f8c0 9000 	str.w	r9, [r0]
 8006df8:	4604      	mov	r4, r0
 8006dfa:	e7e4      	b.n	8006dc6 <__pow5mult+0x6a>
 8006dfc:	4638      	mov	r0, r7
 8006dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e02:	bf00      	nop
 8006e04:	080087b8 	.word	0x080087b8
 8006e08:	0800855e 	.word	0x0800855e
 8006e0c:	08008664 	.word	0x08008664

08006e10 <__lshift>:
 8006e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e14:	460c      	mov	r4, r1
 8006e16:	6849      	ldr	r1, [r1, #4]
 8006e18:	6923      	ldr	r3, [r4, #16]
 8006e1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e1e:	68a3      	ldr	r3, [r4, #8]
 8006e20:	4607      	mov	r7, r0
 8006e22:	4691      	mov	r9, r2
 8006e24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e28:	f108 0601 	add.w	r6, r8, #1
 8006e2c:	42b3      	cmp	r3, r6
 8006e2e:	db0b      	blt.n	8006e48 <__lshift+0x38>
 8006e30:	4638      	mov	r0, r7
 8006e32:	f7ff fd91 	bl	8006958 <_Balloc>
 8006e36:	4605      	mov	r5, r0
 8006e38:	b948      	cbnz	r0, 8006e4e <__lshift+0x3e>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	4b28      	ldr	r3, [pc, #160]	; (8006ee0 <__lshift+0xd0>)
 8006e3e:	4829      	ldr	r0, [pc, #164]	; (8006ee4 <__lshift+0xd4>)
 8006e40:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006e44:	f000 fc90 	bl	8007768 <__assert_func>
 8006e48:	3101      	adds	r1, #1
 8006e4a:	005b      	lsls	r3, r3, #1
 8006e4c:	e7ee      	b.n	8006e2c <__lshift+0x1c>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f100 0114 	add.w	r1, r0, #20
 8006e54:	f100 0210 	add.w	r2, r0, #16
 8006e58:	4618      	mov	r0, r3
 8006e5a:	4553      	cmp	r3, sl
 8006e5c:	db33      	blt.n	8006ec6 <__lshift+0xb6>
 8006e5e:	6920      	ldr	r0, [r4, #16]
 8006e60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e64:	f104 0314 	add.w	r3, r4, #20
 8006e68:	f019 091f 	ands.w	r9, r9, #31
 8006e6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e74:	d02b      	beq.n	8006ece <__lshift+0xbe>
 8006e76:	f1c9 0e20 	rsb	lr, r9, #32
 8006e7a:	468a      	mov	sl, r1
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	6818      	ldr	r0, [r3, #0]
 8006e80:	fa00 f009 	lsl.w	r0, r0, r9
 8006e84:	4302      	orrs	r2, r0
 8006e86:	f84a 2b04 	str.w	r2, [sl], #4
 8006e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e8e:	459c      	cmp	ip, r3
 8006e90:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e94:	d8f3      	bhi.n	8006e7e <__lshift+0x6e>
 8006e96:	ebac 0304 	sub.w	r3, ip, r4
 8006e9a:	3b15      	subs	r3, #21
 8006e9c:	f023 0303 	bic.w	r3, r3, #3
 8006ea0:	3304      	adds	r3, #4
 8006ea2:	f104 0015 	add.w	r0, r4, #21
 8006ea6:	4584      	cmp	ip, r0
 8006ea8:	bf38      	it	cc
 8006eaa:	2304      	movcc	r3, #4
 8006eac:	50ca      	str	r2, [r1, r3]
 8006eae:	b10a      	cbz	r2, 8006eb4 <__lshift+0xa4>
 8006eb0:	f108 0602 	add.w	r6, r8, #2
 8006eb4:	3e01      	subs	r6, #1
 8006eb6:	4638      	mov	r0, r7
 8006eb8:	612e      	str	r6, [r5, #16]
 8006eba:	4621      	mov	r1, r4
 8006ebc:	f7ff fd8c 	bl	80069d8 <_Bfree>
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006eca:	3301      	adds	r3, #1
 8006ecc:	e7c5      	b.n	8006e5a <__lshift+0x4a>
 8006ece:	3904      	subs	r1, #4
 8006ed0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ed4:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ed8:	459c      	cmp	ip, r3
 8006eda:	d8f9      	bhi.n	8006ed0 <__lshift+0xc0>
 8006edc:	e7ea      	b.n	8006eb4 <__lshift+0xa4>
 8006ede:	bf00      	nop
 8006ee0:	080085d4 	.word	0x080085d4
 8006ee4:	08008664 	.word	0x08008664

08006ee8 <__mcmp>:
 8006ee8:	b530      	push	{r4, r5, lr}
 8006eea:	6902      	ldr	r2, [r0, #16]
 8006eec:	690c      	ldr	r4, [r1, #16]
 8006eee:	1b12      	subs	r2, r2, r4
 8006ef0:	d10e      	bne.n	8006f10 <__mcmp+0x28>
 8006ef2:	f100 0314 	add.w	r3, r0, #20
 8006ef6:	3114      	adds	r1, #20
 8006ef8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006efc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006f00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006f04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006f08:	42a5      	cmp	r5, r4
 8006f0a:	d003      	beq.n	8006f14 <__mcmp+0x2c>
 8006f0c:	d305      	bcc.n	8006f1a <__mcmp+0x32>
 8006f0e:	2201      	movs	r2, #1
 8006f10:	4610      	mov	r0, r2
 8006f12:	bd30      	pop	{r4, r5, pc}
 8006f14:	4283      	cmp	r3, r0
 8006f16:	d3f3      	bcc.n	8006f00 <__mcmp+0x18>
 8006f18:	e7fa      	b.n	8006f10 <__mcmp+0x28>
 8006f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1e:	e7f7      	b.n	8006f10 <__mcmp+0x28>

08006f20 <__mdiff>:
 8006f20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f24:	460c      	mov	r4, r1
 8006f26:	4606      	mov	r6, r0
 8006f28:	4611      	mov	r1, r2
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	4617      	mov	r7, r2
 8006f2e:	f7ff ffdb 	bl	8006ee8 <__mcmp>
 8006f32:	1e05      	subs	r5, r0, #0
 8006f34:	d110      	bne.n	8006f58 <__mdiff+0x38>
 8006f36:	4629      	mov	r1, r5
 8006f38:	4630      	mov	r0, r6
 8006f3a:	f7ff fd0d 	bl	8006958 <_Balloc>
 8006f3e:	b930      	cbnz	r0, 8006f4e <__mdiff+0x2e>
 8006f40:	4b39      	ldr	r3, [pc, #228]	; (8007028 <__mdiff+0x108>)
 8006f42:	4602      	mov	r2, r0
 8006f44:	f240 2132 	movw	r1, #562	; 0x232
 8006f48:	4838      	ldr	r0, [pc, #224]	; (800702c <__mdiff+0x10c>)
 8006f4a:	f000 fc0d 	bl	8007768 <__assert_func>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f58:	bfa4      	itt	ge
 8006f5a:	463b      	movge	r3, r7
 8006f5c:	4627      	movge	r7, r4
 8006f5e:	4630      	mov	r0, r6
 8006f60:	6879      	ldr	r1, [r7, #4]
 8006f62:	bfa6      	itte	ge
 8006f64:	461c      	movge	r4, r3
 8006f66:	2500      	movge	r5, #0
 8006f68:	2501      	movlt	r5, #1
 8006f6a:	f7ff fcf5 	bl	8006958 <_Balloc>
 8006f6e:	b920      	cbnz	r0, 8006f7a <__mdiff+0x5a>
 8006f70:	4b2d      	ldr	r3, [pc, #180]	; (8007028 <__mdiff+0x108>)
 8006f72:	4602      	mov	r2, r0
 8006f74:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006f78:	e7e6      	b.n	8006f48 <__mdiff+0x28>
 8006f7a:	693e      	ldr	r6, [r7, #16]
 8006f7c:	60c5      	str	r5, [r0, #12]
 8006f7e:	6925      	ldr	r5, [r4, #16]
 8006f80:	f107 0114 	add.w	r1, r7, #20
 8006f84:	f104 0914 	add.w	r9, r4, #20
 8006f88:	f100 0e14 	add.w	lr, r0, #20
 8006f8c:	f107 0210 	add.w	r2, r7, #16
 8006f90:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006f94:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006f98:	46f2      	mov	sl, lr
 8006f9a:	2700      	movs	r7, #0
 8006f9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006fa0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006fa4:	fa1f f883 	uxth.w	r8, r3
 8006fa8:	fa17 f78b 	uxtah	r7, r7, fp
 8006fac:	0c1b      	lsrs	r3, r3, #16
 8006fae:	eba7 0808 	sub.w	r8, r7, r8
 8006fb2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006fb6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006fba:	fa1f f888 	uxth.w	r8, r8
 8006fbe:	141f      	asrs	r7, r3, #16
 8006fc0:	454d      	cmp	r5, r9
 8006fc2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006fc6:	f84a 3b04 	str.w	r3, [sl], #4
 8006fca:	d8e7      	bhi.n	8006f9c <__mdiff+0x7c>
 8006fcc:	1b2b      	subs	r3, r5, r4
 8006fce:	3b15      	subs	r3, #21
 8006fd0:	f023 0303 	bic.w	r3, r3, #3
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	3415      	adds	r4, #21
 8006fd8:	42a5      	cmp	r5, r4
 8006fda:	bf38      	it	cc
 8006fdc:	2304      	movcc	r3, #4
 8006fde:	4419      	add	r1, r3
 8006fe0:	4473      	add	r3, lr
 8006fe2:	469e      	mov	lr, r3
 8006fe4:	460d      	mov	r5, r1
 8006fe6:	4565      	cmp	r5, ip
 8006fe8:	d30e      	bcc.n	8007008 <__mdiff+0xe8>
 8006fea:	f10c 0203 	add.w	r2, ip, #3
 8006fee:	1a52      	subs	r2, r2, r1
 8006ff0:	f022 0203 	bic.w	r2, r2, #3
 8006ff4:	3903      	subs	r1, #3
 8006ff6:	458c      	cmp	ip, r1
 8006ff8:	bf38      	it	cc
 8006ffa:	2200      	movcc	r2, #0
 8006ffc:	441a      	add	r2, r3
 8006ffe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007002:	b17b      	cbz	r3, 8007024 <__mdiff+0x104>
 8007004:	6106      	str	r6, [r0, #16]
 8007006:	e7a5      	b.n	8006f54 <__mdiff+0x34>
 8007008:	f855 8b04 	ldr.w	r8, [r5], #4
 800700c:	fa17 f488 	uxtah	r4, r7, r8
 8007010:	1422      	asrs	r2, r4, #16
 8007012:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007016:	b2a4      	uxth	r4, r4
 8007018:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800701c:	f84e 4b04 	str.w	r4, [lr], #4
 8007020:	1417      	asrs	r7, r2, #16
 8007022:	e7e0      	b.n	8006fe6 <__mdiff+0xc6>
 8007024:	3e01      	subs	r6, #1
 8007026:	e7ea      	b.n	8006ffe <__mdiff+0xde>
 8007028:	080085d4 	.word	0x080085d4
 800702c:	08008664 	.word	0x08008664

08007030 <__ulp>:
 8007030:	b082      	sub	sp, #8
 8007032:	ed8d 0b00 	vstr	d0, [sp]
 8007036:	9b01      	ldr	r3, [sp, #4]
 8007038:	4912      	ldr	r1, [pc, #72]	; (8007084 <__ulp+0x54>)
 800703a:	4019      	ands	r1, r3
 800703c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007040:	2900      	cmp	r1, #0
 8007042:	dd05      	ble.n	8007050 <__ulp+0x20>
 8007044:	2200      	movs	r2, #0
 8007046:	460b      	mov	r3, r1
 8007048:	ec43 2b10 	vmov	d0, r2, r3
 800704c:	b002      	add	sp, #8
 800704e:	4770      	bx	lr
 8007050:	4249      	negs	r1, r1
 8007052:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007056:	ea4f 5021 	mov.w	r0, r1, asr #20
 800705a:	f04f 0200 	mov.w	r2, #0
 800705e:	f04f 0300 	mov.w	r3, #0
 8007062:	da04      	bge.n	800706e <__ulp+0x3e>
 8007064:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007068:	fa41 f300 	asr.w	r3, r1, r0
 800706c:	e7ec      	b.n	8007048 <__ulp+0x18>
 800706e:	f1a0 0114 	sub.w	r1, r0, #20
 8007072:	291e      	cmp	r1, #30
 8007074:	bfda      	itte	le
 8007076:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800707a:	fa20 f101 	lsrle.w	r1, r0, r1
 800707e:	2101      	movgt	r1, #1
 8007080:	460a      	mov	r2, r1
 8007082:	e7e1      	b.n	8007048 <__ulp+0x18>
 8007084:	7ff00000 	.word	0x7ff00000

08007088 <__b2d>:
 8007088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708a:	6905      	ldr	r5, [r0, #16]
 800708c:	f100 0714 	add.w	r7, r0, #20
 8007090:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007094:	1f2e      	subs	r6, r5, #4
 8007096:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800709a:	4620      	mov	r0, r4
 800709c:	f7ff fd52 	bl	8006b44 <__hi0bits>
 80070a0:	f1c0 0320 	rsb	r3, r0, #32
 80070a4:	280a      	cmp	r0, #10
 80070a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007124 <__b2d+0x9c>
 80070aa:	600b      	str	r3, [r1, #0]
 80070ac:	dc14      	bgt.n	80070d8 <__b2d+0x50>
 80070ae:	f1c0 0e0b 	rsb	lr, r0, #11
 80070b2:	fa24 f10e 	lsr.w	r1, r4, lr
 80070b6:	42b7      	cmp	r7, r6
 80070b8:	ea41 030c 	orr.w	r3, r1, ip
 80070bc:	bf34      	ite	cc
 80070be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80070c2:	2100      	movcs	r1, #0
 80070c4:	3015      	adds	r0, #21
 80070c6:	fa04 f000 	lsl.w	r0, r4, r0
 80070ca:	fa21 f10e 	lsr.w	r1, r1, lr
 80070ce:	ea40 0201 	orr.w	r2, r0, r1
 80070d2:	ec43 2b10 	vmov	d0, r2, r3
 80070d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070d8:	42b7      	cmp	r7, r6
 80070da:	bf3a      	itte	cc
 80070dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80070e0:	f1a5 0608 	subcc.w	r6, r5, #8
 80070e4:	2100      	movcs	r1, #0
 80070e6:	380b      	subs	r0, #11
 80070e8:	d017      	beq.n	800711a <__b2d+0x92>
 80070ea:	f1c0 0c20 	rsb	ip, r0, #32
 80070ee:	fa04 f500 	lsl.w	r5, r4, r0
 80070f2:	42be      	cmp	r6, r7
 80070f4:	fa21 f40c 	lsr.w	r4, r1, ip
 80070f8:	ea45 0504 	orr.w	r5, r5, r4
 80070fc:	bf8c      	ite	hi
 80070fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007102:	2400      	movls	r4, #0
 8007104:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007108:	fa01 f000 	lsl.w	r0, r1, r0
 800710c:	fa24 f40c 	lsr.w	r4, r4, ip
 8007110:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007114:	ea40 0204 	orr.w	r2, r0, r4
 8007118:	e7db      	b.n	80070d2 <__b2d+0x4a>
 800711a:	ea44 030c 	orr.w	r3, r4, ip
 800711e:	460a      	mov	r2, r1
 8007120:	e7d7      	b.n	80070d2 <__b2d+0x4a>
 8007122:	bf00      	nop
 8007124:	3ff00000 	.word	0x3ff00000

08007128 <__d2b>:
 8007128:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800712c:	4689      	mov	r9, r1
 800712e:	2101      	movs	r1, #1
 8007130:	ec57 6b10 	vmov	r6, r7, d0
 8007134:	4690      	mov	r8, r2
 8007136:	f7ff fc0f 	bl	8006958 <_Balloc>
 800713a:	4604      	mov	r4, r0
 800713c:	b930      	cbnz	r0, 800714c <__d2b+0x24>
 800713e:	4602      	mov	r2, r0
 8007140:	4b25      	ldr	r3, [pc, #148]	; (80071d8 <__d2b+0xb0>)
 8007142:	4826      	ldr	r0, [pc, #152]	; (80071dc <__d2b+0xb4>)
 8007144:	f240 310a 	movw	r1, #778	; 0x30a
 8007148:	f000 fb0e 	bl	8007768 <__assert_func>
 800714c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007150:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007154:	bb35      	cbnz	r5, 80071a4 <__d2b+0x7c>
 8007156:	2e00      	cmp	r6, #0
 8007158:	9301      	str	r3, [sp, #4]
 800715a:	d028      	beq.n	80071ae <__d2b+0x86>
 800715c:	4668      	mov	r0, sp
 800715e:	9600      	str	r6, [sp, #0]
 8007160:	f7ff fd10 	bl	8006b84 <__lo0bits>
 8007164:	9900      	ldr	r1, [sp, #0]
 8007166:	b300      	cbz	r0, 80071aa <__d2b+0x82>
 8007168:	9a01      	ldr	r2, [sp, #4]
 800716a:	f1c0 0320 	rsb	r3, r0, #32
 800716e:	fa02 f303 	lsl.w	r3, r2, r3
 8007172:	430b      	orrs	r3, r1
 8007174:	40c2      	lsrs	r2, r0
 8007176:	6163      	str	r3, [r4, #20]
 8007178:	9201      	str	r2, [sp, #4]
 800717a:	9b01      	ldr	r3, [sp, #4]
 800717c:	61a3      	str	r3, [r4, #24]
 800717e:	2b00      	cmp	r3, #0
 8007180:	bf14      	ite	ne
 8007182:	2202      	movne	r2, #2
 8007184:	2201      	moveq	r2, #1
 8007186:	6122      	str	r2, [r4, #16]
 8007188:	b1d5      	cbz	r5, 80071c0 <__d2b+0x98>
 800718a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800718e:	4405      	add	r5, r0
 8007190:	f8c9 5000 	str.w	r5, [r9]
 8007194:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007198:	f8c8 0000 	str.w	r0, [r8]
 800719c:	4620      	mov	r0, r4
 800719e:	b003      	add	sp, #12
 80071a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071a8:	e7d5      	b.n	8007156 <__d2b+0x2e>
 80071aa:	6161      	str	r1, [r4, #20]
 80071ac:	e7e5      	b.n	800717a <__d2b+0x52>
 80071ae:	a801      	add	r0, sp, #4
 80071b0:	f7ff fce8 	bl	8006b84 <__lo0bits>
 80071b4:	9b01      	ldr	r3, [sp, #4]
 80071b6:	6163      	str	r3, [r4, #20]
 80071b8:	2201      	movs	r2, #1
 80071ba:	6122      	str	r2, [r4, #16]
 80071bc:	3020      	adds	r0, #32
 80071be:	e7e3      	b.n	8007188 <__d2b+0x60>
 80071c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80071c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80071c8:	f8c9 0000 	str.w	r0, [r9]
 80071cc:	6918      	ldr	r0, [r3, #16]
 80071ce:	f7ff fcb9 	bl	8006b44 <__hi0bits>
 80071d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80071d6:	e7df      	b.n	8007198 <__d2b+0x70>
 80071d8:	080085d4 	.word	0x080085d4
 80071dc:	08008664 	.word	0x08008664

080071e0 <__ratio>:
 80071e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	4688      	mov	r8, r1
 80071e6:	4669      	mov	r1, sp
 80071e8:	4681      	mov	r9, r0
 80071ea:	f7ff ff4d 	bl	8007088 <__b2d>
 80071ee:	a901      	add	r1, sp, #4
 80071f0:	4640      	mov	r0, r8
 80071f2:	ec55 4b10 	vmov	r4, r5, d0
 80071f6:	f7ff ff47 	bl	8007088 <__b2d>
 80071fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007202:	eba3 0c02 	sub.w	ip, r3, r2
 8007206:	e9dd 3200 	ldrd	r3, r2, [sp]
 800720a:	1a9b      	subs	r3, r3, r2
 800720c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007210:	ec51 0b10 	vmov	r0, r1, d0
 8007214:	2b00      	cmp	r3, #0
 8007216:	bfd6      	itet	le
 8007218:	460a      	movle	r2, r1
 800721a:	462a      	movgt	r2, r5
 800721c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007220:	468b      	mov	fp, r1
 8007222:	462f      	mov	r7, r5
 8007224:	bfd4      	ite	le
 8007226:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800722a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800722e:	4620      	mov	r0, r4
 8007230:	ee10 2a10 	vmov	r2, s0
 8007234:	465b      	mov	r3, fp
 8007236:	4639      	mov	r1, r7
 8007238:	f7f9 fb08 	bl	800084c <__aeabi_ddiv>
 800723c:	ec41 0b10 	vmov	d0, r0, r1
 8007240:	b003      	add	sp, #12
 8007242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007246 <__copybits>:
 8007246:	3901      	subs	r1, #1
 8007248:	b570      	push	{r4, r5, r6, lr}
 800724a:	1149      	asrs	r1, r1, #5
 800724c:	6914      	ldr	r4, [r2, #16]
 800724e:	3101      	adds	r1, #1
 8007250:	f102 0314 	add.w	r3, r2, #20
 8007254:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007258:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800725c:	1f05      	subs	r5, r0, #4
 800725e:	42a3      	cmp	r3, r4
 8007260:	d30c      	bcc.n	800727c <__copybits+0x36>
 8007262:	1aa3      	subs	r3, r4, r2
 8007264:	3b11      	subs	r3, #17
 8007266:	f023 0303 	bic.w	r3, r3, #3
 800726a:	3211      	adds	r2, #17
 800726c:	42a2      	cmp	r2, r4
 800726e:	bf88      	it	hi
 8007270:	2300      	movhi	r3, #0
 8007272:	4418      	add	r0, r3
 8007274:	2300      	movs	r3, #0
 8007276:	4288      	cmp	r0, r1
 8007278:	d305      	bcc.n	8007286 <__copybits+0x40>
 800727a:	bd70      	pop	{r4, r5, r6, pc}
 800727c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007280:	f845 6f04 	str.w	r6, [r5, #4]!
 8007284:	e7eb      	b.n	800725e <__copybits+0x18>
 8007286:	f840 3b04 	str.w	r3, [r0], #4
 800728a:	e7f4      	b.n	8007276 <__copybits+0x30>

0800728c <__any_on>:
 800728c:	f100 0214 	add.w	r2, r0, #20
 8007290:	6900      	ldr	r0, [r0, #16]
 8007292:	114b      	asrs	r3, r1, #5
 8007294:	4298      	cmp	r0, r3
 8007296:	b510      	push	{r4, lr}
 8007298:	db11      	blt.n	80072be <__any_on+0x32>
 800729a:	dd0a      	ble.n	80072b2 <__any_on+0x26>
 800729c:	f011 011f 	ands.w	r1, r1, #31
 80072a0:	d007      	beq.n	80072b2 <__any_on+0x26>
 80072a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80072a6:	fa24 f001 	lsr.w	r0, r4, r1
 80072aa:	fa00 f101 	lsl.w	r1, r0, r1
 80072ae:	428c      	cmp	r4, r1
 80072b0:	d10b      	bne.n	80072ca <__any_on+0x3e>
 80072b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d803      	bhi.n	80072c2 <__any_on+0x36>
 80072ba:	2000      	movs	r0, #0
 80072bc:	bd10      	pop	{r4, pc}
 80072be:	4603      	mov	r3, r0
 80072c0:	e7f7      	b.n	80072b2 <__any_on+0x26>
 80072c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80072c6:	2900      	cmp	r1, #0
 80072c8:	d0f5      	beq.n	80072b6 <__any_on+0x2a>
 80072ca:	2001      	movs	r0, #1
 80072cc:	e7f6      	b.n	80072bc <__any_on+0x30>

080072ce <_calloc_r>:
 80072ce:	b513      	push	{r0, r1, r4, lr}
 80072d0:	434a      	muls	r2, r1
 80072d2:	4611      	mov	r1, r2
 80072d4:	9201      	str	r2, [sp, #4]
 80072d6:	f000 f859 	bl	800738c <_malloc_r>
 80072da:	4604      	mov	r4, r0
 80072dc:	b118      	cbz	r0, 80072e6 <_calloc_r+0x18>
 80072de:	9a01      	ldr	r2, [sp, #4]
 80072e0:	2100      	movs	r1, #0
 80072e2:	f7fc fbc7 	bl	8003a74 <memset>
 80072e6:	4620      	mov	r0, r4
 80072e8:	b002      	add	sp, #8
 80072ea:	bd10      	pop	{r4, pc}

080072ec <_free_r>:
 80072ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072ee:	2900      	cmp	r1, #0
 80072f0:	d048      	beq.n	8007384 <_free_r+0x98>
 80072f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072f6:	9001      	str	r0, [sp, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f1a1 0404 	sub.w	r4, r1, #4
 80072fe:	bfb8      	it	lt
 8007300:	18e4      	addlt	r4, r4, r3
 8007302:	f000 fa7b 	bl	80077fc <__malloc_lock>
 8007306:	4a20      	ldr	r2, [pc, #128]	; (8007388 <_free_r+0x9c>)
 8007308:	9801      	ldr	r0, [sp, #4]
 800730a:	6813      	ldr	r3, [r2, #0]
 800730c:	4615      	mov	r5, r2
 800730e:	b933      	cbnz	r3, 800731e <_free_r+0x32>
 8007310:	6063      	str	r3, [r4, #4]
 8007312:	6014      	str	r4, [r2, #0]
 8007314:	b003      	add	sp, #12
 8007316:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800731a:	f000 ba75 	b.w	8007808 <__malloc_unlock>
 800731e:	42a3      	cmp	r3, r4
 8007320:	d90b      	bls.n	800733a <_free_r+0x4e>
 8007322:	6821      	ldr	r1, [r4, #0]
 8007324:	1862      	adds	r2, r4, r1
 8007326:	4293      	cmp	r3, r2
 8007328:	bf04      	itt	eq
 800732a:	681a      	ldreq	r2, [r3, #0]
 800732c:	685b      	ldreq	r3, [r3, #4]
 800732e:	6063      	str	r3, [r4, #4]
 8007330:	bf04      	itt	eq
 8007332:	1852      	addeq	r2, r2, r1
 8007334:	6022      	streq	r2, [r4, #0]
 8007336:	602c      	str	r4, [r5, #0]
 8007338:	e7ec      	b.n	8007314 <_free_r+0x28>
 800733a:	461a      	mov	r2, r3
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	b10b      	cbz	r3, 8007344 <_free_r+0x58>
 8007340:	42a3      	cmp	r3, r4
 8007342:	d9fa      	bls.n	800733a <_free_r+0x4e>
 8007344:	6811      	ldr	r1, [r2, #0]
 8007346:	1855      	adds	r5, r2, r1
 8007348:	42a5      	cmp	r5, r4
 800734a:	d10b      	bne.n	8007364 <_free_r+0x78>
 800734c:	6824      	ldr	r4, [r4, #0]
 800734e:	4421      	add	r1, r4
 8007350:	1854      	adds	r4, r2, r1
 8007352:	42a3      	cmp	r3, r4
 8007354:	6011      	str	r1, [r2, #0]
 8007356:	d1dd      	bne.n	8007314 <_free_r+0x28>
 8007358:	681c      	ldr	r4, [r3, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	6053      	str	r3, [r2, #4]
 800735e:	4421      	add	r1, r4
 8007360:	6011      	str	r1, [r2, #0]
 8007362:	e7d7      	b.n	8007314 <_free_r+0x28>
 8007364:	d902      	bls.n	800736c <_free_r+0x80>
 8007366:	230c      	movs	r3, #12
 8007368:	6003      	str	r3, [r0, #0]
 800736a:	e7d3      	b.n	8007314 <_free_r+0x28>
 800736c:	6825      	ldr	r5, [r4, #0]
 800736e:	1961      	adds	r1, r4, r5
 8007370:	428b      	cmp	r3, r1
 8007372:	bf04      	itt	eq
 8007374:	6819      	ldreq	r1, [r3, #0]
 8007376:	685b      	ldreq	r3, [r3, #4]
 8007378:	6063      	str	r3, [r4, #4]
 800737a:	bf04      	itt	eq
 800737c:	1949      	addeq	r1, r1, r5
 800737e:	6021      	streq	r1, [r4, #0]
 8007380:	6054      	str	r4, [r2, #4]
 8007382:	e7c7      	b.n	8007314 <_free_r+0x28>
 8007384:	b003      	add	sp, #12
 8007386:	bd30      	pop	{r4, r5, pc}
 8007388:	20000208 	.word	0x20000208

0800738c <_malloc_r>:
 800738c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738e:	1ccd      	adds	r5, r1, #3
 8007390:	f025 0503 	bic.w	r5, r5, #3
 8007394:	3508      	adds	r5, #8
 8007396:	2d0c      	cmp	r5, #12
 8007398:	bf38      	it	cc
 800739a:	250c      	movcc	r5, #12
 800739c:	2d00      	cmp	r5, #0
 800739e:	4606      	mov	r6, r0
 80073a0:	db01      	blt.n	80073a6 <_malloc_r+0x1a>
 80073a2:	42a9      	cmp	r1, r5
 80073a4:	d903      	bls.n	80073ae <_malloc_r+0x22>
 80073a6:	230c      	movs	r3, #12
 80073a8:	6033      	str	r3, [r6, #0]
 80073aa:	2000      	movs	r0, #0
 80073ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ae:	f000 fa25 	bl	80077fc <__malloc_lock>
 80073b2:	4921      	ldr	r1, [pc, #132]	; (8007438 <_malloc_r+0xac>)
 80073b4:	680a      	ldr	r2, [r1, #0]
 80073b6:	4614      	mov	r4, r2
 80073b8:	b99c      	cbnz	r4, 80073e2 <_malloc_r+0x56>
 80073ba:	4f20      	ldr	r7, [pc, #128]	; (800743c <_malloc_r+0xb0>)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	b923      	cbnz	r3, 80073ca <_malloc_r+0x3e>
 80073c0:	4621      	mov	r1, r4
 80073c2:	4630      	mov	r0, r6
 80073c4:	f000 f9a0 	bl	8007708 <_sbrk_r>
 80073c8:	6038      	str	r0, [r7, #0]
 80073ca:	4629      	mov	r1, r5
 80073cc:	4630      	mov	r0, r6
 80073ce:	f000 f99b 	bl	8007708 <_sbrk_r>
 80073d2:	1c43      	adds	r3, r0, #1
 80073d4:	d123      	bne.n	800741e <_malloc_r+0x92>
 80073d6:	230c      	movs	r3, #12
 80073d8:	6033      	str	r3, [r6, #0]
 80073da:	4630      	mov	r0, r6
 80073dc:	f000 fa14 	bl	8007808 <__malloc_unlock>
 80073e0:	e7e3      	b.n	80073aa <_malloc_r+0x1e>
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	1b5b      	subs	r3, r3, r5
 80073e6:	d417      	bmi.n	8007418 <_malloc_r+0x8c>
 80073e8:	2b0b      	cmp	r3, #11
 80073ea:	d903      	bls.n	80073f4 <_malloc_r+0x68>
 80073ec:	6023      	str	r3, [r4, #0]
 80073ee:	441c      	add	r4, r3
 80073f0:	6025      	str	r5, [r4, #0]
 80073f2:	e004      	b.n	80073fe <_malloc_r+0x72>
 80073f4:	6863      	ldr	r3, [r4, #4]
 80073f6:	42a2      	cmp	r2, r4
 80073f8:	bf0c      	ite	eq
 80073fa:	600b      	streq	r3, [r1, #0]
 80073fc:	6053      	strne	r3, [r2, #4]
 80073fe:	4630      	mov	r0, r6
 8007400:	f000 fa02 	bl	8007808 <__malloc_unlock>
 8007404:	f104 000b 	add.w	r0, r4, #11
 8007408:	1d23      	adds	r3, r4, #4
 800740a:	f020 0007 	bic.w	r0, r0, #7
 800740e:	1ac2      	subs	r2, r0, r3
 8007410:	d0cc      	beq.n	80073ac <_malloc_r+0x20>
 8007412:	1a1b      	subs	r3, r3, r0
 8007414:	50a3      	str	r3, [r4, r2]
 8007416:	e7c9      	b.n	80073ac <_malloc_r+0x20>
 8007418:	4622      	mov	r2, r4
 800741a:	6864      	ldr	r4, [r4, #4]
 800741c:	e7cc      	b.n	80073b8 <_malloc_r+0x2c>
 800741e:	1cc4      	adds	r4, r0, #3
 8007420:	f024 0403 	bic.w	r4, r4, #3
 8007424:	42a0      	cmp	r0, r4
 8007426:	d0e3      	beq.n	80073f0 <_malloc_r+0x64>
 8007428:	1a21      	subs	r1, r4, r0
 800742a:	4630      	mov	r0, r6
 800742c:	f000 f96c 	bl	8007708 <_sbrk_r>
 8007430:	3001      	adds	r0, #1
 8007432:	d1dd      	bne.n	80073f0 <_malloc_r+0x64>
 8007434:	e7cf      	b.n	80073d6 <_malloc_r+0x4a>
 8007436:	bf00      	nop
 8007438:	20000208 	.word	0x20000208
 800743c:	2000020c 	.word	0x2000020c

08007440 <__ssputs_r>:
 8007440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007444:	688e      	ldr	r6, [r1, #8]
 8007446:	429e      	cmp	r6, r3
 8007448:	4682      	mov	sl, r0
 800744a:	460c      	mov	r4, r1
 800744c:	4690      	mov	r8, r2
 800744e:	461f      	mov	r7, r3
 8007450:	d838      	bhi.n	80074c4 <__ssputs_r+0x84>
 8007452:	898a      	ldrh	r2, [r1, #12]
 8007454:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007458:	d032      	beq.n	80074c0 <__ssputs_r+0x80>
 800745a:	6825      	ldr	r5, [r4, #0]
 800745c:	6909      	ldr	r1, [r1, #16]
 800745e:	eba5 0901 	sub.w	r9, r5, r1
 8007462:	6965      	ldr	r5, [r4, #20]
 8007464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007468:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800746c:	3301      	adds	r3, #1
 800746e:	444b      	add	r3, r9
 8007470:	106d      	asrs	r5, r5, #1
 8007472:	429d      	cmp	r5, r3
 8007474:	bf38      	it	cc
 8007476:	461d      	movcc	r5, r3
 8007478:	0553      	lsls	r3, r2, #21
 800747a:	d531      	bpl.n	80074e0 <__ssputs_r+0xa0>
 800747c:	4629      	mov	r1, r5
 800747e:	f7ff ff85 	bl	800738c <_malloc_r>
 8007482:	4606      	mov	r6, r0
 8007484:	b950      	cbnz	r0, 800749c <__ssputs_r+0x5c>
 8007486:	230c      	movs	r3, #12
 8007488:	f8ca 3000 	str.w	r3, [sl]
 800748c:	89a3      	ldrh	r3, [r4, #12]
 800748e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007492:	81a3      	strh	r3, [r4, #12]
 8007494:	f04f 30ff 	mov.w	r0, #4294967295
 8007498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800749c:	6921      	ldr	r1, [r4, #16]
 800749e:	464a      	mov	r2, r9
 80074a0:	f7ff fa4c 	bl	800693c <memcpy>
 80074a4:	89a3      	ldrh	r3, [r4, #12]
 80074a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ae:	81a3      	strh	r3, [r4, #12]
 80074b0:	6126      	str	r6, [r4, #16]
 80074b2:	6165      	str	r5, [r4, #20]
 80074b4:	444e      	add	r6, r9
 80074b6:	eba5 0509 	sub.w	r5, r5, r9
 80074ba:	6026      	str	r6, [r4, #0]
 80074bc:	60a5      	str	r5, [r4, #8]
 80074be:	463e      	mov	r6, r7
 80074c0:	42be      	cmp	r6, r7
 80074c2:	d900      	bls.n	80074c6 <__ssputs_r+0x86>
 80074c4:	463e      	mov	r6, r7
 80074c6:	4632      	mov	r2, r6
 80074c8:	6820      	ldr	r0, [r4, #0]
 80074ca:	4641      	mov	r1, r8
 80074cc:	f000 f97c 	bl	80077c8 <memmove>
 80074d0:	68a3      	ldr	r3, [r4, #8]
 80074d2:	6822      	ldr	r2, [r4, #0]
 80074d4:	1b9b      	subs	r3, r3, r6
 80074d6:	4432      	add	r2, r6
 80074d8:	60a3      	str	r3, [r4, #8]
 80074da:	6022      	str	r2, [r4, #0]
 80074dc:	2000      	movs	r0, #0
 80074de:	e7db      	b.n	8007498 <__ssputs_r+0x58>
 80074e0:	462a      	mov	r2, r5
 80074e2:	f000 f997 	bl	8007814 <_realloc_r>
 80074e6:	4606      	mov	r6, r0
 80074e8:	2800      	cmp	r0, #0
 80074ea:	d1e1      	bne.n	80074b0 <__ssputs_r+0x70>
 80074ec:	6921      	ldr	r1, [r4, #16]
 80074ee:	4650      	mov	r0, sl
 80074f0:	f7ff fefc 	bl	80072ec <_free_r>
 80074f4:	e7c7      	b.n	8007486 <__ssputs_r+0x46>
	...

080074f8 <_svfiprintf_r>:
 80074f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fc:	4698      	mov	r8, r3
 80074fe:	898b      	ldrh	r3, [r1, #12]
 8007500:	061b      	lsls	r3, r3, #24
 8007502:	b09d      	sub	sp, #116	; 0x74
 8007504:	4607      	mov	r7, r0
 8007506:	460d      	mov	r5, r1
 8007508:	4614      	mov	r4, r2
 800750a:	d50e      	bpl.n	800752a <_svfiprintf_r+0x32>
 800750c:	690b      	ldr	r3, [r1, #16]
 800750e:	b963      	cbnz	r3, 800752a <_svfiprintf_r+0x32>
 8007510:	2140      	movs	r1, #64	; 0x40
 8007512:	f7ff ff3b 	bl	800738c <_malloc_r>
 8007516:	6028      	str	r0, [r5, #0]
 8007518:	6128      	str	r0, [r5, #16]
 800751a:	b920      	cbnz	r0, 8007526 <_svfiprintf_r+0x2e>
 800751c:	230c      	movs	r3, #12
 800751e:	603b      	str	r3, [r7, #0]
 8007520:	f04f 30ff 	mov.w	r0, #4294967295
 8007524:	e0d1      	b.n	80076ca <_svfiprintf_r+0x1d2>
 8007526:	2340      	movs	r3, #64	; 0x40
 8007528:	616b      	str	r3, [r5, #20]
 800752a:	2300      	movs	r3, #0
 800752c:	9309      	str	r3, [sp, #36]	; 0x24
 800752e:	2320      	movs	r3, #32
 8007530:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007534:	f8cd 800c 	str.w	r8, [sp, #12]
 8007538:	2330      	movs	r3, #48	; 0x30
 800753a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80076e4 <_svfiprintf_r+0x1ec>
 800753e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007542:	f04f 0901 	mov.w	r9, #1
 8007546:	4623      	mov	r3, r4
 8007548:	469a      	mov	sl, r3
 800754a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800754e:	b10a      	cbz	r2, 8007554 <_svfiprintf_r+0x5c>
 8007550:	2a25      	cmp	r2, #37	; 0x25
 8007552:	d1f9      	bne.n	8007548 <_svfiprintf_r+0x50>
 8007554:	ebba 0b04 	subs.w	fp, sl, r4
 8007558:	d00b      	beq.n	8007572 <_svfiprintf_r+0x7a>
 800755a:	465b      	mov	r3, fp
 800755c:	4622      	mov	r2, r4
 800755e:	4629      	mov	r1, r5
 8007560:	4638      	mov	r0, r7
 8007562:	f7ff ff6d 	bl	8007440 <__ssputs_r>
 8007566:	3001      	adds	r0, #1
 8007568:	f000 80aa 	beq.w	80076c0 <_svfiprintf_r+0x1c8>
 800756c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800756e:	445a      	add	r2, fp
 8007570:	9209      	str	r2, [sp, #36]	; 0x24
 8007572:	f89a 3000 	ldrb.w	r3, [sl]
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 80a2 	beq.w	80076c0 <_svfiprintf_r+0x1c8>
 800757c:	2300      	movs	r3, #0
 800757e:	f04f 32ff 	mov.w	r2, #4294967295
 8007582:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007586:	f10a 0a01 	add.w	sl, sl, #1
 800758a:	9304      	str	r3, [sp, #16]
 800758c:	9307      	str	r3, [sp, #28]
 800758e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007592:	931a      	str	r3, [sp, #104]	; 0x68
 8007594:	4654      	mov	r4, sl
 8007596:	2205      	movs	r2, #5
 8007598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800759c:	4851      	ldr	r0, [pc, #324]	; (80076e4 <_svfiprintf_r+0x1ec>)
 800759e:	f7f8 fe1f 	bl	80001e0 <memchr>
 80075a2:	9a04      	ldr	r2, [sp, #16]
 80075a4:	b9d8      	cbnz	r0, 80075de <_svfiprintf_r+0xe6>
 80075a6:	06d0      	lsls	r0, r2, #27
 80075a8:	bf44      	itt	mi
 80075aa:	2320      	movmi	r3, #32
 80075ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075b0:	0711      	lsls	r1, r2, #28
 80075b2:	bf44      	itt	mi
 80075b4:	232b      	movmi	r3, #43	; 0x2b
 80075b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075ba:	f89a 3000 	ldrb.w	r3, [sl]
 80075be:	2b2a      	cmp	r3, #42	; 0x2a
 80075c0:	d015      	beq.n	80075ee <_svfiprintf_r+0xf6>
 80075c2:	9a07      	ldr	r2, [sp, #28]
 80075c4:	4654      	mov	r4, sl
 80075c6:	2000      	movs	r0, #0
 80075c8:	f04f 0c0a 	mov.w	ip, #10
 80075cc:	4621      	mov	r1, r4
 80075ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075d2:	3b30      	subs	r3, #48	; 0x30
 80075d4:	2b09      	cmp	r3, #9
 80075d6:	d94e      	bls.n	8007676 <_svfiprintf_r+0x17e>
 80075d8:	b1b0      	cbz	r0, 8007608 <_svfiprintf_r+0x110>
 80075da:	9207      	str	r2, [sp, #28]
 80075dc:	e014      	b.n	8007608 <_svfiprintf_r+0x110>
 80075de:	eba0 0308 	sub.w	r3, r0, r8
 80075e2:	fa09 f303 	lsl.w	r3, r9, r3
 80075e6:	4313      	orrs	r3, r2
 80075e8:	9304      	str	r3, [sp, #16]
 80075ea:	46a2      	mov	sl, r4
 80075ec:	e7d2      	b.n	8007594 <_svfiprintf_r+0x9c>
 80075ee:	9b03      	ldr	r3, [sp, #12]
 80075f0:	1d19      	adds	r1, r3, #4
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	9103      	str	r1, [sp, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	bfbb      	ittet	lt
 80075fa:	425b      	neglt	r3, r3
 80075fc:	f042 0202 	orrlt.w	r2, r2, #2
 8007600:	9307      	strge	r3, [sp, #28]
 8007602:	9307      	strlt	r3, [sp, #28]
 8007604:	bfb8      	it	lt
 8007606:	9204      	strlt	r2, [sp, #16]
 8007608:	7823      	ldrb	r3, [r4, #0]
 800760a:	2b2e      	cmp	r3, #46	; 0x2e
 800760c:	d10c      	bne.n	8007628 <_svfiprintf_r+0x130>
 800760e:	7863      	ldrb	r3, [r4, #1]
 8007610:	2b2a      	cmp	r3, #42	; 0x2a
 8007612:	d135      	bne.n	8007680 <_svfiprintf_r+0x188>
 8007614:	9b03      	ldr	r3, [sp, #12]
 8007616:	1d1a      	adds	r2, r3, #4
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	9203      	str	r2, [sp, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	bfb8      	it	lt
 8007620:	f04f 33ff 	movlt.w	r3, #4294967295
 8007624:	3402      	adds	r4, #2
 8007626:	9305      	str	r3, [sp, #20]
 8007628:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80076f4 <_svfiprintf_r+0x1fc>
 800762c:	7821      	ldrb	r1, [r4, #0]
 800762e:	2203      	movs	r2, #3
 8007630:	4650      	mov	r0, sl
 8007632:	f7f8 fdd5 	bl	80001e0 <memchr>
 8007636:	b140      	cbz	r0, 800764a <_svfiprintf_r+0x152>
 8007638:	2340      	movs	r3, #64	; 0x40
 800763a:	eba0 000a 	sub.w	r0, r0, sl
 800763e:	fa03 f000 	lsl.w	r0, r3, r0
 8007642:	9b04      	ldr	r3, [sp, #16]
 8007644:	4303      	orrs	r3, r0
 8007646:	3401      	adds	r4, #1
 8007648:	9304      	str	r3, [sp, #16]
 800764a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800764e:	4826      	ldr	r0, [pc, #152]	; (80076e8 <_svfiprintf_r+0x1f0>)
 8007650:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007654:	2206      	movs	r2, #6
 8007656:	f7f8 fdc3 	bl	80001e0 <memchr>
 800765a:	2800      	cmp	r0, #0
 800765c:	d038      	beq.n	80076d0 <_svfiprintf_r+0x1d8>
 800765e:	4b23      	ldr	r3, [pc, #140]	; (80076ec <_svfiprintf_r+0x1f4>)
 8007660:	bb1b      	cbnz	r3, 80076aa <_svfiprintf_r+0x1b2>
 8007662:	9b03      	ldr	r3, [sp, #12]
 8007664:	3307      	adds	r3, #7
 8007666:	f023 0307 	bic.w	r3, r3, #7
 800766a:	3308      	adds	r3, #8
 800766c:	9303      	str	r3, [sp, #12]
 800766e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007670:	4433      	add	r3, r6
 8007672:	9309      	str	r3, [sp, #36]	; 0x24
 8007674:	e767      	b.n	8007546 <_svfiprintf_r+0x4e>
 8007676:	fb0c 3202 	mla	r2, ip, r2, r3
 800767a:	460c      	mov	r4, r1
 800767c:	2001      	movs	r0, #1
 800767e:	e7a5      	b.n	80075cc <_svfiprintf_r+0xd4>
 8007680:	2300      	movs	r3, #0
 8007682:	3401      	adds	r4, #1
 8007684:	9305      	str	r3, [sp, #20]
 8007686:	4619      	mov	r1, r3
 8007688:	f04f 0c0a 	mov.w	ip, #10
 800768c:	4620      	mov	r0, r4
 800768e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007692:	3a30      	subs	r2, #48	; 0x30
 8007694:	2a09      	cmp	r2, #9
 8007696:	d903      	bls.n	80076a0 <_svfiprintf_r+0x1a8>
 8007698:	2b00      	cmp	r3, #0
 800769a:	d0c5      	beq.n	8007628 <_svfiprintf_r+0x130>
 800769c:	9105      	str	r1, [sp, #20]
 800769e:	e7c3      	b.n	8007628 <_svfiprintf_r+0x130>
 80076a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80076a4:	4604      	mov	r4, r0
 80076a6:	2301      	movs	r3, #1
 80076a8:	e7f0      	b.n	800768c <_svfiprintf_r+0x194>
 80076aa:	ab03      	add	r3, sp, #12
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	462a      	mov	r2, r5
 80076b0:	4b0f      	ldr	r3, [pc, #60]	; (80076f0 <_svfiprintf_r+0x1f8>)
 80076b2:	a904      	add	r1, sp, #16
 80076b4:	4638      	mov	r0, r7
 80076b6:	f7fc fa85 	bl	8003bc4 <_printf_float>
 80076ba:	1c42      	adds	r2, r0, #1
 80076bc:	4606      	mov	r6, r0
 80076be:	d1d6      	bne.n	800766e <_svfiprintf_r+0x176>
 80076c0:	89ab      	ldrh	r3, [r5, #12]
 80076c2:	065b      	lsls	r3, r3, #25
 80076c4:	f53f af2c 	bmi.w	8007520 <_svfiprintf_r+0x28>
 80076c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076ca:	b01d      	add	sp, #116	; 0x74
 80076cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d0:	ab03      	add	r3, sp, #12
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	462a      	mov	r2, r5
 80076d6:	4b06      	ldr	r3, [pc, #24]	; (80076f0 <_svfiprintf_r+0x1f8>)
 80076d8:	a904      	add	r1, sp, #16
 80076da:	4638      	mov	r0, r7
 80076dc:	f7fc fd16 	bl	800410c <_printf_i>
 80076e0:	e7eb      	b.n	80076ba <_svfiprintf_r+0x1c2>
 80076e2:	bf00      	nop
 80076e4:	080087c4 	.word	0x080087c4
 80076e8:	080087ce 	.word	0x080087ce
 80076ec:	08003bc5 	.word	0x08003bc5
 80076f0:	08007441 	.word	0x08007441
 80076f4:	080087ca 	.word	0x080087ca

080076f8 <nan>:
 80076f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007700 <nan+0x8>
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	00000000 	.word	0x00000000
 8007704:	7ff80000 	.word	0x7ff80000

08007708 <_sbrk_r>:
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	4d06      	ldr	r5, [pc, #24]	; (8007724 <_sbrk_r+0x1c>)
 800770c:	2300      	movs	r3, #0
 800770e:	4604      	mov	r4, r0
 8007710:	4608      	mov	r0, r1
 8007712:	602b      	str	r3, [r5, #0]
 8007714:	f7fa f8ce 	bl	80018b4 <_sbrk>
 8007718:	1c43      	adds	r3, r0, #1
 800771a:	d102      	bne.n	8007722 <_sbrk_r+0x1a>
 800771c:	682b      	ldr	r3, [r5, #0]
 800771e:	b103      	cbz	r3, 8007722 <_sbrk_r+0x1a>
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	bd38      	pop	{r3, r4, r5, pc}
 8007724:	200002dc 	.word	0x200002dc

08007728 <strncmp>:
 8007728:	b510      	push	{r4, lr}
 800772a:	b16a      	cbz	r2, 8007748 <strncmp+0x20>
 800772c:	3901      	subs	r1, #1
 800772e:	1884      	adds	r4, r0, r2
 8007730:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007734:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007738:	4293      	cmp	r3, r2
 800773a:	d103      	bne.n	8007744 <strncmp+0x1c>
 800773c:	42a0      	cmp	r0, r4
 800773e:	d001      	beq.n	8007744 <strncmp+0x1c>
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1f5      	bne.n	8007730 <strncmp+0x8>
 8007744:	1a98      	subs	r0, r3, r2
 8007746:	bd10      	pop	{r4, pc}
 8007748:	4610      	mov	r0, r2
 800774a:	e7fc      	b.n	8007746 <strncmp+0x1e>

0800774c <__ascii_wctomb>:
 800774c:	b149      	cbz	r1, 8007762 <__ascii_wctomb+0x16>
 800774e:	2aff      	cmp	r2, #255	; 0xff
 8007750:	bf85      	ittet	hi
 8007752:	238a      	movhi	r3, #138	; 0x8a
 8007754:	6003      	strhi	r3, [r0, #0]
 8007756:	700a      	strbls	r2, [r1, #0]
 8007758:	f04f 30ff 	movhi.w	r0, #4294967295
 800775c:	bf98      	it	ls
 800775e:	2001      	movls	r0, #1
 8007760:	4770      	bx	lr
 8007762:	4608      	mov	r0, r1
 8007764:	4770      	bx	lr
	...

08007768 <__assert_func>:
 8007768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800776a:	4614      	mov	r4, r2
 800776c:	461a      	mov	r2, r3
 800776e:	4b09      	ldr	r3, [pc, #36]	; (8007794 <__assert_func+0x2c>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4605      	mov	r5, r0
 8007774:	68d8      	ldr	r0, [r3, #12]
 8007776:	b14c      	cbz	r4, 800778c <__assert_func+0x24>
 8007778:	4b07      	ldr	r3, [pc, #28]	; (8007798 <__assert_func+0x30>)
 800777a:	9100      	str	r1, [sp, #0]
 800777c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007780:	4906      	ldr	r1, [pc, #24]	; (800779c <__assert_func+0x34>)
 8007782:	462b      	mov	r3, r5
 8007784:	f000 f80e 	bl	80077a4 <fiprintf>
 8007788:	f000 fa84 	bl	8007c94 <abort>
 800778c:	4b04      	ldr	r3, [pc, #16]	; (80077a0 <__assert_func+0x38>)
 800778e:	461c      	mov	r4, r3
 8007790:	e7f3      	b.n	800777a <__assert_func+0x12>
 8007792:	bf00      	nop
 8007794:	20000008 	.word	0x20000008
 8007798:	080087d5 	.word	0x080087d5
 800779c:	080087e2 	.word	0x080087e2
 80077a0:	08008810 	.word	0x08008810

080077a4 <fiprintf>:
 80077a4:	b40e      	push	{r1, r2, r3}
 80077a6:	b503      	push	{r0, r1, lr}
 80077a8:	4601      	mov	r1, r0
 80077aa:	ab03      	add	r3, sp, #12
 80077ac:	4805      	ldr	r0, [pc, #20]	; (80077c4 <fiprintf+0x20>)
 80077ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80077b2:	6800      	ldr	r0, [r0, #0]
 80077b4:	9301      	str	r3, [sp, #4]
 80077b6:	f000 f87d 	bl	80078b4 <_vfiprintf_r>
 80077ba:	b002      	add	sp, #8
 80077bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80077c0:	b003      	add	sp, #12
 80077c2:	4770      	bx	lr
 80077c4:	20000008 	.word	0x20000008

080077c8 <memmove>:
 80077c8:	4288      	cmp	r0, r1
 80077ca:	b510      	push	{r4, lr}
 80077cc:	eb01 0402 	add.w	r4, r1, r2
 80077d0:	d902      	bls.n	80077d8 <memmove+0x10>
 80077d2:	4284      	cmp	r4, r0
 80077d4:	4623      	mov	r3, r4
 80077d6:	d807      	bhi.n	80077e8 <memmove+0x20>
 80077d8:	1e43      	subs	r3, r0, #1
 80077da:	42a1      	cmp	r1, r4
 80077dc:	d008      	beq.n	80077f0 <memmove+0x28>
 80077de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077e6:	e7f8      	b.n	80077da <memmove+0x12>
 80077e8:	4402      	add	r2, r0
 80077ea:	4601      	mov	r1, r0
 80077ec:	428a      	cmp	r2, r1
 80077ee:	d100      	bne.n	80077f2 <memmove+0x2a>
 80077f0:	bd10      	pop	{r4, pc}
 80077f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077fa:	e7f7      	b.n	80077ec <memmove+0x24>

080077fc <__malloc_lock>:
 80077fc:	4801      	ldr	r0, [pc, #4]	; (8007804 <__malloc_lock+0x8>)
 80077fe:	f000 bc09 	b.w	8008014 <__retarget_lock_acquire_recursive>
 8007802:	bf00      	nop
 8007804:	200002e4 	.word	0x200002e4

08007808 <__malloc_unlock>:
 8007808:	4801      	ldr	r0, [pc, #4]	; (8007810 <__malloc_unlock+0x8>)
 800780a:	f000 bc04 	b.w	8008016 <__retarget_lock_release_recursive>
 800780e:	bf00      	nop
 8007810:	200002e4 	.word	0x200002e4

08007814 <_realloc_r>:
 8007814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007816:	4607      	mov	r7, r0
 8007818:	4614      	mov	r4, r2
 800781a:	460e      	mov	r6, r1
 800781c:	b921      	cbnz	r1, 8007828 <_realloc_r+0x14>
 800781e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007822:	4611      	mov	r1, r2
 8007824:	f7ff bdb2 	b.w	800738c <_malloc_r>
 8007828:	b922      	cbnz	r2, 8007834 <_realloc_r+0x20>
 800782a:	f7ff fd5f 	bl	80072ec <_free_r>
 800782e:	4625      	mov	r5, r4
 8007830:	4628      	mov	r0, r5
 8007832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007834:	f000 fc54 	bl	80080e0 <_malloc_usable_size_r>
 8007838:	42a0      	cmp	r0, r4
 800783a:	d20f      	bcs.n	800785c <_realloc_r+0x48>
 800783c:	4621      	mov	r1, r4
 800783e:	4638      	mov	r0, r7
 8007840:	f7ff fda4 	bl	800738c <_malloc_r>
 8007844:	4605      	mov	r5, r0
 8007846:	2800      	cmp	r0, #0
 8007848:	d0f2      	beq.n	8007830 <_realloc_r+0x1c>
 800784a:	4631      	mov	r1, r6
 800784c:	4622      	mov	r2, r4
 800784e:	f7ff f875 	bl	800693c <memcpy>
 8007852:	4631      	mov	r1, r6
 8007854:	4638      	mov	r0, r7
 8007856:	f7ff fd49 	bl	80072ec <_free_r>
 800785a:	e7e9      	b.n	8007830 <_realloc_r+0x1c>
 800785c:	4635      	mov	r5, r6
 800785e:	e7e7      	b.n	8007830 <_realloc_r+0x1c>

08007860 <__sfputc_r>:
 8007860:	6893      	ldr	r3, [r2, #8]
 8007862:	3b01      	subs	r3, #1
 8007864:	2b00      	cmp	r3, #0
 8007866:	b410      	push	{r4}
 8007868:	6093      	str	r3, [r2, #8]
 800786a:	da08      	bge.n	800787e <__sfputc_r+0x1e>
 800786c:	6994      	ldr	r4, [r2, #24]
 800786e:	42a3      	cmp	r3, r4
 8007870:	db01      	blt.n	8007876 <__sfputc_r+0x16>
 8007872:	290a      	cmp	r1, #10
 8007874:	d103      	bne.n	800787e <__sfputc_r+0x1e>
 8007876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800787a:	f000 b94b 	b.w	8007b14 <__swbuf_r>
 800787e:	6813      	ldr	r3, [r2, #0]
 8007880:	1c58      	adds	r0, r3, #1
 8007882:	6010      	str	r0, [r2, #0]
 8007884:	7019      	strb	r1, [r3, #0]
 8007886:	4608      	mov	r0, r1
 8007888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800788c:	4770      	bx	lr

0800788e <__sfputs_r>:
 800788e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007890:	4606      	mov	r6, r0
 8007892:	460f      	mov	r7, r1
 8007894:	4614      	mov	r4, r2
 8007896:	18d5      	adds	r5, r2, r3
 8007898:	42ac      	cmp	r4, r5
 800789a:	d101      	bne.n	80078a0 <__sfputs_r+0x12>
 800789c:	2000      	movs	r0, #0
 800789e:	e007      	b.n	80078b0 <__sfputs_r+0x22>
 80078a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a4:	463a      	mov	r2, r7
 80078a6:	4630      	mov	r0, r6
 80078a8:	f7ff ffda 	bl	8007860 <__sfputc_r>
 80078ac:	1c43      	adds	r3, r0, #1
 80078ae:	d1f3      	bne.n	8007898 <__sfputs_r+0xa>
 80078b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078b4 <_vfiprintf_r>:
 80078b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b8:	460d      	mov	r5, r1
 80078ba:	b09d      	sub	sp, #116	; 0x74
 80078bc:	4614      	mov	r4, r2
 80078be:	4698      	mov	r8, r3
 80078c0:	4606      	mov	r6, r0
 80078c2:	b118      	cbz	r0, 80078cc <_vfiprintf_r+0x18>
 80078c4:	6983      	ldr	r3, [r0, #24]
 80078c6:	b90b      	cbnz	r3, 80078cc <_vfiprintf_r+0x18>
 80078c8:	f000 fb06 	bl	8007ed8 <__sinit>
 80078cc:	4b89      	ldr	r3, [pc, #548]	; (8007af4 <_vfiprintf_r+0x240>)
 80078ce:	429d      	cmp	r5, r3
 80078d0:	d11b      	bne.n	800790a <_vfiprintf_r+0x56>
 80078d2:	6875      	ldr	r5, [r6, #4]
 80078d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078d6:	07d9      	lsls	r1, r3, #31
 80078d8:	d405      	bmi.n	80078e6 <_vfiprintf_r+0x32>
 80078da:	89ab      	ldrh	r3, [r5, #12]
 80078dc:	059a      	lsls	r2, r3, #22
 80078de:	d402      	bmi.n	80078e6 <_vfiprintf_r+0x32>
 80078e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078e2:	f000 fb97 	bl	8008014 <__retarget_lock_acquire_recursive>
 80078e6:	89ab      	ldrh	r3, [r5, #12]
 80078e8:	071b      	lsls	r3, r3, #28
 80078ea:	d501      	bpl.n	80078f0 <_vfiprintf_r+0x3c>
 80078ec:	692b      	ldr	r3, [r5, #16]
 80078ee:	b9eb      	cbnz	r3, 800792c <_vfiprintf_r+0x78>
 80078f0:	4629      	mov	r1, r5
 80078f2:	4630      	mov	r0, r6
 80078f4:	f000 f960 	bl	8007bb8 <__swsetup_r>
 80078f8:	b1c0      	cbz	r0, 800792c <_vfiprintf_r+0x78>
 80078fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078fc:	07dc      	lsls	r4, r3, #31
 80078fe:	d50e      	bpl.n	800791e <_vfiprintf_r+0x6a>
 8007900:	f04f 30ff 	mov.w	r0, #4294967295
 8007904:	b01d      	add	sp, #116	; 0x74
 8007906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790a:	4b7b      	ldr	r3, [pc, #492]	; (8007af8 <_vfiprintf_r+0x244>)
 800790c:	429d      	cmp	r5, r3
 800790e:	d101      	bne.n	8007914 <_vfiprintf_r+0x60>
 8007910:	68b5      	ldr	r5, [r6, #8]
 8007912:	e7df      	b.n	80078d4 <_vfiprintf_r+0x20>
 8007914:	4b79      	ldr	r3, [pc, #484]	; (8007afc <_vfiprintf_r+0x248>)
 8007916:	429d      	cmp	r5, r3
 8007918:	bf08      	it	eq
 800791a:	68f5      	ldreq	r5, [r6, #12]
 800791c:	e7da      	b.n	80078d4 <_vfiprintf_r+0x20>
 800791e:	89ab      	ldrh	r3, [r5, #12]
 8007920:	0598      	lsls	r0, r3, #22
 8007922:	d4ed      	bmi.n	8007900 <_vfiprintf_r+0x4c>
 8007924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007926:	f000 fb76 	bl	8008016 <__retarget_lock_release_recursive>
 800792a:	e7e9      	b.n	8007900 <_vfiprintf_r+0x4c>
 800792c:	2300      	movs	r3, #0
 800792e:	9309      	str	r3, [sp, #36]	; 0x24
 8007930:	2320      	movs	r3, #32
 8007932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007936:	f8cd 800c 	str.w	r8, [sp, #12]
 800793a:	2330      	movs	r3, #48	; 0x30
 800793c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007b00 <_vfiprintf_r+0x24c>
 8007940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007944:	f04f 0901 	mov.w	r9, #1
 8007948:	4623      	mov	r3, r4
 800794a:	469a      	mov	sl, r3
 800794c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007950:	b10a      	cbz	r2, 8007956 <_vfiprintf_r+0xa2>
 8007952:	2a25      	cmp	r2, #37	; 0x25
 8007954:	d1f9      	bne.n	800794a <_vfiprintf_r+0x96>
 8007956:	ebba 0b04 	subs.w	fp, sl, r4
 800795a:	d00b      	beq.n	8007974 <_vfiprintf_r+0xc0>
 800795c:	465b      	mov	r3, fp
 800795e:	4622      	mov	r2, r4
 8007960:	4629      	mov	r1, r5
 8007962:	4630      	mov	r0, r6
 8007964:	f7ff ff93 	bl	800788e <__sfputs_r>
 8007968:	3001      	adds	r0, #1
 800796a:	f000 80aa 	beq.w	8007ac2 <_vfiprintf_r+0x20e>
 800796e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007970:	445a      	add	r2, fp
 8007972:	9209      	str	r2, [sp, #36]	; 0x24
 8007974:	f89a 3000 	ldrb.w	r3, [sl]
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 80a2 	beq.w	8007ac2 <_vfiprintf_r+0x20e>
 800797e:	2300      	movs	r3, #0
 8007980:	f04f 32ff 	mov.w	r2, #4294967295
 8007984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007988:	f10a 0a01 	add.w	sl, sl, #1
 800798c:	9304      	str	r3, [sp, #16]
 800798e:	9307      	str	r3, [sp, #28]
 8007990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007994:	931a      	str	r3, [sp, #104]	; 0x68
 8007996:	4654      	mov	r4, sl
 8007998:	2205      	movs	r2, #5
 800799a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800799e:	4858      	ldr	r0, [pc, #352]	; (8007b00 <_vfiprintf_r+0x24c>)
 80079a0:	f7f8 fc1e 	bl	80001e0 <memchr>
 80079a4:	9a04      	ldr	r2, [sp, #16]
 80079a6:	b9d8      	cbnz	r0, 80079e0 <_vfiprintf_r+0x12c>
 80079a8:	06d1      	lsls	r1, r2, #27
 80079aa:	bf44      	itt	mi
 80079ac:	2320      	movmi	r3, #32
 80079ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079b2:	0713      	lsls	r3, r2, #28
 80079b4:	bf44      	itt	mi
 80079b6:	232b      	movmi	r3, #43	; 0x2b
 80079b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079bc:	f89a 3000 	ldrb.w	r3, [sl]
 80079c0:	2b2a      	cmp	r3, #42	; 0x2a
 80079c2:	d015      	beq.n	80079f0 <_vfiprintf_r+0x13c>
 80079c4:	9a07      	ldr	r2, [sp, #28]
 80079c6:	4654      	mov	r4, sl
 80079c8:	2000      	movs	r0, #0
 80079ca:	f04f 0c0a 	mov.w	ip, #10
 80079ce:	4621      	mov	r1, r4
 80079d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079d4:	3b30      	subs	r3, #48	; 0x30
 80079d6:	2b09      	cmp	r3, #9
 80079d8:	d94e      	bls.n	8007a78 <_vfiprintf_r+0x1c4>
 80079da:	b1b0      	cbz	r0, 8007a0a <_vfiprintf_r+0x156>
 80079dc:	9207      	str	r2, [sp, #28]
 80079de:	e014      	b.n	8007a0a <_vfiprintf_r+0x156>
 80079e0:	eba0 0308 	sub.w	r3, r0, r8
 80079e4:	fa09 f303 	lsl.w	r3, r9, r3
 80079e8:	4313      	orrs	r3, r2
 80079ea:	9304      	str	r3, [sp, #16]
 80079ec:	46a2      	mov	sl, r4
 80079ee:	e7d2      	b.n	8007996 <_vfiprintf_r+0xe2>
 80079f0:	9b03      	ldr	r3, [sp, #12]
 80079f2:	1d19      	adds	r1, r3, #4
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	9103      	str	r1, [sp, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	bfbb      	ittet	lt
 80079fc:	425b      	neglt	r3, r3
 80079fe:	f042 0202 	orrlt.w	r2, r2, #2
 8007a02:	9307      	strge	r3, [sp, #28]
 8007a04:	9307      	strlt	r3, [sp, #28]
 8007a06:	bfb8      	it	lt
 8007a08:	9204      	strlt	r2, [sp, #16]
 8007a0a:	7823      	ldrb	r3, [r4, #0]
 8007a0c:	2b2e      	cmp	r3, #46	; 0x2e
 8007a0e:	d10c      	bne.n	8007a2a <_vfiprintf_r+0x176>
 8007a10:	7863      	ldrb	r3, [r4, #1]
 8007a12:	2b2a      	cmp	r3, #42	; 0x2a
 8007a14:	d135      	bne.n	8007a82 <_vfiprintf_r+0x1ce>
 8007a16:	9b03      	ldr	r3, [sp, #12]
 8007a18:	1d1a      	adds	r2, r3, #4
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	9203      	str	r2, [sp, #12]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	bfb8      	it	lt
 8007a22:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a26:	3402      	adds	r4, #2
 8007a28:	9305      	str	r3, [sp, #20]
 8007a2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007b10 <_vfiprintf_r+0x25c>
 8007a2e:	7821      	ldrb	r1, [r4, #0]
 8007a30:	2203      	movs	r2, #3
 8007a32:	4650      	mov	r0, sl
 8007a34:	f7f8 fbd4 	bl	80001e0 <memchr>
 8007a38:	b140      	cbz	r0, 8007a4c <_vfiprintf_r+0x198>
 8007a3a:	2340      	movs	r3, #64	; 0x40
 8007a3c:	eba0 000a 	sub.w	r0, r0, sl
 8007a40:	fa03 f000 	lsl.w	r0, r3, r0
 8007a44:	9b04      	ldr	r3, [sp, #16]
 8007a46:	4303      	orrs	r3, r0
 8007a48:	3401      	adds	r4, #1
 8007a4a:	9304      	str	r3, [sp, #16]
 8007a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a50:	482c      	ldr	r0, [pc, #176]	; (8007b04 <_vfiprintf_r+0x250>)
 8007a52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a56:	2206      	movs	r2, #6
 8007a58:	f7f8 fbc2 	bl	80001e0 <memchr>
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	d03f      	beq.n	8007ae0 <_vfiprintf_r+0x22c>
 8007a60:	4b29      	ldr	r3, [pc, #164]	; (8007b08 <_vfiprintf_r+0x254>)
 8007a62:	bb1b      	cbnz	r3, 8007aac <_vfiprintf_r+0x1f8>
 8007a64:	9b03      	ldr	r3, [sp, #12]
 8007a66:	3307      	adds	r3, #7
 8007a68:	f023 0307 	bic.w	r3, r3, #7
 8007a6c:	3308      	adds	r3, #8
 8007a6e:	9303      	str	r3, [sp, #12]
 8007a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a72:	443b      	add	r3, r7
 8007a74:	9309      	str	r3, [sp, #36]	; 0x24
 8007a76:	e767      	b.n	8007948 <_vfiprintf_r+0x94>
 8007a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a7c:	460c      	mov	r4, r1
 8007a7e:	2001      	movs	r0, #1
 8007a80:	e7a5      	b.n	80079ce <_vfiprintf_r+0x11a>
 8007a82:	2300      	movs	r3, #0
 8007a84:	3401      	adds	r4, #1
 8007a86:	9305      	str	r3, [sp, #20]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	f04f 0c0a 	mov.w	ip, #10
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a94:	3a30      	subs	r2, #48	; 0x30
 8007a96:	2a09      	cmp	r2, #9
 8007a98:	d903      	bls.n	8007aa2 <_vfiprintf_r+0x1ee>
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d0c5      	beq.n	8007a2a <_vfiprintf_r+0x176>
 8007a9e:	9105      	str	r1, [sp, #20]
 8007aa0:	e7c3      	b.n	8007a2a <_vfiprintf_r+0x176>
 8007aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e7f0      	b.n	8007a8e <_vfiprintf_r+0x1da>
 8007aac:	ab03      	add	r3, sp, #12
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	462a      	mov	r2, r5
 8007ab2:	4b16      	ldr	r3, [pc, #88]	; (8007b0c <_vfiprintf_r+0x258>)
 8007ab4:	a904      	add	r1, sp, #16
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	f7fc f884 	bl	8003bc4 <_printf_float>
 8007abc:	4607      	mov	r7, r0
 8007abe:	1c78      	adds	r0, r7, #1
 8007ac0:	d1d6      	bne.n	8007a70 <_vfiprintf_r+0x1bc>
 8007ac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ac4:	07d9      	lsls	r1, r3, #31
 8007ac6:	d405      	bmi.n	8007ad4 <_vfiprintf_r+0x220>
 8007ac8:	89ab      	ldrh	r3, [r5, #12]
 8007aca:	059a      	lsls	r2, r3, #22
 8007acc:	d402      	bmi.n	8007ad4 <_vfiprintf_r+0x220>
 8007ace:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ad0:	f000 faa1 	bl	8008016 <__retarget_lock_release_recursive>
 8007ad4:	89ab      	ldrh	r3, [r5, #12]
 8007ad6:	065b      	lsls	r3, r3, #25
 8007ad8:	f53f af12 	bmi.w	8007900 <_vfiprintf_r+0x4c>
 8007adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ade:	e711      	b.n	8007904 <_vfiprintf_r+0x50>
 8007ae0:	ab03      	add	r3, sp, #12
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	462a      	mov	r2, r5
 8007ae6:	4b09      	ldr	r3, [pc, #36]	; (8007b0c <_vfiprintf_r+0x258>)
 8007ae8:	a904      	add	r1, sp, #16
 8007aea:	4630      	mov	r0, r6
 8007aec:	f7fc fb0e 	bl	800410c <_printf_i>
 8007af0:	e7e4      	b.n	8007abc <_vfiprintf_r+0x208>
 8007af2:	bf00      	nop
 8007af4:	08008834 	.word	0x08008834
 8007af8:	08008854 	.word	0x08008854
 8007afc:	08008814 	.word	0x08008814
 8007b00:	080087c4 	.word	0x080087c4
 8007b04:	080087ce 	.word	0x080087ce
 8007b08:	08003bc5 	.word	0x08003bc5
 8007b0c:	0800788f 	.word	0x0800788f
 8007b10:	080087ca 	.word	0x080087ca

08007b14 <__swbuf_r>:
 8007b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b16:	460e      	mov	r6, r1
 8007b18:	4614      	mov	r4, r2
 8007b1a:	4605      	mov	r5, r0
 8007b1c:	b118      	cbz	r0, 8007b26 <__swbuf_r+0x12>
 8007b1e:	6983      	ldr	r3, [r0, #24]
 8007b20:	b90b      	cbnz	r3, 8007b26 <__swbuf_r+0x12>
 8007b22:	f000 f9d9 	bl	8007ed8 <__sinit>
 8007b26:	4b21      	ldr	r3, [pc, #132]	; (8007bac <__swbuf_r+0x98>)
 8007b28:	429c      	cmp	r4, r3
 8007b2a:	d12b      	bne.n	8007b84 <__swbuf_r+0x70>
 8007b2c:	686c      	ldr	r4, [r5, #4]
 8007b2e:	69a3      	ldr	r3, [r4, #24]
 8007b30:	60a3      	str	r3, [r4, #8]
 8007b32:	89a3      	ldrh	r3, [r4, #12]
 8007b34:	071a      	lsls	r2, r3, #28
 8007b36:	d52f      	bpl.n	8007b98 <__swbuf_r+0x84>
 8007b38:	6923      	ldr	r3, [r4, #16]
 8007b3a:	b36b      	cbz	r3, 8007b98 <__swbuf_r+0x84>
 8007b3c:	6923      	ldr	r3, [r4, #16]
 8007b3e:	6820      	ldr	r0, [r4, #0]
 8007b40:	1ac0      	subs	r0, r0, r3
 8007b42:	6963      	ldr	r3, [r4, #20]
 8007b44:	b2f6      	uxtb	r6, r6
 8007b46:	4283      	cmp	r3, r0
 8007b48:	4637      	mov	r7, r6
 8007b4a:	dc04      	bgt.n	8007b56 <__swbuf_r+0x42>
 8007b4c:	4621      	mov	r1, r4
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f000 f92e 	bl	8007db0 <_fflush_r>
 8007b54:	bb30      	cbnz	r0, 8007ba4 <__swbuf_r+0x90>
 8007b56:	68a3      	ldr	r3, [r4, #8]
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	60a3      	str	r3, [r4, #8]
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	1c5a      	adds	r2, r3, #1
 8007b60:	6022      	str	r2, [r4, #0]
 8007b62:	701e      	strb	r6, [r3, #0]
 8007b64:	6963      	ldr	r3, [r4, #20]
 8007b66:	3001      	adds	r0, #1
 8007b68:	4283      	cmp	r3, r0
 8007b6a:	d004      	beq.n	8007b76 <__swbuf_r+0x62>
 8007b6c:	89a3      	ldrh	r3, [r4, #12]
 8007b6e:	07db      	lsls	r3, r3, #31
 8007b70:	d506      	bpl.n	8007b80 <__swbuf_r+0x6c>
 8007b72:	2e0a      	cmp	r6, #10
 8007b74:	d104      	bne.n	8007b80 <__swbuf_r+0x6c>
 8007b76:	4621      	mov	r1, r4
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f000 f919 	bl	8007db0 <_fflush_r>
 8007b7e:	b988      	cbnz	r0, 8007ba4 <__swbuf_r+0x90>
 8007b80:	4638      	mov	r0, r7
 8007b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b84:	4b0a      	ldr	r3, [pc, #40]	; (8007bb0 <__swbuf_r+0x9c>)
 8007b86:	429c      	cmp	r4, r3
 8007b88:	d101      	bne.n	8007b8e <__swbuf_r+0x7a>
 8007b8a:	68ac      	ldr	r4, [r5, #8]
 8007b8c:	e7cf      	b.n	8007b2e <__swbuf_r+0x1a>
 8007b8e:	4b09      	ldr	r3, [pc, #36]	; (8007bb4 <__swbuf_r+0xa0>)
 8007b90:	429c      	cmp	r4, r3
 8007b92:	bf08      	it	eq
 8007b94:	68ec      	ldreq	r4, [r5, #12]
 8007b96:	e7ca      	b.n	8007b2e <__swbuf_r+0x1a>
 8007b98:	4621      	mov	r1, r4
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	f000 f80c 	bl	8007bb8 <__swsetup_r>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	d0cb      	beq.n	8007b3c <__swbuf_r+0x28>
 8007ba4:	f04f 37ff 	mov.w	r7, #4294967295
 8007ba8:	e7ea      	b.n	8007b80 <__swbuf_r+0x6c>
 8007baa:	bf00      	nop
 8007bac:	08008834 	.word	0x08008834
 8007bb0:	08008854 	.word	0x08008854
 8007bb4:	08008814 	.word	0x08008814

08007bb8 <__swsetup_r>:
 8007bb8:	4b32      	ldr	r3, [pc, #200]	; (8007c84 <__swsetup_r+0xcc>)
 8007bba:	b570      	push	{r4, r5, r6, lr}
 8007bbc:	681d      	ldr	r5, [r3, #0]
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	b125      	cbz	r5, 8007bce <__swsetup_r+0x16>
 8007bc4:	69ab      	ldr	r3, [r5, #24]
 8007bc6:	b913      	cbnz	r3, 8007bce <__swsetup_r+0x16>
 8007bc8:	4628      	mov	r0, r5
 8007bca:	f000 f985 	bl	8007ed8 <__sinit>
 8007bce:	4b2e      	ldr	r3, [pc, #184]	; (8007c88 <__swsetup_r+0xd0>)
 8007bd0:	429c      	cmp	r4, r3
 8007bd2:	d10f      	bne.n	8007bf4 <__swsetup_r+0x3c>
 8007bd4:	686c      	ldr	r4, [r5, #4]
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bdc:	0719      	lsls	r1, r3, #28
 8007bde:	d42c      	bmi.n	8007c3a <__swsetup_r+0x82>
 8007be0:	06dd      	lsls	r5, r3, #27
 8007be2:	d411      	bmi.n	8007c08 <__swsetup_r+0x50>
 8007be4:	2309      	movs	r3, #9
 8007be6:	6033      	str	r3, [r6, #0]
 8007be8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007bec:	81a3      	strh	r3, [r4, #12]
 8007bee:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf2:	e03e      	b.n	8007c72 <__swsetup_r+0xba>
 8007bf4:	4b25      	ldr	r3, [pc, #148]	; (8007c8c <__swsetup_r+0xd4>)
 8007bf6:	429c      	cmp	r4, r3
 8007bf8:	d101      	bne.n	8007bfe <__swsetup_r+0x46>
 8007bfa:	68ac      	ldr	r4, [r5, #8]
 8007bfc:	e7eb      	b.n	8007bd6 <__swsetup_r+0x1e>
 8007bfe:	4b24      	ldr	r3, [pc, #144]	; (8007c90 <__swsetup_r+0xd8>)
 8007c00:	429c      	cmp	r4, r3
 8007c02:	bf08      	it	eq
 8007c04:	68ec      	ldreq	r4, [r5, #12]
 8007c06:	e7e6      	b.n	8007bd6 <__swsetup_r+0x1e>
 8007c08:	0758      	lsls	r0, r3, #29
 8007c0a:	d512      	bpl.n	8007c32 <__swsetup_r+0x7a>
 8007c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c0e:	b141      	cbz	r1, 8007c22 <__swsetup_r+0x6a>
 8007c10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c14:	4299      	cmp	r1, r3
 8007c16:	d002      	beq.n	8007c1e <__swsetup_r+0x66>
 8007c18:	4630      	mov	r0, r6
 8007c1a:	f7ff fb67 	bl	80072ec <_free_r>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	6363      	str	r3, [r4, #52]	; 0x34
 8007c22:	89a3      	ldrh	r3, [r4, #12]
 8007c24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c28:	81a3      	strh	r3, [r4, #12]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	6063      	str	r3, [r4, #4]
 8007c2e:	6923      	ldr	r3, [r4, #16]
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	89a3      	ldrh	r3, [r4, #12]
 8007c34:	f043 0308 	orr.w	r3, r3, #8
 8007c38:	81a3      	strh	r3, [r4, #12]
 8007c3a:	6923      	ldr	r3, [r4, #16]
 8007c3c:	b94b      	cbnz	r3, 8007c52 <__swsetup_r+0x9a>
 8007c3e:	89a3      	ldrh	r3, [r4, #12]
 8007c40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c48:	d003      	beq.n	8007c52 <__swsetup_r+0x9a>
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f000 fa07 	bl	8008060 <__smakebuf_r>
 8007c52:	89a0      	ldrh	r0, [r4, #12]
 8007c54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c58:	f010 0301 	ands.w	r3, r0, #1
 8007c5c:	d00a      	beq.n	8007c74 <__swsetup_r+0xbc>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	60a3      	str	r3, [r4, #8]
 8007c62:	6963      	ldr	r3, [r4, #20]
 8007c64:	425b      	negs	r3, r3
 8007c66:	61a3      	str	r3, [r4, #24]
 8007c68:	6923      	ldr	r3, [r4, #16]
 8007c6a:	b943      	cbnz	r3, 8007c7e <__swsetup_r+0xc6>
 8007c6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c70:	d1ba      	bne.n	8007be8 <__swsetup_r+0x30>
 8007c72:	bd70      	pop	{r4, r5, r6, pc}
 8007c74:	0781      	lsls	r1, r0, #30
 8007c76:	bf58      	it	pl
 8007c78:	6963      	ldrpl	r3, [r4, #20]
 8007c7a:	60a3      	str	r3, [r4, #8]
 8007c7c:	e7f4      	b.n	8007c68 <__swsetup_r+0xb0>
 8007c7e:	2000      	movs	r0, #0
 8007c80:	e7f7      	b.n	8007c72 <__swsetup_r+0xba>
 8007c82:	bf00      	nop
 8007c84:	20000008 	.word	0x20000008
 8007c88:	08008834 	.word	0x08008834
 8007c8c:	08008854 	.word	0x08008854
 8007c90:	08008814 	.word	0x08008814

08007c94 <abort>:
 8007c94:	b508      	push	{r3, lr}
 8007c96:	2006      	movs	r0, #6
 8007c98:	f000 fa52 	bl	8008140 <raise>
 8007c9c:	2001      	movs	r0, #1
 8007c9e:	f7f9 fd91 	bl	80017c4 <_exit>
	...

08007ca4 <__sflush_r>:
 8007ca4:	898a      	ldrh	r2, [r1, #12]
 8007ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007caa:	4605      	mov	r5, r0
 8007cac:	0710      	lsls	r0, r2, #28
 8007cae:	460c      	mov	r4, r1
 8007cb0:	d458      	bmi.n	8007d64 <__sflush_r+0xc0>
 8007cb2:	684b      	ldr	r3, [r1, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	dc05      	bgt.n	8007cc4 <__sflush_r+0x20>
 8007cb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	dc02      	bgt.n	8007cc4 <__sflush_r+0x20>
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cc6:	2e00      	cmp	r6, #0
 8007cc8:	d0f9      	beq.n	8007cbe <__sflush_r+0x1a>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cd0:	682f      	ldr	r7, [r5, #0]
 8007cd2:	602b      	str	r3, [r5, #0]
 8007cd4:	d032      	beq.n	8007d3c <__sflush_r+0x98>
 8007cd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007cd8:	89a3      	ldrh	r3, [r4, #12]
 8007cda:	075a      	lsls	r2, r3, #29
 8007cdc:	d505      	bpl.n	8007cea <__sflush_r+0x46>
 8007cde:	6863      	ldr	r3, [r4, #4]
 8007ce0:	1ac0      	subs	r0, r0, r3
 8007ce2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ce4:	b10b      	cbz	r3, 8007cea <__sflush_r+0x46>
 8007ce6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ce8:	1ac0      	subs	r0, r0, r3
 8007cea:	2300      	movs	r3, #0
 8007cec:	4602      	mov	r2, r0
 8007cee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cf0:	6a21      	ldr	r1, [r4, #32]
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	47b0      	blx	r6
 8007cf6:	1c43      	adds	r3, r0, #1
 8007cf8:	89a3      	ldrh	r3, [r4, #12]
 8007cfa:	d106      	bne.n	8007d0a <__sflush_r+0x66>
 8007cfc:	6829      	ldr	r1, [r5, #0]
 8007cfe:	291d      	cmp	r1, #29
 8007d00:	d82c      	bhi.n	8007d5c <__sflush_r+0xb8>
 8007d02:	4a2a      	ldr	r2, [pc, #168]	; (8007dac <__sflush_r+0x108>)
 8007d04:	40ca      	lsrs	r2, r1
 8007d06:	07d6      	lsls	r6, r2, #31
 8007d08:	d528      	bpl.n	8007d5c <__sflush_r+0xb8>
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	6062      	str	r2, [r4, #4]
 8007d0e:	04d9      	lsls	r1, r3, #19
 8007d10:	6922      	ldr	r2, [r4, #16]
 8007d12:	6022      	str	r2, [r4, #0]
 8007d14:	d504      	bpl.n	8007d20 <__sflush_r+0x7c>
 8007d16:	1c42      	adds	r2, r0, #1
 8007d18:	d101      	bne.n	8007d1e <__sflush_r+0x7a>
 8007d1a:	682b      	ldr	r3, [r5, #0]
 8007d1c:	b903      	cbnz	r3, 8007d20 <__sflush_r+0x7c>
 8007d1e:	6560      	str	r0, [r4, #84]	; 0x54
 8007d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d22:	602f      	str	r7, [r5, #0]
 8007d24:	2900      	cmp	r1, #0
 8007d26:	d0ca      	beq.n	8007cbe <__sflush_r+0x1a>
 8007d28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d2c:	4299      	cmp	r1, r3
 8007d2e:	d002      	beq.n	8007d36 <__sflush_r+0x92>
 8007d30:	4628      	mov	r0, r5
 8007d32:	f7ff fadb 	bl	80072ec <_free_r>
 8007d36:	2000      	movs	r0, #0
 8007d38:	6360      	str	r0, [r4, #52]	; 0x34
 8007d3a:	e7c1      	b.n	8007cc0 <__sflush_r+0x1c>
 8007d3c:	6a21      	ldr	r1, [r4, #32]
 8007d3e:	2301      	movs	r3, #1
 8007d40:	4628      	mov	r0, r5
 8007d42:	47b0      	blx	r6
 8007d44:	1c41      	adds	r1, r0, #1
 8007d46:	d1c7      	bne.n	8007cd8 <__sflush_r+0x34>
 8007d48:	682b      	ldr	r3, [r5, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0c4      	beq.n	8007cd8 <__sflush_r+0x34>
 8007d4e:	2b1d      	cmp	r3, #29
 8007d50:	d001      	beq.n	8007d56 <__sflush_r+0xb2>
 8007d52:	2b16      	cmp	r3, #22
 8007d54:	d101      	bne.n	8007d5a <__sflush_r+0xb6>
 8007d56:	602f      	str	r7, [r5, #0]
 8007d58:	e7b1      	b.n	8007cbe <__sflush_r+0x1a>
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d60:	81a3      	strh	r3, [r4, #12]
 8007d62:	e7ad      	b.n	8007cc0 <__sflush_r+0x1c>
 8007d64:	690f      	ldr	r7, [r1, #16]
 8007d66:	2f00      	cmp	r7, #0
 8007d68:	d0a9      	beq.n	8007cbe <__sflush_r+0x1a>
 8007d6a:	0793      	lsls	r3, r2, #30
 8007d6c:	680e      	ldr	r6, [r1, #0]
 8007d6e:	bf08      	it	eq
 8007d70:	694b      	ldreq	r3, [r1, #20]
 8007d72:	600f      	str	r7, [r1, #0]
 8007d74:	bf18      	it	ne
 8007d76:	2300      	movne	r3, #0
 8007d78:	eba6 0807 	sub.w	r8, r6, r7
 8007d7c:	608b      	str	r3, [r1, #8]
 8007d7e:	f1b8 0f00 	cmp.w	r8, #0
 8007d82:	dd9c      	ble.n	8007cbe <__sflush_r+0x1a>
 8007d84:	6a21      	ldr	r1, [r4, #32]
 8007d86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d88:	4643      	mov	r3, r8
 8007d8a:	463a      	mov	r2, r7
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	47b0      	blx	r6
 8007d90:	2800      	cmp	r0, #0
 8007d92:	dc06      	bgt.n	8007da2 <__sflush_r+0xfe>
 8007d94:	89a3      	ldrh	r3, [r4, #12]
 8007d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d9a:	81a3      	strh	r3, [r4, #12]
 8007d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007da0:	e78e      	b.n	8007cc0 <__sflush_r+0x1c>
 8007da2:	4407      	add	r7, r0
 8007da4:	eba8 0800 	sub.w	r8, r8, r0
 8007da8:	e7e9      	b.n	8007d7e <__sflush_r+0xda>
 8007daa:	bf00      	nop
 8007dac:	20400001 	.word	0x20400001

08007db0 <_fflush_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	690b      	ldr	r3, [r1, #16]
 8007db4:	4605      	mov	r5, r0
 8007db6:	460c      	mov	r4, r1
 8007db8:	b913      	cbnz	r3, 8007dc0 <_fflush_r+0x10>
 8007dba:	2500      	movs	r5, #0
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
 8007dc0:	b118      	cbz	r0, 8007dca <_fflush_r+0x1a>
 8007dc2:	6983      	ldr	r3, [r0, #24]
 8007dc4:	b90b      	cbnz	r3, 8007dca <_fflush_r+0x1a>
 8007dc6:	f000 f887 	bl	8007ed8 <__sinit>
 8007dca:	4b14      	ldr	r3, [pc, #80]	; (8007e1c <_fflush_r+0x6c>)
 8007dcc:	429c      	cmp	r4, r3
 8007dce:	d11b      	bne.n	8007e08 <_fflush_r+0x58>
 8007dd0:	686c      	ldr	r4, [r5, #4]
 8007dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d0ef      	beq.n	8007dba <_fflush_r+0xa>
 8007dda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ddc:	07d0      	lsls	r0, r2, #31
 8007dde:	d404      	bmi.n	8007dea <_fflush_r+0x3a>
 8007de0:	0599      	lsls	r1, r3, #22
 8007de2:	d402      	bmi.n	8007dea <_fflush_r+0x3a>
 8007de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007de6:	f000 f915 	bl	8008014 <__retarget_lock_acquire_recursive>
 8007dea:	4628      	mov	r0, r5
 8007dec:	4621      	mov	r1, r4
 8007dee:	f7ff ff59 	bl	8007ca4 <__sflush_r>
 8007df2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007df4:	07da      	lsls	r2, r3, #31
 8007df6:	4605      	mov	r5, r0
 8007df8:	d4e0      	bmi.n	8007dbc <_fflush_r+0xc>
 8007dfa:	89a3      	ldrh	r3, [r4, #12]
 8007dfc:	059b      	lsls	r3, r3, #22
 8007dfe:	d4dd      	bmi.n	8007dbc <_fflush_r+0xc>
 8007e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e02:	f000 f908 	bl	8008016 <__retarget_lock_release_recursive>
 8007e06:	e7d9      	b.n	8007dbc <_fflush_r+0xc>
 8007e08:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <_fflush_r+0x70>)
 8007e0a:	429c      	cmp	r4, r3
 8007e0c:	d101      	bne.n	8007e12 <_fflush_r+0x62>
 8007e0e:	68ac      	ldr	r4, [r5, #8]
 8007e10:	e7df      	b.n	8007dd2 <_fflush_r+0x22>
 8007e12:	4b04      	ldr	r3, [pc, #16]	; (8007e24 <_fflush_r+0x74>)
 8007e14:	429c      	cmp	r4, r3
 8007e16:	bf08      	it	eq
 8007e18:	68ec      	ldreq	r4, [r5, #12]
 8007e1a:	e7da      	b.n	8007dd2 <_fflush_r+0x22>
 8007e1c:	08008834 	.word	0x08008834
 8007e20:	08008854 	.word	0x08008854
 8007e24:	08008814 	.word	0x08008814

08007e28 <std>:
 8007e28:	2300      	movs	r3, #0
 8007e2a:	b510      	push	{r4, lr}
 8007e2c:	4604      	mov	r4, r0
 8007e2e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e36:	6083      	str	r3, [r0, #8]
 8007e38:	8181      	strh	r1, [r0, #12]
 8007e3a:	6643      	str	r3, [r0, #100]	; 0x64
 8007e3c:	81c2      	strh	r2, [r0, #14]
 8007e3e:	6183      	str	r3, [r0, #24]
 8007e40:	4619      	mov	r1, r3
 8007e42:	2208      	movs	r2, #8
 8007e44:	305c      	adds	r0, #92	; 0x5c
 8007e46:	f7fb fe15 	bl	8003a74 <memset>
 8007e4a:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <std+0x38>)
 8007e4c:	6263      	str	r3, [r4, #36]	; 0x24
 8007e4e:	4b05      	ldr	r3, [pc, #20]	; (8007e64 <std+0x3c>)
 8007e50:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e52:	4b05      	ldr	r3, [pc, #20]	; (8007e68 <std+0x40>)
 8007e54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e56:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <std+0x44>)
 8007e58:	6224      	str	r4, [r4, #32]
 8007e5a:	6323      	str	r3, [r4, #48]	; 0x30
 8007e5c:	bd10      	pop	{r4, pc}
 8007e5e:	bf00      	nop
 8007e60:	08008179 	.word	0x08008179
 8007e64:	0800819b 	.word	0x0800819b
 8007e68:	080081d3 	.word	0x080081d3
 8007e6c:	080081f7 	.word	0x080081f7

08007e70 <_cleanup_r>:
 8007e70:	4901      	ldr	r1, [pc, #4]	; (8007e78 <_cleanup_r+0x8>)
 8007e72:	f000 b8af 	b.w	8007fd4 <_fwalk_reent>
 8007e76:	bf00      	nop
 8007e78:	08007db1 	.word	0x08007db1

08007e7c <__sfmoreglue>:
 8007e7c:	b570      	push	{r4, r5, r6, lr}
 8007e7e:	1e4a      	subs	r2, r1, #1
 8007e80:	2568      	movs	r5, #104	; 0x68
 8007e82:	4355      	muls	r5, r2
 8007e84:	460e      	mov	r6, r1
 8007e86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e8a:	f7ff fa7f 	bl	800738c <_malloc_r>
 8007e8e:	4604      	mov	r4, r0
 8007e90:	b140      	cbz	r0, 8007ea4 <__sfmoreglue+0x28>
 8007e92:	2100      	movs	r1, #0
 8007e94:	e9c0 1600 	strd	r1, r6, [r0]
 8007e98:	300c      	adds	r0, #12
 8007e9a:	60a0      	str	r0, [r4, #8]
 8007e9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ea0:	f7fb fde8 	bl	8003a74 <memset>
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	bd70      	pop	{r4, r5, r6, pc}

08007ea8 <__sfp_lock_acquire>:
 8007ea8:	4801      	ldr	r0, [pc, #4]	; (8007eb0 <__sfp_lock_acquire+0x8>)
 8007eaa:	f000 b8b3 	b.w	8008014 <__retarget_lock_acquire_recursive>
 8007eae:	bf00      	nop
 8007eb0:	200002e8 	.word	0x200002e8

08007eb4 <__sfp_lock_release>:
 8007eb4:	4801      	ldr	r0, [pc, #4]	; (8007ebc <__sfp_lock_release+0x8>)
 8007eb6:	f000 b8ae 	b.w	8008016 <__retarget_lock_release_recursive>
 8007eba:	bf00      	nop
 8007ebc:	200002e8 	.word	0x200002e8

08007ec0 <__sinit_lock_acquire>:
 8007ec0:	4801      	ldr	r0, [pc, #4]	; (8007ec8 <__sinit_lock_acquire+0x8>)
 8007ec2:	f000 b8a7 	b.w	8008014 <__retarget_lock_acquire_recursive>
 8007ec6:	bf00      	nop
 8007ec8:	200002e3 	.word	0x200002e3

08007ecc <__sinit_lock_release>:
 8007ecc:	4801      	ldr	r0, [pc, #4]	; (8007ed4 <__sinit_lock_release+0x8>)
 8007ece:	f000 b8a2 	b.w	8008016 <__retarget_lock_release_recursive>
 8007ed2:	bf00      	nop
 8007ed4:	200002e3 	.word	0x200002e3

08007ed8 <__sinit>:
 8007ed8:	b510      	push	{r4, lr}
 8007eda:	4604      	mov	r4, r0
 8007edc:	f7ff fff0 	bl	8007ec0 <__sinit_lock_acquire>
 8007ee0:	69a3      	ldr	r3, [r4, #24]
 8007ee2:	b11b      	cbz	r3, 8007eec <__sinit+0x14>
 8007ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ee8:	f7ff bff0 	b.w	8007ecc <__sinit_lock_release>
 8007eec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ef0:	6523      	str	r3, [r4, #80]	; 0x50
 8007ef2:	4b13      	ldr	r3, [pc, #76]	; (8007f40 <__sinit+0x68>)
 8007ef4:	4a13      	ldr	r2, [pc, #76]	; (8007f44 <__sinit+0x6c>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007efa:	42a3      	cmp	r3, r4
 8007efc:	bf04      	itt	eq
 8007efe:	2301      	moveq	r3, #1
 8007f00:	61a3      	streq	r3, [r4, #24]
 8007f02:	4620      	mov	r0, r4
 8007f04:	f000 f820 	bl	8007f48 <__sfp>
 8007f08:	6060      	str	r0, [r4, #4]
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f000 f81c 	bl	8007f48 <__sfp>
 8007f10:	60a0      	str	r0, [r4, #8]
 8007f12:	4620      	mov	r0, r4
 8007f14:	f000 f818 	bl	8007f48 <__sfp>
 8007f18:	2200      	movs	r2, #0
 8007f1a:	60e0      	str	r0, [r4, #12]
 8007f1c:	2104      	movs	r1, #4
 8007f1e:	6860      	ldr	r0, [r4, #4]
 8007f20:	f7ff ff82 	bl	8007e28 <std>
 8007f24:	68a0      	ldr	r0, [r4, #8]
 8007f26:	2201      	movs	r2, #1
 8007f28:	2109      	movs	r1, #9
 8007f2a:	f7ff ff7d 	bl	8007e28 <std>
 8007f2e:	68e0      	ldr	r0, [r4, #12]
 8007f30:	2202      	movs	r2, #2
 8007f32:	2112      	movs	r1, #18
 8007f34:	f7ff ff78 	bl	8007e28 <std>
 8007f38:	2301      	movs	r3, #1
 8007f3a:	61a3      	str	r3, [r4, #24]
 8007f3c:	e7d2      	b.n	8007ee4 <__sinit+0xc>
 8007f3e:	bf00      	nop
 8007f40:	080083c0 	.word	0x080083c0
 8007f44:	08007e71 	.word	0x08007e71

08007f48 <__sfp>:
 8007f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4a:	4607      	mov	r7, r0
 8007f4c:	f7ff ffac 	bl	8007ea8 <__sfp_lock_acquire>
 8007f50:	4b1e      	ldr	r3, [pc, #120]	; (8007fcc <__sfp+0x84>)
 8007f52:	681e      	ldr	r6, [r3, #0]
 8007f54:	69b3      	ldr	r3, [r6, #24]
 8007f56:	b913      	cbnz	r3, 8007f5e <__sfp+0x16>
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f7ff ffbd 	bl	8007ed8 <__sinit>
 8007f5e:	3648      	adds	r6, #72	; 0x48
 8007f60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f64:	3b01      	subs	r3, #1
 8007f66:	d503      	bpl.n	8007f70 <__sfp+0x28>
 8007f68:	6833      	ldr	r3, [r6, #0]
 8007f6a:	b30b      	cbz	r3, 8007fb0 <__sfp+0x68>
 8007f6c:	6836      	ldr	r6, [r6, #0]
 8007f6e:	e7f7      	b.n	8007f60 <__sfp+0x18>
 8007f70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f74:	b9d5      	cbnz	r5, 8007fac <__sfp+0x64>
 8007f76:	4b16      	ldr	r3, [pc, #88]	; (8007fd0 <__sfp+0x88>)
 8007f78:	60e3      	str	r3, [r4, #12]
 8007f7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f7e:	6665      	str	r5, [r4, #100]	; 0x64
 8007f80:	f000 f847 	bl	8008012 <__retarget_lock_init_recursive>
 8007f84:	f7ff ff96 	bl	8007eb4 <__sfp_lock_release>
 8007f88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f90:	6025      	str	r5, [r4, #0]
 8007f92:	61a5      	str	r5, [r4, #24]
 8007f94:	2208      	movs	r2, #8
 8007f96:	4629      	mov	r1, r5
 8007f98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f9c:	f7fb fd6a 	bl	8003a74 <memset>
 8007fa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007fa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007fa8:	4620      	mov	r0, r4
 8007faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fac:	3468      	adds	r4, #104	; 0x68
 8007fae:	e7d9      	b.n	8007f64 <__sfp+0x1c>
 8007fb0:	2104      	movs	r1, #4
 8007fb2:	4638      	mov	r0, r7
 8007fb4:	f7ff ff62 	bl	8007e7c <__sfmoreglue>
 8007fb8:	4604      	mov	r4, r0
 8007fba:	6030      	str	r0, [r6, #0]
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d1d5      	bne.n	8007f6c <__sfp+0x24>
 8007fc0:	f7ff ff78 	bl	8007eb4 <__sfp_lock_release>
 8007fc4:	230c      	movs	r3, #12
 8007fc6:	603b      	str	r3, [r7, #0]
 8007fc8:	e7ee      	b.n	8007fa8 <__sfp+0x60>
 8007fca:	bf00      	nop
 8007fcc:	080083c0 	.word	0x080083c0
 8007fd0:	ffff0001 	.word	0xffff0001

08007fd4 <_fwalk_reent>:
 8007fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fd8:	4606      	mov	r6, r0
 8007fda:	4688      	mov	r8, r1
 8007fdc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fe0:	2700      	movs	r7, #0
 8007fe2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fe6:	f1b9 0901 	subs.w	r9, r9, #1
 8007fea:	d505      	bpl.n	8007ff8 <_fwalk_reent+0x24>
 8007fec:	6824      	ldr	r4, [r4, #0]
 8007fee:	2c00      	cmp	r4, #0
 8007ff0:	d1f7      	bne.n	8007fe2 <_fwalk_reent+0xe>
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ff8:	89ab      	ldrh	r3, [r5, #12]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d907      	bls.n	800800e <_fwalk_reent+0x3a>
 8007ffe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008002:	3301      	adds	r3, #1
 8008004:	d003      	beq.n	800800e <_fwalk_reent+0x3a>
 8008006:	4629      	mov	r1, r5
 8008008:	4630      	mov	r0, r6
 800800a:	47c0      	blx	r8
 800800c:	4307      	orrs	r7, r0
 800800e:	3568      	adds	r5, #104	; 0x68
 8008010:	e7e9      	b.n	8007fe6 <_fwalk_reent+0x12>

08008012 <__retarget_lock_init_recursive>:
 8008012:	4770      	bx	lr

08008014 <__retarget_lock_acquire_recursive>:
 8008014:	4770      	bx	lr

08008016 <__retarget_lock_release_recursive>:
 8008016:	4770      	bx	lr

08008018 <__swhatbuf_r>:
 8008018:	b570      	push	{r4, r5, r6, lr}
 800801a:	460e      	mov	r6, r1
 800801c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008020:	2900      	cmp	r1, #0
 8008022:	b096      	sub	sp, #88	; 0x58
 8008024:	4614      	mov	r4, r2
 8008026:	461d      	mov	r5, r3
 8008028:	da07      	bge.n	800803a <__swhatbuf_r+0x22>
 800802a:	2300      	movs	r3, #0
 800802c:	602b      	str	r3, [r5, #0]
 800802e:	89b3      	ldrh	r3, [r6, #12]
 8008030:	061a      	lsls	r2, r3, #24
 8008032:	d410      	bmi.n	8008056 <__swhatbuf_r+0x3e>
 8008034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008038:	e00e      	b.n	8008058 <__swhatbuf_r+0x40>
 800803a:	466a      	mov	r2, sp
 800803c:	f000 f902 	bl	8008244 <_fstat_r>
 8008040:	2800      	cmp	r0, #0
 8008042:	dbf2      	blt.n	800802a <__swhatbuf_r+0x12>
 8008044:	9a01      	ldr	r2, [sp, #4]
 8008046:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800804a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800804e:	425a      	negs	r2, r3
 8008050:	415a      	adcs	r2, r3
 8008052:	602a      	str	r2, [r5, #0]
 8008054:	e7ee      	b.n	8008034 <__swhatbuf_r+0x1c>
 8008056:	2340      	movs	r3, #64	; 0x40
 8008058:	2000      	movs	r0, #0
 800805a:	6023      	str	r3, [r4, #0]
 800805c:	b016      	add	sp, #88	; 0x58
 800805e:	bd70      	pop	{r4, r5, r6, pc}

08008060 <__smakebuf_r>:
 8008060:	898b      	ldrh	r3, [r1, #12]
 8008062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008064:	079d      	lsls	r5, r3, #30
 8008066:	4606      	mov	r6, r0
 8008068:	460c      	mov	r4, r1
 800806a:	d507      	bpl.n	800807c <__smakebuf_r+0x1c>
 800806c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008070:	6023      	str	r3, [r4, #0]
 8008072:	6123      	str	r3, [r4, #16]
 8008074:	2301      	movs	r3, #1
 8008076:	6163      	str	r3, [r4, #20]
 8008078:	b002      	add	sp, #8
 800807a:	bd70      	pop	{r4, r5, r6, pc}
 800807c:	ab01      	add	r3, sp, #4
 800807e:	466a      	mov	r2, sp
 8008080:	f7ff ffca 	bl	8008018 <__swhatbuf_r>
 8008084:	9900      	ldr	r1, [sp, #0]
 8008086:	4605      	mov	r5, r0
 8008088:	4630      	mov	r0, r6
 800808a:	f7ff f97f 	bl	800738c <_malloc_r>
 800808e:	b948      	cbnz	r0, 80080a4 <__smakebuf_r+0x44>
 8008090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008094:	059a      	lsls	r2, r3, #22
 8008096:	d4ef      	bmi.n	8008078 <__smakebuf_r+0x18>
 8008098:	f023 0303 	bic.w	r3, r3, #3
 800809c:	f043 0302 	orr.w	r3, r3, #2
 80080a0:	81a3      	strh	r3, [r4, #12]
 80080a2:	e7e3      	b.n	800806c <__smakebuf_r+0xc>
 80080a4:	4b0d      	ldr	r3, [pc, #52]	; (80080dc <__smakebuf_r+0x7c>)
 80080a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80080a8:	89a3      	ldrh	r3, [r4, #12]
 80080aa:	6020      	str	r0, [r4, #0]
 80080ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080b0:	81a3      	strh	r3, [r4, #12]
 80080b2:	9b00      	ldr	r3, [sp, #0]
 80080b4:	6163      	str	r3, [r4, #20]
 80080b6:	9b01      	ldr	r3, [sp, #4]
 80080b8:	6120      	str	r0, [r4, #16]
 80080ba:	b15b      	cbz	r3, 80080d4 <__smakebuf_r+0x74>
 80080bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080c0:	4630      	mov	r0, r6
 80080c2:	f000 f8d1 	bl	8008268 <_isatty_r>
 80080c6:	b128      	cbz	r0, 80080d4 <__smakebuf_r+0x74>
 80080c8:	89a3      	ldrh	r3, [r4, #12]
 80080ca:	f023 0303 	bic.w	r3, r3, #3
 80080ce:	f043 0301 	orr.w	r3, r3, #1
 80080d2:	81a3      	strh	r3, [r4, #12]
 80080d4:	89a0      	ldrh	r0, [r4, #12]
 80080d6:	4305      	orrs	r5, r0
 80080d8:	81a5      	strh	r5, [r4, #12]
 80080da:	e7cd      	b.n	8008078 <__smakebuf_r+0x18>
 80080dc:	08007e71 	.word	0x08007e71

080080e0 <_malloc_usable_size_r>:
 80080e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080e4:	1f18      	subs	r0, r3, #4
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	bfbc      	itt	lt
 80080ea:	580b      	ldrlt	r3, [r1, r0]
 80080ec:	18c0      	addlt	r0, r0, r3
 80080ee:	4770      	bx	lr

080080f0 <_raise_r>:
 80080f0:	291f      	cmp	r1, #31
 80080f2:	b538      	push	{r3, r4, r5, lr}
 80080f4:	4604      	mov	r4, r0
 80080f6:	460d      	mov	r5, r1
 80080f8:	d904      	bls.n	8008104 <_raise_r+0x14>
 80080fa:	2316      	movs	r3, #22
 80080fc:	6003      	str	r3, [r0, #0]
 80080fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008102:	bd38      	pop	{r3, r4, r5, pc}
 8008104:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008106:	b112      	cbz	r2, 800810e <_raise_r+0x1e>
 8008108:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800810c:	b94b      	cbnz	r3, 8008122 <_raise_r+0x32>
 800810e:	4620      	mov	r0, r4
 8008110:	f000 f830 	bl	8008174 <_getpid_r>
 8008114:	462a      	mov	r2, r5
 8008116:	4601      	mov	r1, r0
 8008118:	4620      	mov	r0, r4
 800811a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800811e:	f000 b817 	b.w	8008150 <_kill_r>
 8008122:	2b01      	cmp	r3, #1
 8008124:	d00a      	beq.n	800813c <_raise_r+0x4c>
 8008126:	1c59      	adds	r1, r3, #1
 8008128:	d103      	bne.n	8008132 <_raise_r+0x42>
 800812a:	2316      	movs	r3, #22
 800812c:	6003      	str	r3, [r0, #0]
 800812e:	2001      	movs	r0, #1
 8008130:	e7e7      	b.n	8008102 <_raise_r+0x12>
 8008132:	2400      	movs	r4, #0
 8008134:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008138:	4628      	mov	r0, r5
 800813a:	4798      	blx	r3
 800813c:	2000      	movs	r0, #0
 800813e:	e7e0      	b.n	8008102 <_raise_r+0x12>

08008140 <raise>:
 8008140:	4b02      	ldr	r3, [pc, #8]	; (800814c <raise+0xc>)
 8008142:	4601      	mov	r1, r0
 8008144:	6818      	ldr	r0, [r3, #0]
 8008146:	f7ff bfd3 	b.w	80080f0 <_raise_r>
 800814a:	bf00      	nop
 800814c:	20000008 	.word	0x20000008

08008150 <_kill_r>:
 8008150:	b538      	push	{r3, r4, r5, lr}
 8008152:	4d07      	ldr	r5, [pc, #28]	; (8008170 <_kill_r+0x20>)
 8008154:	2300      	movs	r3, #0
 8008156:	4604      	mov	r4, r0
 8008158:	4608      	mov	r0, r1
 800815a:	4611      	mov	r1, r2
 800815c:	602b      	str	r3, [r5, #0]
 800815e:	f7f9 fb21 	bl	80017a4 <_kill>
 8008162:	1c43      	adds	r3, r0, #1
 8008164:	d102      	bne.n	800816c <_kill_r+0x1c>
 8008166:	682b      	ldr	r3, [r5, #0]
 8008168:	b103      	cbz	r3, 800816c <_kill_r+0x1c>
 800816a:	6023      	str	r3, [r4, #0]
 800816c:	bd38      	pop	{r3, r4, r5, pc}
 800816e:	bf00      	nop
 8008170:	200002dc 	.word	0x200002dc

08008174 <_getpid_r>:
 8008174:	f7f9 bb0e 	b.w	8001794 <_getpid>

08008178 <__sread>:
 8008178:	b510      	push	{r4, lr}
 800817a:	460c      	mov	r4, r1
 800817c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008180:	f000 f894 	bl	80082ac <_read_r>
 8008184:	2800      	cmp	r0, #0
 8008186:	bfab      	itete	ge
 8008188:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800818a:	89a3      	ldrhlt	r3, [r4, #12]
 800818c:	181b      	addge	r3, r3, r0
 800818e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008192:	bfac      	ite	ge
 8008194:	6563      	strge	r3, [r4, #84]	; 0x54
 8008196:	81a3      	strhlt	r3, [r4, #12]
 8008198:	bd10      	pop	{r4, pc}

0800819a <__swrite>:
 800819a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800819e:	461f      	mov	r7, r3
 80081a0:	898b      	ldrh	r3, [r1, #12]
 80081a2:	05db      	lsls	r3, r3, #23
 80081a4:	4605      	mov	r5, r0
 80081a6:	460c      	mov	r4, r1
 80081a8:	4616      	mov	r6, r2
 80081aa:	d505      	bpl.n	80081b8 <__swrite+0x1e>
 80081ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081b0:	2302      	movs	r3, #2
 80081b2:	2200      	movs	r2, #0
 80081b4:	f000 f868 	bl	8008288 <_lseek_r>
 80081b8:	89a3      	ldrh	r3, [r4, #12]
 80081ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081c2:	81a3      	strh	r3, [r4, #12]
 80081c4:	4632      	mov	r2, r6
 80081c6:	463b      	mov	r3, r7
 80081c8:	4628      	mov	r0, r5
 80081ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081ce:	f000 b817 	b.w	8008200 <_write_r>

080081d2 <__sseek>:
 80081d2:	b510      	push	{r4, lr}
 80081d4:	460c      	mov	r4, r1
 80081d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081da:	f000 f855 	bl	8008288 <_lseek_r>
 80081de:	1c43      	adds	r3, r0, #1
 80081e0:	89a3      	ldrh	r3, [r4, #12]
 80081e2:	bf15      	itete	ne
 80081e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80081e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80081ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80081ee:	81a3      	strheq	r3, [r4, #12]
 80081f0:	bf18      	it	ne
 80081f2:	81a3      	strhne	r3, [r4, #12]
 80081f4:	bd10      	pop	{r4, pc}

080081f6 <__sclose>:
 80081f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081fa:	f000 b813 	b.w	8008224 <_close_r>
	...

08008200 <_write_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	4d07      	ldr	r5, [pc, #28]	; (8008220 <_write_r+0x20>)
 8008204:	4604      	mov	r4, r0
 8008206:	4608      	mov	r0, r1
 8008208:	4611      	mov	r1, r2
 800820a:	2200      	movs	r2, #0
 800820c:	602a      	str	r2, [r5, #0]
 800820e:	461a      	mov	r2, r3
 8008210:	f7f9 faff 	bl	8001812 <_write>
 8008214:	1c43      	adds	r3, r0, #1
 8008216:	d102      	bne.n	800821e <_write_r+0x1e>
 8008218:	682b      	ldr	r3, [r5, #0]
 800821a:	b103      	cbz	r3, 800821e <_write_r+0x1e>
 800821c:	6023      	str	r3, [r4, #0]
 800821e:	bd38      	pop	{r3, r4, r5, pc}
 8008220:	200002dc 	.word	0x200002dc

08008224 <_close_r>:
 8008224:	b538      	push	{r3, r4, r5, lr}
 8008226:	4d06      	ldr	r5, [pc, #24]	; (8008240 <_close_r+0x1c>)
 8008228:	2300      	movs	r3, #0
 800822a:	4604      	mov	r4, r0
 800822c:	4608      	mov	r0, r1
 800822e:	602b      	str	r3, [r5, #0]
 8008230:	f7f9 fb0b 	bl	800184a <_close>
 8008234:	1c43      	adds	r3, r0, #1
 8008236:	d102      	bne.n	800823e <_close_r+0x1a>
 8008238:	682b      	ldr	r3, [r5, #0]
 800823a:	b103      	cbz	r3, 800823e <_close_r+0x1a>
 800823c:	6023      	str	r3, [r4, #0]
 800823e:	bd38      	pop	{r3, r4, r5, pc}
 8008240:	200002dc 	.word	0x200002dc

08008244 <_fstat_r>:
 8008244:	b538      	push	{r3, r4, r5, lr}
 8008246:	4d07      	ldr	r5, [pc, #28]	; (8008264 <_fstat_r+0x20>)
 8008248:	2300      	movs	r3, #0
 800824a:	4604      	mov	r4, r0
 800824c:	4608      	mov	r0, r1
 800824e:	4611      	mov	r1, r2
 8008250:	602b      	str	r3, [r5, #0]
 8008252:	f7f9 fb06 	bl	8001862 <_fstat>
 8008256:	1c43      	adds	r3, r0, #1
 8008258:	d102      	bne.n	8008260 <_fstat_r+0x1c>
 800825a:	682b      	ldr	r3, [r5, #0]
 800825c:	b103      	cbz	r3, 8008260 <_fstat_r+0x1c>
 800825e:	6023      	str	r3, [r4, #0]
 8008260:	bd38      	pop	{r3, r4, r5, pc}
 8008262:	bf00      	nop
 8008264:	200002dc 	.word	0x200002dc

08008268 <_isatty_r>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	4d06      	ldr	r5, [pc, #24]	; (8008284 <_isatty_r+0x1c>)
 800826c:	2300      	movs	r3, #0
 800826e:	4604      	mov	r4, r0
 8008270:	4608      	mov	r0, r1
 8008272:	602b      	str	r3, [r5, #0]
 8008274:	f7f9 fb05 	bl	8001882 <_isatty>
 8008278:	1c43      	adds	r3, r0, #1
 800827a:	d102      	bne.n	8008282 <_isatty_r+0x1a>
 800827c:	682b      	ldr	r3, [r5, #0]
 800827e:	b103      	cbz	r3, 8008282 <_isatty_r+0x1a>
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	bd38      	pop	{r3, r4, r5, pc}
 8008284:	200002dc 	.word	0x200002dc

08008288 <_lseek_r>:
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	4d07      	ldr	r5, [pc, #28]	; (80082a8 <_lseek_r+0x20>)
 800828c:	4604      	mov	r4, r0
 800828e:	4608      	mov	r0, r1
 8008290:	4611      	mov	r1, r2
 8008292:	2200      	movs	r2, #0
 8008294:	602a      	str	r2, [r5, #0]
 8008296:	461a      	mov	r2, r3
 8008298:	f7f9 fafe 	bl	8001898 <_lseek>
 800829c:	1c43      	adds	r3, r0, #1
 800829e:	d102      	bne.n	80082a6 <_lseek_r+0x1e>
 80082a0:	682b      	ldr	r3, [r5, #0]
 80082a2:	b103      	cbz	r3, 80082a6 <_lseek_r+0x1e>
 80082a4:	6023      	str	r3, [r4, #0]
 80082a6:	bd38      	pop	{r3, r4, r5, pc}
 80082a8:	200002dc 	.word	0x200002dc

080082ac <_read_r>:
 80082ac:	b538      	push	{r3, r4, r5, lr}
 80082ae:	4d07      	ldr	r5, [pc, #28]	; (80082cc <_read_r+0x20>)
 80082b0:	4604      	mov	r4, r0
 80082b2:	4608      	mov	r0, r1
 80082b4:	4611      	mov	r1, r2
 80082b6:	2200      	movs	r2, #0
 80082b8:	602a      	str	r2, [r5, #0]
 80082ba:	461a      	mov	r2, r3
 80082bc:	f7f9 fa8c 	bl	80017d8 <_read>
 80082c0:	1c43      	adds	r3, r0, #1
 80082c2:	d102      	bne.n	80082ca <_read_r+0x1e>
 80082c4:	682b      	ldr	r3, [r5, #0]
 80082c6:	b103      	cbz	r3, 80082ca <_read_r+0x1e>
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	200002dc 	.word	0x200002dc

080082d0 <_init>:
 80082d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d2:	bf00      	nop
 80082d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082d6:	bc08      	pop	{r3}
 80082d8:	469e      	mov	lr, r3
 80082da:	4770      	bx	lr

080082dc <_fini>:
 80082dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082de:	bf00      	nop
 80082e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082e2:	bc08      	pop	{r3}
 80082e4:	469e      	mov	lr, r3
 80082e6:	4770      	bx	lr
