
VRS-zadanie-cv10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  08008378  08008378  00018378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088d4  080088d4  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  080088d4  080088d4  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088d4  080088d4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088d4  080088d4  000188d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088d8  080088d8  000188d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080088dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          00000130  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000308  20000308  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a9eb  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fac  00000000  00000000  0002abf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000928  00000000  00000000  0002cba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000840  00000000  00000000  0002d4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018489  00000000  00000000  0002dd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007650  00000000  00000000  00046191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b567  00000000  00000000  0004d7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c8d48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b00  00000000  00000000  000c8d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800835c 	.word	0x0800835c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800835c 	.word	0x0800835c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <__NVIC_GetPriorityGrouping+0x18>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	f003 0307 	and.w	r3, r3, #7
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	db0b      	blt.n	8000d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f003 021f 	and.w	r2, r3, #31
 8000d48:	4907      	ldr	r1, [pc, #28]	; (8000d68 <__NVIC_EnableIRQ+0x38>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	095b      	lsrs	r3, r3, #5
 8000d50:	2001      	movs	r0, #1
 8000d52:	fa00 f202 	lsl.w	r2, r0, r2
 8000d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	; (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	; (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	; 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
         );
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	; 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e32:	695a      	ldr	r2, [r3, #20]
 8000e34:	4907      	ldr	r1, [pc, #28]	; (8000e54 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e3e:	695a      	ldr	r2, [r3, #20]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4013      	ands	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	40021000 	.word	0x40021000

08000e58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f7ff ffe3 	bl	8000e28 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e62:	f7ff ff57 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ffa7 	bl	8000dc0 <NVIC_EncodePriority>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4619      	mov	r1, r3
 8000e76:	2010      	movs	r0, #16
 8000e78:	f7ff ff78 	bl	8000d6c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000e7c:	2010      	movs	r0, #16
 8000e7e:	f7ff ff57 	bl	8000d30 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e82:	f7ff ff47 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff97 	bl	8000dc0 <NVIC_EncodePriority>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4619      	mov	r1, r3
 8000e96:	2011      	movs	r0, #17
 8000e98:	f7ff ff68 	bl	8000d6c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000e9c:	2011      	movs	r0, #17
 8000e9e:	f7ff ff47 	bl	8000d30 <__NVIC_EnableIRQ>

}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <LL_AHB1_GRP1_EnableClock>:
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000eb2:	695a      	ldr	r2, [r3, #20]
 8000eb4:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ebe:	695a      	ldr	r2, [r3, #20]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000edc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ee0:	f7ff ffe2 	bl	8000ea8 <LL_AHB1_GRP1_EnableClock>

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <__NVIC_SetPriorityGrouping>:
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_GetPriorityGrouping>:
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <__NVIC_GetPriorityGrouping+0x18>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 0307 	and.w	r3, r3, #7
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_SetPriority>:
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db0a      	blt.n	8000f76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	490c      	ldr	r1, [pc, #48]	; (8000f98 <__NVIC_SetPriority+0x4c>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f74:	e00a      	b.n	8000f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4908      	ldr	r1, [pc, #32]	; (8000f9c <__NVIC_SetPriority+0x50>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	440b      	add	r3, r1
 8000f8a:	761a      	strb	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <NVIC_EncodePriority>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f1c3 0307 	rsb	r3, r3, #7
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf28      	it	cs
 8000fbe:	2304      	movcs	r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d902      	bls.n	8000fd0 <NVIC_EncodePriority+0x30>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b03      	subs	r3, #3
 8000fce:	e000      	b.n	8000fd2 <NVIC_EncodePriority+0x32>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43d9      	mvns	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	; 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <LL_RCC_HSI_Enable+0x1c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <LL_RCC_HSI_Enable+0x1c>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000

08001028 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <LL_RCC_HSI_IsReady+0x20>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b02      	cmp	r3, #2
 8001036:	bf0c      	ite	eq
 8001038:	2301      	moveq	r3, #1
 800103a:	2300      	movne	r3, #0
 800103c:	b2db      	uxtb	r3, r3
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	40021000 	.word	0x40021000

0800104c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	4904      	ldr	r1, [pc, #16]	; (8001074 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001062:	4313      	orrs	r3, r2
 8001064:	600b      	str	r3, [r1, #0]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000

08001078 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <LL_RCC_SetSysClkSource+0x24>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f023 0203 	bic.w	r2, r3, #3
 8001088:	4904      	ldr	r1, [pc, #16]	; (800109c <LL_RCC_SetSysClkSource+0x24>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4313      	orrs	r3, r2
 800108e:	604b      	str	r3, [r1, #4]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	40021000 	.word	0x40021000

080010a0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <LL_RCC_GetSysClkSource+0x18>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 030c 	and.w	r3, r3, #12
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000

080010bc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010cc:	4904      	ldr	r1, [pc, #16]	; (80010e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	604b      	str	r3, [r1, #4]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40021000 	.word	0x40021000

080010e4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <LL_RCC_SetAPB1Prescaler+0x24>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010f4:	4904      	ldr	r1, [pc, #16]	; (8001108 <LL_RCC_SetAPB1Prescaler+0x24>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	604b      	str	r3, [r1, #4]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	40021000 	.word	0x40021000

0800110c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800111c:	4904      	ldr	r1, [pc, #16]	; (8001130 <LL_RCC_SetAPB2Prescaler+0x24>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4313      	orrs	r3, r2
 8001122:	604b      	str	r3, [r1, #4]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	40021000 	.word	0x40021000

08001134 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <LL_APB1_GRP1_EnableClock+0x2c>)
 800113e:	69da      	ldr	r2, [r3, #28]
 8001140:	4907      	ldr	r1, [pc, #28]	; (8001160 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4313      	orrs	r3, r2
 8001146:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <LL_APB1_GRP1_EnableClock+0x2c>)
 800114a:	69da      	ldr	r2, [r3, #28]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4013      	ands	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001152:	68fb      	ldr	r3, [r7, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	40021000 	.word	0x40021000

08001164 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <LL_APB2_GRP1_EnableClock+0x2c>)
 800116e:	699a      	ldr	r2, [r3, #24]
 8001170:	4907      	ldr	r1, [pc, #28]	; (8001190 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4313      	orrs	r3, r2
 8001176:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <LL_APB2_GRP1_EnableClock+0x2c>)
 800117a:	699a      	ldr	r2, [r3, #24]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4013      	ands	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001182:	68fb      	ldr	r3, [r7, #12]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	40021000 	.word	0x40021000

08001194 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <LL_FLASH_SetLatency+0x24>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f023 0207 	bic.w	r2, r3, #7
 80011a4:	4904      	ldr	r1, [pc, #16]	; (80011b8 <LL_FLASH_SetLatency+0x24>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	600b      	str	r3, [r1, #0]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	40022000 	.word	0x40022000

080011bc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <LL_FLASH_GetLatency+0x18>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0307 	and.w	r3, r3, #7
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40022000 	.word	0x40022000

080011d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b0df      	sub	sp, #380	; 0x17c
 80011dc:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80011de:	2001      	movs	r0, #1
 80011e0:	f7ff ffc0 	bl	8001164 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80011e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80011e8:	f7ff ffa4 	bl	8001134 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f7ff fe7b 	bl	8000ee8 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80011f2:	f7ff fe9d 	bl	8000f30 <__NVIC_GetPriorityGrouping>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2200      	movs	r2, #0
 80011fa:	210f      	movs	r1, #15
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fecf 	bl	8000fa0 <NVIC_EncodePriority>
 8001202:	4603      	mov	r3, r0
 8001204:	4619      	mov	r1, r3
 8001206:	f04f 30ff 	mov.w	r0, #4294967295
 800120a:	f7ff fe9f 	bl	8000f4c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800120e:	f000 f863 	bl	80012d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001212:	f7ff fe61 	bl	8000ed8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001216:	f7ff fe1f 	bl	8000e58 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800121a:	f001 fa5b 	bl	80026d4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800121e:	f000 fd81 	bl	8001d24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  USART2_RegisterCallback(proccesDmaData); //DMA callback init
 8001222:	4825      	ldr	r0, [pc, #148]	; (80012b8 <main+0xe0>)
 8001224:	f001 fb40 	bl	80028a8 <USART2_RegisterCallback>

   dutyCycle = 0; //default duty cycle
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <main+0xe4>)
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
   mode = 0;
 800122e:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <main+0xe8>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
   countUpDown = 1;
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <main+0xec>)
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
   dutyCycleManual = 0;
 800123a:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <main+0xf0>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]


   /*While loop definitions*/
  char data_to_send[100];
  char actual_data_buffer[256];
  strcpy(actual_data_buffer,"");
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Sending info about buffer capacity status - debug
	  	  uint16_t buffer_state = getBufferState();
 8001246:	f001 fa39 	bl	80026bc <getBufferState>
 800124a:	4603      	mov	r3, r0
 800124c:	f8a7 316e 	strh.w	r3, [r7, #366]	; 0x16e
	  	  float buffer_percentage = (float) (buffer_state) / (float) (DMA_USART2_BUFFER_SIZE)*100;
 8001250:	f8b7 316e 	ldrh.w	r3, [r7, #366]	; 0x16e
 8001254:	ee07 3a90 	vmov	s15, r3
 8001258:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800125c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80012cc <main+0xf4>
 8001260:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001264:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80012d0 <main+0xf8>
 8001268:	ee67 7a87 	vmul.f32	s15, s15, s14
 800126c:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168
	  	  sprintf(data_to_send, "Buffer capacity: %d bytes, occupied memory: %d bytes, load [in %%]:%.2f%%\r\n", DMA_USART2_BUFFER_SIZE, buffer_state, buffer_percentage);
 8001270:	f8b7 416e 	ldrh.w	r4, [r7, #366]	; 0x16e
 8001274:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 8001278:	f7ff f976 	bl	8000568 <__aeabi_f2d>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8001284:	e9cd 2300 	strd	r2, r3, [sp]
 8001288:	4623      	mov	r3, r4
 800128a:	22c8      	movs	r2, #200	; 0xc8
 800128c:	4911      	ldr	r1, [pc, #68]	; (80012d4 <main+0xfc>)
 800128e:	f003 faa9 	bl	80047e4 <siprintf>

	  	  USART2_PutBuffer((uint8_t *) data_to_send, strlen(data_to_send));
 8001292:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001296:	4618      	mov	r0, r3
 8001298:	f7fe ffa4 	bl	80001e4 <strlen>
 800129c:	4603      	mov	r3, r0
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 fb10 	bl	80028cc <USART2_PutBuffer>
	  	  LL_mDelay(10000);
 80012ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80012b0:	f002 fbac 	bl	8003a0c <LL_mDelay>
  {
 80012b4:	e7c7      	b.n	8001246 <main+0x6e>
 80012b6:	bf00      	nop
 80012b8:	0800133d 	.word	0x0800133d
 80012bc:	2000022c 	.word	0x2000022c
 80012c0:	2000022e 	.word	0x2000022e
 80012c4:	2000022f 	.word	0x2000022f
 80012c8:	2000022d 	.word	0x2000022d
 80012cc:	43480000 	.word	0x43480000
 80012d0:	42c80000 	.word	0x42c80000
 80012d4:	08008378 	.word	0x08008378

080012d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff ff59 	bl	8001194 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80012e2:	bf00      	nop
 80012e4:	f7ff ff6a 	bl	80011bc <LL_FLASH_GetLatency>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1fa      	bne.n	80012e4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80012ee:	f7ff fe8b 	bl	8001008 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80012f2:	bf00      	nop
 80012f4:	f7ff fe98 	bl	8001028 <LL_RCC_HSI_IsReady>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d1fa      	bne.n	80012f4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80012fe:	2010      	movs	r0, #16
 8001300:	f7ff fea4 	bl	800104c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff fed9 	bl	80010bc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff feea 	bl	80010e4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001310:	2000      	movs	r0, #0
 8001312:	f7ff fefb 	bl	800110c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff feae 	bl	8001078 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800131c:	bf00      	nop
 800131e:	f7ff febf 	bl	80010a0 <LL_RCC_GetSysClkSource>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1fa      	bne.n	800131e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8001328:	4803      	ldr	r0, [pc, #12]	; (8001338 <SystemClock_Config+0x60>)
 800132a:	f002 fb61 	bl	80039f0 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800132e:	4802      	ldr	r0, [pc, #8]	; (8001338 <SystemClock_Config+0x60>)
 8001330:	f002 fb92 	bl	8003a58 <LL_SetSystemCoreClock>
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	007a1200 	.word	0x007a1200

0800133c <proccesDmaData>:

/* USER CODE BEGIN 4 */
void proccesDmaData(uint8_t sign)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
	if(sign == '\r') return; //odstranenie znaku, ktory sa vygeneruje po stlaceni enteru v puTTY
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b0d      	cmp	r3, #13
 800134a:	f000 8087 	beq.w	800145c <proccesDmaData+0x120>

	static char readed_text[20] = "";
	static int start = 0;
	char new_letter[2] = {sign,'\0'};
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	723b      	strb	r3, [r7, #8]
 8001352:	2300      	movs	r3, #0
 8001354:	727b      	strb	r3, [r7, #9]
	static char read_duty_cycle_text[10] = "";

    if(sign == '$' && start == 0){
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2b24      	cmp	r3, #36	; 0x24
 800135a:	d107      	bne.n	800136c <proccesDmaData+0x30>
 800135c:	4b41      	ldr	r3, [pc, #260]	; (8001464 <proccesDmaData+0x128>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d103      	bne.n	800136c <proccesDmaData+0x30>
        start = 1;
 8001364:	4b3f      	ldr	r3, [pc, #252]	; (8001464 <proccesDmaData+0x128>)
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	e068      	b.n	800143e <proccesDmaData+0x102>
    }
    else if( sign == '$' && start == 1){
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	2b24      	cmp	r3, #36	; 0x24
 8001370:	d165      	bne.n	800143e <proccesDmaData+0x102>
 8001372:	4b3c      	ldr	r3, [pc, #240]	; (8001464 <proccesDmaData+0x128>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d161      	bne.n	800143e <proccesDmaData+0x102>
    	start = 0;
 800137a:	4b3a      	ldr	r3, [pc, #232]	; (8001464 <proccesDmaData+0x128>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
        if(strcmp("$manual",readed_text) == 0){
 8001380:	4939      	ldr	r1, [pc, #228]	; (8001468 <proccesDmaData+0x12c>)
 8001382:	483a      	ldr	r0, [pc, #232]	; (800146c <proccesDmaData+0x130>)
 8001384:	f7fe ff24 	bl	80001d0 <strcmp>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d105      	bne.n	800139a <proccesDmaData+0x5e>
            mode = 1;
 800138e:	4b38      	ldr	r3, [pc, #224]	; (8001470 <proccesDmaData+0x134>)
 8001390:	2201      	movs	r2, #1
 8001392:	701a      	strb	r2, [r3, #0]
            strcpy(readed_text,"");
 8001394:	4b34      	ldr	r3, [pc, #208]	; (8001468 <proccesDmaData+0x12c>)
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
        }
        if(strcmp("$auto",readed_text) == 0){
 800139a:	4933      	ldr	r1, [pc, #204]	; (8001468 <proccesDmaData+0x12c>)
 800139c:	4835      	ldr	r0, [pc, #212]	; (8001474 <proccesDmaData+0x138>)
 800139e:	f7fe ff17 	bl	80001d0 <strcmp>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d105      	bne.n	80013b4 <proccesDmaData+0x78>
            mode = 0;
 80013a8:	4b31      	ldr	r3, [pc, #196]	; (8001470 <proccesDmaData+0x134>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
            strcpy(readed_text,"");
 80013ae:	4b2e      	ldr	r3, [pc, #184]	; (8001468 <proccesDmaData+0x12c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]

        }
        if(mode == 1){
 80013b4:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <proccesDmaData+0x134>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d140      	bne.n	800143e <proccesDmaData+0x102>
	    if (strlen(readed_text) != 6){//posledny $ sa nepridava do readed_text
 80013bc:	482a      	ldr	r0, [pc, #168]	; (8001468 <proccesDmaData+0x12c>)
 80013be:	f7fe ff11 	bl	80001e4 <strlen>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b06      	cmp	r3, #6
 80013c6:	d002      	beq.n	80013ce <proccesDmaData+0x92>
                strcpy(readed_text,"");
 80013c8:	4b27      	ldr	r3, [pc, #156]	; (8001468 <proccesDmaData+0x12c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
	    }	    
            if(strncmp("$PWM",readed_text,4)==0){
 80013ce:	2204      	movs	r2, #4
 80013d0:	4925      	ldr	r1, [pc, #148]	; (8001468 <proccesDmaData+0x12c>)
 80013d2:	4829      	ldr	r0, [pc, #164]	; (8001478 <proccesDmaData+0x13c>)
 80013d4:	f003 fa35 	bl	8004842 <strncmp>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d12f      	bne.n	800143e <proccesDmaData+0x102>
		if((readed_text[4] >= '0' && readed_text[4] <= '9') && (readed_text[5] >= '0' && readed_text[5] <= '9')) {
 80013de:	4b22      	ldr	r3, [pc, #136]	; (8001468 <proccesDmaData+0x12c>)
 80013e0:	791b      	ldrb	r3, [r3, #4]
 80013e2:	2b2f      	cmp	r3, #47	; 0x2f
 80013e4:	d928      	bls.n	8001438 <proccesDmaData+0xfc>
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <proccesDmaData+0x12c>)
 80013e8:	791b      	ldrb	r3, [r3, #4]
 80013ea:	2b39      	cmp	r3, #57	; 0x39
 80013ec:	d824      	bhi.n	8001438 <proccesDmaData+0xfc>
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <proccesDmaData+0x12c>)
 80013f0:	795b      	ldrb	r3, [r3, #5]
 80013f2:	2b2f      	cmp	r3, #47	; 0x2f
 80013f4:	d920      	bls.n	8001438 <proccesDmaData+0xfc>
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <proccesDmaData+0x12c>)
 80013f8:	795b      	ldrb	r3, [r3, #5]
 80013fa:	2b39      	cmp	r3, #57	; 0x39
 80013fc:	d81c      	bhi.n	8001438 <proccesDmaData+0xfc>
                    for(int j = 0; j<2; j++){
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	e00b      	b.n	800141c <proccesDmaData+0xe0>
                        read_duty_cycle_text[j]=readed_text[j+4];
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3304      	adds	r3, #4
 8001408:	4a17      	ldr	r2, [pc, #92]	; (8001468 <proccesDmaData+0x12c>)
 800140a:	5cd1      	ldrb	r1, [r2, r3]
 800140c:	4a1b      	ldr	r2, [pc, #108]	; (800147c <proccesDmaData+0x140>)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4413      	add	r3, r2
 8001412:	460a      	mov	r2, r1
 8001414:	701a      	strb	r2, [r3, #0]
                    for(int j = 0; j<2; j++){
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3301      	adds	r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b01      	cmp	r3, #1
 8001420:	ddf0      	ble.n	8001404 <proccesDmaData+0xc8>
                    }
                    dutyCycleManual = atoi(read_duty_cycle_text);
 8001422:	4816      	ldr	r0, [pc, #88]	; (800147c <proccesDmaData+0x140>)
 8001424:	f002 fb28 	bl	8003a78 <atoi>
 8001428:	4603      	mov	r3, r0
 800142a:	b2da      	uxtb	r2, r3
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <proccesDmaData+0x144>)
 800142e:	701a      	strb	r2, [r3, #0]
                    strcpy(readed_text,"");
 8001430:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <proccesDmaData+0x12c>)
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	e002      	b.n	800143e <proccesDmaData+0x102>
		} else strcpy(readed_text,"");
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <proccesDmaData+0x12c>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    if(start == 1){
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <proccesDmaData+0x128>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d106      	bne.n	8001454 <proccesDmaData+0x118>
         strcat(readed_text, new_letter);
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	4619      	mov	r1, r3
 800144c:	4806      	ldr	r0, [pc, #24]	; (8001468 <proccesDmaData+0x12c>)
 800144e:	f003 f9e9 	bl	8004824 <strcat>
 8001452:	e004      	b.n	800145e <proccesDmaData+0x122>
    } else strcpy(readed_text,"");
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <proccesDmaData+0x12c>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
 800145a:	e000      	b.n	800145e <proccesDmaData+0x122>
	if(sign == '\r') return; //odstranenie znaku, ktory sa vygeneruje po stlaceni enteru v puTTY
 800145c:	bf00      	nop

}
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200001f4 	.word	0x200001f4
 8001468:	200001f8 	.word	0x200001f8
 800146c:	080083c4 	.word	0x080083c4
 8001470:	2000022e 	.word	0x2000022e
 8001474:	080083cc 	.word	0x080083cc
 8001478:	080083d4 	.word	0x080083d4
 800147c:	2000020c 	.word	0x2000020c
 8001480:	2000022d 	.word	0x2000022d

08001484 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	3b01      	subs	r3, #1
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <LL_DMA_DisableChannel+0x3c>)
 8001494:	5cd3      	ldrb	r3, [r2, r3]
 8001496:	461a      	mov	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	3a01      	subs	r2, #1
 80014a2:	4907      	ldr	r1, [pc, #28]	; (80014c0 <LL_DMA_DisableChannel+0x3c>)
 80014a4:	5c8a      	ldrb	r2, [r1, r2]
 80014a6:	4611      	mov	r1, r2
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	440a      	add	r2, r1
 80014ac:	f023 0301 	bic.w	r3, r3, #1
 80014b0:	6013      	str	r3, [r2, #0]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	080083dc 	.word	0x080083dc

080014c4 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80014d8:	bf0c      	ite	eq
 80014da:	2301      	moveq	r3, #1
 80014dc:	2300      	movne	r3, #0
 80014de:	b2db      	uxtb	r3, r3
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001500:	bf0c      	ite	eq
 8001502:	2301      	moveq	r3, #1
 8001504:	2300      	movne	r3, #0
 8001506:	b2db      	uxtb	r3, r3
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001524:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001528:	bf0c      	ite	eq
 800152a:	2301      	moveq	r3, #1
 800152c:	2300      	movne	r3, #0
 800152e:	b2db      	uxtb	r3, r3
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800154a:	605a      	str	r2, [r3, #4]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001566:	605a      	str	r2, [r3, #4]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001582:	605a      	str	r2, [r3, #4]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f06f 0201 	mvn.w	r2, #1
 800159e:	611a      	str	r2, [r3, #16]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d101      	bne.n	80015c4 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80015c0:	2301      	movs	r3, #1
 80015c2:	e000      	b.n	80015c6 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	2b10      	cmp	r3, #16
 80015e4:	d101      	bne.n	80015ea <LL_USART_IsActiveFlag_IDLE+0x18>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <LL_USART_IsActiveFlag_IDLE+0x1a>
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001608:	2b40      	cmp	r3, #64	; 0x40
 800160a:	d101      	bne.n	8001610 <LL_USART_IsActiveFlag_TC+0x18>
 800160c:	2301      	movs	r3, #1
 800160e:	e000      	b.n	8001612 <LL_USART_IsActiveFlag_TC+0x1a>
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2210      	movs	r2, #16
 800162a:	621a      	str	r2, [r3, #32]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800163c:	e7fe      	b.n	800163c <NMI_Handler+0x4>

0800163e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001642:	e7fe      	b.n	8001642 <HardFault_Handler+0x4>

08001644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <MemManage_Handler+0x4>

0800164a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164e:	e7fe      	b.n	800164e <BusFault_Handler+0x4>

08001650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <UsageFault_Handler+0x4>

08001656 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <DMA1_Channel6_IRQHandler+0x38>)
 8001696:	f7ff ff15 	bl	80014c4 <LL_DMA_IsActiveFlag_TC6>
 800169a:	4603      	mov	r3, r0
 800169c:	2b01      	cmp	r3, #1
 800169e:	d105      	bne.n	80016ac <DMA1_Channel6_IRQHandler+0x1c>
		{
			USART2_CheckDmaReception();
 80016a0:	f001 f934 	bl	800290c <USART2_CheckDmaReception>
			LL_DMA_ClearFlag_TC6(DMA1);
 80016a4:	4808      	ldr	r0, [pc, #32]	; (80016c8 <DMA1_Channel6_IRQHandler+0x38>)
 80016a6:	f7ff ff49 	bl	800153c <LL_DMA_ClearFlag_TC6>
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80016aa:	e00a      	b.n	80016c2 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 80016ac:	4806      	ldr	r0, [pc, #24]	; (80016c8 <DMA1_Channel6_IRQHandler+0x38>)
 80016ae:	f7ff ff31 	bl	8001514 <LL_DMA_IsActiveFlag_HT6>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d104      	bne.n	80016c2 <DMA1_Channel6_IRQHandler+0x32>
			USART2_CheckDmaReception();
 80016b8:	f001 f928 	bl	800290c <USART2_CheckDmaReception>
			LL_DMA_ClearFlag_HT6(DMA1);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <DMA1_Channel6_IRQHandler+0x38>)
 80016be:	f7ff ff59 	bl	8001574 <LL_DMA_ClearFlag_HT6>
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40020000 	.word	0x40020000

080016cc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 80016d0:	480a      	ldr	r0, [pc, #40]	; (80016fc <DMA1_Channel7_IRQHandler+0x30>)
 80016d2:	f7ff ff0b 	bl	80014ec <LL_DMA_IsActiveFlag_TC7>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d10d      	bne.n	80016f8 <DMA1_Channel7_IRQHandler+0x2c>
		{
			LL_DMA_ClearFlag_TC7(DMA1);
 80016dc:	4807      	ldr	r0, [pc, #28]	; (80016fc <DMA1_Channel7_IRQHandler+0x30>)
 80016de:	f7ff ff3b 	bl	8001558 <LL_DMA_ClearFlag_TC7>

			while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 80016e2:	bf00      	nop
 80016e4:	4806      	ldr	r0, [pc, #24]	; (8001700 <DMA1_Channel7_IRQHandler+0x34>)
 80016e6:	f7ff ff87 	bl	80015f8 <LL_USART_IsActiveFlag_TC>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f9      	beq.n	80016e4 <DMA1_Channel7_IRQHandler+0x18>
			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 80016f0:	2107      	movs	r1, #7
 80016f2:	4802      	ldr	r0, [pc, #8]	; (80016fc <DMA1_Channel7_IRQHandler+0x30>)
 80016f4:	f7ff fec6 	bl	8001484 <LL_DMA_DisableChannel>
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40020000 	.word	0x40020000
 8001700:	40004400 	.word	0x40004400

08001704 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2)) {
 8001708:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800170c:	f7ff ff4e 	bl	80015ac <LL_TIM_IsActiveFlag_UPDATE>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d04d      	beq.n	80017b2 <TIM2_IRQHandler+0xae>
		if(mode == 0) { //automatic mode
 8001716:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <TIM2_IRQHandler+0xb4>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d127      	bne.n	800176e <TIM2_IRQHandler+0x6a>
			if (countUpDown == 1) { //counting up
 800171e:	4b27      	ldr	r3, [pc, #156]	; (80017bc <TIM2_IRQHandler+0xb8>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d111      	bne.n	800174a <TIM2_IRQHandler+0x46>
				if(dutyCycle >= 99) { //counted up to 99
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <TIM2_IRQHandler+0xbc>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b62      	cmp	r3, #98	; 0x62
 800172c:	d906      	bls.n	800173c <TIM2_IRQHandler+0x38>
					countUpDown = 0;
 800172e:	4b23      	ldr	r3, [pc, #140]	; (80017bc <TIM2_IRQHandler+0xb8>)
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
					dutyCycle = 98;
 8001734:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <TIM2_IRQHandler+0xbc>)
 8001736:	2262      	movs	r2, #98	; 0x62
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	e031      	b.n	80017a0 <TIM2_IRQHandler+0x9c>
				} else {
					dutyCycle++;
 800173c:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <TIM2_IRQHandler+0xbc>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	3301      	adds	r3, #1
 8001742:	b2da      	uxtb	r2, r3
 8001744:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <TIM2_IRQHandler+0xbc>)
 8001746:	701a      	strb	r2, [r3, #0]
 8001748:	e02a      	b.n	80017a0 <TIM2_IRQHandler+0x9c>
				}
			} else { //counting down
				if(dutyCycle <= 0) { //counted down to 0
 800174a:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <TIM2_IRQHandler+0xbc>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d106      	bne.n	8001760 <TIM2_IRQHandler+0x5c>
					countUpDown = 1;
 8001752:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <TIM2_IRQHandler+0xb8>)
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
					dutyCycle = 1;
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <TIM2_IRQHandler+0xbc>)
 800175a:	2201      	movs	r2, #1
 800175c:	701a      	strb	r2, [r3, #0]
 800175e:	e01f      	b.n	80017a0 <TIM2_IRQHandler+0x9c>
				} else {
					dutyCycle--;
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <TIM2_IRQHandler+0xbc>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	3b01      	subs	r3, #1
 8001766:	b2da      	uxtb	r2, r3
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <TIM2_IRQHandler+0xbc>)
 800176a:	701a      	strb	r2, [r3, #0]
 800176c:	e018      	b.n	80017a0 <TIM2_IRQHandler+0x9c>
				}
			}
		} else {
			if (dutyCycleManual > dutyCycle) dutyCycle++;
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <TIM2_IRQHandler+0xc0>)
 8001770:	781a      	ldrb	r2, [r3, #0]
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <TIM2_IRQHandler+0xbc>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d906      	bls.n	8001788 <TIM2_IRQHandler+0x84>
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <TIM2_IRQHandler+0xbc>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <TIM2_IRQHandler+0xbc>)
 8001784:	701a      	strb	r2, [r3, #0]
 8001786:	e00b      	b.n	80017a0 <TIM2_IRQHandler+0x9c>
			else if (dutyCycleManual < dutyCycle) dutyCycle--;
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <TIM2_IRQHandler+0xc0>)
 800178a:	781a      	ldrb	r2, [r3, #0]
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <TIM2_IRQHandler+0xbc>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d205      	bcs.n	80017a0 <TIM2_IRQHandler+0x9c>
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <TIM2_IRQHandler+0xbc>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	3b01      	subs	r3, #1
 800179a:	b2da      	uxtb	r2, r3
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <TIM2_IRQHandler+0xbc>)
 800179e:	701a      	strb	r2, [r3, #0]
		}
		setDutyCycle(dutyCycle);
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <TIM2_IRQHandler+0xbc>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 fb65 	bl	8001e74 <setDutyCycle>
		LL_TIM_ClearFlag_UPDATE(TIM2);
 80017aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80017ae:	f7ff feef 	bl	8001590 <LL_TIM_ClearFlag_UPDATE>
	}
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000022e 	.word	0x2000022e
 80017bc:	2000022f 	.word	0x2000022f
 80017c0:	2000022c 	.word	0x2000022c
 80017c4:	2000022d 	.word	0x2000022d

080017c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 80017cc:	4806      	ldr	r0, [pc, #24]	; (80017e8 <USART2_IRQHandler+0x20>)
 80017ce:	f7ff ff00 	bl	80015d2 <LL_USART_IsActiveFlag_IDLE>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d004      	beq.n	80017e2 <USART2_IRQHandler+0x1a>
		{
			USART2_CheckDmaReception();
 80017d8:	f001 f898 	bl	800290c <USART2_CheckDmaReception>
			LL_USART_ClearFlag_IDLE(USART2);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <USART2_IRQHandler+0x20>)
 80017de:	f7ff ff1e 	bl	800161e <LL_USART_ClearFlag_IDLE>
		}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40004400 	.word	0x40004400

080017ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
	return 1;
 80017f0:	2301      	movs	r3, #1
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <_kill>:

int _kill(int pid, int sig)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001806:	f002 f93b 	bl	8003a80 <__errno>
 800180a:	4603      	mov	r3, r0
 800180c:	2216      	movs	r2, #22
 800180e:	601a      	str	r2, [r3, #0]
	return -1;
 8001810:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <_exit>:

void _exit (int status)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001824:	f04f 31ff 	mov.w	r1, #4294967295
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ffe7 	bl	80017fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800182e:	e7fe      	b.n	800182e <_exit+0x12>

08001830 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	e00a      	b.n	8001858 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001842:	f3af 8000 	nop.w
 8001846:	4601      	mov	r1, r0
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	60ba      	str	r2, [r7, #8]
 800184e:	b2ca      	uxtb	r2, r1
 8001850:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	3301      	adds	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbf0      	blt.n	8001842 <_read+0x12>
	}

return len;
 8001860:	687b      	ldr	r3, [r7, #4]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	e009      	b.n	8001890 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	60ba      	str	r2, [r7, #8]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3301      	adds	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	429a      	cmp	r2, r3
 8001896:	dbf1      	blt.n	800187c <_write+0x12>
	}
	return len;
 8001898:	687b      	ldr	r3, [r7, #4]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <_close>:

int _close(int file)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
	return -1;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ca:	605a      	str	r2, [r3, #4]
	return 0;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <_isatty>:

int _isatty(int file)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
	return 1;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
	return 0;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001914:	4a14      	ldr	r2, [pc, #80]	; (8001968 <_sbrk+0x5c>)
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <_sbrk+0x60>)
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001920:	4b13      	ldr	r3, [pc, #76]	; (8001970 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d102      	bne.n	800192e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <_sbrk+0x64>)
 800192a:	4a12      	ldr	r2, [pc, #72]	; (8001974 <_sbrk+0x68>)
 800192c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <_sbrk+0x64>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	429a      	cmp	r2, r3
 800193a:	d207      	bcs.n	800194c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800193c:	f002 f8a0 	bl	8003a80 <__errno>
 8001940:	4603      	mov	r3, r0
 8001942:	220c      	movs	r2, #12
 8001944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001946:	f04f 33ff 	mov.w	r3, #4294967295
 800194a:	e009      	b.n	8001960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <_sbrk+0x64>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001952:	4b07      	ldr	r3, [pc, #28]	; (8001970 <_sbrk+0x64>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	4a05      	ldr	r2, [pc, #20]	; (8001970 <_sbrk+0x64>)
 800195c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195e:	68fb      	ldr	r3, [r7, #12]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20003000 	.word	0x20003000
 800196c:	00000400 	.word	0x00000400
 8001970:	20000218 	.word	0x20000218
 8001974:	20000308 	.word	0x20000308

08001978 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <SystemInit+0x20>)
 800197e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001982:	4a05      	ldr	r2, [pc, #20]	; (8001998 <SystemInit+0x20>)
 8001984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_GetPriorityGrouping>:
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <__NVIC_GetPriorityGrouping+0x18>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	f003 0307 	and.w	r3, r3, #7
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_EnableIRQ>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	db0b      	blt.n	80019e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	f003 021f 	and.w	r2, r3, #31
 80019d0:	4907      	ldr	r1, [pc, #28]	; (80019f0 <__NVIC_EnableIRQ+0x38>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	2001      	movs	r0, #1
 80019da:	fa00 f202 	lsl.w	r2, r0, r2
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000e100 	.word	0xe000e100

080019f4 <__NVIC_SetPriority>:
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	db0a      	blt.n	8001a1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	490c      	ldr	r1, [pc, #48]	; (8001a40 <__NVIC_SetPriority+0x4c>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	0112      	lsls	r2, r2, #4
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	440b      	add	r3, r1
 8001a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a1c:	e00a      	b.n	8001a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4908      	ldr	r1, [pc, #32]	; (8001a44 <__NVIC_SetPriority+0x50>)
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	3b04      	subs	r3, #4
 8001a2c:	0112      	lsls	r2, r2, #4
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	440b      	add	r3, r1
 8001a32:	761a      	strb	r2, [r3, #24]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000e100 	.word	0xe000e100
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <NVIC_EncodePriority>:
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	; 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f1c3 0307 	rsb	r3, r3, #7
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	bf28      	it	cs
 8001a66:	2304      	movcs	r3, #4
 8001a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d902      	bls.n	8001a78 <NVIC_EncodePriority+0x30>
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3b03      	subs	r3, #3
 8001a76:	e000      	b.n	8001a7a <NVIC_EncodePriority+0x32>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a90:	f04f 31ff 	mov.w	r1, #4294967295
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	43d9      	mvns	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	4313      	orrs	r3, r2
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3724      	adds	r7, #36	; 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <LL_AHB1_GRP1_EnableClock>:
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001aba:	695a      	ldr	r2, [r3, #20]
 8001abc:	4907      	ldr	r1, [pc, #28]	; (8001adc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ac6:	695a      	ldr	r2, [r3, #20]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4013      	ands	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ace:	68fb      	ldr	r3, [r7, #12]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	40021000 	.word	0x40021000

08001ae0 <LL_APB1_GRP1_EnableClock>:
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001aea:	69da      	ldr	r2, [r3, #28]
 8001aec:	4907      	ldr	r1, [pc, #28]	; (8001b0c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001af6:	69da      	ldr	r2, [r3, #28]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4013      	ands	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001afe:	68fb      	ldr	r3, [r7, #12]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	40021000 	.word	0x40021000

08001b10 <LL_TIM_EnableCounter>:
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f043 0201 	orr.w	r2, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	601a      	str	r2, [r3, #0]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_TIM_EnableARRPreload>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	601a      	str	r2, [r3, #0]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_TIM_OC_DisableFast>:
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d028      	beq.n	8001bb2 <LL_TIM_OC_DisableFast+0x62>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d023      	beq.n	8001bae <LL_TIM_OC_DisableFast+0x5e>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2b10      	cmp	r3, #16
 8001b6a:	d01e      	beq.n	8001baa <LL_TIM_OC_DisableFast+0x5a>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	2b40      	cmp	r3, #64	; 0x40
 8001b70:	d019      	beq.n	8001ba6 <LL_TIM_OC_DisableFast+0x56>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b78:	d013      	beq.n	8001ba2 <LL_TIM_OC_DisableFast+0x52>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b80:	d00d      	beq.n	8001b9e <LL_TIM_OC_DisableFast+0x4e>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b88:	d007      	beq.n	8001b9a <LL_TIM_OC_DisableFast+0x4a>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b90:	d101      	bne.n	8001b96 <LL_TIM_OC_DisableFast+0x46>
 8001b92:	2307      	movs	r3, #7
 8001b94:	e00e      	b.n	8001bb4 <LL_TIM_OC_DisableFast+0x64>
 8001b96:	2308      	movs	r3, #8
 8001b98:	e00c      	b.n	8001bb4 <LL_TIM_OC_DisableFast+0x64>
 8001b9a:	2306      	movs	r3, #6
 8001b9c:	e00a      	b.n	8001bb4 <LL_TIM_OC_DisableFast+0x64>
 8001b9e:	2305      	movs	r3, #5
 8001ba0:	e008      	b.n	8001bb4 <LL_TIM_OC_DisableFast+0x64>
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	e006      	b.n	8001bb4 <LL_TIM_OC_DisableFast+0x64>
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e004      	b.n	8001bb4 <LL_TIM_OC_DisableFast+0x64>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e002      	b.n	8001bb4 <LL_TIM_OC_DisableFast+0x64>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <LL_TIM_OC_DisableFast+0x64>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3318      	adds	r3, #24
 8001bba:	4619      	mov	r1, r3
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <LL_TIM_OC_DisableFast+0x9c>)
 8001bc0:	5cd3      	ldrb	r3, [r2, r3]
 8001bc2:	440b      	add	r3, r1
 8001bc4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	4908      	ldr	r1, [pc, #32]	; (8001bf0 <LL_TIM_OC_DisableFast+0xa0>)
 8001bce:	5ccb      	ldrb	r3, [r1, r3]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	408b      	lsls	r3, r1
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	401a      	ands	r2, r3
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	601a      	str	r2, [r3, #0]
}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	080083fc 	.word	0x080083fc
 8001bf0:	08008408 	.word	0x08008408

08001bf4 <LL_TIM_OC_EnablePreload>:
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d028      	beq.n	8001c56 <LL_TIM_OC_EnablePreload+0x62>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d023      	beq.n	8001c52 <LL_TIM_OC_EnablePreload+0x5e>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b10      	cmp	r3, #16
 8001c0e:	d01e      	beq.n	8001c4e <LL_TIM_OC_EnablePreload+0x5a>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	2b40      	cmp	r3, #64	; 0x40
 8001c14:	d019      	beq.n	8001c4a <LL_TIM_OC_EnablePreload+0x56>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c1c:	d013      	beq.n	8001c46 <LL_TIM_OC_EnablePreload+0x52>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c24:	d00d      	beq.n	8001c42 <LL_TIM_OC_EnablePreload+0x4e>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c2c:	d007      	beq.n	8001c3e <LL_TIM_OC_EnablePreload+0x4a>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c34:	d101      	bne.n	8001c3a <LL_TIM_OC_EnablePreload+0x46>
 8001c36:	2307      	movs	r3, #7
 8001c38:	e00e      	b.n	8001c58 <LL_TIM_OC_EnablePreload+0x64>
 8001c3a:	2308      	movs	r3, #8
 8001c3c:	e00c      	b.n	8001c58 <LL_TIM_OC_EnablePreload+0x64>
 8001c3e:	2306      	movs	r3, #6
 8001c40:	e00a      	b.n	8001c58 <LL_TIM_OC_EnablePreload+0x64>
 8001c42:	2305      	movs	r3, #5
 8001c44:	e008      	b.n	8001c58 <LL_TIM_OC_EnablePreload+0x64>
 8001c46:	2304      	movs	r3, #4
 8001c48:	e006      	b.n	8001c58 <LL_TIM_OC_EnablePreload+0x64>
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e004      	b.n	8001c58 <LL_TIM_OC_EnablePreload+0x64>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e002      	b.n	8001c58 <LL_TIM_OC_EnablePreload+0x64>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <LL_TIM_OC_EnablePreload+0x64>
 8001c56:	2300      	movs	r3, #0
 8001c58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3318      	adds	r3, #24
 8001c5e:	4619      	mov	r1, r3
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <LL_TIM_OC_EnablePreload+0x98>)
 8001c64:	5cd3      	ldrb	r3, [r2, r3]
 8001c66:	440b      	add	r3, r1
 8001c68:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	4907      	ldr	r1, [pc, #28]	; (8001c90 <LL_TIM_OC_EnablePreload+0x9c>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	4619      	mov	r1, r3
 8001c76:	2308      	movs	r3, #8
 8001c78:	408b      	lsls	r3, r1
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	601a      	str	r2, [r3, #0]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	080083fc 	.word	0x080083fc
 8001c90:	08008408 	.word	0x08008408

08001c94 <LL_TIM_SetClockSource>:
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001ca6:	f023 0307 	bic.w	r3, r3, #7
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_TIM_SetTriggerOutput>:
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	605a      	str	r2, [r3, #4]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_TIM_DisableMasterSlaveMode>:
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f043 0201 	orr.w	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	60da      	str	r2, [r3, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b094      	sub	sp, #80	; 0x50
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001d2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
 8001d38:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001d3a:	f107 031c 	add.w	r3, r7, #28
 8001d3e:	2220      	movs	r2, #32
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f001 fec6 	bl	8003ad4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]
 8001d56:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f7ff fec1 	bl	8001ae0 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d5e:	f7ff fe1d 	bl	800199c <__NVIC_GetPriorityGrouping>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2200      	movs	r2, #0
 8001d66:	2100      	movs	r1, #0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fe6d 	bl	8001a48 <NVIC_EncodePriority>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4619      	mov	r1, r3
 8001d72:	201c      	movs	r0, #28
 8001d74:	f7ff fe3e 	bl	80019f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8001d78:	201c      	movs	r0, #28
 8001d7a:	f7ff fe1d 	bl	80019b8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8001d7e:	f240 331f 	movw	r3, #799	; 0x31f
 8001d82:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001d84:	2300      	movs	r3, #0
 8001d86:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 99;
 8001d88:	2363      	movs	r3, #99	; 0x63
 8001d8a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001d90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d94:	4619      	mov	r1, r3
 8001d96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d9a:	f001 f9c9 	bl	8003130 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8001d9e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001da2:	f7ff fec5 	bl	8001b30 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001da6:	2100      	movs	r1, #0
 8001da8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001dac:	f7ff ff72 	bl	8001c94 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001db0:	2101      	movs	r1, #1
 8001db2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001db6:	f7ff ff1d 	bl	8001bf4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001dba:	2360      	movs	r3, #96	; 0x60
 8001dbc:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001dce:	f107 031c 	add.w	r3, r7, #28
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001dda:	f001 fa1b 	bl	8003214 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8001dde:	2101      	movs	r1, #1
 8001de0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001de4:	f7ff feb4 	bl	8001b50 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8001de8:	2310      	movs	r3, #16
 8001dea:	61fb      	str	r3, [r7, #28]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	461a      	mov	r2, r3
 8001df2:	2110      	movs	r1, #16
 8001df4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001df8:	f001 fa0c 	bl	8003214 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8001dfc:	2110      	movs	r1, #16
 8001dfe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e02:	f7ff fea5 	bl	8001b50 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001e06:	2100      	movs	r1, #0
 8001e08:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e0c:	f7ff ff57 	bl	8001cbe <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001e10:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e14:	f7ff ff66 	bl	8001ce4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
  LL_TIM_EnableCounter(TIM2);
 8001e18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e1c:	f7ff fe78 	bl	8001b10 <LL_TIM_EnableCounter>
  TIM2->CCER|=0x00000001;
 8001e20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6213      	str	r3, [r2, #32]
  LL_TIM_EnableIT_UPDATE(TIM2);
 8001e30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e34:	f7ff ff66 	bl	8001d04 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 8001e38:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e3c:	f7ff fe68 	bl	8001b10 <LL_TIM_EnableCounter>
  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001e40:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001e44:	f7ff fe34 	bl	8001ab0 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001e48:	2320      	movs	r3, #32
 8001e4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	4619      	mov	r1, r3
 8001e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e68:	f000 feba 	bl	8002be0 <LL_GPIO_Init>

}
 8001e6c:	bf00      	nop
 8001e6e:	3750      	adds	r7, #80	; 0x50
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <setDutyCycle>:

/* USER CODE BEGIN 1 */
void setDutyCycle(uint8_t D) {
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
	TIM2->CCR1 = D;
 8001e7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <__NVIC_GetPriorityGrouping>:
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <__NVIC_GetPriorityGrouping+0x18>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <__NVIC_EnableIRQ>:
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	db0b      	blt.n	8001eda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	f003 021f 	and.w	r2, r3, #31
 8001ec8:	4907      	ldr	r1, [pc, #28]	; (8001ee8 <__NVIC_EnableIRQ+0x38>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000e100 	.word	0xe000e100

08001eec <__NVIC_SetPriority>:
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	db0a      	blt.n	8001f16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	490c      	ldr	r1, [pc, #48]	; (8001f38 <__NVIC_SetPriority+0x4c>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f14:	e00a      	b.n	8001f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4908      	ldr	r1, [pc, #32]	; (8001f3c <__NVIC_SetPriority+0x50>)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3b04      	subs	r3, #4
 8001f24:	0112      	lsls	r2, r2, #4
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	440b      	add	r3, r1
 8001f2a:	761a      	strb	r2, [r3, #24]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000e100 	.word	0xe000e100
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <NVIC_EncodePriority>:
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	; 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f1c3 0307 	rsb	r3, r3, #7
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	bf28      	it	cs
 8001f5e:	2304      	movcs	r3, #4
 8001f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3304      	adds	r3, #4
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d902      	bls.n	8001f70 <NVIC_EncodePriority+0x30>
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3b03      	subs	r3, #3
 8001f6e:	e000      	b.n	8001f72 <NVIC_EncodePriority+0x32>
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	401a      	ands	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	43d9      	mvns	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	4313      	orrs	r3, r2
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3724      	adds	r7, #36	; 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <LL_DMA_EnableChannel>:
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	4a0b      	ldr	r2, [pc, #44]	; (8001fe4 <LL_DMA_EnableChannel+0x3c>)
 8001fb8:	5cd3      	ldrb	r3, [r2, r3]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	3a01      	subs	r2, #1
 8001fc6:	4907      	ldr	r1, [pc, #28]	; (8001fe4 <LL_DMA_EnableChannel+0x3c>)
 8001fc8:	5c8a      	ldrb	r2, [r1, r2]
 8001fca:	4611      	mov	r1, r2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	440a      	add	r2, r1
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6013      	str	r3, [r2, #0]
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	08008414 	.word	0x08008414

08001fe8 <LL_DMA_DisableChannel>:
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	4a0b      	ldr	r2, [pc, #44]	; (8002024 <LL_DMA_DisableChannel+0x3c>)
 8001ff8:	5cd3      	ldrb	r3, [r2, r3]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	3a01      	subs	r2, #1
 8002006:	4907      	ldr	r1, [pc, #28]	; (8002024 <LL_DMA_DisableChannel+0x3c>)
 8002008:	5c8a      	ldrb	r2, [r1, r2]
 800200a:	4611      	mov	r1, r2
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	440a      	add	r2, r1
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	6013      	str	r3, [r2, #0]
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	08008414 	.word	0x08008414

08002028 <LL_DMA_SetDataTransferDirection>:
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	3b01      	subs	r3, #1
 8002038:	4a0d      	ldr	r2, [pc, #52]	; (8002070 <LL_DMA_SetDataTransferDirection+0x48>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	461a      	mov	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4413      	add	r3, r2
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002048:	f023 0310 	bic.w	r3, r3, #16
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	3a01      	subs	r2, #1
 8002050:	4907      	ldr	r1, [pc, #28]	; (8002070 <LL_DMA_SetDataTransferDirection+0x48>)
 8002052:	5c8a      	ldrb	r2, [r1, r2]
 8002054:	4611      	mov	r1, r2
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	440a      	add	r2, r1
 800205a:	4611      	mov	r1, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	08008414 	.word	0x08008414

08002074 <LL_DMA_GetDataTransferDirection>:
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	3b01      	subs	r3, #1
 8002082:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <LL_DMA_GetDataTransferDirection+0x2c>)
 8002084:	5cd3      	ldrb	r3, [r2, r3]
 8002086:	461a      	mov	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4413      	add	r3, r2
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	f244 0310 	movw	r3, #16400	; 0x4010
 8002092:	4013      	ands	r3, r2
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	08008414 	.word	0x08008414

080020a4 <LL_DMA_SetMode>:
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	4a0c      	ldr	r2, [pc, #48]	; (80020e8 <LL_DMA_SetMode+0x44>)
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	461a      	mov	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4413      	add	r3, r2
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f023 0220 	bic.w	r2, r3, #32
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	4907      	ldr	r1, [pc, #28]	; (80020e8 <LL_DMA_SetMode+0x44>)
 80020ca:	5ccb      	ldrb	r3, [r1, r3]
 80020cc:	4619      	mov	r1, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	440b      	add	r3, r1
 80020d2:	4619      	mov	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]
}
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	08008414 	.word	0x08008414

080020ec <LL_DMA_SetPeriphIncMode>:
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	4a0c      	ldr	r2, [pc, #48]	; (8002130 <LL_DMA_SetPeriphIncMode+0x44>)
 80020fe:	5cd3      	ldrb	r3, [r2, r3]
 8002100:	461a      	mov	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4413      	add	r3, r2
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	3b01      	subs	r3, #1
 8002110:	4907      	ldr	r1, [pc, #28]	; (8002130 <LL_DMA_SetPeriphIncMode+0x44>)
 8002112:	5ccb      	ldrb	r3, [r1, r3]
 8002114:	4619      	mov	r1, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	440b      	add	r3, r1
 800211a:	4619      	mov	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	08008414 	.word	0x08008414

08002134 <LL_DMA_SetMemoryIncMode>:
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	3b01      	subs	r3, #1
 8002144:	4a0c      	ldr	r2, [pc, #48]	; (8002178 <LL_DMA_SetMemoryIncMode+0x44>)
 8002146:	5cd3      	ldrb	r3, [r2, r3]
 8002148:	461a      	mov	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4413      	add	r3, r2
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	3b01      	subs	r3, #1
 8002158:	4907      	ldr	r1, [pc, #28]	; (8002178 <LL_DMA_SetMemoryIncMode+0x44>)
 800215a:	5ccb      	ldrb	r3, [r1, r3]
 800215c:	4619      	mov	r1, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	440b      	add	r3, r1
 8002162:	4619      	mov	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4313      	orrs	r3, r2
 8002168:	600b      	str	r3, [r1, #0]
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	08008414 	.word	0x08008414

0800217c <LL_DMA_SetPeriphSize>:
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	3b01      	subs	r3, #1
 800218c:	4a0c      	ldr	r2, [pc, #48]	; (80021c0 <LL_DMA_SetPeriphSize+0x44>)
 800218e:	5cd3      	ldrb	r3, [r2, r3]
 8002190:	461a      	mov	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4413      	add	r3, r2
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	3b01      	subs	r3, #1
 80021a0:	4907      	ldr	r1, [pc, #28]	; (80021c0 <LL_DMA_SetPeriphSize+0x44>)
 80021a2:	5ccb      	ldrb	r3, [r1, r3]
 80021a4:	4619      	mov	r1, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	440b      	add	r3, r1
 80021aa:	4619      	mov	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]
}
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	08008414 	.word	0x08008414

080021c4 <LL_DMA_SetMemorySize>:
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <LL_DMA_SetMemorySize+0x44>)
 80021d6:	5cd3      	ldrb	r3, [r2, r3]
 80021d8:	461a      	mov	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4413      	add	r3, r2
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	4907      	ldr	r1, [pc, #28]	; (8002208 <LL_DMA_SetMemorySize+0x44>)
 80021ea:	5ccb      	ldrb	r3, [r1, r3]
 80021ec:	4619      	mov	r1, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	440b      	add	r3, r1
 80021f2:	4619      	mov	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	08008414 	.word	0x08008414

0800220c <LL_DMA_SetChannelPriorityLevel>:
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	3b01      	subs	r3, #1
 800221c:	4a0c      	ldr	r2, [pc, #48]	; (8002250 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800221e:	5cd3      	ldrb	r3, [r2, r3]
 8002220:	461a      	mov	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4413      	add	r3, r2
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	3b01      	subs	r3, #1
 8002230:	4907      	ldr	r1, [pc, #28]	; (8002250 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002232:	5ccb      	ldrb	r3, [r1, r3]
 8002234:	4619      	mov	r1, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	440b      	add	r3, r1
 800223a:	4619      	mov	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	08008414 	.word	0x08008414

08002254 <LL_DMA_SetDataLength>:
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	3b01      	subs	r3, #1
 8002264:	4a0c      	ldr	r2, [pc, #48]	; (8002298 <LL_DMA_SetDataLength+0x44>)
 8002266:	5cd3      	ldrb	r3, [r2, r3]
 8002268:	461a      	mov	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4413      	add	r3, r2
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	0c1b      	lsrs	r3, r3, #16
 8002272:	041b      	lsls	r3, r3, #16
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	3a01      	subs	r2, #1
 8002278:	4907      	ldr	r1, [pc, #28]	; (8002298 <LL_DMA_SetDataLength+0x44>)
 800227a:	5c8a      	ldrb	r2, [r1, r2]
 800227c:	4611      	mov	r1, r2
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	440a      	add	r2, r1
 8002282:	4611      	mov	r1, r2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	4313      	orrs	r3, r2
 8002288:	604b      	str	r3, [r1, #4]
}
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	08008414 	.word	0x08008414

0800229c <LL_DMA_GetDataLength>:
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	4a06      	ldr	r2, [pc, #24]	; (80022c4 <LL_DMA_GetDataLength+0x28>)
 80022ac:	5cd3      	ldrb	r3, [r2, r3]
 80022ae:	461a      	mov	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	b29b      	uxth	r3, r3
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	08008414 	.word	0x08008414

080022c8 <LL_DMA_ConfigAddresses>:
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	2b10      	cmp	r3, #16
 80022da:	d114      	bne.n	8002306 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	3b01      	subs	r3, #1
 80022e0:	4a16      	ldr	r2, [pc, #88]	; (800233c <LL_DMA_ConfigAddresses+0x74>)
 80022e2:	5cd3      	ldrb	r3, [r2, r3]
 80022e4:	461a      	mov	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4413      	add	r3, r2
 80022ea:	461a      	mov	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	4a11      	ldr	r2, [pc, #68]	; (800233c <LL_DMA_ConfigAddresses+0x74>)
 80022f6:	5cd3      	ldrb	r3, [r2, r3]
 80022f8:	461a      	mov	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4413      	add	r3, r2
 80022fe:	461a      	mov	r2, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	6093      	str	r3, [r2, #8]
}
 8002304:	e013      	b.n	800232e <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	3b01      	subs	r3, #1
 800230a:	4a0c      	ldr	r2, [pc, #48]	; (800233c <LL_DMA_ConfigAddresses+0x74>)
 800230c:	5cd3      	ldrb	r3, [r2, r3]
 800230e:	461a      	mov	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4413      	add	r3, r2
 8002314:	461a      	mov	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	3b01      	subs	r3, #1
 800231e:	4a07      	ldr	r2, [pc, #28]	; (800233c <LL_DMA_ConfigAddresses+0x74>)
 8002320:	5cd3      	ldrb	r3, [r2, r3]
 8002322:	461a      	mov	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4413      	add	r3, r2
 8002328:	461a      	mov	r2, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	60d3      	str	r3, [r2, #12]
}
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	08008414 	.word	0x08008414

08002340 <LL_DMA_SetMemoryAddress>:
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	3b01      	subs	r3, #1
 8002350:	4a06      	ldr	r2, [pc, #24]	; (800236c <LL_DMA_SetMemoryAddress+0x2c>)
 8002352:	5cd3      	ldrb	r3, [r2, r3]
 8002354:	461a      	mov	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4413      	add	r3, r2
 800235a:	461a      	mov	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	60d3      	str	r3, [r2, #12]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	08008414 	.word	0x08008414

08002370 <LL_DMA_SetPeriphAddress>:
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	3b01      	subs	r3, #1
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <LL_DMA_SetPeriphAddress+0x2c>)
 8002382:	5cd3      	ldrb	r3, [r2, r3]
 8002384:	461a      	mov	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4413      	add	r3, r2
 800238a:	461a      	mov	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6093      	str	r3, [r2, #8]
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	08008414 	.word	0x08008414

080023a0 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	4a0b      	ldr	r2, [pc, #44]	; (80023dc <LL_DMA_EnableIT_TC+0x3c>)
 80023b0:	5cd3      	ldrb	r3, [r2, r3]
 80023b2:	461a      	mov	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	3a01      	subs	r2, #1
 80023be:	4907      	ldr	r1, [pc, #28]	; (80023dc <LL_DMA_EnableIT_TC+0x3c>)
 80023c0:	5c8a      	ldrb	r2, [r1, r2]
 80023c2:	4611      	mov	r1, r2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	440a      	add	r2, r1
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	6013      	str	r3, [r2, #0]
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	08008414 	.word	0x08008414

080023e0 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	4a0b      	ldr	r2, [pc, #44]	; (800241c <LL_DMA_EnableIT_HT+0x3c>)
 80023f0:	5cd3      	ldrb	r3, [r2, r3]
 80023f2:	461a      	mov	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4413      	add	r3, r2
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	3a01      	subs	r2, #1
 80023fe:	4907      	ldr	r1, [pc, #28]	; (800241c <LL_DMA_EnableIT_HT+0x3c>)
 8002400:	5c8a      	ldrb	r2, [r1, r2]
 8002402:	4611      	mov	r1, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	440a      	add	r2, r1
 8002408:	f043 0304 	orr.w	r3, r3, #4
 800240c:	6013      	str	r3, [r2, #0]
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	08008414 	.word	0x08008414

08002420 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	3b01      	subs	r3, #1
 800242e:	4a0b      	ldr	r2, [pc, #44]	; (800245c <LL_DMA_EnableIT_TE+0x3c>)
 8002430:	5cd3      	ldrb	r3, [r2, r3]
 8002432:	461a      	mov	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4413      	add	r3, r2
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	3a01      	subs	r2, #1
 800243e:	4907      	ldr	r1, [pc, #28]	; (800245c <LL_DMA_EnableIT_TE+0x3c>)
 8002440:	5c8a      	ldrb	r2, [r1, r2]
 8002442:	4611      	mov	r1, r2
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	440a      	add	r2, r1
 8002448:	f043 0308 	orr.w	r3, r3, #8
 800244c:	6013      	str	r3, [r2, #0]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	08008414 	.word	0x08008414

08002460 <LL_AHB1_GRP1_EnableClock>:
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800246a:	695a      	ldr	r2, [r3, #20]
 800246c:	4907      	ldr	r1, [pc, #28]	; (800248c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4313      	orrs	r3, r2
 8002472:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002476:	695a      	ldr	r2, [r3, #20]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4013      	ands	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800247e:	68fb      	ldr	r3, [r7, #12]
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	40021000 	.word	0x40021000

08002490 <LL_APB1_GRP1_EnableClock>:
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800249a:	69da      	ldr	r2, [r3, #28]
 800249c:	4907      	ldr	r1, [pc, #28]	; (80024bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80024a4:	4b05      	ldr	r3, [pc, #20]	; (80024bc <LL_APB1_GRP1_EnableClock+0x2c>)
 80024a6:	69da      	ldr	r2, [r3, #28]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4013      	ands	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024ae:	68fb      	ldr	r3, [r7, #12]
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	40021000 	.word	0x40021000

080024c0 <LL_USART_Enable>:
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f043 0201 	orr.w	r2, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	601a      	str	r2, [r3, #0]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_USART_ConfigAsyncMode>:
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	609a      	str	r2, [r3, #8]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 800250c:	b480      	push	{r7}
 800250e:	b089      	sub	sp, #36	; 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	e853 3f00 	ldrex	r3, [r3]
 800251e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f043 0310 	orr.w	r3, r3, #16
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	61ba      	str	r2, [r7, #24]
 800252e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002530:	6979      	ldr	r1, [r7, #20]
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	e841 2300 	strex	r3, r2, [r1]
 8002538:	613b      	str	r3, [r7, #16]
   return(result);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1e9      	bne.n	8002514 <LL_USART_EnableIT_IDLE+0x8>
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 800254e:	b480      	push	{r7}
 8002550:	b089      	sub	sp, #36	; 0x24
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3308      	adds	r3, #8
 800255a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	e853 3f00 	ldrex	r3, [r3]
 8002562:	60bb      	str	r3, [r7, #8]
   return(result);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3308      	adds	r3, #8
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	61ba      	str	r2, [r7, #24]
 8002574:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002576:	6979      	ldr	r1, [r7, #20]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	e841 2300 	strex	r3, r2, [r1]
 800257e:	613b      	str	r3, [r7, #16]
   return(result);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1e7      	bne.n	8002556 <LL_USART_DisableIT_CTS+0x8>
}
 8002586:	bf00      	nop
 8002588:	bf00      	nop
 800258a:	3724      	adds	r7, #36	; 0x24
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8002594:	b480      	push	{r7}
 8002596:	b089      	sub	sp, #36	; 0x24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3308      	adds	r3, #8
 80025a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	e853 3f00 	ldrex	r3, [r3]
 80025a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025b0:	61fb      	str	r3, [r7, #28]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3308      	adds	r3, #8
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	61ba      	str	r2, [r7, #24]
 80025ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025bc:	6979      	ldr	r1, [r7, #20]
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	e841 2300 	strex	r3, r2, [r1]
 80025c4:	613b      	str	r3, [r7, #16]
   return(result);
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1e7      	bne.n	800259c <LL_USART_EnableDMAReq_RX+0x8>
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80025da:	b480      	push	{r7}
 80025dc:	b089      	sub	sp, #36	; 0x24
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3308      	adds	r3, #8
 80025e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	e853 3f00 	ldrex	r3, [r3]
 80025ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f6:	61fb      	str	r3, [r7, #28]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3308      	adds	r3, #8
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	61ba      	str	r2, [r7, #24]
 8002600:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002602:	6979      	ldr	r1, [r7, #20]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	e841 2300 	strex	r3, r2, [r1]
 800260a:	613b      	str	r3, [r7, #16]
   return(result);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1e7      	bne.n	80025e2 <LL_USART_EnableDMAReq_TX+0x8>
}
 8002612:	bf00      	nop
 8002614:	bf00      	nop
 8002616:	3724      	adds	r7, #36	; 0x24
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d103      	bne.n	8002638 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3328      	adds	r3, #40	; 0x28
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	e002      	b.n	800263e <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3324      	adds	r3, #36	; 0x24
 800263c:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 800263e:	68fb      	ldr	r3, [r7, #12]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <reinitializeBuffer>:

uint8_t bufferUSART2dma[DMA_USART2_BUFFER_SIZE];
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(uint8_t data) = 0;

void reinitializeBuffer() {
 800264c:	b5b0      	push	{r4, r5, r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af02      	add	r7, sp, #8
	memset(bufferUSART2dma,0,DMA_USART2_BUFFER_SIZE); //set buffer memory to zeros
 8002652:	22c8      	movs	r2, #200	; 0xc8
 8002654:	2100      	movs	r1, #0
 8002656:	4815      	ldr	r0, [pc, #84]	; (80026ac <reinitializeBuffer+0x60>)
 8002658:	f001 fa3c 	bl	8003ad4 <memset>
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);  //disabling DMA channel
 800265c:	2106      	movs	r1, #6
 800265e:	4814      	ldr	r0, [pc, #80]	; (80026b0 <reinitializeBuffer+0x64>)
 8002660:	f7ff fcc2 	bl	8001fe8 <LL_DMA_DisableChannel>
	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6,  //reconfiguring DMA
 8002664:	2101      	movs	r1, #1
 8002666:	4813      	ldr	r0, [pc, #76]	; (80026b4 <reinitializeBuffer+0x68>)
 8002668:	f7ff ffda 	bl	8002620 <LL_USART_DMA_GetRegAddr>
 800266c:	4604      	mov	r4, r0
 800266e:	4d0f      	ldr	r5, [pc, #60]	; (80026ac <reinitializeBuffer+0x60>)
 8002670:	2106      	movs	r1, #6
 8002672:	480f      	ldr	r0, [pc, #60]	; (80026b0 <reinitializeBuffer+0x64>)
 8002674:	f7ff fcfe 	bl	8002074 <LL_DMA_GetDataTransferDirection>
 8002678:	4603      	mov	r3, r0
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	462b      	mov	r3, r5
 800267e:	4622      	mov	r2, r4
 8002680:	2106      	movs	r1, #6
 8002682:	480b      	ldr	r0, [pc, #44]	; (80026b0 <reinitializeBuffer+0x64>)
 8002684:	f7ff fe20 	bl	80022c8 <LL_DMA_ConfigAddresses>
	 						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
	 							(uint32_t)bufferUSART2dma,
	 							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002688:	22c8      	movs	r2, #200	; 0xc8
 800268a:	2106      	movs	r1, #6
 800268c:	4808      	ldr	r0, [pc, #32]	; (80026b0 <reinitializeBuffer+0x64>)
 800268e:	f7ff fde1 	bl	8002254 <LL_DMA_SetDataLength>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002692:	2106      	movs	r1, #6
 8002694:	4806      	ldr	r0, [pc, #24]	; (80026b0 <reinitializeBuffer+0x64>)
 8002696:	f7ff fc87 	bl	8001fa8 <LL_DMA_EnableChannel>
	LL_USART_EnableDMAReq_RX(USART2);
 800269a:	4806      	ldr	r0, [pc, #24]	; (80026b4 <reinitializeBuffer+0x68>)
 800269c:	f7ff ff7a 	bl	8002594 <LL_USART_EnableDMAReq_RX>
	old_pos = 0; //set last reading position to start of buffer
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <reinitializeBuffer+0x6c>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	801a      	strh	r2, [r3, #0]
}
 80026a6:	bf00      	nop
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bdb0      	pop	{r4, r5, r7, pc}
 80026ac:	20000230 	.word	0x20000230
 80026b0:	40020000 	.word	0x40020000
 80026b4:	40004400 	.word	0x40004400
 80026b8:	2000021c 	.word	0x2000021c

080026bc <getBufferState>:

uint16_t getBufferState() {
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
	return old_pos;
 80026c0:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <getBufferState+0x14>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	2000021c 	.word	0x2000021c

080026d4 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026d4:	b5b0      	push	{r4, r5, r7, lr}
 80026d6:	b090      	sub	sp, #64	; 0x40
 80026d8:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80026da:	f107 031c 	add.w	r3, r7, #28
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	611a      	str	r2, [r3, #16]
 80026ea:	615a      	str	r2, [r3, #20]
 80026ec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
 80026fc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80026fe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002702:	f7ff fec5 	bl	8002490 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002706:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800270a:	f7ff fea9 	bl	8002460 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 800270e:	f248 0304 	movw	r3, #32772	; 0x8004
 8002712:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002714:	2302      	movs	r3, #2
 8002716:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002718:	2303      	movs	r3, #3
 800271a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002724:	2307      	movs	r3, #7
 8002726:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	4619      	mov	r1, r3
 800272c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002730:	f000 fa56 	bl	8002be0 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002734:	2200      	movs	r2, #0
 8002736:	2106      	movs	r1, #6
 8002738:	4858      	ldr	r0, [pc, #352]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 800273a:	f7ff fc75 	bl	8002028 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 800273e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002742:	2106      	movs	r1, #6
 8002744:	4855      	ldr	r0, [pc, #340]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 8002746:	f7ff fd61 	bl	800220c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 800274a:	2200      	movs	r2, #0
 800274c:	2106      	movs	r1, #6
 800274e:	4853      	ldr	r0, [pc, #332]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 8002750:	f7ff fca8 	bl	80020a4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002754:	2200      	movs	r2, #0
 8002756:	2106      	movs	r1, #6
 8002758:	4850      	ldr	r0, [pc, #320]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 800275a:	f7ff fcc7 	bl	80020ec <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 800275e:	2280      	movs	r2, #128	; 0x80
 8002760:	2106      	movs	r1, #6
 8002762:	484e      	ldr	r0, [pc, #312]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 8002764:	f7ff fce6 	bl	8002134 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002768:	2200      	movs	r2, #0
 800276a:	2106      	movs	r1, #6
 800276c:	484b      	ldr	r0, [pc, #300]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 800276e:	f7ff fd05 	bl	800217c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8002772:	2200      	movs	r2, #0
 8002774:	2106      	movs	r1, #6
 8002776:	4849      	ldr	r0, [pc, #292]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 8002778:	f7ff fd24 	bl	80021c4 <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800277c:	2210      	movs	r2, #16
 800277e:	2107      	movs	r1, #7
 8002780:	4846      	ldr	r0, [pc, #280]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 8002782:	f7ff fc51 	bl	8002028 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8002786:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800278a:	2107      	movs	r1, #7
 800278c:	4843      	ldr	r0, [pc, #268]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 800278e:	f7ff fd3d 	bl	800220c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8002792:	2200      	movs	r2, #0
 8002794:	2107      	movs	r1, #7
 8002796:	4841      	ldr	r0, [pc, #260]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 8002798:	f7ff fc84 	bl	80020a4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 800279c:	2200      	movs	r2, #0
 800279e:	2107      	movs	r1, #7
 80027a0:	483e      	ldr	r0, [pc, #248]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 80027a2:	f7ff fca3 	bl	80020ec <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 80027a6:	2280      	movs	r2, #128	; 0x80
 80027a8:	2107      	movs	r1, #7
 80027aa:	483c      	ldr	r0, [pc, #240]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 80027ac:	f7ff fcc2 	bl	8002134 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 80027b0:	2200      	movs	r2, #0
 80027b2:	2107      	movs	r1, #7
 80027b4:	4839      	ldr	r0, [pc, #228]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 80027b6:	f7ff fce1 	bl	800217c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 80027ba:	2200      	movs	r2, #0
 80027bc:	2107      	movs	r1, #7
 80027be:	4837      	ldr	r0, [pc, #220]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 80027c0:	f7ff fd00 	bl	80021c4 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80027c4:	f7ff fb66 	bl	8001e94 <__NVIC_GetPriorityGrouping>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2200      	movs	r2, #0
 80027cc:	2100      	movs	r1, #0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fbb6 	bl	8001f40 <NVIC_EncodePriority>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4619      	mov	r1, r3
 80027d8:	2026      	movs	r0, #38	; 0x26
 80027da:	f7ff fb87 	bl	8001eec <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80027de:	2026      	movs	r0, #38	; 0x26
 80027e0:	f7ff fb66 	bl	8001eb0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 80027e4:	2106      	movs	r1, #6
 80027e6:	482d      	ldr	r0, [pc, #180]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 80027e8:	f7ff fdda 	bl	80023a0 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 80027ec:	2106      	movs	r1, #6
 80027ee:	482b      	ldr	r0, [pc, #172]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 80027f0:	f7ff fdf6 	bl	80023e0 <LL_DMA_EnableIT_HT>
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 80027f4:	2107      	movs	r1, #7
 80027f6:	4829      	ldr	r0, [pc, #164]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 80027f8:	f7ff fe12 	bl	8002420 <LL_DMA_EnableIT_TE>

  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6,  //configuring DMA
 80027fc:	2101      	movs	r1, #1
 80027fe:	4828      	ldr	r0, [pc, #160]	; (80028a0 <MX_USART2_UART_Init+0x1cc>)
 8002800:	f7ff ff0e 	bl	8002620 <LL_USART_DMA_GetRegAddr>
 8002804:	4604      	mov	r4, r0
 8002806:	4d27      	ldr	r5, [pc, #156]	; (80028a4 <MX_USART2_UART_Init+0x1d0>)
 8002808:	2106      	movs	r1, #6
 800280a:	4824      	ldr	r0, [pc, #144]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 800280c:	f7ff fc32 	bl	8002074 <LL_DMA_GetDataTransferDirection>
 8002810:	4603      	mov	r3, r0
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	462b      	mov	r3, r5
 8002816:	4622      	mov	r2, r4
 8002818:	2106      	movs	r1, #6
 800281a:	4820      	ldr	r0, [pc, #128]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 800281c:	f7ff fd54 	bl	80022c8 <LL_DMA_ConfigAddresses>
  	 						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
  	 							(uint32_t)bufferUSART2dma,
  	 							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002820:	22c8      	movs	r2, #200	; 0xc8
 8002822:	2106      	movs	r1, #6
 8002824:	481d      	ldr	r0, [pc, #116]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 8002826:	f7ff fd15 	bl	8002254 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800282a:	2106      	movs	r1, #6
 800282c:	481b      	ldr	r0, [pc, #108]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 800282e:	f7ff fbbb 	bl	8001fa8 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8002832:	481b      	ldr	r0, [pc, #108]	; (80028a0 <MX_USART2_UART_Init+0x1cc>)
 8002834:	f7ff feae 	bl	8002594 <LL_USART_EnableDMAReq_RX>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8002838:	2100      	movs	r1, #0
 800283a:	4819      	ldr	r0, [pc, #100]	; (80028a0 <MX_USART2_UART_Init+0x1cc>)
 800283c:	f7ff fef0 	bl	8002620 <LL_USART_DMA_GetRegAddr>
 8002840:	4603      	mov	r3, r0
 8002842:	461a      	mov	r2, r3
 8002844:	2107      	movs	r1, #7
 8002846:	4815      	ldr	r0, [pc, #84]	; (800289c <MX_USART2_UART_Init+0x1c8>)
 8002848:	f7ff fd92 	bl	8002370 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 800284c:	4814      	ldr	r0, [pc, #80]	; (80028a0 <MX_USART2_UART_Init+0x1cc>)
 800284e:	f7ff fec4 	bl	80025da <LL_USART_EnableDMAReq_TX>
  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002852:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002856:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002858:	2300      	movs	r3, #0
 800285a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002860:	2300      	movs	r3, #0
 8002862:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002864:	230c      	movs	r3, #12
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002868:	2300      	movs	r3, #0
 800286a:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800286c:	2300      	movs	r3, #0
 800286e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002870:	f107 031c 	add.w	r3, r7, #28
 8002874:	4619      	mov	r1, r3
 8002876:	480a      	ldr	r0, [pc, #40]	; (80028a0 <MX_USART2_UART_Init+0x1cc>)
 8002878:	f001 f834 	bl	80038e4 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 800287c:	4808      	ldr	r0, [pc, #32]	; (80028a0 <MX_USART2_UART_Init+0x1cc>)
 800287e:	f7ff fe66 	bl	800254e <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8002882:	4807      	ldr	r0, [pc, #28]	; (80028a0 <MX_USART2_UART_Init+0x1cc>)
 8002884:	f7ff fe2c 	bl	80024e0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002888:	4805      	ldr	r0, [pc, #20]	; (80028a0 <MX_USART2_UART_Init+0x1cc>)
 800288a:	f7ff fe19 	bl	80024c0 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  LL_USART_EnableIT_IDLE(USART2);
 800288e:	4804      	ldr	r0, [pc, #16]	; (80028a0 <MX_USART2_UART_Init+0x1cc>)
 8002890:	f7ff fe3c 	bl	800250c <LL_USART_EnableIT_IDLE>
  /* USER CODE END USART2_Init 2 */

}
 8002894:	bf00      	nop
 8002896:	3738      	adds	r7, #56	; 0x38
 8002898:	46bd      	mov	sp, r7
 800289a:	bdb0      	pop	{r4, r5, r7, pc}
 800289c:	40020000 	.word	0x40020000
 80028a0:	40004400 	.word	0x40004400
 80028a4:	20000230 	.word	0x20000230

080028a8 <USART2_RegisterCallback>:

/* USER CODE BEGIN 1 */
/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a03      	ldr	r2, [pc, #12]	; (80028c8 <USART2_RegisterCallback+0x20>)
 80028ba:	6013      	str	r3, [r2, #0]
	}
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	20000220 	.word	0x20000220

080028cc <USART2_PutBuffer>:

// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	461a      	mov	r2, r3
 80028dc:	2107      	movs	r1, #7
 80028de:	480a      	ldr	r0, [pc, #40]	; (8002908 <USART2_PutBuffer+0x3c>)
 80028e0:	f7ff fd2e 	bl	8002340 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	461a      	mov	r2, r3
 80028e8:	2107      	movs	r1, #7
 80028ea:	4807      	ldr	r0, [pc, #28]	; (8002908 <USART2_PutBuffer+0x3c>)
 80028ec:	f7ff fcb2 	bl	8002254 <LL_DMA_SetDataLength>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 80028f0:	2107      	movs	r1, #7
 80028f2:	4805      	ldr	r0, [pc, #20]	; (8002908 <USART2_PutBuffer+0x3c>)
 80028f4:	f7ff fd54 	bl	80023a0 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 80028f8:	2107      	movs	r1, #7
 80028fa:	4803      	ldr	r0, [pc, #12]	; (8002908 <USART2_PutBuffer+0x3c>)
 80028fc:	f7ff fb54 	bl	8001fa8 <LL_DMA_EnableChannel>
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40020000 	.word	0x40020000

0800290c <USART2_CheckDmaReception>:

// Receive data from DMA
void USART2_CheckDmaReception(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
	//type your implementation here
	if(USART2_ProcessData == 0) return;
 8002912:	4b18      	ldr	r3, [pc, #96]	; (8002974 <USART2_CheckDmaReception+0x68>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d027      	beq.n	800296a <USART2_CheckDmaReception+0x5e>

	//uint16_t test = LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 800291a:	2106      	movs	r1, #6
 800291c:	4816      	ldr	r0, [pc, #88]	; (8002978 <USART2_CheckDmaReception+0x6c>)
 800291e:	f7ff fcbd 	bl	800229c <LL_DMA_GetDataLength>
 8002922:	4603      	mov	r3, r0
 8002924:	b29b      	uxth	r3, r3
 8002926:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800292a:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = old_pos; i < pos; i++) { //reading from buffer from old_pos to pos, sending each char to callback function
 800292c:	4b13      	ldr	r3, [pc, #76]	; (800297c <USART2_CheckDmaReception+0x70>)
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	80fb      	strh	r3, [r7, #6]
 8002932:	e009      	b.n	8002948 <USART2_CheckDmaReception+0x3c>
		USART2_ProcessData(bufferUSART2dma[i]);
 8002934:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <USART2_CheckDmaReception+0x68>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	88fa      	ldrh	r2, [r7, #6]
 800293a:	4911      	ldr	r1, [pc, #68]	; (8002980 <USART2_CheckDmaReception+0x74>)
 800293c:	5c8a      	ldrb	r2, [r1, r2]
 800293e:	4610      	mov	r0, r2
 8002940:	4798      	blx	r3
	for (uint16_t i = old_pos; i < pos; i++) { //reading from buffer from old_pos to pos, sending each char to callback function
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	3301      	adds	r3, #1
 8002946:	80fb      	strh	r3, [r7, #6]
 8002948:	88fa      	ldrh	r2, [r7, #6]
 800294a:	88bb      	ldrh	r3, [r7, #4]
 800294c:	429a      	cmp	r2, r3
 800294e:	d3f1      	bcc.n	8002934 <USART2_CheckDmaReception+0x28>
	}

	old_pos = pos;
 8002950:	4a0a      	ldr	r2, [pc, #40]	; (800297c <USART2_CheckDmaReception+0x70>)
 8002952:	88bb      	ldrh	r3, [r7, #4]
 8002954:	8013      	strh	r3, [r2, #0]

	if(LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6) <= 20) { //if remaining buffer capacity is less than 20 characters
 8002956:	2106      	movs	r1, #6
 8002958:	4807      	ldr	r0, [pc, #28]	; (8002978 <USART2_CheckDmaReception+0x6c>)
 800295a:	f7ff fc9f 	bl	800229c <LL_DMA_GetDataLength>
 800295e:	4603      	mov	r3, r0
 8002960:	2b14      	cmp	r3, #20
 8002962:	d803      	bhi.n	800296c <USART2_CheckDmaReception+0x60>
		reinitializeBuffer();
 8002964:	f7ff fe72 	bl	800264c <reinitializeBuffer>
 8002968:	e000      	b.n	800296c <USART2_CheckDmaReception+0x60>
	if(USART2_ProcessData == 0) return;
 800296a:	bf00      	nop
	}
}
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000220 	.word	0x20000220
 8002978:	40020000 	.word	0x40020000
 800297c:	2000021c 	.word	0x2000021c
 8002980:	20000230 	.word	0x20000230

08002984 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029bc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002988:	480d      	ldr	r0, [pc, #52]	; (80029c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800298a:	490e      	ldr	r1, [pc, #56]	; (80029c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800298c:	4a0e      	ldr	r2, [pc, #56]	; (80029c8 <LoopForever+0xe>)
  movs r3, #0
 800298e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002990:	e002      	b.n	8002998 <LoopCopyDataInit>

08002992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002996:	3304      	adds	r3, #4

08002998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800299a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800299c:	d3f9      	bcc.n	8002992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800299e:	4a0b      	ldr	r2, [pc, #44]	; (80029cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80029a0:	4c0b      	ldr	r4, [pc, #44]	; (80029d0 <LoopForever+0x16>)
  movs r3, #0
 80029a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a4:	e001      	b.n	80029aa <LoopFillZerobss>

080029a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a8:	3204      	adds	r2, #4

080029aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029ac:	d3fb      	bcc.n	80029a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029ae:	f7fe ffe3 	bl	8001978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029b2:	f001 f86b 	bl	8003a8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029b6:	f7fe fc0f 	bl	80011d8 <main>

080029ba <LoopForever>:

LoopForever:
    b LoopForever
 80029ba:	e7fe      	b.n	80029ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029bc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80029c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80029c8:	080088dc 	.word	0x080088dc
  ldr r2, =_sbss
 80029cc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80029d0:	20000308 	.word	0x20000308

080029d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029d4:	e7fe      	b.n	80029d4 <ADC1_2_IRQHandler>

080029d6 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b089      	sub	sp, #36	; 0x24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	fa93 f3a3 	rbit	r3, r3
 80029f0:	613b      	str	r3, [r7, #16]
  return result;
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	2103      	movs	r1, #3
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	401a      	ands	r2, r3
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	61bb      	str	r3, [r7, #24]
  return result;
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	fab3 f383 	clz	r3, r3
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	431a      	orrs	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	601a      	str	r2, [r3, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	3724      	adds	r7, #36	; 0x24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	401a      	ands	r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	431a      	orrs	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	605a      	str	r2, [r3, #4]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b089      	sub	sp, #36	; 0x24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	613b      	str	r3, [r7, #16]
  return result;
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	fab3 f383 	clz	r3, r3
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	2103      	movs	r1, #3
 8002a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	401a      	ands	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	61bb      	str	r3, [r7, #24]
  return result;
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002ab6:	bf00      	nop
 8002ab8:	3724      	adds	r7, #36	; 0x24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b089      	sub	sp, #36	; 0x24
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	613b      	str	r3, [r7, #16]
  return result;
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	fab3 f383 	clz	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	2103      	movs	r1, #3
 8002aea:	fa01 f303 	lsl.w	r3, r1, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	401a      	ands	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa93 f3a3 	rbit	r3, r3
 8002afc:	61bb      	str	r3, [r7, #24]
  return result;
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	fab3 f383 	clz	r3, r3
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	60da      	str	r2, [r3, #12]
}
 8002b14:	bf00      	nop
 8002b16:	3724      	adds	r7, #36	; 0x24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a1a      	ldr	r2, [r3, #32]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	613b      	str	r3, [r7, #16]
  return result;
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	210f      	movs	r1, #15
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	401a      	ands	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	61bb      	str	r3, [r7, #24]
  return result;
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002b72:	bf00      	nop
 8002b74:	3724      	adds	r7, #36	; 0x24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b089      	sub	sp, #36	; 0x24
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	0a1b      	lsrs	r3, r3, #8
 8002b92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	613b      	str	r3, [r7, #16]
  return result;
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	210f      	movs	r1, #15
 8002ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	401a      	ands	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	61bb      	str	r3, [r7, #24]
  return result;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	fab3 f383 	clz	r3, r3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002bd4:	bf00      	nop
 8002bd6:	3724      	adds	r7, #36	; 0x24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	613b      	str	r3, [r7, #16]
  return result;
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002c02:	e051      	b.n	8002ca8 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	2101      	movs	r1, #1
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d043      	beq.n	8002ca2 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d003      	beq.n	8002c2a <LL_GPIO_Init+0x4a>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d10e      	bne.n	8002c48 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	69b9      	ldr	r1, [r7, #24]
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ff16 	bl	8002a64 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	6819      	ldr	r1, [r3, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	461a      	mov	r2, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff fef6 	bl	8002a34 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	69b9      	ldr	r1, [r7, #24]
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff ff36 	bl	8002ac2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d11a      	bne.n	8002c94 <LL_GPIO_Init+0xb4>
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	60bb      	str	r3, [r7, #8]
  return result;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002c6c:	fab3 f383 	clz	r3, r3
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b07      	cmp	r3, #7
 8002c74:	d807      	bhi.n	8002c86 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	69b9      	ldr	r1, [r7, #24]
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff ff4e 	bl	8002b20 <LL_GPIO_SetAFPin_0_7>
 8002c84:	e006      	b.n	8002c94 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	69b9      	ldr	r1, [r7, #24]
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff ff75 	bl	8002b7e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	69b9      	ldr	r1, [r7, #24]
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff fe9a 	bl	80029d6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1a6      	bne.n	8002c04 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3720      	adds	r7, #32
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <LL_RCC_HSI_IsReady>:
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <LL_RCC_HSI_IsReady+0x20>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	bf0c      	ite	eq
 8002cd0:	2301      	moveq	r3, #1
 8002cd2:	2300      	movne	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	40021000 	.word	0x40021000

08002ce4 <LL_RCC_LSE_IsReady>:
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <LL_RCC_LSE_IsReady+0x20>)
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	40021000 	.word	0x40021000

08002d08 <LL_RCC_GetSysClkSource>:
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <LL_RCC_GetSysClkSource+0x18>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 030c 	and.w	r3, r3, #12
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40021000 	.word	0x40021000

08002d24 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <LL_RCC_GetAHBPrescaler+0x18>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000

08002d40 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000

08002d5c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002d60:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40021000 	.word	0x40021000

08002d78 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8002d80:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <LL_RCC_GetUSARTClockSource+0x28>)
 8002d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d84:	2103      	movs	r1, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8c:	401a      	ands	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	061b      	lsls	r3, r3, #24
 8002d92:	4313      	orrs	r3, r2
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40021000 	.word	0x40021000

08002da4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002da8:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <LL_RCC_PLL_GetMainSource+0x18>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000

08002dc0 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002dc4:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40021000 	.word	0x40021000

08002ddc <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <LL_RCC_PLL_GetPrediv+0x18>)
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	f003 030f 	and.w	r3, r3, #15
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000

08002df8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002e00:	f000 f864 	bl	8002ecc <RCC_GetSystemClockFreq>
 8002e04:	4602      	mov	r2, r0
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 f882 	bl	8002f18 <RCC_GetHCLKClockFreq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 f890 	bl	8002f44 <RCC_GetPCLK1ClockFreq>
 8002e24:	4602      	mov	r2, r0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 f89c 	bl	8002f6c <RCC_GetPCLK2ClockFreq>
 8002e34:	4602      	mov	r2, r0
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	60da      	str	r2, [r3, #12]
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d12d      	bne.n	8002eb2 <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff ff8e 	bl	8002d78 <LL_RCC_GetUSARTClockSource>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d00a      	beq.n	8002e78 <LL_RCC_GetUSARTClockFreq+0x34>
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d819      	bhi.n	8002e9a <LL_RCC_GetUSARTClockFreq+0x56>
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d002      	beq.n	8002e70 <LL_RCC_GetUSARTClockFreq+0x2c>
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d00c      	beq.n	8002e88 <LL_RCC_GetUSARTClockFreq+0x44>
 8002e6e:	e014      	b.n	8002e9a <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002e70:	f000 f82c 	bl	8002ecc <RCC_GetSystemClockFreq>
 8002e74:	60f8      	str	r0, [r7, #12]
        break;
 8002e76:	e021      	b.n	8002ebc <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002e78:	f7ff ff22 	bl	8002cc0 <LL_RCC_HSI_IsReady>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d019      	beq.n	8002eb6 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8002e82:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <LL_RCC_GetUSARTClockFreq+0x84>)
 8002e84:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002e86:	e016      	b.n	8002eb6 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002e88:	f7ff ff2c 	bl	8002ce4 <LL_RCC_LSE_IsReady>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d013      	beq.n	8002eba <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8002e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e96:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002e98:	e00f      	b.n	8002eba <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002e9a:	f000 f817 	bl	8002ecc <RCC_GetSystemClockFreq>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 f839 	bl	8002f18 <RCC_GetHCLKClockFreq>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 f84b 	bl	8002f44 <RCC_GetPCLK1ClockFreq>
 8002eae:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8002eb0:	e004      	b.n	8002ebc <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 8002eb2:	bf00      	nop
 8002eb4:	e002      	b.n	8002ebc <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002eb6:	bf00      	nop
 8002eb8:	e000      	b.n	8002ebc <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002eba:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	007a1200 	.word	0x007a1200

08002ecc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002ed6:	f7ff ff17 	bl	8002d08 <LL_RCC_GetSysClkSource>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d00c      	beq.n	8002efa <RCC_GetSystemClockFreq+0x2e>
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d80e      	bhi.n	8002f02 <RCC_GetSystemClockFreq+0x36>
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <RCC_GetSystemClockFreq+0x22>
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d003      	beq.n	8002ef4 <RCC_GetSystemClockFreq+0x28>
 8002eec:	e009      	b.n	8002f02 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <RCC_GetSystemClockFreq+0x48>)
 8002ef0:	607b      	str	r3, [r7, #4]
      break;
 8002ef2:	e009      	b.n	8002f08 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002ef4:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <RCC_GetSystemClockFreq+0x48>)
 8002ef6:	607b      	str	r3, [r7, #4]
      break;
 8002ef8:	e006      	b.n	8002f08 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002efa:	f000 f84b 	bl	8002f94 <RCC_PLL_GetFreqDomain_SYS>
 8002efe:	6078      	str	r0, [r7, #4]
      break;
 8002f00:	e002      	b.n	8002f08 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002f02:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <RCC_GetSystemClockFreq+0x48>)
 8002f04:	607b      	str	r3, [r7, #4]
      break;
 8002f06:	bf00      	nop
  }

  return frequency;
 8002f08:	687b      	ldr	r3, [r7, #4]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	007a1200 	.word	0x007a1200

08002f18 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002f20:	f7ff ff00 	bl	8002d24 <LL_RCC_GetAHBPrescaler>
 8002f24:	4603      	mov	r3, r0
 8002f26:	091b      	lsrs	r3, r3, #4
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <RCC_GetHCLKClockFreq+0x28>)
 8002f2e:	5cd3      	ldrb	r3, [r2, r3]
 8002f30:	461a      	mov	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	40d3      	lsrs	r3, r2
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	080083e4 	.word	0x080083e4

08002f44 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002f4c:	f7ff fef8 	bl	8002d40 <LL_RCC_GetAPB1Prescaler>
 8002f50:	4603      	mov	r3, r0
 8002f52:	0a1b      	lsrs	r3, r3, #8
 8002f54:	4a04      	ldr	r2, [pc, #16]	; (8002f68 <RCC_GetPCLK1ClockFreq+0x24>)
 8002f56:	5cd3      	ldrb	r3, [r2, r3]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	40d3      	lsrs	r3, r2
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	080083f4 	.word	0x080083f4

08002f6c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002f74:	f7ff fef2 	bl	8002d5c <LL_RCC_GetAPB2Prescaler>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	0adb      	lsrs	r3, r3, #11
 8002f7c:	4a04      	ldr	r2, [pc, #16]	; (8002f90 <RCC_GetPCLK2ClockFreq+0x24>)
 8002f7e:	5cd3      	ldrb	r3, [r2, r3]
 8002f80:	461a      	mov	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	40d3      	lsrs	r3, r2
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	080083f4 	.word	0x080083f4

08002f94 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002fa2:	f7ff feff 	bl	8002da4 <LL_RCC_PLL_GetMainSource>
 8002fa6:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d004      	beq.n	8002fb8 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb4:	d003      	beq.n	8002fbe <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002fb6:	e005      	b.n	8002fc4 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002fba:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002fbc:	e005      	b.n	8002fca <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002fbe:	4b13      	ldr	r3, [pc, #76]	; (800300c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002fc0:	60fb      	str	r3, [r7, #12]
      break;
 8002fc2:	e002      	b.n	8002fca <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8002fc4:	4b10      	ldr	r3, [pc, #64]	; (8003008 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002fc6:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002fc8:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002fca:	f7ff ff07 	bl	8002ddc <LL_RCC_PLL_GetPrediv>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	fbb2 f4f3 	udiv	r4, r2, r3
 8002fd8:	f7ff fef2 	bl	8002dc0 <LL_RCC_PLL_GetMultiplicator>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002fe2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002fe6:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	fa92 f2a2 	rbit	r2, r2
 8002fee:	603a      	str	r2, [r7, #0]
  return result;
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	fab2 f282 	clz	r2, r2
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	40d3      	lsrs	r3, r2
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	bd90      	pop	{r4, r7, pc}
 8003008:	003d0900 	.word	0x003d0900
 800300c:	007a1200 	.word	0x007a1200

08003010 <LL_TIM_SetPrescaler>:
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_TIM_SetAutoReload>:
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <LL_TIM_SetRepetitionCounter>:
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <LL_TIM_OC_SetCompareCH1>:
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <LL_TIM_OC_SetCompareCH2>:
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <LL_TIM_OC_SetCompareCH3>:
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <LL_TIM_OC_SetCompareCH4>:
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_TIM_OC_SetCompareCH5>:
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <LL_TIM_OC_SetCompareCH6>:
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	615a      	str	r2, [r3, #20]
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a2f      	ldr	r2, [pc, #188]	; (8003200 <LL_TIM_Init+0xd0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d007      	beq.n	8003158 <LL_TIM_Init+0x28>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314e:	d003      	beq.n	8003158 <LL_TIM_Init+0x28>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a2c      	ldr	r2, [pc, #176]	; (8003204 <LL_TIM_Init+0xd4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d106      	bne.n	8003166 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a25      	ldr	r2, [pc, #148]	; (8003200 <LL_TIM_Init+0xd0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d013      	beq.n	8003196 <LL_TIM_Init+0x66>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003174:	d00f      	beq.n	8003196 <LL_TIM_Init+0x66>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a22      	ldr	r2, [pc, #136]	; (8003204 <LL_TIM_Init+0xd4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d00b      	beq.n	8003196 <LL_TIM_Init+0x66>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a21      	ldr	r2, [pc, #132]	; (8003208 <LL_TIM_Init+0xd8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d007      	beq.n	8003196 <LL_TIM_Init+0x66>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a20      	ldr	r2, [pc, #128]	; (800320c <LL_TIM_Init+0xdc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d003      	beq.n	8003196 <LL_TIM_Init+0x66>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a1f      	ldr	r2, [pc, #124]	; (8003210 <LL_TIM_Init+0xe0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d106      	bne.n	80031a4 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	4619      	mov	r1, r3
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7ff ff3b 	bl	800302c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	4619      	mov	r1, r3
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff ff27 	bl	8003010 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a0e      	ldr	r2, [pc, #56]	; (8003200 <LL_TIM_Init+0xd0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00b      	beq.n	80031e2 <LL_TIM_Init+0xb2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a0e      	ldr	r2, [pc, #56]	; (8003208 <LL_TIM_Init+0xd8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d007      	beq.n	80031e2 <LL_TIM_Init+0xb2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a0d      	ldr	r2, [pc, #52]	; (800320c <LL_TIM_Init+0xdc>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d003      	beq.n	80031e2 <LL_TIM_Init+0xb2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a0c      	ldr	r2, [pc, #48]	; (8003210 <LL_TIM_Init+0xe0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d105      	bne.n	80031ee <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	4619      	mov	r1, r3
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff ff2d 	bl	8003048 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff ff8e 	bl	8003110 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40012c00 	.word	0x40012c00
 8003204:	40000400 	.word	0x40000400
 8003208:	40014000 	.word	0x40014000
 800320c:	40014400 	.word	0x40014400
 8003210:	40014800 	.word	0x40014800

08003214 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800322a:	d045      	beq.n	80032b8 <LL_TIM_OC_Init+0xa4>
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003232:	d848      	bhi.n	80032c6 <LL_TIM_OC_Init+0xb2>
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323a:	d036      	beq.n	80032aa <LL_TIM_OC_Init+0x96>
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003242:	d840      	bhi.n	80032c6 <LL_TIM_OC_Init+0xb2>
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324a:	d027      	beq.n	800329c <LL_TIM_OC_Init+0x88>
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003252:	d838      	bhi.n	80032c6 <LL_TIM_OC_Init+0xb2>
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325a:	d018      	beq.n	800328e <LL_TIM_OC_Init+0x7a>
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003262:	d830      	bhi.n	80032c6 <LL_TIM_OC_Init+0xb2>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d003      	beq.n	8003272 <LL_TIM_OC_Init+0x5e>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b10      	cmp	r3, #16
 800326e:	d007      	beq.n	8003280 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8003270:	e029      	b.n	80032c6 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 f82d 	bl	80032d4 <OC1Config>
 800327a:	4603      	mov	r3, r0
 800327c:	75fb      	strb	r3, [r7, #23]
      break;
 800327e:	e023      	b.n	80032c8 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f8a0 	bl	80033c8 <OC2Config>
 8003288:	4603      	mov	r3, r0
 800328a:	75fb      	strb	r3, [r7, #23]
      break;
 800328c:	e01c      	b.n	80032c8 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 f917 	bl	80034c4 <OC3Config>
 8003296:	4603      	mov	r3, r0
 8003298:	75fb      	strb	r3, [r7, #23]
      break;
 800329a:	e015      	b.n	80032c8 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f98e 	bl	80035c0 <OC4Config>
 80032a4:	4603      	mov	r3, r0
 80032a6:	75fb      	strb	r3, [r7, #23]
      break;
 80032a8:	e00e      	b.n	80032c8 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f9ed 	bl	800368c <OC5Config>
 80032b2:	4603      	mov	r3, r0
 80032b4:	75fb      	strb	r3, [r7, #23]
      break;
 80032b6:	e007      	b.n	80032c8 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 fa44 	bl	8003748 <OC6Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	75fb      	strb	r3, [r7, #23]
      break;
 80032c4:	e000      	b.n	80032c8 <LL_TIM_OC_Init+0xb4>
      break;
 80032c6:	bf00      	nop
  }

  return result;
 80032c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	f023 0201 	bic.w	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 0303 	bic.w	r3, r3, #3
 8003302:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f023 0202 	bic.w	r2, r3, #2
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f023 0201 	bic.w	r2, r3, #1
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a20      	ldr	r2, [pc, #128]	; (80033b8 <OC1Config+0xe4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00b      	beq.n	8003352 <OC1Config+0x7e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a1f      	ldr	r2, [pc, #124]	; (80033bc <OC1Config+0xe8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d007      	beq.n	8003352 <OC1Config+0x7e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a1e      	ldr	r2, [pc, #120]	; (80033c0 <OC1Config+0xec>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d003      	beq.n	8003352 <OC1Config+0x7e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <OC1Config+0xf0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d11e      	bne.n	8003390 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f023 0208 	bic.w	r2, r3, #8
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4313      	orrs	r3, r2
 8003360:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f023 0204 	bic.w	r2, r3, #4
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	4313      	orrs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4619      	mov	r1, r3
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff fe5e 	bl	8003064 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40012c00 	.word	0x40012c00
 80033bc:	40014000 	.word	0x40014000
 80033c0:	40014400 	.word	0x40014400
 80033c4:	40014800 	.word	0x40014800

080033c8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	f023 0210 	bic.w	r2, r3, #16
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	6812      	ldr	r2, [r2, #0]
 8003406:	0212      	lsls	r2, r2, #8
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f023 0220 	bic.w	r2, r3, #32
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	4313      	orrs	r3, r2
 800341a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f023 0210 	bic.w	r2, r3, #16
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a21      	ldr	r2, [pc, #132]	; (80034b4 <OC2Config+0xec>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00b      	beq.n	800344c <OC2Config+0x84>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a20      	ldr	r2, [pc, #128]	; (80034b8 <OC2Config+0xf0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d007      	beq.n	800344c <OC2Config+0x84>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a1f      	ldr	r2, [pc, #124]	; (80034bc <OC2Config+0xf4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d003      	beq.n	800344c <OC2Config+0x84>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a1e      	ldr	r2, [pc, #120]	; (80034c0 <OC2Config+0xf8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d11f      	bne.n	800348c <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	019b      	lsls	r3, r3, #6
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	019b      	lsls	r3, r3, #6
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4313      	orrs	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4619      	mov	r1, r3
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff fdee 	bl	8003080 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40012c00 	.word	0x40012c00
 80034b8:	40014000 	.word	0x40014000
 80034bc:	40014400 	.word	0x40014400
 80034c0:	40014800 	.word	0x40014800

080034c4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 0303 	bic.w	r3, r3, #3
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	021b      	lsls	r3, r3, #8
 8003512:	4313      	orrs	r3, r2
 8003514:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	4313      	orrs	r3, r2
 8003524:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a21      	ldr	r2, [pc, #132]	; (80035b0 <OC3Config+0xec>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00b      	beq.n	8003546 <OC3Config+0x82>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a20      	ldr	r2, [pc, #128]	; (80035b4 <OC3Config+0xf0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d007      	beq.n	8003546 <OC3Config+0x82>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a1f      	ldr	r2, [pc, #124]	; (80035b8 <OC3Config+0xf4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d003      	beq.n	8003546 <OC3Config+0x82>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a1e      	ldr	r2, [pc, #120]	; (80035bc <OC3Config+0xf8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d11f      	bne.n	8003586 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	029b      	lsls	r3, r3, #10
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	029b      	lsls	r3, r3, #10
 8003562:	4313      	orrs	r3, r2
 8003564:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	015b      	lsls	r3, r3, #5
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	4619      	mov	r1, r3
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff fd7f 	bl	800309c <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40012c00 	.word	0x40012c00
 80035b4:	40014000 	.word	0x40014000
 80035b8:	40014400 	.word	0x40014400
 80035bc:	40014800 	.word	0x40014800

080035c0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	0212      	lsls	r2, r2, #8
 8003600:	4313      	orrs	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	031b      	lsls	r3, r3, #12
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	031b      	lsls	r3, r3, #12
 8003620:	4313      	orrs	r3, r2
 8003622:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a15      	ldr	r2, [pc, #84]	; (800367c <OC4Config+0xbc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00b      	beq.n	8003644 <OC4Config+0x84>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a14      	ldr	r2, [pc, #80]	; (8003680 <OC4Config+0xc0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d007      	beq.n	8003644 <OC4Config+0x84>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a13      	ldr	r2, [pc, #76]	; (8003684 <OC4Config+0xc4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d003      	beq.n	8003644 <OC4Config+0x84>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a12      	ldr	r2, [pc, #72]	; (8003688 <OC4Config+0xc8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d107      	bne.n	8003654 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	019b      	lsls	r3, r3, #6
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4619      	mov	r1, r3
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff fd26 	bl	80030b8 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40012c00 	.word	0x40012c00
 8003680:	40014000 	.word	0x40014000
 8003684:	40014400 	.word	0x40014400
 8003688:	40014800 	.word	0x40014800

0800368c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ac:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	041b      	lsls	r3, r3, #16
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	041b      	lsls	r3, r3, #16
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a15      	ldr	r2, [pc, #84]	; (8003738 <OC5Config+0xac>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00b      	beq.n	8003700 <OC5Config+0x74>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a14      	ldr	r2, [pc, #80]	; (800373c <OC5Config+0xb0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d007      	beq.n	8003700 <OC5Config+0x74>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a13      	ldr	r2, [pc, #76]	; (8003740 <OC5Config+0xb4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d003      	beq.n	8003700 <OC5Config+0x74>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a12      	ldr	r2, [pc, #72]	; (8003744 <OC5Config+0xb8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d109      	bne.n	8003714 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	021b      	lsls	r3, r3, #8
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	4619      	mov	r1, r3
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff fcd7 	bl	80030d4 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40012c00 	.word	0x40012c00
 800373c:	40014000 	.word	0x40014000
 8003740:	40014400 	.word	0x40014400
 8003744:	40014800 	.word	0x40014800

08003748 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003768:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003770:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	0212      	lsls	r2, r2, #8
 800377a:	4313      	orrs	r3, r2
 800377c:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	051b      	lsls	r3, r3, #20
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	051b      	lsls	r3, r3, #20
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a14      	ldr	r2, [pc, #80]	; (80037f4 <OC6Config+0xac>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00b      	beq.n	80037be <OC6Config+0x76>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a13      	ldr	r2, [pc, #76]	; (80037f8 <OC6Config+0xb0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d007      	beq.n	80037be <OC6Config+0x76>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a12      	ldr	r2, [pc, #72]	; (80037fc <OC6Config+0xb4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d003      	beq.n	80037be <OC6Config+0x76>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a11      	ldr	r2, [pc, #68]	; (8003800 <OC6Config+0xb8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d109      	bne.n	80037d2 <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	029b      	lsls	r3, r3, #10
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4619      	mov	r1, r3
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff fc88 	bl	80030f4 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40012c00 	.word	0x40012c00
 80037f8:	40014000 	.word	0x40014000
 80037fc:	40014400 	.word	0x40014400
 8003800:	40014800 	.word	0x40014800

08003804 <LL_USART_IsEnabled>:
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <LL_USART_IsEnabled+0x18>
 8003818:	2301      	movs	r3, #1
 800381a:	e000      	b.n	800381e <LL_USART_IsEnabled+0x1a>
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <LL_USART_SetStopBitsLength>:
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	605a      	str	r2, [r3, #4]
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <LL_USART_SetHWFlowCtrl>:
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	609a      	str	r2, [r3, #8]
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <LL_USART_SetBaudRate>:
{
 8003876:	b480      	push	{r7}
 8003878:	b087      	sub	sp, #28
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800388a:	d11a      	bne.n	80038c2 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	005a      	lsls	r2, r3, #1
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	085b      	lsrs	r3, r3, #1
 8003894:	441a      	add	r2, r3
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	fbb2 f3f3 	udiv	r3, r2, r3
 800389c:	b29b      	uxth	r3, r3
 800389e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80038a6:	4013      	ands	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	085b      	lsrs	r3, r3, #1
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	60da      	str	r2, [r3, #12]
}
 80038c0:	e00a      	b.n	80038d8 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	085a      	lsrs	r2, r3, #1
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	441a      	add	r2, r3
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	60da      	str	r2, [r3, #12]
}
 80038d8:	bf00      	nop
 80038da:	371c      	adds	r7, #28
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80038f2:	2300      	movs	r3, #0
 80038f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff ff84 	bl	8003804 <LL_USART_IsEnabled>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d14e      	bne.n	80039a0 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	4b29      	ldr	r3, [pc, #164]	; (80039ac <LL_USART_Init+0xc8>)
 8003908:	4013      	ands	r3, r2
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	6851      	ldr	r1, [r2, #4]
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	68d2      	ldr	r2, [r2, #12]
 8003912:	4311      	orrs	r1, r2
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	6912      	ldr	r2, [r2, #16]
 8003918:	4311      	orrs	r1, r2
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	6992      	ldr	r2, [r2, #24]
 800391e:	430a      	orrs	r2, r1
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	4619      	mov	r1, r3
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff ff7c 	bl	800382a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	4619      	mov	r1, r3
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff ff89 	bl	8003850 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a1b      	ldr	r2, [pc, #108]	; (80039b0 <LL_USART_Init+0xcc>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d104      	bne.n	8003950 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8003946:	2000      	movs	r0, #0
 8003948:	f7ff fa7c 	bl	8002e44 <LL_RCC_GetUSARTClockFreq>
 800394c:	61b8      	str	r0, [r7, #24]
 800394e:	e016      	b.n	800397e <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a18      	ldr	r2, [pc, #96]	; (80039b4 <LL_USART_Init+0xd0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d107      	bne.n	8003968 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8003958:	f107 0308 	add.w	r3, r7, #8
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff fa4b 	bl	8002df8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	e00a      	b.n	800397e <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a13      	ldr	r2, [pc, #76]	; (80039b8 <LL_USART_Init+0xd4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d106      	bne.n	800397e <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8003970:	f107 0308 	add.w	r3, r7, #8
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff fa3f 	bl	8002df8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00d      	beq.n	80039a0 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d009      	beq.n	80039a0 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 800398c:	2300      	movs	r3, #0
 800398e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	699a      	ldr	r2, [r3, #24]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69b9      	ldr	r1, [r7, #24]
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff ff6b 	bl	8003876 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80039a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3720      	adds	r7, #32
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	efff69f3 	.word	0xefff69f3
 80039b0:	40013800 	.word	0x40013800
 80039b4:	40004400 	.word	0x40004400
 80039b8:	40004800 	.word	0x40004800

080039bc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ce:	4a07      	ldr	r2, [pc, #28]	; (80039ec <LL_InitTick+0x30>)
 80039d0:	3b01      	subs	r3, #1
 80039d2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80039d4:	4b05      	ldr	r3, [pc, #20]	; (80039ec <LL_InitTick+0x30>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039da:	4b04      	ldr	r3, [pc, #16]	; (80039ec <LL_InitTick+0x30>)
 80039dc:	2205      	movs	r2, #5
 80039de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	e000e010 	.word	0xe000e010

080039f0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80039f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff ffdd 	bl	80039bc <LL_InitTick>
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003a14:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <LL_mDelay+0x48>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003a1a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a22:	d00c      	beq.n	8003a3e <LL_mDelay+0x32>
  {
    Delay++;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3301      	adds	r3, #1
 8003a28:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003a2a:	e008      	b.n	8003a3e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <LL_mDelay+0x48>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <LL_mDelay+0x32>
    {
      Delay--;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1f3      	bne.n	8003a2c <LL_mDelay+0x20>
    }
  }
}
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	e000e010 	.word	0xe000e010

08003a58 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003a60:	4a04      	ldr	r2, [pc, #16]	; (8003a74 <LL_SetSystemCoreClock+0x1c>)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6013      	str	r3, [r2, #0]
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20000000 	.word	0x20000000

08003a78 <atoi>:
 8003a78:	220a      	movs	r2, #10
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	f001 bda6 	b.w	80055cc <strtol>

08003a80 <__errno>:
 8003a80:	4b01      	ldr	r3, [pc, #4]	; (8003a88 <__errno+0x8>)
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20000004 	.word	0x20000004

08003a8c <__libc_init_array>:
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	4d0d      	ldr	r5, [pc, #52]	; (8003ac4 <__libc_init_array+0x38>)
 8003a90:	4c0d      	ldr	r4, [pc, #52]	; (8003ac8 <__libc_init_array+0x3c>)
 8003a92:	1b64      	subs	r4, r4, r5
 8003a94:	10a4      	asrs	r4, r4, #2
 8003a96:	2600      	movs	r6, #0
 8003a98:	42a6      	cmp	r6, r4
 8003a9a:	d109      	bne.n	8003ab0 <__libc_init_array+0x24>
 8003a9c:	4d0b      	ldr	r5, [pc, #44]	; (8003acc <__libc_init_array+0x40>)
 8003a9e:	4c0c      	ldr	r4, [pc, #48]	; (8003ad0 <__libc_init_array+0x44>)
 8003aa0:	f004 fc5c 	bl	800835c <_init>
 8003aa4:	1b64      	subs	r4, r4, r5
 8003aa6:	10a4      	asrs	r4, r4, #2
 8003aa8:	2600      	movs	r6, #0
 8003aaa:	42a6      	cmp	r6, r4
 8003aac:	d105      	bne.n	8003aba <__libc_init_array+0x2e>
 8003aae:	bd70      	pop	{r4, r5, r6, pc}
 8003ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ab4:	4798      	blx	r3
 8003ab6:	3601      	adds	r6, #1
 8003ab8:	e7ee      	b.n	8003a98 <__libc_init_array+0xc>
 8003aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003abe:	4798      	blx	r3
 8003ac0:	3601      	adds	r6, #1
 8003ac2:	e7f2      	b.n	8003aaa <__libc_init_array+0x1e>
 8003ac4:	080088d4 	.word	0x080088d4
 8003ac8:	080088d4 	.word	0x080088d4
 8003acc:	080088d4 	.word	0x080088d4
 8003ad0:	080088d8 	.word	0x080088d8

08003ad4 <memset>:
 8003ad4:	4402      	add	r2, r0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d100      	bne.n	8003ade <memset+0xa>
 8003adc:	4770      	bx	lr
 8003ade:	f803 1b01 	strb.w	r1, [r3], #1
 8003ae2:	e7f9      	b.n	8003ad8 <memset+0x4>

08003ae4 <__cvt>:
 8003ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae8:	ec55 4b10 	vmov	r4, r5, d0
 8003aec:	2d00      	cmp	r5, #0
 8003aee:	460e      	mov	r6, r1
 8003af0:	4619      	mov	r1, r3
 8003af2:	462b      	mov	r3, r5
 8003af4:	bfbb      	ittet	lt
 8003af6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003afa:	461d      	movlt	r5, r3
 8003afc:	2300      	movge	r3, #0
 8003afe:	232d      	movlt	r3, #45	; 0x2d
 8003b00:	700b      	strb	r3, [r1, #0]
 8003b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003b08:	4691      	mov	r9, r2
 8003b0a:	f023 0820 	bic.w	r8, r3, #32
 8003b0e:	bfbc      	itt	lt
 8003b10:	4622      	movlt	r2, r4
 8003b12:	4614      	movlt	r4, r2
 8003b14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b18:	d005      	beq.n	8003b26 <__cvt+0x42>
 8003b1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003b1e:	d100      	bne.n	8003b22 <__cvt+0x3e>
 8003b20:	3601      	adds	r6, #1
 8003b22:	2102      	movs	r1, #2
 8003b24:	e000      	b.n	8003b28 <__cvt+0x44>
 8003b26:	2103      	movs	r1, #3
 8003b28:	ab03      	add	r3, sp, #12
 8003b2a:	9301      	str	r3, [sp, #4]
 8003b2c:	ab02      	add	r3, sp, #8
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	ec45 4b10 	vmov	d0, r4, r5
 8003b34:	4653      	mov	r3, sl
 8003b36:	4632      	mov	r2, r6
 8003b38:	f001 fdde 	bl	80056f8 <_dtoa_r>
 8003b3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003b40:	4607      	mov	r7, r0
 8003b42:	d102      	bne.n	8003b4a <__cvt+0x66>
 8003b44:	f019 0f01 	tst.w	r9, #1
 8003b48:	d022      	beq.n	8003b90 <__cvt+0xac>
 8003b4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b4e:	eb07 0906 	add.w	r9, r7, r6
 8003b52:	d110      	bne.n	8003b76 <__cvt+0x92>
 8003b54:	783b      	ldrb	r3, [r7, #0]
 8003b56:	2b30      	cmp	r3, #48	; 0x30
 8003b58:	d10a      	bne.n	8003b70 <__cvt+0x8c>
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	4620      	mov	r0, r4
 8003b60:	4629      	mov	r1, r5
 8003b62:	f7fc ffc1 	bl	8000ae8 <__aeabi_dcmpeq>
 8003b66:	b918      	cbnz	r0, 8003b70 <__cvt+0x8c>
 8003b68:	f1c6 0601 	rsb	r6, r6, #1
 8003b6c:	f8ca 6000 	str.w	r6, [sl]
 8003b70:	f8da 3000 	ldr.w	r3, [sl]
 8003b74:	4499      	add	r9, r3
 8003b76:	2200      	movs	r2, #0
 8003b78:	2300      	movs	r3, #0
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	4629      	mov	r1, r5
 8003b7e:	f7fc ffb3 	bl	8000ae8 <__aeabi_dcmpeq>
 8003b82:	b108      	cbz	r0, 8003b88 <__cvt+0xa4>
 8003b84:	f8cd 900c 	str.w	r9, [sp, #12]
 8003b88:	2230      	movs	r2, #48	; 0x30
 8003b8a:	9b03      	ldr	r3, [sp, #12]
 8003b8c:	454b      	cmp	r3, r9
 8003b8e:	d307      	bcc.n	8003ba0 <__cvt+0xbc>
 8003b90:	9b03      	ldr	r3, [sp, #12]
 8003b92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b94:	1bdb      	subs	r3, r3, r7
 8003b96:	4638      	mov	r0, r7
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	b004      	add	sp, #16
 8003b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba0:	1c59      	adds	r1, r3, #1
 8003ba2:	9103      	str	r1, [sp, #12]
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	e7f0      	b.n	8003b8a <__cvt+0xa6>

08003ba8 <__exponent>:
 8003ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003baa:	4603      	mov	r3, r0
 8003bac:	2900      	cmp	r1, #0
 8003bae:	bfb8      	it	lt
 8003bb0:	4249      	neglt	r1, r1
 8003bb2:	f803 2b02 	strb.w	r2, [r3], #2
 8003bb6:	bfb4      	ite	lt
 8003bb8:	222d      	movlt	r2, #45	; 0x2d
 8003bba:	222b      	movge	r2, #43	; 0x2b
 8003bbc:	2909      	cmp	r1, #9
 8003bbe:	7042      	strb	r2, [r0, #1]
 8003bc0:	dd2a      	ble.n	8003c18 <__exponent+0x70>
 8003bc2:	f10d 0407 	add.w	r4, sp, #7
 8003bc6:	46a4      	mov	ip, r4
 8003bc8:	270a      	movs	r7, #10
 8003bca:	46a6      	mov	lr, r4
 8003bcc:	460a      	mov	r2, r1
 8003bce:	fb91 f6f7 	sdiv	r6, r1, r7
 8003bd2:	fb07 1516 	mls	r5, r7, r6, r1
 8003bd6:	3530      	adds	r5, #48	; 0x30
 8003bd8:	2a63      	cmp	r2, #99	; 0x63
 8003bda:	f104 34ff 	add.w	r4, r4, #4294967295
 8003bde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003be2:	4631      	mov	r1, r6
 8003be4:	dcf1      	bgt.n	8003bca <__exponent+0x22>
 8003be6:	3130      	adds	r1, #48	; 0x30
 8003be8:	f1ae 0502 	sub.w	r5, lr, #2
 8003bec:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003bf0:	1c44      	adds	r4, r0, #1
 8003bf2:	4629      	mov	r1, r5
 8003bf4:	4561      	cmp	r1, ip
 8003bf6:	d30a      	bcc.n	8003c0e <__exponent+0x66>
 8003bf8:	f10d 0209 	add.w	r2, sp, #9
 8003bfc:	eba2 020e 	sub.w	r2, r2, lr
 8003c00:	4565      	cmp	r5, ip
 8003c02:	bf88      	it	hi
 8003c04:	2200      	movhi	r2, #0
 8003c06:	4413      	add	r3, r2
 8003c08:	1a18      	subs	r0, r3, r0
 8003c0a:	b003      	add	sp, #12
 8003c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c12:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003c16:	e7ed      	b.n	8003bf4 <__exponent+0x4c>
 8003c18:	2330      	movs	r3, #48	; 0x30
 8003c1a:	3130      	adds	r1, #48	; 0x30
 8003c1c:	7083      	strb	r3, [r0, #2]
 8003c1e:	70c1      	strb	r1, [r0, #3]
 8003c20:	1d03      	adds	r3, r0, #4
 8003c22:	e7f1      	b.n	8003c08 <__exponent+0x60>

08003c24 <_printf_float>:
 8003c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c28:	ed2d 8b02 	vpush	{d8}
 8003c2c:	b08d      	sub	sp, #52	; 0x34
 8003c2e:	460c      	mov	r4, r1
 8003c30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003c34:	4616      	mov	r6, r2
 8003c36:	461f      	mov	r7, r3
 8003c38:	4605      	mov	r5, r0
 8003c3a:	f002 feb9 	bl	80069b0 <_localeconv_r>
 8003c3e:	f8d0 a000 	ldr.w	sl, [r0]
 8003c42:	4650      	mov	r0, sl
 8003c44:	f7fc face 	bl	80001e4 <strlen>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	930a      	str	r3, [sp, #40]	; 0x28
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	9305      	str	r3, [sp, #20]
 8003c50:	f8d8 3000 	ldr.w	r3, [r8]
 8003c54:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003c58:	3307      	adds	r3, #7
 8003c5a:	f023 0307 	bic.w	r3, r3, #7
 8003c5e:	f103 0208 	add.w	r2, r3, #8
 8003c62:	f8c8 2000 	str.w	r2, [r8]
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003c6e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003c72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003c76:	9307      	str	r3, [sp, #28]
 8003c78:	f8cd 8018 	str.w	r8, [sp, #24]
 8003c7c:	ee08 0a10 	vmov	s16, r0
 8003c80:	4b9f      	ldr	r3, [pc, #636]	; (8003f00 <_printf_float+0x2dc>)
 8003c82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c86:	f04f 32ff 	mov.w	r2, #4294967295
 8003c8a:	f7fc ff5f 	bl	8000b4c <__aeabi_dcmpun>
 8003c8e:	bb88      	cbnz	r0, 8003cf4 <_printf_float+0xd0>
 8003c90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c94:	4b9a      	ldr	r3, [pc, #616]	; (8003f00 <_printf_float+0x2dc>)
 8003c96:	f04f 32ff 	mov.w	r2, #4294967295
 8003c9a:	f7fc ff39 	bl	8000b10 <__aeabi_dcmple>
 8003c9e:	bb48      	cbnz	r0, 8003cf4 <_printf_float+0xd0>
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	4640      	mov	r0, r8
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	f7fc ff28 	bl	8000afc <__aeabi_dcmplt>
 8003cac:	b110      	cbz	r0, 8003cb4 <_printf_float+0x90>
 8003cae:	232d      	movs	r3, #45	; 0x2d
 8003cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cb4:	4b93      	ldr	r3, [pc, #588]	; (8003f04 <_printf_float+0x2e0>)
 8003cb6:	4894      	ldr	r0, [pc, #592]	; (8003f08 <_printf_float+0x2e4>)
 8003cb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003cbc:	bf94      	ite	ls
 8003cbe:	4698      	movls	r8, r3
 8003cc0:	4680      	movhi	r8, r0
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	6123      	str	r3, [r4, #16]
 8003cc6:	9b05      	ldr	r3, [sp, #20]
 8003cc8:	f023 0204 	bic.w	r2, r3, #4
 8003ccc:	6022      	str	r2, [r4, #0]
 8003cce:	f04f 0900 	mov.w	r9, #0
 8003cd2:	9700      	str	r7, [sp, #0]
 8003cd4:	4633      	mov	r3, r6
 8003cd6:	aa0b      	add	r2, sp, #44	; 0x2c
 8003cd8:	4621      	mov	r1, r4
 8003cda:	4628      	mov	r0, r5
 8003cdc:	f000 f9d8 	bl	8004090 <_printf_common>
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	f040 8090 	bne.w	8003e06 <_printf_float+0x1e2>
 8003ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cea:	b00d      	add	sp, #52	; 0x34
 8003cec:	ecbd 8b02 	vpop	{d8}
 8003cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf4:	4642      	mov	r2, r8
 8003cf6:	464b      	mov	r3, r9
 8003cf8:	4640      	mov	r0, r8
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	f7fc ff26 	bl	8000b4c <__aeabi_dcmpun>
 8003d00:	b140      	cbz	r0, 8003d14 <_printf_float+0xf0>
 8003d02:	464b      	mov	r3, r9
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bfbc      	itt	lt
 8003d08:	232d      	movlt	r3, #45	; 0x2d
 8003d0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003d0e:	487f      	ldr	r0, [pc, #508]	; (8003f0c <_printf_float+0x2e8>)
 8003d10:	4b7f      	ldr	r3, [pc, #508]	; (8003f10 <_printf_float+0x2ec>)
 8003d12:	e7d1      	b.n	8003cb8 <_printf_float+0x94>
 8003d14:	6863      	ldr	r3, [r4, #4]
 8003d16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003d1a:	9206      	str	r2, [sp, #24]
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	d13f      	bne.n	8003da0 <_printf_float+0x17c>
 8003d20:	2306      	movs	r3, #6
 8003d22:	6063      	str	r3, [r4, #4]
 8003d24:	9b05      	ldr	r3, [sp, #20]
 8003d26:	6861      	ldr	r1, [r4, #4]
 8003d28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	9303      	str	r3, [sp, #12]
 8003d30:	ab0a      	add	r3, sp, #40	; 0x28
 8003d32:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003d36:	ab09      	add	r3, sp, #36	; 0x24
 8003d38:	ec49 8b10 	vmov	d0, r8, r9
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	6022      	str	r2, [r4, #0]
 8003d40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003d44:	4628      	mov	r0, r5
 8003d46:	f7ff fecd 	bl	8003ae4 <__cvt>
 8003d4a:	9b06      	ldr	r3, [sp, #24]
 8003d4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d4e:	2b47      	cmp	r3, #71	; 0x47
 8003d50:	4680      	mov	r8, r0
 8003d52:	d108      	bne.n	8003d66 <_printf_float+0x142>
 8003d54:	1cc8      	adds	r0, r1, #3
 8003d56:	db02      	blt.n	8003d5e <_printf_float+0x13a>
 8003d58:	6863      	ldr	r3, [r4, #4]
 8003d5a:	4299      	cmp	r1, r3
 8003d5c:	dd41      	ble.n	8003de2 <_printf_float+0x1be>
 8003d5e:	f1ab 0b02 	sub.w	fp, fp, #2
 8003d62:	fa5f fb8b 	uxtb.w	fp, fp
 8003d66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003d6a:	d820      	bhi.n	8003dae <_printf_float+0x18a>
 8003d6c:	3901      	subs	r1, #1
 8003d6e:	465a      	mov	r2, fp
 8003d70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003d74:	9109      	str	r1, [sp, #36]	; 0x24
 8003d76:	f7ff ff17 	bl	8003ba8 <__exponent>
 8003d7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d7c:	1813      	adds	r3, r2, r0
 8003d7e:	2a01      	cmp	r2, #1
 8003d80:	4681      	mov	r9, r0
 8003d82:	6123      	str	r3, [r4, #16]
 8003d84:	dc02      	bgt.n	8003d8c <_printf_float+0x168>
 8003d86:	6822      	ldr	r2, [r4, #0]
 8003d88:	07d2      	lsls	r2, r2, #31
 8003d8a:	d501      	bpl.n	8003d90 <_printf_float+0x16c>
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	6123      	str	r3, [r4, #16]
 8003d90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d09c      	beq.n	8003cd2 <_printf_float+0xae>
 8003d98:	232d      	movs	r3, #45	; 0x2d
 8003d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d9e:	e798      	b.n	8003cd2 <_printf_float+0xae>
 8003da0:	9a06      	ldr	r2, [sp, #24]
 8003da2:	2a47      	cmp	r2, #71	; 0x47
 8003da4:	d1be      	bne.n	8003d24 <_printf_float+0x100>
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1bc      	bne.n	8003d24 <_printf_float+0x100>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e7b9      	b.n	8003d22 <_printf_float+0xfe>
 8003dae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003db2:	d118      	bne.n	8003de6 <_printf_float+0x1c2>
 8003db4:	2900      	cmp	r1, #0
 8003db6:	6863      	ldr	r3, [r4, #4]
 8003db8:	dd0b      	ble.n	8003dd2 <_printf_float+0x1ae>
 8003dba:	6121      	str	r1, [r4, #16]
 8003dbc:	b913      	cbnz	r3, 8003dc4 <_printf_float+0x1a0>
 8003dbe:	6822      	ldr	r2, [r4, #0]
 8003dc0:	07d0      	lsls	r0, r2, #31
 8003dc2:	d502      	bpl.n	8003dca <_printf_float+0x1a6>
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	440b      	add	r3, r1
 8003dc8:	6123      	str	r3, [r4, #16]
 8003dca:	65a1      	str	r1, [r4, #88]	; 0x58
 8003dcc:	f04f 0900 	mov.w	r9, #0
 8003dd0:	e7de      	b.n	8003d90 <_printf_float+0x16c>
 8003dd2:	b913      	cbnz	r3, 8003dda <_printf_float+0x1b6>
 8003dd4:	6822      	ldr	r2, [r4, #0]
 8003dd6:	07d2      	lsls	r2, r2, #31
 8003dd8:	d501      	bpl.n	8003dde <_printf_float+0x1ba>
 8003dda:	3302      	adds	r3, #2
 8003ddc:	e7f4      	b.n	8003dc8 <_printf_float+0x1a4>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e7f2      	b.n	8003dc8 <_printf_float+0x1a4>
 8003de2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003de8:	4299      	cmp	r1, r3
 8003dea:	db05      	blt.n	8003df8 <_printf_float+0x1d4>
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	6121      	str	r1, [r4, #16]
 8003df0:	07d8      	lsls	r0, r3, #31
 8003df2:	d5ea      	bpl.n	8003dca <_printf_float+0x1a6>
 8003df4:	1c4b      	adds	r3, r1, #1
 8003df6:	e7e7      	b.n	8003dc8 <_printf_float+0x1a4>
 8003df8:	2900      	cmp	r1, #0
 8003dfa:	bfd4      	ite	le
 8003dfc:	f1c1 0202 	rsble	r2, r1, #2
 8003e00:	2201      	movgt	r2, #1
 8003e02:	4413      	add	r3, r2
 8003e04:	e7e0      	b.n	8003dc8 <_printf_float+0x1a4>
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	055a      	lsls	r2, r3, #21
 8003e0a:	d407      	bmi.n	8003e1c <_printf_float+0x1f8>
 8003e0c:	6923      	ldr	r3, [r4, #16]
 8003e0e:	4642      	mov	r2, r8
 8003e10:	4631      	mov	r1, r6
 8003e12:	4628      	mov	r0, r5
 8003e14:	47b8      	blx	r7
 8003e16:	3001      	adds	r0, #1
 8003e18:	d12c      	bne.n	8003e74 <_printf_float+0x250>
 8003e1a:	e764      	b.n	8003ce6 <_printf_float+0xc2>
 8003e1c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003e20:	f240 80e0 	bls.w	8003fe4 <_printf_float+0x3c0>
 8003e24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f7fc fe5c 	bl	8000ae8 <__aeabi_dcmpeq>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	d034      	beq.n	8003e9e <_printf_float+0x27a>
 8003e34:	4a37      	ldr	r2, [pc, #220]	; (8003f14 <_printf_float+0x2f0>)
 8003e36:	2301      	movs	r3, #1
 8003e38:	4631      	mov	r1, r6
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	47b8      	blx	r7
 8003e3e:	3001      	adds	r0, #1
 8003e40:	f43f af51 	beq.w	8003ce6 <_printf_float+0xc2>
 8003e44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	db02      	blt.n	8003e52 <_printf_float+0x22e>
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	07d8      	lsls	r0, r3, #31
 8003e50:	d510      	bpl.n	8003e74 <_printf_float+0x250>
 8003e52:	ee18 3a10 	vmov	r3, s16
 8003e56:	4652      	mov	r2, sl
 8003e58:	4631      	mov	r1, r6
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	47b8      	blx	r7
 8003e5e:	3001      	adds	r0, #1
 8003e60:	f43f af41 	beq.w	8003ce6 <_printf_float+0xc2>
 8003e64:	f04f 0800 	mov.w	r8, #0
 8003e68:	f104 091a 	add.w	r9, r4, #26
 8003e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	4543      	cmp	r3, r8
 8003e72:	dc09      	bgt.n	8003e88 <_printf_float+0x264>
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	079b      	lsls	r3, r3, #30
 8003e78:	f100 8105 	bmi.w	8004086 <_printf_float+0x462>
 8003e7c:	68e0      	ldr	r0, [r4, #12]
 8003e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e80:	4298      	cmp	r0, r3
 8003e82:	bfb8      	it	lt
 8003e84:	4618      	movlt	r0, r3
 8003e86:	e730      	b.n	8003cea <_printf_float+0xc6>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	464a      	mov	r2, r9
 8003e8c:	4631      	mov	r1, r6
 8003e8e:	4628      	mov	r0, r5
 8003e90:	47b8      	blx	r7
 8003e92:	3001      	adds	r0, #1
 8003e94:	f43f af27 	beq.w	8003ce6 <_printf_float+0xc2>
 8003e98:	f108 0801 	add.w	r8, r8, #1
 8003e9c:	e7e6      	b.n	8003e6c <_printf_float+0x248>
 8003e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	dc39      	bgt.n	8003f18 <_printf_float+0x2f4>
 8003ea4:	4a1b      	ldr	r2, [pc, #108]	; (8003f14 <_printf_float+0x2f0>)
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	4631      	mov	r1, r6
 8003eaa:	4628      	mov	r0, r5
 8003eac:	47b8      	blx	r7
 8003eae:	3001      	adds	r0, #1
 8003eb0:	f43f af19 	beq.w	8003ce6 <_printf_float+0xc2>
 8003eb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	d102      	bne.n	8003ec2 <_printf_float+0x29e>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	07d9      	lsls	r1, r3, #31
 8003ec0:	d5d8      	bpl.n	8003e74 <_printf_float+0x250>
 8003ec2:	ee18 3a10 	vmov	r3, s16
 8003ec6:	4652      	mov	r2, sl
 8003ec8:	4631      	mov	r1, r6
 8003eca:	4628      	mov	r0, r5
 8003ecc:	47b8      	blx	r7
 8003ece:	3001      	adds	r0, #1
 8003ed0:	f43f af09 	beq.w	8003ce6 <_printf_float+0xc2>
 8003ed4:	f04f 0900 	mov.w	r9, #0
 8003ed8:	f104 0a1a 	add.w	sl, r4, #26
 8003edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ede:	425b      	negs	r3, r3
 8003ee0:	454b      	cmp	r3, r9
 8003ee2:	dc01      	bgt.n	8003ee8 <_printf_float+0x2c4>
 8003ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ee6:	e792      	b.n	8003e0e <_printf_float+0x1ea>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	4652      	mov	r2, sl
 8003eec:	4631      	mov	r1, r6
 8003eee:	4628      	mov	r0, r5
 8003ef0:	47b8      	blx	r7
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	f43f aef7 	beq.w	8003ce6 <_printf_float+0xc2>
 8003ef8:	f109 0901 	add.w	r9, r9, #1
 8003efc:	e7ee      	b.n	8003edc <_printf_float+0x2b8>
 8003efe:	bf00      	nop
 8003f00:	7fefffff 	.word	0x7fefffff
 8003f04:	08008420 	.word	0x08008420
 8003f08:	08008424 	.word	0x08008424
 8003f0c:	0800842c 	.word	0x0800842c
 8003f10:	08008428 	.word	0x08008428
 8003f14:	08008430 	.word	0x08008430
 8003f18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	bfa8      	it	ge
 8003f20:	461a      	movge	r2, r3
 8003f22:	2a00      	cmp	r2, #0
 8003f24:	4691      	mov	r9, r2
 8003f26:	dc37      	bgt.n	8003f98 <_printf_float+0x374>
 8003f28:	f04f 0b00 	mov.w	fp, #0
 8003f2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f30:	f104 021a 	add.w	r2, r4, #26
 8003f34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f36:	9305      	str	r3, [sp, #20]
 8003f38:	eba3 0309 	sub.w	r3, r3, r9
 8003f3c:	455b      	cmp	r3, fp
 8003f3e:	dc33      	bgt.n	8003fa8 <_printf_float+0x384>
 8003f40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f44:	429a      	cmp	r2, r3
 8003f46:	db3b      	blt.n	8003fc0 <_printf_float+0x39c>
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	07da      	lsls	r2, r3, #31
 8003f4c:	d438      	bmi.n	8003fc0 <_printf_float+0x39c>
 8003f4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f50:	9b05      	ldr	r3, [sp, #20]
 8003f52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	eba2 0901 	sub.w	r9, r2, r1
 8003f5a:	4599      	cmp	r9, r3
 8003f5c:	bfa8      	it	ge
 8003f5e:	4699      	movge	r9, r3
 8003f60:	f1b9 0f00 	cmp.w	r9, #0
 8003f64:	dc35      	bgt.n	8003fd2 <_printf_float+0x3ae>
 8003f66:	f04f 0800 	mov.w	r8, #0
 8003f6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f6e:	f104 0a1a 	add.w	sl, r4, #26
 8003f72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	eba3 0309 	sub.w	r3, r3, r9
 8003f7c:	4543      	cmp	r3, r8
 8003f7e:	f77f af79 	ble.w	8003e74 <_printf_float+0x250>
 8003f82:	2301      	movs	r3, #1
 8003f84:	4652      	mov	r2, sl
 8003f86:	4631      	mov	r1, r6
 8003f88:	4628      	mov	r0, r5
 8003f8a:	47b8      	blx	r7
 8003f8c:	3001      	adds	r0, #1
 8003f8e:	f43f aeaa 	beq.w	8003ce6 <_printf_float+0xc2>
 8003f92:	f108 0801 	add.w	r8, r8, #1
 8003f96:	e7ec      	b.n	8003f72 <_printf_float+0x34e>
 8003f98:	4613      	mov	r3, r2
 8003f9a:	4631      	mov	r1, r6
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	47b8      	blx	r7
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	d1c0      	bne.n	8003f28 <_printf_float+0x304>
 8003fa6:	e69e      	b.n	8003ce6 <_printf_float+0xc2>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	4631      	mov	r1, r6
 8003fac:	4628      	mov	r0, r5
 8003fae:	9205      	str	r2, [sp, #20]
 8003fb0:	47b8      	blx	r7
 8003fb2:	3001      	adds	r0, #1
 8003fb4:	f43f ae97 	beq.w	8003ce6 <_printf_float+0xc2>
 8003fb8:	9a05      	ldr	r2, [sp, #20]
 8003fba:	f10b 0b01 	add.w	fp, fp, #1
 8003fbe:	e7b9      	b.n	8003f34 <_printf_float+0x310>
 8003fc0:	ee18 3a10 	vmov	r3, s16
 8003fc4:	4652      	mov	r2, sl
 8003fc6:	4631      	mov	r1, r6
 8003fc8:	4628      	mov	r0, r5
 8003fca:	47b8      	blx	r7
 8003fcc:	3001      	adds	r0, #1
 8003fce:	d1be      	bne.n	8003f4e <_printf_float+0x32a>
 8003fd0:	e689      	b.n	8003ce6 <_printf_float+0xc2>
 8003fd2:	9a05      	ldr	r2, [sp, #20]
 8003fd4:	464b      	mov	r3, r9
 8003fd6:	4442      	add	r2, r8
 8003fd8:	4631      	mov	r1, r6
 8003fda:	4628      	mov	r0, r5
 8003fdc:	47b8      	blx	r7
 8003fde:	3001      	adds	r0, #1
 8003fe0:	d1c1      	bne.n	8003f66 <_printf_float+0x342>
 8003fe2:	e680      	b.n	8003ce6 <_printf_float+0xc2>
 8003fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fe6:	2a01      	cmp	r2, #1
 8003fe8:	dc01      	bgt.n	8003fee <_printf_float+0x3ca>
 8003fea:	07db      	lsls	r3, r3, #31
 8003fec:	d538      	bpl.n	8004060 <_printf_float+0x43c>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	4642      	mov	r2, r8
 8003ff2:	4631      	mov	r1, r6
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	47b8      	blx	r7
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	f43f ae74 	beq.w	8003ce6 <_printf_float+0xc2>
 8003ffe:	ee18 3a10 	vmov	r3, s16
 8004002:	4652      	mov	r2, sl
 8004004:	4631      	mov	r1, r6
 8004006:	4628      	mov	r0, r5
 8004008:	47b8      	blx	r7
 800400a:	3001      	adds	r0, #1
 800400c:	f43f ae6b 	beq.w	8003ce6 <_printf_float+0xc2>
 8004010:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004014:	2200      	movs	r2, #0
 8004016:	2300      	movs	r3, #0
 8004018:	f7fc fd66 	bl	8000ae8 <__aeabi_dcmpeq>
 800401c:	b9d8      	cbnz	r0, 8004056 <_printf_float+0x432>
 800401e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004020:	f108 0201 	add.w	r2, r8, #1
 8004024:	3b01      	subs	r3, #1
 8004026:	4631      	mov	r1, r6
 8004028:	4628      	mov	r0, r5
 800402a:	47b8      	blx	r7
 800402c:	3001      	adds	r0, #1
 800402e:	d10e      	bne.n	800404e <_printf_float+0x42a>
 8004030:	e659      	b.n	8003ce6 <_printf_float+0xc2>
 8004032:	2301      	movs	r3, #1
 8004034:	4652      	mov	r2, sl
 8004036:	4631      	mov	r1, r6
 8004038:	4628      	mov	r0, r5
 800403a:	47b8      	blx	r7
 800403c:	3001      	adds	r0, #1
 800403e:	f43f ae52 	beq.w	8003ce6 <_printf_float+0xc2>
 8004042:	f108 0801 	add.w	r8, r8, #1
 8004046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004048:	3b01      	subs	r3, #1
 800404a:	4543      	cmp	r3, r8
 800404c:	dcf1      	bgt.n	8004032 <_printf_float+0x40e>
 800404e:	464b      	mov	r3, r9
 8004050:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004054:	e6dc      	b.n	8003e10 <_printf_float+0x1ec>
 8004056:	f04f 0800 	mov.w	r8, #0
 800405a:	f104 0a1a 	add.w	sl, r4, #26
 800405e:	e7f2      	b.n	8004046 <_printf_float+0x422>
 8004060:	2301      	movs	r3, #1
 8004062:	4642      	mov	r2, r8
 8004064:	e7df      	b.n	8004026 <_printf_float+0x402>
 8004066:	2301      	movs	r3, #1
 8004068:	464a      	mov	r2, r9
 800406a:	4631      	mov	r1, r6
 800406c:	4628      	mov	r0, r5
 800406e:	47b8      	blx	r7
 8004070:	3001      	adds	r0, #1
 8004072:	f43f ae38 	beq.w	8003ce6 <_printf_float+0xc2>
 8004076:	f108 0801 	add.w	r8, r8, #1
 800407a:	68e3      	ldr	r3, [r4, #12]
 800407c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800407e:	1a5b      	subs	r3, r3, r1
 8004080:	4543      	cmp	r3, r8
 8004082:	dcf0      	bgt.n	8004066 <_printf_float+0x442>
 8004084:	e6fa      	b.n	8003e7c <_printf_float+0x258>
 8004086:	f04f 0800 	mov.w	r8, #0
 800408a:	f104 0919 	add.w	r9, r4, #25
 800408e:	e7f4      	b.n	800407a <_printf_float+0x456>

08004090 <_printf_common>:
 8004090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004094:	4616      	mov	r6, r2
 8004096:	4699      	mov	r9, r3
 8004098:	688a      	ldr	r2, [r1, #8]
 800409a:	690b      	ldr	r3, [r1, #16]
 800409c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040a0:	4293      	cmp	r3, r2
 80040a2:	bfb8      	it	lt
 80040a4:	4613      	movlt	r3, r2
 80040a6:	6033      	str	r3, [r6, #0]
 80040a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040ac:	4607      	mov	r7, r0
 80040ae:	460c      	mov	r4, r1
 80040b0:	b10a      	cbz	r2, 80040b6 <_printf_common+0x26>
 80040b2:	3301      	adds	r3, #1
 80040b4:	6033      	str	r3, [r6, #0]
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	0699      	lsls	r1, r3, #26
 80040ba:	bf42      	ittt	mi
 80040bc:	6833      	ldrmi	r3, [r6, #0]
 80040be:	3302      	addmi	r3, #2
 80040c0:	6033      	strmi	r3, [r6, #0]
 80040c2:	6825      	ldr	r5, [r4, #0]
 80040c4:	f015 0506 	ands.w	r5, r5, #6
 80040c8:	d106      	bne.n	80040d8 <_printf_common+0x48>
 80040ca:	f104 0a19 	add.w	sl, r4, #25
 80040ce:	68e3      	ldr	r3, [r4, #12]
 80040d0:	6832      	ldr	r2, [r6, #0]
 80040d2:	1a9b      	subs	r3, r3, r2
 80040d4:	42ab      	cmp	r3, r5
 80040d6:	dc26      	bgt.n	8004126 <_printf_common+0x96>
 80040d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040dc:	1e13      	subs	r3, r2, #0
 80040de:	6822      	ldr	r2, [r4, #0]
 80040e0:	bf18      	it	ne
 80040e2:	2301      	movne	r3, #1
 80040e4:	0692      	lsls	r2, r2, #26
 80040e6:	d42b      	bmi.n	8004140 <_printf_common+0xb0>
 80040e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040ec:	4649      	mov	r1, r9
 80040ee:	4638      	mov	r0, r7
 80040f0:	47c0      	blx	r8
 80040f2:	3001      	adds	r0, #1
 80040f4:	d01e      	beq.n	8004134 <_printf_common+0xa4>
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	68e5      	ldr	r5, [r4, #12]
 80040fa:	6832      	ldr	r2, [r6, #0]
 80040fc:	f003 0306 	and.w	r3, r3, #6
 8004100:	2b04      	cmp	r3, #4
 8004102:	bf08      	it	eq
 8004104:	1aad      	subeq	r5, r5, r2
 8004106:	68a3      	ldr	r3, [r4, #8]
 8004108:	6922      	ldr	r2, [r4, #16]
 800410a:	bf0c      	ite	eq
 800410c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004110:	2500      	movne	r5, #0
 8004112:	4293      	cmp	r3, r2
 8004114:	bfc4      	itt	gt
 8004116:	1a9b      	subgt	r3, r3, r2
 8004118:	18ed      	addgt	r5, r5, r3
 800411a:	2600      	movs	r6, #0
 800411c:	341a      	adds	r4, #26
 800411e:	42b5      	cmp	r5, r6
 8004120:	d11a      	bne.n	8004158 <_printf_common+0xc8>
 8004122:	2000      	movs	r0, #0
 8004124:	e008      	b.n	8004138 <_printf_common+0xa8>
 8004126:	2301      	movs	r3, #1
 8004128:	4652      	mov	r2, sl
 800412a:	4649      	mov	r1, r9
 800412c:	4638      	mov	r0, r7
 800412e:	47c0      	blx	r8
 8004130:	3001      	adds	r0, #1
 8004132:	d103      	bne.n	800413c <_printf_common+0xac>
 8004134:	f04f 30ff 	mov.w	r0, #4294967295
 8004138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800413c:	3501      	adds	r5, #1
 800413e:	e7c6      	b.n	80040ce <_printf_common+0x3e>
 8004140:	18e1      	adds	r1, r4, r3
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	2030      	movs	r0, #48	; 0x30
 8004146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800414a:	4422      	add	r2, r4
 800414c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004154:	3302      	adds	r3, #2
 8004156:	e7c7      	b.n	80040e8 <_printf_common+0x58>
 8004158:	2301      	movs	r3, #1
 800415a:	4622      	mov	r2, r4
 800415c:	4649      	mov	r1, r9
 800415e:	4638      	mov	r0, r7
 8004160:	47c0      	blx	r8
 8004162:	3001      	adds	r0, #1
 8004164:	d0e6      	beq.n	8004134 <_printf_common+0xa4>
 8004166:	3601      	adds	r6, #1
 8004168:	e7d9      	b.n	800411e <_printf_common+0x8e>
	...

0800416c <_printf_i>:
 800416c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004170:	460c      	mov	r4, r1
 8004172:	4691      	mov	r9, r2
 8004174:	7e27      	ldrb	r7, [r4, #24]
 8004176:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004178:	2f78      	cmp	r7, #120	; 0x78
 800417a:	4680      	mov	r8, r0
 800417c:	469a      	mov	sl, r3
 800417e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004182:	d807      	bhi.n	8004194 <_printf_i+0x28>
 8004184:	2f62      	cmp	r7, #98	; 0x62
 8004186:	d80a      	bhi.n	800419e <_printf_i+0x32>
 8004188:	2f00      	cmp	r7, #0
 800418a:	f000 80d8 	beq.w	800433e <_printf_i+0x1d2>
 800418e:	2f58      	cmp	r7, #88	; 0x58
 8004190:	f000 80a3 	beq.w	80042da <_printf_i+0x16e>
 8004194:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800419c:	e03a      	b.n	8004214 <_printf_i+0xa8>
 800419e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041a2:	2b15      	cmp	r3, #21
 80041a4:	d8f6      	bhi.n	8004194 <_printf_i+0x28>
 80041a6:	a001      	add	r0, pc, #4	; (adr r0, 80041ac <_printf_i+0x40>)
 80041a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80041ac:	08004205 	.word	0x08004205
 80041b0:	08004219 	.word	0x08004219
 80041b4:	08004195 	.word	0x08004195
 80041b8:	08004195 	.word	0x08004195
 80041bc:	08004195 	.word	0x08004195
 80041c0:	08004195 	.word	0x08004195
 80041c4:	08004219 	.word	0x08004219
 80041c8:	08004195 	.word	0x08004195
 80041cc:	08004195 	.word	0x08004195
 80041d0:	08004195 	.word	0x08004195
 80041d4:	08004195 	.word	0x08004195
 80041d8:	08004325 	.word	0x08004325
 80041dc:	08004249 	.word	0x08004249
 80041e0:	08004307 	.word	0x08004307
 80041e4:	08004195 	.word	0x08004195
 80041e8:	08004195 	.word	0x08004195
 80041ec:	08004347 	.word	0x08004347
 80041f0:	08004195 	.word	0x08004195
 80041f4:	08004249 	.word	0x08004249
 80041f8:	08004195 	.word	0x08004195
 80041fc:	08004195 	.word	0x08004195
 8004200:	0800430f 	.word	0x0800430f
 8004204:	680b      	ldr	r3, [r1, #0]
 8004206:	1d1a      	adds	r2, r3, #4
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	600a      	str	r2, [r1, #0]
 800420c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004214:	2301      	movs	r3, #1
 8004216:	e0a3      	b.n	8004360 <_printf_i+0x1f4>
 8004218:	6825      	ldr	r5, [r4, #0]
 800421a:	6808      	ldr	r0, [r1, #0]
 800421c:	062e      	lsls	r6, r5, #24
 800421e:	f100 0304 	add.w	r3, r0, #4
 8004222:	d50a      	bpl.n	800423a <_printf_i+0xce>
 8004224:	6805      	ldr	r5, [r0, #0]
 8004226:	600b      	str	r3, [r1, #0]
 8004228:	2d00      	cmp	r5, #0
 800422a:	da03      	bge.n	8004234 <_printf_i+0xc8>
 800422c:	232d      	movs	r3, #45	; 0x2d
 800422e:	426d      	negs	r5, r5
 8004230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004234:	485e      	ldr	r0, [pc, #376]	; (80043b0 <_printf_i+0x244>)
 8004236:	230a      	movs	r3, #10
 8004238:	e019      	b.n	800426e <_printf_i+0x102>
 800423a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800423e:	6805      	ldr	r5, [r0, #0]
 8004240:	600b      	str	r3, [r1, #0]
 8004242:	bf18      	it	ne
 8004244:	b22d      	sxthne	r5, r5
 8004246:	e7ef      	b.n	8004228 <_printf_i+0xbc>
 8004248:	680b      	ldr	r3, [r1, #0]
 800424a:	6825      	ldr	r5, [r4, #0]
 800424c:	1d18      	adds	r0, r3, #4
 800424e:	6008      	str	r0, [r1, #0]
 8004250:	0628      	lsls	r0, r5, #24
 8004252:	d501      	bpl.n	8004258 <_printf_i+0xec>
 8004254:	681d      	ldr	r5, [r3, #0]
 8004256:	e002      	b.n	800425e <_printf_i+0xf2>
 8004258:	0669      	lsls	r1, r5, #25
 800425a:	d5fb      	bpl.n	8004254 <_printf_i+0xe8>
 800425c:	881d      	ldrh	r5, [r3, #0]
 800425e:	4854      	ldr	r0, [pc, #336]	; (80043b0 <_printf_i+0x244>)
 8004260:	2f6f      	cmp	r7, #111	; 0x6f
 8004262:	bf0c      	ite	eq
 8004264:	2308      	moveq	r3, #8
 8004266:	230a      	movne	r3, #10
 8004268:	2100      	movs	r1, #0
 800426a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800426e:	6866      	ldr	r6, [r4, #4]
 8004270:	60a6      	str	r6, [r4, #8]
 8004272:	2e00      	cmp	r6, #0
 8004274:	bfa2      	ittt	ge
 8004276:	6821      	ldrge	r1, [r4, #0]
 8004278:	f021 0104 	bicge.w	r1, r1, #4
 800427c:	6021      	strge	r1, [r4, #0]
 800427e:	b90d      	cbnz	r5, 8004284 <_printf_i+0x118>
 8004280:	2e00      	cmp	r6, #0
 8004282:	d04d      	beq.n	8004320 <_printf_i+0x1b4>
 8004284:	4616      	mov	r6, r2
 8004286:	fbb5 f1f3 	udiv	r1, r5, r3
 800428a:	fb03 5711 	mls	r7, r3, r1, r5
 800428e:	5dc7      	ldrb	r7, [r0, r7]
 8004290:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004294:	462f      	mov	r7, r5
 8004296:	42bb      	cmp	r3, r7
 8004298:	460d      	mov	r5, r1
 800429a:	d9f4      	bls.n	8004286 <_printf_i+0x11a>
 800429c:	2b08      	cmp	r3, #8
 800429e:	d10b      	bne.n	80042b8 <_printf_i+0x14c>
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	07df      	lsls	r7, r3, #31
 80042a4:	d508      	bpl.n	80042b8 <_printf_i+0x14c>
 80042a6:	6923      	ldr	r3, [r4, #16]
 80042a8:	6861      	ldr	r1, [r4, #4]
 80042aa:	4299      	cmp	r1, r3
 80042ac:	bfde      	ittt	le
 80042ae:	2330      	movle	r3, #48	; 0x30
 80042b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042b8:	1b92      	subs	r2, r2, r6
 80042ba:	6122      	str	r2, [r4, #16]
 80042bc:	f8cd a000 	str.w	sl, [sp]
 80042c0:	464b      	mov	r3, r9
 80042c2:	aa03      	add	r2, sp, #12
 80042c4:	4621      	mov	r1, r4
 80042c6:	4640      	mov	r0, r8
 80042c8:	f7ff fee2 	bl	8004090 <_printf_common>
 80042cc:	3001      	adds	r0, #1
 80042ce:	d14c      	bne.n	800436a <_printf_i+0x1fe>
 80042d0:	f04f 30ff 	mov.w	r0, #4294967295
 80042d4:	b004      	add	sp, #16
 80042d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042da:	4835      	ldr	r0, [pc, #212]	; (80043b0 <_printf_i+0x244>)
 80042dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	680e      	ldr	r6, [r1, #0]
 80042e4:	061f      	lsls	r7, r3, #24
 80042e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80042ea:	600e      	str	r6, [r1, #0]
 80042ec:	d514      	bpl.n	8004318 <_printf_i+0x1ac>
 80042ee:	07d9      	lsls	r1, r3, #31
 80042f0:	bf44      	itt	mi
 80042f2:	f043 0320 	orrmi.w	r3, r3, #32
 80042f6:	6023      	strmi	r3, [r4, #0]
 80042f8:	b91d      	cbnz	r5, 8004302 <_printf_i+0x196>
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	f023 0320 	bic.w	r3, r3, #32
 8004300:	6023      	str	r3, [r4, #0]
 8004302:	2310      	movs	r3, #16
 8004304:	e7b0      	b.n	8004268 <_printf_i+0xfc>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	f043 0320 	orr.w	r3, r3, #32
 800430c:	6023      	str	r3, [r4, #0]
 800430e:	2378      	movs	r3, #120	; 0x78
 8004310:	4828      	ldr	r0, [pc, #160]	; (80043b4 <_printf_i+0x248>)
 8004312:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004316:	e7e3      	b.n	80042e0 <_printf_i+0x174>
 8004318:	065e      	lsls	r6, r3, #25
 800431a:	bf48      	it	mi
 800431c:	b2ad      	uxthmi	r5, r5
 800431e:	e7e6      	b.n	80042ee <_printf_i+0x182>
 8004320:	4616      	mov	r6, r2
 8004322:	e7bb      	b.n	800429c <_printf_i+0x130>
 8004324:	680b      	ldr	r3, [r1, #0]
 8004326:	6826      	ldr	r6, [r4, #0]
 8004328:	6960      	ldr	r0, [r4, #20]
 800432a:	1d1d      	adds	r5, r3, #4
 800432c:	600d      	str	r5, [r1, #0]
 800432e:	0635      	lsls	r5, r6, #24
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	d501      	bpl.n	8004338 <_printf_i+0x1cc>
 8004334:	6018      	str	r0, [r3, #0]
 8004336:	e002      	b.n	800433e <_printf_i+0x1d2>
 8004338:	0671      	lsls	r1, r6, #25
 800433a:	d5fb      	bpl.n	8004334 <_printf_i+0x1c8>
 800433c:	8018      	strh	r0, [r3, #0]
 800433e:	2300      	movs	r3, #0
 8004340:	6123      	str	r3, [r4, #16]
 8004342:	4616      	mov	r6, r2
 8004344:	e7ba      	b.n	80042bc <_printf_i+0x150>
 8004346:	680b      	ldr	r3, [r1, #0]
 8004348:	1d1a      	adds	r2, r3, #4
 800434a:	600a      	str	r2, [r1, #0]
 800434c:	681e      	ldr	r6, [r3, #0]
 800434e:	6862      	ldr	r2, [r4, #4]
 8004350:	2100      	movs	r1, #0
 8004352:	4630      	mov	r0, r6
 8004354:	f7fb ff54 	bl	8000200 <memchr>
 8004358:	b108      	cbz	r0, 800435e <_printf_i+0x1f2>
 800435a:	1b80      	subs	r0, r0, r6
 800435c:	6060      	str	r0, [r4, #4]
 800435e:	6863      	ldr	r3, [r4, #4]
 8004360:	6123      	str	r3, [r4, #16]
 8004362:	2300      	movs	r3, #0
 8004364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004368:	e7a8      	b.n	80042bc <_printf_i+0x150>
 800436a:	6923      	ldr	r3, [r4, #16]
 800436c:	4632      	mov	r2, r6
 800436e:	4649      	mov	r1, r9
 8004370:	4640      	mov	r0, r8
 8004372:	47d0      	blx	sl
 8004374:	3001      	adds	r0, #1
 8004376:	d0ab      	beq.n	80042d0 <_printf_i+0x164>
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	079b      	lsls	r3, r3, #30
 800437c:	d413      	bmi.n	80043a6 <_printf_i+0x23a>
 800437e:	68e0      	ldr	r0, [r4, #12]
 8004380:	9b03      	ldr	r3, [sp, #12]
 8004382:	4298      	cmp	r0, r3
 8004384:	bfb8      	it	lt
 8004386:	4618      	movlt	r0, r3
 8004388:	e7a4      	b.n	80042d4 <_printf_i+0x168>
 800438a:	2301      	movs	r3, #1
 800438c:	4632      	mov	r2, r6
 800438e:	4649      	mov	r1, r9
 8004390:	4640      	mov	r0, r8
 8004392:	47d0      	blx	sl
 8004394:	3001      	adds	r0, #1
 8004396:	d09b      	beq.n	80042d0 <_printf_i+0x164>
 8004398:	3501      	adds	r5, #1
 800439a:	68e3      	ldr	r3, [r4, #12]
 800439c:	9903      	ldr	r1, [sp, #12]
 800439e:	1a5b      	subs	r3, r3, r1
 80043a0:	42ab      	cmp	r3, r5
 80043a2:	dcf2      	bgt.n	800438a <_printf_i+0x21e>
 80043a4:	e7eb      	b.n	800437e <_printf_i+0x212>
 80043a6:	2500      	movs	r5, #0
 80043a8:	f104 0619 	add.w	r6, r4, #25
 80043ac:	e7f5      	b.n	800439a <_printf_i+0x22e>
 80043ae:	bf00      	nop
 80043b0:	08008432 	.word	0x08008432
 80043b4:	08008443 	.word	0x08008443

080043b8 <_scanf_float>:
 80043b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043bc:	b087      	sub	sp, #28
 80043be:	4617      	mov	r7, r2
 80043c0:	9303      	str	r3, [sp, #12]
 80043c2:	688b      	ldr	r3, [r1, #8]
 80043c4:	1e5a      	subs	r2, r3, #1
 80043c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80043ca:	bf83      	ittte	hi
 80043cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80043d0:	195b      	addhi	r3, r3, r5
 80043d2:	9302      	strhi	r3, [sp, #8]
 80043d4:	2300      	movls	r3, #0
 80043d6:	bf86      	itte	hi
 80043d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80043dc:	608b      	strhi	r3, [r1, #8]
 80043de:	9302      	strls	r3, [sp, #8]
 80043e0:	680b      	ldr	r3, [r1, #0]
 80043e2:	468b      	mov	fp, r1
 80043e4:	2500      	movs	r5, #0
 80043e6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80043ea:	f84b 3b1c 	str.w	r3, [fp], #28
 80043ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80043f2:	4680      	mov	r8, r0
 80043f4:	460c      	mov	r4, r1
 80043f6:	465e      	mov	r6, fp
 80043f8:	46aa      	mov	sl, r5
 80043fa:	46a9      	mov	r9, r5
 80043fc:	9501      	str	r5, [sp, #4]
 80043fe:	68a2      	ldr	r2, [r4, #8]
 8004400:	b152      	cbz	r2, 8004418 <_scanf_float+0x60>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b4e      	cmp	r3, #78	; 0x4e
 8004408:	d864      	bhi.n	80044d4 <_scanf_float+0x11c>
 800440a:	2b40      	cmp	r3, #64	; 0x40
 800440c:	d83c      	bhi.n	8004488 <_scanf_float+0xd0>
 800440e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004412:	b2c8      	uxtb	r0, r1
 8004414:	280e      	cmp	r0, #14
 8004416:	d93a      	bls.n	800448e <_scanf_float+0xd6>
 8004418:	f1b9 0f00 	cmp.w	r9, #0
 800441c:	d003      	beq.n	8004426 <_scanf_float+0x6e>
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	f10a 3aff 	add.w	sl, sl, #4294967295
 800442a:	f1ba 0f01 	cmp.w	sl, #1
 800442e:	f200 8113 	bhi.w	8004658 <_scanf_float+0x2a0>
 8004432:	455e      	cmp	r6, fp
 8004434:	f200 8105 	bhi.w	8004642 <_scanf_float+0x28a>
 8004438:	2501      	movs	r5, #1
 800443a:	4628      	mov	r0, r5
 800443c:	b007      	add	sp, #28
 800443e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004442:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004446:	2a0d      	cmp	r2, #13
 8004448:	d8e6      	bhi.n	8004418 <_scanf_float+0x60>
 800444a:	a101      	add	r1, pc, #4	; (adr r1, 8004450 <_scanf_float+0x98>)
 800444c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004450:	0800458f 	.word	0x0800458f
 8004454:	08004419 	.word	0x08004419
 8004458:	08004419 	.word	0x08004419
 800445c:	08004419 	.word	0x08004419
 8004460:	080045ef 	.word	0x080045ef
 8004464:	080045c7 	.word	0x080045c7
 8004468:	08004419 	.word	0x08004419
 800446c:	08004419 	.word	0x08004419
 8004470:	0800459d 	.word	0x0800459d
 8004474:	08004419 	.word	0x08004419
 8004478:	08004419 	.word	0x08004419
 800447c:	08004419 	.word	0x08004419
 8004480:	08004419 	.word	0x08004419
 8004484:	08004555 	.word	0x08004555
 8004488:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800448c:	e7db      	b.n	8004446 <_scanf_float+0x8e>
 800448e:	290e      	cmp	r1, #14
 8004490:	d8c2      	bhi.n	8004418 <_scanf_float+0x60>
 8004492:	a001      	add	r0, pc, #4	; (adr r0, 8004498 <_scanf_float+0xe0>)
 8004494:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004498:	08004547 	.word	0x08004547
 800449c:	08004419 	.word	0x08004419
 80044a0:	08004547 	.word	0x08004547
 80044a4:	080045db 	.word	0x080045db
 80044a8:	08004419 	.word	0x08004419
 80044ac:	080044f5 	.word	0x080044f5
 80044b0:	08004531 	.word	0x08004531
 80044b4:	08004531 	.word	0x08004531
 80044b8:	08004531 	.word	0x08004531
 80044bc:	08004531 	.word	0x08004531
 80044c0:	08004531 	.word	0x08004531
 80044c4:	08004531 	.word	0x08004531
 80044c8:	08004531 	.word	0x08004531
 80044cc:	08004531 	.word	0x08004531
 80044d0:	08004531 	.word	0x08004531
 80044d4:	2b6e      	cmp	r3, #110	; 0x6e
 80044d6:	d809      	bhi.n	80044ec <_scanf_float+0x134>
 80044d8:	2b60      	cmp	r3, #96	; 0x60
 80044da:	d8b2      	bhi.n	8004442 <_scanf_float+0x8a>
 80044dc:	2b54      	cmp	r3, #84	; 0x54
 80044de:	d077      	beq.n	80045d0 <_scanf_float+0x218>
 80044e0:	2b59      	cmp	r3, #89	; 0x59
 80044e2:	d199      	bne.n	8004418 <_scanf_float+0x60>
 80044e4:	2d07      	cmp	r5, #7
 80044e6:	d197      	bne.n	8004418 <_scanf_float+0x60>
 80044e8:	2508      	movs	r5, #8
 80044ea:	e029      	b.n	8004540 <_scanf_float+0x188>
 80044ec:	2b74      	cmp	r3, #116	; 0x74
 80044ee:	d06f      	beq.n	80045d0 <_scanf_float+0x218>
 80044f0:	2b79      	cmp	r3, #121	; 0x79
 80044f2:	e7f6      	b.n	80044e2 <_scanf_float+0x12a>
 80044f4:	6821      	ldr	r1, [r4, #0]
 80044f6:	05c8      	lsls	r0, r1, #23
 80044f8:	d51a      	bpl.n	8004530 <_scanf_float+0x178>
 80044fa:	9b02      	ldr	r3, [sp, #8]
 80044fc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004500:	6021      	str	r1, [r4, #0]
 8004502:	f109 0901 	add.w	r9, r9, #1
 8004506:	b11b      	cbz	r3, 8004510 <_scanf_float+0x158>
 8004508:	3b01      	subs	r3, #1
 800450a:	3201      	adds	r2, #1
 800450c:	9302      	str	r3, [sp, #8]
 800450e:	60a2      	str	r2, [r4, #8]
 8004510:	68a3      	ldr	r3, [r4, #8]
 8004512:	3b01      	subs	r3, #1
 8004514:	60a3      	str	r3, [r4, #8]
 8004516:	6923      	ldr	r3, [r4, #16]
 8004518:	3301      	adds	r3, #1
 800451a:	6123      	str	r3, [r4, #16]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3b01      	subs	r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	607b      	str	r3, [r7, #4]
 8004524:	f340 8084 	ble.w	8004630 <_scanf_float+0x278>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	3301      	adds	r3, #1
 800452c:	603b      	str	r3, [r7, #0]
 800452e:	e766      	b.n	80043fe <_scanf_float+0x46>
 8004530:	eb1a 0f05 	cmn.w	sl, r5
 8004534:	f47f af70 	bne.w	8004418 <_scanf_float+0x60>
 8004538:	6822      	ldr	r2, [r4, #0]
 800453a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800453e:	6022      	str	r2, [r4, #0]
 8004540:	f806 3b01 	strb.w	r3, [r6], #1
 8004544:	e7e4      	b.n	8004510 <_scanf_float+0x158>
 8004546:	6822      	ldr	r2, [r4, #0]
 8004548:	0610      	lsls	r0, r2, #24
 800454a:	f57f af65 	bpl.w	8004418 <_scanf_float+0x60>
 800454e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004552:	e7f4      	b.n	800453e <_scanf_float+0x186>
 8004554:	f1ba 0f00 	cmp.w	sl, #0
 8004558:	d10e      	bne.n	8004578 <_scanf_float+0x1c0>
 800455a:	f1b9 0f00 	cmp.w	r9, #0
 800455e:	d10e      	bne.n	800457e <_scanf_float+0x1c6>
 8004560:	6822      	ldr	r2, [r4, #0]
 8004562:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004566:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800456a:	d108      	bne.n	800457e <_scanf_float+0x1c6>
 800456c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004570:	6022      	str	r2, [r4, #0]
 8004572:	f04f 0a01 	mov.w	sl, #1
 8004576:	e7e3      	b.n	8004540 <_scanf_float+0x188>
 8004578:	f1ba 0f02 	cmp.w	sl, #2
 800457c:	d055      	beq.n	800462a <_scanf_float+0x272>
 800457e:	2d01      	cmp	r5, #1
 8004580:	d002      	beq.n	8004588 <_scanf_float+0x1d0>
 8004582:	2d04      	cmp	r5, #4
 8004584:	f47f af48 	bne.w	8004418 <_scanf_float+0x60>
 8004588:	3501      	adds	r5, #1
 800458a:	b2ed      	uxtb	r5, r5
 800458c:	e7d8      	b.n	8004540 <_scanf_float+0x188>
 800458e:	f1ba 0f01 	cmp.w	sl, #1
 8004592:	f47f af41 	bne.w	8004418 <_scanf_float+0x60>
 8004596:	f04f 0a02 	mov.w	sl, #2
 800459a:	e7d1      	b.n	8004540 <_scanf_float+0x188>
 800459c:	b97d      	cbnz	r5, 80045be <_scanf_float+0x206>
 800459e:	f1b9 0f00 	cmp.w	r9, #0
 80045a2:	f47f af3c 	bne.w	800441e <_scanf_float+0x66>
 80045a6:	6822      	ldr	r2, [r4, #0]
 80045a8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80045ac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80045b0:	f47f af39 	bne.w	8004426 <_scanf_float+0x6e>
 80045b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80045b8:	6022      	str	r2, [r4, #0]
 80045ba:	2501      	movs	r5, #1
 80045bc:	e7c0      	b.n	8004540 <_scanf_float+0x188>
 80045be:	2d03      	cmp	r5, #3
 80045c0:	d0e2      	beq.n	8004588 <_scanf_float+0x1d0>
 80045c2:	2d05      	cmp	r5, #5
 80045c4:	e7de      	b.n	8004584 <_scanf_float+0x1cc>
 80045c6:	2d02      	cmp	r5, #2
 80045c8:	f47f af26 	bne.w	8004418 <_scanf_float+0x60>
 80045cc:	2503      	movs	r5, #3
 80045ce:	e7b7      	b.n	8004540 <_scanf_float+0x188>
 80045d0:	2d06      	cmp	r5, #6
 80045d2:	f47f af21 	bne.w	8004418 <_scanf_float+0x60>
 80045d6:	2507      	movs	r5, #7
 80045d8:	e7b2      	b.n	8004540 <_scanf_float+0x188>
 80045da:	6822      	ldr	r2, [r4, #0]
 80045dc:	0591      	lsls	r1, r2, #22
 80045de:	f57f af1b 	bpl.w	8004418 <_scanf_float+0x60>
 80045e2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80045e6:	6022      	str	r2, [r4, #0]
 80045e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80045ec:	e7a8      	b.n	8004540 <_scanf_float+0x188>
 80045ee:	6822      	ldr	r2, [r4, #0]
 80045f0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80045f4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80045f8:	d006      	beq.n	8004608 <_scanf_float+0x250>
 80045fa:	0550      	lsls	r0, r2, #21
 80045fc:	f57f af0c 	bpl.w	8004418 <_scanf_float+0x60>
 8004600:	f1b9 0f00 	cmp.w	r9, #0
 8004604:	f43f af0f 	beq.w	8004426 <_scanf_float+0x6e>
 8004608:	0591      	lsls	r1, r2, #22
 800460a:	bf58      	it	pl
 800460c:	9901      	ldrpl	r1, [sp, #4]
 800460e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004612:	bf58      	it	pl
 8004614:	eba9 0101 	subpl.w	r1, r9, r1
 8004618:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800461c:	bf58      	it	pl
 800461e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004622:	6022      	str	r2, [r4, #0]
 8004624:	f04f 0900 	mov.w	r9, #0
 8004628:	e78a      	b.n	8004540 <_scanf_float+0x188>
 800462a:	f04f 0a03 	mov.w	sl, #3
 800462e:	e787      	b.n	8004540 <_scanf_float+0x188>
 8004630:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004634:	4639      	mov	r1, r7
 8004636:	4640      	mov	r0, r8
 8004638:	4798      	blx	r3
 800463a:	2800      	cmp	r0, #0
 800463c:	f43f aedf 	beq.w	80043fe <_scanf_float+0x46>
 8004640:	e6ea      	b.n	8004418 <_scanf_float+0x60>
 8004642:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004646:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800464a:	463a      	mov	r2, r7
 800464c:	4640      	mov	r0, r8
 800464e:	4798      	blx	r3
 8004650:	6923      	ldr	r3, [r4, #16]
 8004652:	3b01      	subs	r3, #1
 8004654:	6123      	str	r3, [r4, #16]
 8004656:	e6ec      	b.n	8004432 <_scanf_float+0x7a>
 8004658:	1e6b      	subs	r3, r5, #1
 800465a:	2b06      	cmp	r3, #6
 800465c:	d825      	bhi.n	80046aa <_scanf_float+0x2f2>
 800465e:	2d02      	cmp	r5, #2
 8004660:	d836      	bhi.n	80046d0 <_scanf_float+0x318>
 8004662:	455e      	cmp	r6, fp
 8004664:	f67f aee8 	bls.w	8004438 <_scanf_float+0x80>
 8004668:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800466c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004670:	463a      	mov	r2, r7
 8004672:	4640      	mov	r0, r8
 8004674:	4798      	blx	r3
 8004676:	6923      	ldr	r3, [r4, #16]
 8004678:	3b01      	subs	r3, #1
 800467a:	6123      	str	r3, [r4, #16]
 800467c:	e7f1      	b.n	8004662 <_scanf_float+0x2aa>
 800467e:	9802      	ldr	r0, [sp, #8]
 8004680:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004684:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004688:	9002      	str	r0, [sp, #8]
 800468a:	463a      	mov	r2, r7
 800468c:	4640      	mov	r0, r8
 800468e:	4798      	blx	r3
 8004690:	6923      	ldr	r3, [r4, #16]
 8004692:	3b01      	subs	r3, #1
 8004694:	6123      	str	r3, [r4, #16]
 8004696:	f10a 3aff 	add.w	sl, sl, #4294967295
 800469a:	fa5f fa8a 	uxtb.w	sl, sl
 800469e:	f1ba 0f02 	cmp.w	sl, #2
 80046a2:	d1ec      	bne.n	800467e <_scanf_float+0x2c6>
 80046a4:	3d03      	subs	r5, #3
 80046a6:	b2ed      	uxtb	r5, r5
 80046a8:	1b76      	subs	r6, r6, r5
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	05da      	lsls	r2, r3, #23
 80046ae:	d52f      	bpl.n	8004710 <_scanf_float+0x358>
 80046b0:	055b      	lsls	r3, r3, #21
 80046b2:	d510      	bpl.n	80046d6 <_scanf_float+0x31e>
 80046b4:	455e      	cmp	r6, fp
 80046b6:	f67f aebf 	bls.w	8004438 <_scanf_float+0x80>
 80046ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80046c2:	463a      	mov	r2, r7
 80046c4:	4640      	mov	r0, r8
 80046c6:	4798      	blx	r3
 80046c8:	6923      	ldr	r3, [r4, #16]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	6123      	str	r3, [r4, #16]
 80046ce:	e7f1      	b.n	80046b4 <_scanf_float+0x2fc>
 80046d0:	46aa      	mov	sl, r5
 80046d2:	9602      	str	r6, [sp, #8]
 80046d4:	e7df      	b.n	8004696 <_scanf_float+0x2de>
 80046d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80046da:	6923      	ldr	r3, [r4, #16]
 80046dc:	2965      	cmp	r1, #101	; 0x65
 80046de:	f103 33ff 	add.w	r3, r3, #4294967295
 80046e2:	f106 35ff 	add.w	r5, r6, #4294967295
 80046e6:	6123      	str	r3, [r4, #16]
 80046e8:	d00c      	beq.n	8004704 <_scanf_float+0x34c>
 80046ea:	2945      	cmp	r1, #69	; 0x45
 80046ec:	d00a      	beq.n	8004704 <_scanf_float+0x34c>
 80046ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046f2:	463a      	mov	r2, r7
 80046f4:	4640      	mov	r0, r8
 80046f6:	4798      	blx	r3
 80046f8:	6923      	ldr	r3, [r4, #16]
 80046fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80046fe:	3b01      	subs	r3, #1
 8004700:	1eb5      	subs	r5, r6, #2
 8004702:	6123      	str	r3, [r4, #16]
 8004704:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004708:	463a      	mov	r2, r7
 800470a:	4640      	mov	r0, r8
 800470c:	4798      	blx	r3
 800470e:	462e      	mov	r6, r5
 8004710:	6825      	ldr	r5, [r4, #0]
 8004712:	f015 0510 	ands.w	r5, r5, #16
 8004716:	d158      	bne.n	80047ca <_scanf_float+0x412>
 8004718:	7035      	strb	r5, [r6, #0]
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004724:	d11c      	bne.n	8004760 <_scanf_float+0x3a8>
 8004726:	9b01      	ldr	r3, [sp, #4]
 8004728:	454b      	cmp	r3, r9
 800472a:	eba3 0209 	sub.w	r2, r3, r9
 800472e:	d124      	bne.n	800477a <_scanf_float+0x3c2>
 8004730:	2200      	movs	r2, #0
 8004732:	4659      	mov	r1, fp
 8004734:	4640      	mov	r0, r8
 8004736:	f000 febd 	bl	80054b4 <_strtod_r>
 800473a:	9b03      	ldr	r3, [sp, #12]
 800473c:	6821      	ldr	r1, [r4, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f011 0f02 	tst.w	r1, #2
 8004744:	ec57 6b10 	vmov	r6, r7, d0
 8004748:	f103 0204 	add.w	r2, r3, #4
 800474c:	d020      	beq.n	8004790 <_scanf_float+0x3d8>
 800474e:	9903      	ldr	r1, [sp, #12]
 8004750:	600a      	str	r2, [r1, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	e9c3 6700 	strd	r6, r7, [r3]
 8004758:	68e3      	ldr	r3, [r4, #12]
 800475a:	3301      	adds	r3, #1
 800475c:	60e3      	str	r3, [r4, #12]
 800475e:	e66c      	b.n	800443a <_scanf_float+0x82>
 8004760:	9b04      	ldr	r3, [sp, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0e4      	beq.n	8004730 <_scanf_float+0x378>
 8004766:	9905      	ldr	r1, [sp, #20]
 8004768:	230a      	movs	r3, #10
 800476a:	462a      	mov	r2, r5
 800476c:	3101      	adds	r1, #1
 800476e:	4640      	mov	r0, r8
 8004770:	f000 ff2a 	bl	80055c8 <_strtol_r>
 8004774:	9b04      	ldr	r3, [sp, #16]
 8004776:	9e05      	ldr	r6, [sp, #20]
 8004778:	1ac2      	subs	r2, r0, r3
 800477a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800477e:	429e      	cmp	r6, r3
 8004780:	bf28      	it	cs
 8004782:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004786:	4912      	ldr	r1, [pc, #72]	; (80047d0 <_scanf_float+0x418>)
 8004788:	4630      	mov	r0, r6
 800478a:	f000 f82b 	bl	80047e4 <siprintf>
 800478e:	e7cf      	b.n	8004730 <_scanf_float+0x378>
 8004790:	f011 0f04 	tst.w	r1, #4
 8004794:	9903      	ldr	r1, [sp, #12]
 8004796:	600a      	str	r2, [r1, #0]
 8004798:	d1db      	bne.n	8004752 <_scanf_float+0x39a>
 800479a:	f8d3 8000 	ldr.w	r8, [r3]
 800479e:	ee10 2a10 	vmov	r2, s0
 80047a2:	ee10 0a10 	vmov	r0, s0
 80047a6:	463b      	mov	r3, r7
 80047a8:	4639      	mov	r1, r7
 80047aa:	f7fc f9cf 	bl	8000b4c <__aeabi_dcmpun>
 80047ae:	b128      	cbz	r0, 80047bc <_scanf_float+0x404>
 80047b0:	4808      	ldr	r0, [pc, #32]	; (80047d4 <_scanf_float+0x41c>)
 80047b2:	f000 f811 	bl	80047d8 <nanf>
 80047b6:	ed88 0a00 	vstr	s0, [r8]
 80047ba:	e7cd      	b.n	8004758 <_scanf_float+0x3a0>
 80047bc:	4630      	mov	r0, r6
 80047be:	4639      	mov	r1, r7
 80047c0:	f7fc fa22 	bl	8000c08 <__aeabi_d2f>
 80047c4:	f8c8 0000 	str.w	r0, [r8]
 80047c8:	e7c6      	b.n	8004758 <_scanf_float+0x3a0>
 80047ca:	2500      	movs	r5, #0
 80047cc:	e635      	b.n	800443a <_scanf_float+0x82>
 80047ce:	bf00      	nop
 80047d0:	08008454 	.word	0x08008454
 80047d4:	08008870 	.word	0x08008870

080047d8 <nanf>:
 80047d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80047e0 <nanf+0x8>
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	7fc00000 	.word	0x7fc00000

080047e4 <siprintf>:
 80047e4:	b40e      	push	{r1, r2, r3}
 80047e6:	b500      	push	{lr}
 80047e8:	b09c      	sub	sp, #112	; 0x70
 80047ea:	ab1d      	add	r3, sp, #116	; 0x74
 80047ec:	9002      	str	r0, [sp, #8]
 80047ee:	9006      	str	r0, [sp, #24]
 80047f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047f4:	4809      	ldr	r0, [pc, #36]	; (800481c <siprintf+0x38>)
 80047f6:	9107      	str	r1, [sp, #28]
 80047f8:	9104      	str	r1, [sp, #16]
 80047fa:	4909      	ldr	r1, [pc, #36]	; (8004820 <siprintf+0x3c>)
 80047fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004800:	9105      	str	r1, [sp, #20]
 8004802:	6800      	ldr	r0, [r0, #0]
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	a902      	add	r1, sp, #8
 8004808:	f002 fece 	bl	80075a8 <_svfiprintf_r>
 800480c:	9b02      	ldr	r3, [sp, #8]
 800480e:	2200      	movs	r2, #0
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	b01c      	add	sp, #112	; 0x70
 8004814:	f85d eb04 	ldr.w	lr, [sp], #4
 8004818:	b003      	add	sp, #12
 800481a:	4770      	bx	lr
 800481c:	20000004 	.word	0x20000004
 8004820:	ffff0208 	.word	0xffff0208

08004824 <strcat>:
 8004824:	b510      	push	{r4, lr}
 8004826:	4602      	mov	r2, r0
 8004828:	7814      	ldrb	r4, [r2, #0]
 800482a:	4613      	mov	r3, r2
 800482c:	3201      	adds	r2, #1
 800482e:	2c00      	cmp	r4, #0
 8004830:	d1fa      	bne.n	8004828 <strcat+0x4>
 8004832:	3b01      	subs	r3, #1
 8004834:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004838:	f803 2f01 	strb.w	r2, [r3, #1]!
 800483c:	2a00      	cmp	r2, #0
 800483e:	d1f9      	bne.n	8004834 <strcat+0x10>
 8004840:	bd10      	pop	{r4, pc}

08004842 <strncmp>:
 8004842:	b510      	push	{r4, lr}
 8004844:	b16a      	cbz	r2, 8004862 <strncmp+0x20>
 8004846:	3901      	subs	r1, #1
 8004848:	1884      	adds	r4, r0, r2
 800484a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800484e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004852:	4293      	cmp	r3, r2
 8004854:	d103      	bne.n	800485e <strncmp+0x1c>
 8004856:	42a0      	cmp	r0, r4
 8004858:	d001      	beq.n	800485e <strncmp+0x1c>
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f5      	bne.n	800484a <strncmp+0x8>
 800485e:	1a98      	subs	r0, r3, r2
 8004860:	bd10      	pop	{r4, pc}
 8004862:	4610      	mov	r0, r2
 8004864:	e7fc      	b.n	8004860 <strncmp+0x1e>

08004866 <sulp>:
 8004866:	b570      	push	{r4, r5, r6, lr}
 8004868:	4604      	mov	r4, r0
 800486a:	460d      	mov	r5, r1
 800486c:	ec45 4b10 	vmov	d0, r4, r5
 8004870:	4616      	mov	r6, r2
 8004872:	f002 fc35 	bl	80070e0 <__ulp>
 8004876:	ec51 0b10 	vmov	r0, r1, d0
 800487a:	b17e      	cbz	r6, 800489c <sulp+0x36>
 800487c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004880:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004884:	2b00      	cmp	r3, #0
 8004886:	dd09      	ble.n	800489c <sulp+0x36>
 8004888:	051b      	lsls	r3, r3, #20
 800488a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800488e:	2400      	movs	r4, #0
 8004890:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004894:	4622      	mov	r2, r4
 8004896:	462b      	mov	r3, r5
 8004898:	f7fb febe 	bl	8000618 <__aeabi_dmul>
 800489c:	bd70      	pop	{r4, r5, r6, pc}
	...

080048a0 <_strtod_l>:
 80048a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a4:	b0a3      	sub	sp, #140	; 0x8c
 80048a6:	461f      	mov	r7, r3
 80048a8:	2300      	movs	r3, #0
 80048aa:	931e      	str	r3, [sp, #120]	; 0x78
 80048ac:	4ba4      	ldr	r3, [pc, #656]	; (8004b40 <_strtod_l+0x2a0>)
 80048ae:	9219      	str	r2, [sp, #100]	; 0x64
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	9307      	str	r3, [sp, #28]
 80048b4:	4604      	mov	r4, r0
 80048b6:	4618      	mov	r0, r3
 80048b8:	4688      	mov	r8, r1
 80048ba:	f7fb fc93 	bl	80001e4 <strlen>
 80048be:	f04f 0a00 	mov.w	sl, #0
 80048c2:	4605      	mov	r5, r0
 80048c4:	f04f 0b00 	mov.w	fp, #0
 80048c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80048cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80048ce:	781a      	ldrb	r2, [r3, #0]
 80048d0:	2a2b      	cmp	r2, #43	; 0x2b
 80048d2:	d04c      	beq.n	800496e <_strtod_l+0xce>
 80048d4:	d839      	bhi.n	800494a <_strtod_l+0xaa>
 80048d6:	2a0d      	cmp	r2, #13
 80048d8:	d832      	bhi.n	8004940 <_strtod_l+0xa0>
 80048da:	2a08      	cmp	r2, #8
 80048dc:	d832      	bhi.n	8004944 <_strtod_l+0xa4>
 80048de:	2a00      	cmp	r2, #0
 80048e0:	d03c      	beq.n	800495c <_strtod_l+0xbc>
 80048e2:	2300      	movs	r3, #0
 80048e4:	930e      	str	r3, [sp, #56]	; 0x38
 80048e6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80048e8:	7833      	ldrb	r3, [r6, #0]
 80048ea:	2b30      	cmp	r3, #48	; 0x30
 80048ec:	f040 80b4 	bne.w	8004a58 <_strtod_l+0x1b8>
 80048f0:	7873      	ldrb	r3, [r6, #1]
 80048f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80048f6:	2b58      	cmp	r3, #88	; 0x58
 80048f8:	d16c      	bne.n	80049d4 <_strtod_l+0x134>
 80048fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048fc:	9301      	str	r3, [sp, #4]
 80048fe:	ab1e      	add	r3, sp, #120	; 0x78
 8004900:	9702      	str	r7, [sp, #8]
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	4a8f      	ldr	r2, [pc, #572]	; (8004b44 <_strtod_l+0x2a4>)
 8004906:	ab1f      	add	r3, sp, #124	; 0x7c
 8004908:	a91d      	add	r1, sp, #116	; 0x74
 800490a:	4620      	mov	r0, r4
 800490c:	f001 fd48 	bl	80063a0 <__gethex>
 8004910:	f010 0707 	ands.w	r7, r0, #7
 8004914:	4605      	mov	r5, r0
 8004916:	d005      	beq.n	8004924 <_strtod_l+0x84>
 8004918:	2f06      	cmp	r7, #6
 800491a:	d12a      	bne.n	8004972 <_strtod_l+0xd2>
 800491c:	3601      	adds	r6, #1
 800491e:	2300      	movs	r3, #0
 8004920:	961d      	str	r6, [sp, #116]	; 0x74
 8004922:	930e      	str	r3, [sp, #56]	; 0x38
 8004924:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004926:	2b00      	cmp	r3, #0
 8004928:	f040 8596 	bne.w	8005458 <_strtod_l+0xbb8>
 800492c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800492e:	b1db      	cbz	r3, 8004968 <_strtod_l+0xc8>
 8004930:	4652      	mov	r2, sl
 8004932:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004936:	ec43 2b10 	vmov	d0, r2, r3
 800493a:	b023      	add	sp, #140	; 0x8c
 800493c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004940:	2a20      	cmp	r2, #32
 8004942:	d1ce      	bne.n	80048e2 <_strtod_l+0x42>
 8004944:	3301      	adds	r3, #1
 8004946:	931d      	str	r3, [sp, #116]	; 0x74
 8004948:	e7c0      	b.n	80048cc <_strtod_l+0x2c>
 800494a:	2a2d      	cmp	r2, #45	; 0x2d
 800494c:	d1c9      	bne.n	80048e2 <_strtod_l+0x42>
 800494e:	2201      	movs	r2, #1
 8004950:	920e      	str	r2, [sp, #56]	; 0x38
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	921d      	str	r2, [sp, #116]	; 0x74
 8004956:	785b      	ldrb	r3, [r3, #1]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1c4      	bne.n	80048e6 <_strtod_l+0x46>
 800495c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800495e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004962:	2b00      	cmp	r3, #0
 8004964:	f040 8576 	bne.w	8005454 <_strtod_l+0xbb4>
 8004968:	4652      	mov	r2, sl
 800496a:	465b      	mov	r3, fp
 800496c:	e7e3      	b.n	8004936 <_strtod_l+0x96>
 800496e:	2200      	movs	r2, #0
 8004970:	e7ee      	b.n	8004950 <_strtod_l+0xb0>
 8004972:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004974:	b13a      	cbz	r2, 8004986 <_strtod_l+0xe6>
 8004976:	2135      	movs	r1, #53	; 0x35
 8004978:	a820      	add	r0, sp, #128	; 0x80
 800497a:	f002 fcbc 	bl	80072f6 <__copybits>
 800497e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004980:	4620      	mov	r0, r4
 8004982:	f002 f881 	bl	8006a88 <_Bfree>
 8004986:	3f01      	subs	r7, #1
 8004988:	2f05      	cmp	r7, #5
 800498a:	d807      	bhi.n	800499c <_strtod_l+0xfc>
 800498c:	e8df f007 	tbb	[pc, r7]
 8004990:	1d180b0e 	.word	0x1d180b0e
 8004994:	030e      	.short	0x030e
 8004996:	f04f 0b00 	mov.w	fp, #0
 800499a:	46da      	mov	sl, fp
 800499c:	0728      	lsls	r0, r5, #28
 800499e:	d5c1      	bpl.n	8004924 <_strtod_l+0x84>
 80049a0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80049a4:	e7be      	b.n	8004924 <_strtod_l+0x84>
 80049a6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80049aa:	e7f7      	b.n	800499c <_strtod_l+0xfc>
 80049ac:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80049b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80049b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80049b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80049ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80049be:	e7ed      	b.n	800499c <_strtod_l+0xfc>
 80049c0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8004b48 <_strtod_l+0x2a8>
 80049c4:	f04f 0a00 	mov.w	sl, #0
 80049c8:	e7e8      	b.n	800499c <_strtod_l+0xfc>
 80049ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80049ce:	f04f 3aff 	mov.w	sl, #4294967295
 80049d2:	e7e3      	b.n	800499c <_strtod_l+0xfc>
 80049d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	921d      	str	r2, [sp, #116]	; 0x74
 80049da:	785b      	ldrb	r3, [r3, #1]
 80049dc:	2b30      	cmp	r3, #48	; 0x30
 80049de:	d0f9      	beq.n	80049d4 <_strtod_l+0x134>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d09f      	beq.n	8004924 <_strtod_l+0x84>
 80049e4:	2301      	movs	r3, #1
 80049e6:	f04f 0900 	mov.w	r9, #0
 80049ea:	9304      	str	r3, [sp, #16]
 80049ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80049ee:	930a      	str	r3, [sp, #40]	; 0x28
 80049f0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80049f4:	464f      	mov	r7, r9
 80049f6:	220a      	movs	r2, #10
 80049f8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80049fa:	7806      	ldrb	r6, [r0, #0]
 80049fc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004a00:	b2d9      	uxtb	r1, r3
 8004a02:	2909      	cmp	r1, #9
 8004a04:	d92a      	bls.n	8004a5c <_strtod_l+0x1bc>
 8004a06:	9907      	ldr	r1, [sp, #28]
 8004a08:	462a      	mov	r2, r5
 8004a0a:	f7ff ff1a 	bl	8004842 <strncmp>
 8004a0e:	b398      	cbz	r0, 8004a78 <_strtod_l+0x1d8>
 8004a10:	2000      	movs	r0, #0
 8004a12:	4633      	mov	r3, r6
 8004a14:	463d      	mov	r5, r7
 8004a16:	9007      	str	r0, [sp, #28]
 8004a18:	4602      	mov	r2, r0
 8004a1a:	2b65      	cmp	r3, #101	; 0x65
 8004a1c:	d001      	beq.n	8004a22 <_strtod_l+0x182>
 8004a1e:	2b45      	cmp	r3, #69	; 0x45
 8004a20:	d118      	bne.n	8004a54 <_strtod_l+0x1b4>
 8004a22:	b91d      	cbnz	r5, 8004a2c <_strtod_l+0x18c>
 8004a24:	9b04      	ldr	r3, [sp, #16]
 8004a26:	4303      	orrs	r3, r0
 8004a28:	d098      	beq.n	800495c <_strtod_l+0xbc>
 8004a2a:	2500      	movs	r5, #0
 8004a2c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8004a30:	f108 0301 	add.w	r3, r8, #1
 8004a34:	931d      	str	r3, [sp, #116]	; 0x74
 8004a36:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004a3a:	2b2b      	cmp	r3, #43	; 0x2b
 8004a3c:	d075      	beq.n	8004b2a <_strtod_l+0x28a>
 8004a3e:	2b2d      	cmp	r3, #45	; 0x2d
 8004a40:	d07b      	beq.n	8004b3a <_strtod_l+0x29a>
 8004a42:	f04f 0c00 	mov.w	ip, #0
 8004a46:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004a4a:	2909      	cmp	r1, #9
 8004a4c:	f240 8082 	bls.w	8004b54 <_strtod_l+0x2b4>
 8004a50:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004a54:	2600      	movs	r6, #0
 8004a56:	e09d      	b.n	8004b94 <_strtod_l+0x2f4>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e7c4      	b.n	80049e6 <_strtod_l+0x146>
 8004a5c:	2f08      	cmp	r7, #8
 8004a5e:	bfd8      	it	le
 8004a60:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004a62:	f100 0001 	add.w	r0, r0, #1
 8004a66:	bfda      	itte	le
 8004a68:	fb02 3301 	mlale	r3, r2, r1, r3
 8004a6c:	9309      	strle	r3, [sp, #36]	; 0x24
 8004a6e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004a72:	3701      	adds	r7, #1
 8004a74:	901d      	str	r0, [sp, #116]	; 0x74
 8004a76:	e7bf      	b.n	80049f8 <_strtod_l+0x158>
 8004a78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004a7a:	195a      	adds	r2, r3, r5
 8004a7c:	921d      	str	r2, [sp, #116]	; 0x74
 8004a7e:	5d5b      	ldrb	r3, [r3, r5]
 8004a80:	2f00      	cmp	r7, #0
 8004a82:	d037      	beq.n	8004af4 <_strtod_l+0x254>
 8004a84:	9007      	str	r0, [sp, #28]
 8004a86:	463d      	mov	r5, r7
 8004a88:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004a8c:	2a09      	cmp	r2, #9
 8004a8e:	d912      	bls.n	8004ab6 <_strtod_l+0x216>
 8004a90:	2201      	movs	r2, #1
 8004a92:	e7c2      	b.n	8004a1a <_strtod_l+0x17a>
 8004a94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	921d      	str	r2, [sp, #116]	; 0x74
 8004a9a:	785b      	ldrb	r3, [r3, #1]
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	2b30      	cmp	r3, #48	; 0x30
 8004aa0:	d0f8      	beq.n	8004a94 <_strtod_l+0x1f4>
 8004aa2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004aa6:	2a08      	cmp	r2, #8
 8004aa8:	f200 84db 	bhi.w	8005462 <_strtod_l+0xbc2>
 8004aac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004aae:	9007      	str	r0, [sp, #28]
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	920a      	str	r2, [sp, #40]	; 0x28
 8004ab4:	4605      	mov	r5, r0
 8004ab6:	3b30      	subs	r3, #48	; 0x30
 8004ab8:	f100 0201 	add.w	r2, r0, #1
 8004abc:	d014      	beq.n	8004ae8 <_strtod_l+0x248>
 8004abe:	9907      	ldr	r1, [sp, #28]
 8004ac0:	4411      	add	r1, r2
 8004ac2:	9107      	str	r1, [sp, #28]
 8004ac4:	462a      	mov	r2, r5
 8004ac6:	eb00 0e05 	add.w	lr, r0, r5
 8004aca:	210a      	movs	r1, #10
 8004acc:	4572      	cmp	r2, lr
 8004ace:	d113      	bne.n	8004af8 <_strtod_l+0x258>
 8004ad0:	182a      	adds	r2, r5, r0
 8004ad2:	2a08      	cmp	r2, #8
 8004ad4:	f105 0501 	add.w	r5, r5, #1
 8004ad8:	4405      	add	r5, r0
 8004ada:	dc1c      	bgt.n	8004b16 <_strtod_l+0x276>
 8004adc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ade:	220a      	movs	r2, #10
 8004ae0:	fb02 3301 	mla	r3, r2, r1, r3
 8004ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004aea:	1c59      	adds	r1, r3, #1
 8004aec:	911d      	str	r1, [sp, #116]	; 0x74
 8004aee:	785b      	ldrb	r3, [r3, #1]
 8004af0:	4610      	mov	r0, r2
 8004af2:	e7c9      	b.n	8004a88 <_strtod_l+0x1e8>
 8004af4:	4638      	mov	r0, r7
 8004af6:	e7d2      	b.n	8004a9e <_strtod_l+0x1fe>
 8004af8:	2a08      	cmp	r2, #8
 8004afa:	dc04      	bgt.n	8004b06 <_strtod_l+0x266>
 8004afc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004afe:	434e      	muls	r6, r1
 8004b00:	9609      	str	r6, [sp, #36]	; 0x24
 8004b02:	3201      	adds	r2, #1
 8004b04:	e7e2      	b.n	8004acc <_strtod_l+0x22c>
 8004b06:	f102 0c01 	add.w	ip, r2, #1
 8004b0a:	f1bc 0f10 	cmp.w	ip, #16
 8004b0e:	bfd8      	it	le
 8004b10:	fb01 f909 	mulle.w	r9, r1, r9
 8004b14:	e7f5      	b.n	8004b02 <_strtod_l+0x262>
 8004b16:	2d10      	cmp	r5, #16
 8004b18:	bfdc      	itt	le
 8004b1a:	220a      	movle	r2, #10
 8004b1c:	fb02 3909 	mlale	r9, r2, r9, r3
 8004b20:	e7e1      	b.n	8004ae6 <_strtod_l+0x246>
 8004b22:	2300      	movs	r3, #0
 8004b24:	9307      	str	r3, [sp, #28]
 8004b26:	2201      	movs	r2, #1
 8004b28:	e77c      	b.n	8004a24 <_strtod_l+0x184>
 8004b2a:	f04f 0c00 	mov.w	ip, #0
 8004b2e:	f108 0302 	add.w	r3, r8, #2
 8004b32:	931d      	str	r3, [sp, #116]	; 0x74
 8004b34:	f898 3002 	ldrb.w	r3, [r8, #2]
 8004b38:	e785      	b.n	8004a46 <_strtod_l+0x1a6>
 8004b3a:	f04f 0c01 	mov.w	ip, #1
 8004b3e:	e7f6      	b.n	8004b2e <_strtod_l+0x28e>
 8004b40:	080086b0 	.word	0x080086b0
 8004b44:	0800845c 	.word	0x0800845c
 8004b48:	7ff00000 	.word	0x7ff00000
 8004b4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004b4e:	1c59      	adds	r1, r3, #1
 8004b50:	911d      	str	r1, [sp, #116]	; 0x74
 8004b52:	785b      	ldrb	r3, [r3, #1]
 8004b54:	2b30      	cmp	r3, #48	; 0x30
 8004b56:	d0f9      	beq.n	8004b4c <_strtod_l+0x2ac>
 8004b58:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004b5c:	2908      	cmp	r1, #8
 8004b5e:	f63f af79 	bhi.w	8004a54 <_strtod_l+0x1b4>
 8004b62:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004b66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004b68:	9308      	str	r3, [sp, #32]
 8004b6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004b6c:	1c59      	adds	r1, r3, #1
 8004b6e:	911d      	str	r1, [sp, #116]	; 0x74
 8004b70:	785b      	ldrb	r3, [r3, #1]
 8004b72:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8004b76:	2e09      	cmp	r6, #9
 8004b78:	d937      	bls.n	8004bea <_strtod_l+0x34a>
 8004b7a:	9e08      	ldr	r6, [sp, #32]
 8004b7c:	1b89      	subs	r1, r1, r6
 8004b7e:	2908      	cmp	r1, #8
 8004b80:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004b84:	dc02      	bgt.n	8004b8c <_strtod_l+0x2ec>
 8004b86:	4576      	cmp	r6, lr
 8004b88:	bfa8      	it	ge
 8004b8a:	4676      	movge	r6, lr
 8004b8c:	f1bc 0f00 	cmp.w	ip, #0
 8004b90:	d000      	beq.n	8004b94 <_strtod_l+0x2f4>
 8004b92:	4276      	negs	r6, r6
 8004b94:	2d00      	cmp	r5, #0
 8004b96:	d14f      	bne.n	8004c38 <_strtod_l+0x398>
 8004b98:	9904      	ldr	r1, [sp, #16]
 8004b9a:	4301      	orrs	r1, r0
 8004b9c:	f47f aec2 	bne.w	8004924 <_strtod_l+0x84>
 8004ba0:	2a00      	cmp	r2, #0
 8004ba2:	f47f aedb 	bne.w	800495c <_strtod_l+0xbc>
 8004ba6:	2b69      	cmp	r3, #105	; 0x69
 8004ba8:	d027      	beq.n	8004bfa <_strtod_l+0x35a>
 8004baa:	dc24      	bgt.n	8004bf6 <_strtod_l+0x356>
 8004bac:	2b49      	cmp	r3, #73	; 0x49
 8004bae:	d024      	beq.n	8004bfa <_strtod_l+0x35a>
 8004bb0:	2b4e      	cmp	r3, #78	; 0x4e
 8004bb2:	f47f aed3 	bne.w	800495c <_strtod_l+0xbc>
 8004bb6:	499e      	ldr	r1, [pc, #632]	; (8004e30 <_strtod_l+0x590>)
 8004bb8:	a81d      	add	r0, sp, #116	; 0x74
 8004bba:	f001 fe49 	bl	8006850 <__match>
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	f43f aecc 	beq.w	800495c <_strtod_l+0xbc>
 8004bc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	2b28      	cmp	r3, #40	; 0x28
 8004bca:	d12d      	bne.n	8004c28 <_strtod_l+0x388>
 8004bcc:	4999      	ldr	r1, [pc, #612]	; (8004e34 <_strtod_l+0x594>)
 8004bce:	aa20      	add	r2, sp, #128	; 0x80
 8004bd0:	a81d      	add	r0, sp, #116	; 0x74
 8004bd2:	f001 fe51 	bl	8006878 <__hexnan>
 8004bd6:	2805      	cmp	r0, #5
 8004bd8:	d126      	bne.n	8004c28 <_strtod_l+0x388>
 8004bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bdc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8004be0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004be4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004be8:	e69c      	b.n	8004924 <_strtod_l+0x84>
 8004bea:	210a      	movs	r1, #10
 8004bec:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004bf0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004bf4:	e7b9      	b.n	8004b6a <_strtod_l+0x2ca>
 8004bf6:	2b6e      	cmp	r3, #110	; 0x6e
 8004bf8:	e7db      	b.n	8004bb2 <_strtod_l+0x312>
 8004bfa:	498f      	ldr	r1, [pc, #572]	; (8004e38 <_strtod_l+0x598>)
 8004bfc:	a81d      	add	r0, sp, #116	; 0x74
 8004bfe:	f001 fe27 	bl	8006850 <__match>
 8004c02:	2800      	cmp	r0, #0
 8004c04:	f43f aeaa 	beq.w	800495c <_strtod_l+0xbc>
 8004c08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004c0a:	498c      	ldr	r1, [pc, #560]	; (8004e3c <_strtod_l+0x59c>)
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	a81d      	add	r0, sp, #116	; 0x74
 8004c10:	931d      	str	r3, [sp, #116]	; 0x74
 8004c12:	f001 fe1d 	bl	8006850 <__match>
 8004c16:	b910      	cbnz	r0, 8004c1e <_strtod_l+0x37e>
 8004c18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	931d      	str	r3, [sp, #116]	; 0x74
 8004c1e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8004e4c <_strtod_l+0x5ac>
 8004c22:	f04f 0a00 	mov.w	sl, #0
 8004c26:	e67d      	b.n	8004924 <_strtod_l+0x84>
 8004c28:	4885      	ldr	r0, [pc, #532]	; (8004e40 <_strtod_l+0x5a0>)
 8004c2a:	f002 fdbd 	bl	80077a8 <nan>
 8004c2e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004c32:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004c36:	e675      	b.n	8004924 <_strtod_l+0x84>
 8004c38:	9b07      	ldr	r3, [sp, #28]
 8004c3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c3c:	1af3      	subs	r3, r6, r3
 8004c3e:	2f00      	cmp	r7, #0
 8004c40:	bf08      	it	eq
 8004c42:	462f      	moveq	r7, r5
 8004c44:	2d10      	cmp	r5, #16
 8004c46:	9308      	str	r3, [sp, #32]
 8004c48:	46a8      	mov	r8, r5
 8004c4a:	bfa8      	it	ge
 8004c4c:	f04f 0810 	movge.w	r8, #16
 8004c50:	f7fb fc68 	bl	8000524 <__aeabi_ui2d>
 8004c54:	2d09      	cmp	r5, #9
 8004c56:	4682      	mov	sl, r0
 8004c58:	468b      	mov	fp, r1
 8004c5a:	dd13      	ble.n	8004c84 <_strtod_l+0x3e4>
 8004c5c:	4b79      	ldr	r3, [pc, #484]	; (8004e44 <_strtod_l+0x5a4>)
 8004c5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004c62:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004c66:	f7fb fcd7 	bl	8000618 <__aeabi_dmul>
 8004c6a:	4682      	mov	sl, r0
 8004c6c:	4648      	mov	r0, r9
 8004c6e:	468b      	mov	fp, r1
 8004c70:	f7fb fc58 	bl	8000524 <__aeabi_ui2d>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4650      	mov	r0, sl
 8004c7a:	4659      	mov	r1, fp
 8004c7c:	f7fb fb16 	bl	80002ac <__adddf3>
 8004c80:	4682      	mov	sl, r0
 8004c82:	468b      	mov	fp, r1
 8004c84:	2d0f      	cmp	r5, #15
 8004c86:	dc38      	bgt.n	8004cfa <_strtod_l+0x45a>
 8004c88:	9b08      	ldr	r3, [sp, #32]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f43f ae4a 	beq.w	8004924 <_strtod_l+0x84>
 8004c90:	dd24      	ble.n	8004cdc <_strtod_l+0x43c>
 8004c92:	2b16      	cmp	r3, #22
 8004c94:	dc0b      	bgt.n	8004cae <_strtod_l+0x40e>
 8004c96:	4d6b      	ldr	r5, [pc, #428]	; (8004e44 <_strtod_l+0x5a4>)
 8004c98:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8004c9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004ca0:	4652      	mov	r2, sl
 8004ca2:	465b      	mov	r3, fp
 8004ca4:	f7fb fcb8 	bl	8000618 <__aeabi_dmul>
 8004ca8:	4682      	mov	sl, r0
 8004caa:	468b      	mov	fp, r1
 8004cac:	e63a      	b.n	8004924 <_strtod_l+0x84>
 8004cae:	9a08      	ldr	r2, [sp, #32]
 8004cb0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	db20      	blt.n	8004cfa <_strtod_l+0x45a>
 8004cb8:	4c62      	ldr	r4, [pc, #392]	; (8004e44 <_strtod_l+0x5a4>)
 8004cba:	f1c5 050f 	rsb	r5, r5, #15
 8004cbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004cc2:	4652      	mov	r2, sl
 8004cc4:	465b      	mov	r3, fp
 8004cc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cca:	f7fb fca5 	bl	8000618 <__aeabi_dmul>
 8004cce:	9b08      	ldr	r3, [sp, #32]
 8004cd0:	1b5d      	subs	r5, r3, r5
 8004cd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004cd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004cda:	e7e3      	b.n	8004ca4 <_strtod_l+0x404>
 8004cdc:	9b08      	ldr	r3, [sp, #32]
 8004cde:	3316      	adds	r3, #22
 8004ce0:	db0b      	blt.n	8004cfa <_strtod_l+0x45a>
 8004ce2:	9b07      	ldr	r3, [sp, #28]
 8004ce4:	4a57      	ldr	r2, [pc, #348]	; (8004e44 <_strtod_l+0x5a4>)
 8004ce6:	1b9e      	subs	r6, r3, r6
 8004ce8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8004cec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004cf0:	4650      	mov	r0, sl
 8004cf2:	4659      	mov	r1, fp
 8004cf4:	f7fb fdba 	bl	800086c <__aeabi_ddiv>
 8004cf8:	e7d6      	b.n	8004ca8 <_strtod_l+0x408>
 8004cfa:	9b08      	ldr	r3, [sp, #32]
 8004cfc:	eba5 0808 	sub.w	r8, r5, r8
 8004d00:	4498      	add	r8, r3
 8004d02:	f1b8 0f00 	cmp.w	r8, #0
 8004d06:	dd71      	ble.n	8004dec <_strtod_l+0x54c>
 8004d08:	f018 030f 	ands.w	r3, r8, #15
 8004d0c:	d00a      	beq.n	8004d24 <_strtod_l+0x484>
 8004d0e:	494d      	ldr	r1, [pc, #308]	; (8004e44 <_strtod_l+0x5a4>)
 8004d10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004d14:	4652      	mov	r2, sl
 8004d16:	465b      	mov	r3, fp
 8004d18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d1c:	f7fb fc7c 	bl	8000618 <__aeabi_dmul>
 8004d20:	4682      	mov	sl, r0
 8004d22:	468b      	mov	fp, r1
 8004d24:	f038 080f 	bics.w	r8, r8, #15
 8004d28:	d04d      	beq.n	8004dc6 <_strtod_l+0x526>
 8004d2a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004d2e:	dd22      	ble.n	8004d76 <_strtod_l+0x4d6>
 8004d30:	2500      	movs	r5, #0
 8004d32:	462e      	mov	r6, r5
 8004d34:	9509      	str	r5, [sp, #36]	; 0x24
 8004d36:	9507      	str	r5, [sp, #28]
 8004d38:	2322      	movs	r3, #34	; 0x22
 8004d3a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8004e4c <_strtod_l+0x5ac>
 8004d3e:	6023      	str	r3, [r4, #0]
 8004d40:	f04f 0a00 	mov.w	sl, #0
 8004d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f43f adec 	beq.w	8004924 <_strtod_l+0x84>
 8004d4c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004d4e:	4620      	mov	r0, r4
 8004d50:	f001 fe9a 	bl	8006a88 <_Bfree>
 8004d54:	9907      	ldr	r1, [sp, #28]
 8004d56:	4620      	mov	r0, r4
 8004d58:	f001 fe96 	bl	8006a88 <_Bfree>
 8004d5c:	4631      	mov	r1, r6
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f001 fe92 	bl	8006a88 <_Bfree>
 8004d64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d66:	4620      	mov	r0, r4
 8004d68:	f001 fe8e 	bl	8006a88 <_Bfree>
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	4620      	mov	r0, r4
 8004d70:	f001 fe8a 	bl	8006a88 <_Bfree>
 8004d74:	e5d6      	b.n	8004924 <_strtod_l+0x84>
 8004d76:	2300      	movs	r3, #0
 8004d78:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004d7c:	4650      	mov	r0, sl
 8004d7e:	4659      	mov	r1, fp
 8004d80:	4699      	mov	r9, r3
 8004d82:	f1b8 0f01 	cmp.w	r8, #1
 8004d86:	dc21      	bgt.n	8004dcc <_strtod_l+0x52c>
 8004d88:	b10b      	cbz	r3, 8004d8e <_strtod_l+0x4ee>
 8004d8a:	4682      	mov	sl, r0
 8004d8c:	468b      	mov	fp, r1
 8004d8e:	4b2e      	ldr	r3, [pc, #184]	; (8004e48 <_strtod_l+0x5a8>)
 8004d90:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004d94:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004d98:	4652      	mov	r2, sl
 8004d9a:	465b      	mov	r3, fp
 8004d9c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004da0:	f7fb fc3a 	bl	8000618 <__aeabi_dmul>
 8004da4:	4b29      	ldr	r3, [pc, #164]	; (8004e4c <_strtod_l+0x5ac>)
 8004da6:	460a      	mov	r2, r1
 8004da8:	400b      	ands	r3, r1
 8004daa:	4929      	ldr	r1, [pc, #164]	; (8004e50 <_strtod_l+0x5b0>)
 8004dac:	428b      	cmp	r3, r1
 8004dae:	4682      	mov	sl, r0
 8004db0:	d8be      	bhi.n	8004d30 <_strtod_l+0x490>
 8004db2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004db6:	428b      	cmp	r3, r1
 8004db8:	bf86      	itte	hi
 8004dba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8004e54 <_strtod_l+0x5b4>
 8004dbe:	f04f 3aff 	movhi.w	sl, #4294967295
 8004dc2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	9304      	str	r3, [sp, #16]
 8004dca:	e081      	b.n	8004ed0 <_strtod_l+0x630>
 8004dcc:	f018 0f01 	tst.w	r8, #1
 8004dd0:	d007      	beq.n	8004de2 <_strtod_l+0x542>
 8004dd2:	4b1d      	ldr	r3, [pc, #116]	; (8004e48 <_strtod_l+0x5a8>)
 8004dd4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ddc:	f7fb fc1c 	bl	8000618 <__aeabi_dmul>
 8004de0:	2301      	movs	r3, #1
 8004de2:	f109 0901 	add.w	r9, r9, #1
 8004de6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004dea:	e7ca      	b.n	8004d82 <_strtod_l+0x4e2>
 8004dec:	d0eb      	beq.n	8004dc6 <_strtod_l+0x526>
 8004dee:	f1c8 0800 	rsb	r8, r8, #0
 8004df2:	f018 020f 	ands.w	r2, r8, #15
 8004df6:	d00a      	beq.n	8004e0e <_strtod_l+0x56e>
 8004df8:	4b12      	ldr	r3, [pc, #72]	; (8004e44 <_strtod_l+0x5a4>)
 8004dfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004dfe:	4650      	mov	r0, sl
 8004e00:	4659      	mov	r1, fp
 8004e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e06:	f7fb fd31 	bl	800086c <__aeabi_ddiv>
 8004e0a:	4682      	mov	sl, r0
 8004e0c:	468b      	mov	fp, r1
 8004e0e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004e12:	d0d8      	beq.n	8004dc6 <_strtod_l+0x526>
 8004e14:	f1b8 0f1f 	cmp.w	r8, #31
 8004e18:	dd1e      	ble.n	8004e58 <_strtod_l+0x5b8>
 8004e1a:	2500      	movs	r5, #0
 8004e1c:	462e      	mov	r6, r5
 8004e1e:	9509      	str	r5, [sp, #36]	; 0x24
 8004e20:	9507      	str	r5, [sp, #28]
 8004e22:	2322      	movs	r3, #34	; 0x22
 8004e24:	f04f 0a00 	mov.w	sl, #0
 8004e28:	f04f 0b00 	mov.w	fp, #0
 8004e2c:	6023      	str	r3, [r4, #0]
 8004e2e:	e789      	b.n	8004d44 <_strtod_l+0x4a4>
 8004e30:	0800842d 	.word	0x0800842d
 8004e34:	08008470 	.word	0x08008470
 8004e38:	08008425 	.word	0x08008425
 8004e3c:	080085b4 	.word	0x080085b4
 8004e40:	08008870 	.word	0x08008870
 8004e44:	08008750 	.word	0x08008750
 8004e48:	08008728 	.word	0x08008728
 8004e4c:	7ff00000 	.word	0x7ff00000
 8004e50:	7ca00000 	.word	0x7ca00000
 8004e54:	7fefffff 	.word	0x7fefffff
 8004e58:	f018 0310 	ands.w	r3, r8, #16
 8004e5c:	bf18      	it	ne
 8004e5e:	236a      	movne	r3, #106	; 0x6a
 8004e60:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005218 <_strtod_l+0x978>
 8004e64:	9304      	str	r3, [sp, #16]
 8004e66:	4650      	mov	r0, sl
 8004e68:	4659      	mov	r1, fp
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f018 0f01 	tst.w	r8, #1
 8004e70:	d004      	beq.n	8004e7c <_strtod_l+0x5dc>
 8004e72:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004e76:	f7fb fbcf 	bl	8000618 <__aeabi_dmul>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004e80:	f109 0908 	add.w	r9, r9, #8
 8004e84:	d1f2      	bne.n	8004e6c <_strtod_l+0x5cc>
 8004e86:	b10b      	cbz	r3, 8004e8c <_strtod_l+0x5ec>
 8004e88:	4682      	mov	sl, r0
 8004e8a:	468b      	mov	fp, r1
 8004e8c:	9b04      	ldr	r3, [sp, #16]
 8004e8e:	b1bb      	cbz	r3, 8004ec0 <_strtod_l+0x620>
 8004e90:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004e94:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	4659      	mov	r1, fp
 8004e9c:	dd10      	ble.n	8004ec0 <_strtod_l+0x620>
 8004e9e:	2b1f      	cmp	r3, #31
 8004ea0:	f340 8128 	ble.w	80050f4 <_strtod_l+0x854>
 8004ea4:	2b34      	cmp	r3, #52	; 0x34
 8004ea6:	bfde      	ittt	le
 8004ea8:	3b20      	suble	r3, #32
 8004eaa:	f04f 32ff 	movle.w	r2, #4294967295
 8004eae:	fa02 f303 	lslle.w	r3, r2, r3
 8004eb2:	f04f 0a00 	mov.w	sl, #0
 8004eb6:	bfcc      	ite	gt
 8004eb8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004ebc:	ea03 0b01 	andle.w	fp, r3, r1
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	4650      	mov	r0, sl
 8004ec6:	4659      	mov	r1, fp
 8004ec8:	f7fb fe0e 	bl	8000ae8 <__aeabi_dcmpeq>
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d1a4      	bne.n	8004e1a <_strtod_l+0x57a>
 8004ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004ed6:	462b      	mov	r3, r5
 8004ed8:	463a      	mov	r2, r7
 8004eda:	4620      	mov	r0, r4
 8004edc:	f001 fe40 	bl	8006b60 <__s2b>
 8004ee0:	9009      	str	r0, [sp, #36]	; 0x24
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	f43f af24 	beq.w	8004d30 <_strtod_l+0x490>
 8004ee8:	9b07      	ldr	r3, [sp, #28]
 8004eea:	1b9e      	subs	r6, r3, r6
 8004eec:	9b08      	ldr	r3, [sp, #32]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	bfb4      	ite	lt
 8004ef2:	4633      	movlt	r3, r6
 8004ef4:	2300      	movge	r3, #0
 8004ef6:	9310      	str	r3, [sp, #64]	; 0x40
 8004ef8:	9b08      	ldr	r3, [sp, #32]
 8004efa:	2500      	movs	r5, #0
 8004efc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004f00:	9318      	str	r3, [sp, #96]	; 0x60
 8004f02:	462e      	mov	r6, r5
 8004f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f06:	4620      	mov	r0, r4
 8004f08:	6859      	ldr	r1, [r3, #4]
 8004f0a:	f001 fd7d 	bl	8006a08 <_Balloc>
 8004f0e:	9007      	str	r0, [sp, #28]
 8004f10:	2800      	cmp	r0, #0
 8004f12:	f43f af11 	beq.w	8004d38 <_strtod_l+0x498>
 8004f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	3202      	adds	r2, #2
 8004f1c:	f103 010c 	add.w	r1, r3, #12
 8004f20:	0092      	lsls	r2, r2, #2
 8004f22:	300c      	adds	r0, #12
 8004f24:	f001 fd62 	bl	80069ec <memcpy>
 8004f28:	ec4b ab10 	vmov	d0, sl, fp
 8004f2c:	aa20      	add	r2, sp, #128	; 0x80
 8004f2e:	a91f      	add	r1, sp, #124	; 0x7c
 8004f30:	4620      	mov	r0, r4
 8004f32:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004f36:	f002 f94f 	bl	80071d8 <__d2b>
 8004f3a:	901e      	str	r0, [sp, #120]	; 0x78
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	f43f aefb 	beq.w	8004d38 <_strtod_l+0x498>
 8004f42:	2101      	movs	r1, #1
 8004f44:	4620      	mov	r0, r4
 8004f46:	f001 fea5 	bl	8006c94 <__i2b>
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	f43f aef3 	beq.w	8004d38 <_strtod_l+0x498>
 8004f52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004f54:	9904      	ldr	r1, [sp, #16]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	bfab      	itete	ge
 8004f5a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8004f5c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8004f5e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8004f60:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8004f64:	bfac      	ite	ge
 8004f66:	eb03 0902 	addge.w	r9, r3, r2
 8004f6a:	1ad7      	sublt	r7, r2, r3
 8004f6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004f6e:	eba3 0801 	sub.w	r8, r3, r1
 8004f72:	4490      	add	r8, r2
 8004f74:	4ba3      	ldr	r3, [pc, #652]	; (8005204 <_strtod_l+0x964>)
 8004f76:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f7a:	4598      	cmp	r8, r3
 8004f7c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004f80:	f280 80cc 	bge.w	800511c <_strtod_l+0x87c>
 8004f84:	eba3 0308 	sub.w	r3, r3, r8
 8004f88:	2b1f      	cmp	r3, #31
 8004f8a:	eba2 0203 	sub.w	r2, r2, r3
 8004f8e:	f04f 0101 	mov.w	r1, #1
 8004f92:	f300 80b6 	bgt.w	8005102 <_strtod_l+0x862>
 8004f96:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9a:	9311      	str	r3, [sp, #68]	; 0x44
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	930c      	str	r3, [sp, #48]	; 0x30
 8004fa0:	eb09 0802 	add.w	r8, r9, r2
 8004fa4:	9b04      	ldr	r3, [sp, #16]
 8004fa6:	45c1      	cmp	r9, r8
 8004fa8:	4417      	add	r7, r2
 8004faa:	441f      	add	r7, r3
 8004fac:	464b      	mov	r3, r9
 8004fae:	bfa8      	it	ge
 8004fb0:	4643      	movge	r3, r8
 8004fb2:	42bb      	cmp	r3, r7
 8004fb4:	bfa8      	it	ge
 8004fb6:	463b      	movge	r3, r7
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	bfc2      	ittt	gt
 8004fbc:	eba8 0803 	subgt.w	r8, r8, r3
 8004fc0:	1aff      	subgt	r7, r7, r3
 8004fc2:	eba9 0903 	subgt.w	r9, r9, r3
 8004fc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	dd17      	ble.n	8004ffc <_strtod_l+0x75c>
 8004fcc:	4631      	mov	r1, r6
 8004fce:	461a      	mov	r2, r3
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f001 ff1b 	bl	8006e0c <__pow5mult>
 8004fd6:	4606      	mov	r6, r0
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	f43f aead 	beq.w	8004d38 <_strtod_l+0x498>
 8004fde:	4601      	mov	r1, r0
 8004fe0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f001 fe6c 	bl	8006cc0 <__multiply>
 8004fe8:	900f      	str	r0, [sp, #60]	; 0x3c
 8004fea:	2800      	cmp	r0, #0
 8004fec:	f43f aea4 	beq.w	8004d38 <_strtod_l+0x498>
 8004ff0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	f001 fd48 	bl	8006a88 <_Bfree>
 8004ff8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ffa:	931e      	str	r3, [sp, #120]	; 0x78
 8004ffc:	f1b8 0f00 	cmp.w	r8, #0
 8005000:	f300 8091 	bgt.w	8005126 <_strtod_l+0x886>
 8005004:	9b08      	ldr	r3, [sp, #32]
 8005006:	2b00      	cmp	r3, #0
 8005008:	dd08      	ble.n	800501c <_strtod_l+0x77c>
 800500a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800500c:	9907      	ldr	r1, [sp, #28]
 800500e:	4620      	mov	r0, r4
 8005010:	f001 fefc 	bl	8006e0c <__pow5mult>
 8005014:	9007      	str	r0, [sp, #28]
 8005016:	2800      	cmp	r0, #0
 8005018:	f43f ae8e 	beq.w	8004d38 <_strtod_l+0x498>
 800501c:	2f00      	cmp	r7, #0
 800501e:	dd08      	ble.n	8005032 <_strtod_l+0x792>
 8005020:	9907      	ldr	r1, [sp, #28]
 8005022:	463a      	mov	r2, r7
 8005024:	4620      	mov	r0, r4
 8005026:	f001 ff4b 	bl	8006ec0 <__lshift>
 800502a:	9007      	str	r0, [sp, #28]
 800502c:	2800      	cmp	r0, #0
 800502e:	f43f ae83 	beq.w	8004d38 <_strtod_l+0x498>
 8005032:	f1b9 0f00 	cmp.w	r9, #0
 8005036:	dd08      	ble.n	800504a <_strtod_l+0x7aa>
 8005038:	4631      	mov	r1, r6
 800503a:	464a      	mov	r2, r9
 800503c:	4620      	mov	r0, r4
 800503e:	f001 ff3f 	bl	8006ec0 <__lshift>
 8005042:	4606      	mov	r6, r0
 8005044:	2800      	cmp	r0, #0
 8005046:	f43f ae77 	beq.w	8004d38 <_strtod_l+0x498>
 800504a:	9a07      	ldr	r2, [sp, #28]
 800504c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800504e:	4620      	mov	r0, r4
 8005050:	f001 ffbe 	bl	8006fd0 <__mdiff>
 8005054:	4605      	mov	r5, r0
 8005056:	2800      	cmp	r0, #0
 8005058:	f43f ae6e 	beq.w	8004d38 <_strtod_l+0x498>
 800505c:	68c3      	ldr	r3, [r0, #12]
 800505e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005060:	2300      	movs	r3, #0
 8005062:	60c3      	str	r3, [r0, #12]
 8005064:	4631      	mov	r1, r6
 8005066:	f001 ff97 	bl	8006f98 <__mcmp>
 800506a:	2800      	cmp	r0, #0
 800506c:	da65      	bge.n	800513a <_strtod_l+0x89a>
 800506e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005070:	ea53 030a 	orrs.w	r3, r3, sl
 8005074:	f040 8087 	bne.w	8005186 <_strtod_l+0x8e6>
 8005078:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800507c:	2b00      	cmp	r3, #0
 800507e:	f040 8082 	bne.w	8005186 <_strtod_l+0x8e6>
 8005082:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005086:	0d1b      	lsrs	r3, r3, #20
 8005088:	051b      	lsls	r3, r3, #20
 800508a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800508e:	d97a      	bls.n	8005186 <_strtod_l+0x8e6>
 8005090:	696b      	ldr	r3, [r5, #20]
 8005092:	b913      	cbnz	r3, 800509a <_strtod_l+0x7fa>
 8005094:	692b      	ldr	r3, [r5, #16]
 8005096:	2b01      	cmp	r3, #1
 8005098:	dd75      	ble.n	8005186 <_strtod_l+0x8e6>
 800509a:	4629      	mov	r1, r5
 800509c:	2201      	movs	r2, #1
 800509e:	4620      	mov	r0, r4
 80050a0:	f001 ff0e 	bl	8006ec0 <__lshift>
 80050a4:	4631      	mov	r1, r6
 80050a6:	4605      	mov	r5, r0
 80050a8:	f001 ff76 	bl	8006f98 <__mcmp>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	dd6a      	ble.n	8005186 <_strtod_l+0x8e6>
 80050b0:	9904      	ldr	r1, [sp, #16]
 80050b2:	4a55      	ldr	r2, [pc, #340]	; (8005208 <_strtod_l+0x968>)
 80050b4:	465b      	mov	r3, fp
 80050b6:	2900      	cmp	r1, #0
 80050b8:	f000 8085 	beq.w	80051c6 <_strtod_l+0x926>
 80050bc:	ea02 010b 	and.w	r1, r2, fp
 80050c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80050c4:	dc7f      	bgt.n	80051c6 <_strtod_l+0x926>
 80050c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80050ca:	f77f aeaa 	ble.w	8004e22 <_strtod_l+0x582>
 80050ce:	4a4f      	ldr	r2, [pc, #316]	; (800520c <_strtod_l+0x96c>)
 80050d0:	2300      	movs	r3, #0
 80050d2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80050d6:	4650      	mov	r0, sl
 80050d8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80050dc:	4659      	mov	r1, fp
 80050de:	f7fb fa9b 	bl	8000618 <__aeabi_dmul>
 80050e2:	460b      	mov	r3, r1
 80050e4:	4303      	orrs	r3, r0
 80050e6:	bf08      	it	eq
 80050e8:	2322      	moveq	r3, #34	; 0x22
 80050ea:	4682      	mov	sl, r0
 80050ec:	468b      	mov	fp, r1
 80050ee:	bf08      	it	eq
 80050f0:	6023      	streq	r3, [r4, #0]
 80050f2:	e62b      	b.n	8004d4c <_strtod_l+0x4ac>
 80050f4:	f04f 32ff 	mov.w	r2, #4294967295
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	ea03 0a0a 	and.w	sl, r3, sl
 8005100:	e6de      	b.n	8004ec0 <_strtod_l+0x620>
 8005102:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005106:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800510a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800510e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005112:	fa01 f308 	lsl.w	r3, r1, r8
 8005116:	930c      	str	r3, [sp, #48]	; 0x30
 8005118:	9111      	str	r1, [sp, #68]	; 0x44
 800511a:	e741      	b.n	8004fa0 <_strtod_l+0x700>
 800511c:	2300      	movs	r3, #0
 800511e:	930c      	str	r3, [sp, #48]	; 0x30
 8005120:	2301      	movs	r3, #1
 8005122:	9311      	str	r3, [sp, #68]	; 0x44
 8005124:	e73c      	b.n	8004fa0 <_strtod_l+0x700>
 8005126:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005128:	4642      	mov	r2, r8
 800512a:	4620      	mov	r0, r4
 800512c:	f001 fec8 	bl	8006ec0 <__lshift>
 8005130:	901e      	str	r0, [sp, #120]	; 0x78
 8005132:	2800      	cmp	r0, #0
 8005134:	f47f af66 	bne.w	8005004 <_strtod_l+0x764>
 8005138:	e5fe      	b.n	8004d38 <_strtod_l+0x498>
 800513a:	465f      	mov	r7, fp
 800513c:	d16e      	bne.n	800521c <_strtod_l+0x97c>
 800513e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005140:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005144:	b342      	cbz	r2, 8005198 <_strtod_l+0x8f8>
 8005146:	4a32      	ldr	r2, [pc, #200]	; (8005210 <_strtod_l+0x970>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d128      	bne.n	800519e <_strtod_l+0x8fe>
 800514c:	9b04      	ldr	r3, [sp, #16]
 800514e:	4650      	mov	r0, sl
 8005150:	b1eb      	cbz	r3, 800518e <_strtod_l+0x8ee>
 8005152:	4a2d      	ldr	r2, [pc, #180]	; (8005208 <_strtod_l+0x968>)
 8005154:	403a      	ands	r2, r7
 8005156:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800515a:	f04f 31ff 	mov.w	r1, #4294967295
 800515e:	d819      	bhi.n	8005194 <_strtod_l+0x8f4>
 8005160:	0d12      	lsrs	r2, r2, #20
 8005162:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005166:	fa01 f303 	lsl.w	r3, r1, r3
 800516a:	4298      	cmp	r0, r3
 800516c:	d117      	bne.n	800519e <_strtod_l+0x8fe>
 800516e:	4b29      	ldr	r3, [pc, #164]	; (8005214 <_strtod_l+0x974>)
 8005170:	429f      	cmp	r7, r3
 8005172:	d102      	bne.n	800517a <_strtod_l+0x8da>
 8005174:	3001      	adds	r0, #1
 8005176:	f43f addf 	beq.w	8004d38 <_strtod_l+0x498>
 800517a:	4b23      	ldr	r3, [pc, #140]	; (8005208 <_strtod_l+0x968>)
 800517c:	403b      	ands	r3, r7
 800517e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005182:	f04f 0a00 	mov.w	sl, #0
 8005186:	9b04      	ldr	r3, [sp, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1a0      	bne.n	80050ce <_strtod_l+0x82e>
 800518c:	e5de      	b.n	8004d4c <_strtod_l+0x4ac>
 800518e:	f04f 33ff 	mov.w	r3, #4294967295
 8005192:	e7ea      	b.n	800516a <_strtod_l+0x8ca>
 8005194:	460b      	mov	r3, r1
 8005196:	e7e8      	b.n	800516a <_strtod_l+0x8ca>
 8005198:	ea53 030a 	orrs.w	r3, r3, sl
 800519c:	d088      	beq.n	80050b0 <_strtod_l+0x810>
 800519e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051a0:	b1db      	cbz	r3, 80051da <_strtod_l+0x93a>
 80051a2:	423b      	tst	r3, r7
 80051a4:	d0ef      	beq.n	8005186 <_strtod_l+0x8e6>
 80051a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051a8:	9a04      	ldr	r2, [sp, #16]
 80051aa:	4650      	mov	r0, sl
 80051ac:	4659      	mov	r1, fp
 80051ae:	b1c3      	cbz	r3, 80051e2 <_strtod_l+0x942>
 80051b0:	f7ff fb59 	bl	8004866 <sulp>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80051bc:	f7fb f876 	bl	80002ac <__adddf3>
 80051c0:	4682      	mov	sl, r0
 80051c2:	468b      	mov	fp, r1
 80051c4:	e7df      	b.n	8005186 <_strtod_l+0x8e6>
 80051c6:	4013      	ands	r3, r2
 80051c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80051cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80051d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80051d4:	f04f 3aff 	mov.w	sl, #4294967295
 80051d8:	e7d5      	b.n	8005186 <_strtod_l+0x8e6>
 80051da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051dc:	ea13 0f0a 	tst.w	r3, sl
 80051e0:	e7e0      	b.n	80051a4 <_strtod_l+0x904>
 80051e2:	f7ff fb40 	bl	8004866 <sulp>
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80051ee:	f7fb f85b 	bl	80002a8 <__aeabi_dsub>
 80051f2:	2200      	movs	r2, #0
 80051f4:	2300      	movs	r3, #0
 80051f6:	4682      	mov	sl, r0
 80051f8:	468b      	mov	fp, r1
 80051fa:	f7fb fc75 	bl	8000ae8 <__aeabi_dcmpeq>
 80051fe:	2800      	cmp	r0, #0
 8005200:	d0c1      	beq.n	8005186 <_strtod_l+0x8e6>
 8005202:	e60e      	b.n	8004e22 <_strtod_l+0x582>
 8005204:	fffffc02 	.word	0xfffffc02
 8005208:	7ff00000 	.word	0x7ff00000
 800520c:	39500000 	.word	0x39500000
 8005210:	000fffff 	.word	0x000fffff
 8005214:	7fefffff 	.word	0x7fefffff
 8005218:	08008488 	.word	0x08008488
 800521c:	4631      	mov	r1, r6
 800521e:	4628      	mov	r0, r5
 8005220:	f002 f836 	bl	8007290 <__ratio>
 8005224:	ec59 8b10 	vmov	r8, r9, d0
 8005228:	ee10 0a10 	vmov	r0, s0
 800522c:	2200      	movs	r2, #0
 800522e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005232:	4649      	mov	r1, r9
 8005234:	f7fb fc6c 	bl	8000b10 <__aeabi_dcmple>
 8005238:	2800      	cmp	r0, #0
 800523a:	d07c      	beq.n	8005336 <_strtod_l+0xa96>
 800523c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800523e:	2b00      	cmp	r3, #0
 8005240:	d04c      	beq.n	80052dc <_strtod_l+0xa3c>
 8005242:	4b95      	ldr	r3, [pc, #596]	; (8005498 <_strtod_l+0xbf8>)
 8005244:	2200      	movs	r2, #0
 8005246:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800524a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005498 <_strtod_l+0xbf8>
 800524e:	f04f 0800 	mov.w	r8, #0
 8005252:	4b92      	ldr	r3, [pc, #584]	; (800549c <_strtod_l+0xbfc>)
 8005254:	403b      	ands	r3, r7
 8005256:	9311      	str	r3, [sp, #68]	; 0x44
 8005258:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800525a:	4b91      	ldr	r3, [pc, #580]	; (80054a0 <_strtod_l+0xc00>)
 800525c:	429a      	cmp	r2, r3
 800525e:	f040 80b2 	bne.w	80053c6 <_strtod_l+0xb26>
 8005262:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005266:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800526a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800526e:	ec4b ab10 	vmov	d0, sl, fp
 8005272:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8005276:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800527a:	f001 ff31 	bl	80070e0 <__ulp>
 800527e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005282:	ec53 2b10 	vmov	r2, r3, d0
 8005286:	f7fb f9c7 	bl	8000618 <__aeabi_dmul>
 800528a:	4652      	mov	r2, sl
 800528c:	465b      	mov	r3, fp
 800528e:	f7fb f80d 	bl	80002ac <__adddf3>
 8005292:	460b      	mov	r3, r1
 8005294:	4981      	ldr	r1, [pc, #516]	; (800549c <_strtod_l+0xbfc>)
 8005296:	4a83      	ldr	r2, [pc, #524]	; (80054a4 <_strtod_l+0xc04>)
 8005298:	4019      	ands	r1, r3
 800529a:	4291      	cmp	r1, r2
 800529c:	4682      	mov	sl, r0
 800529e:	d95e      	bls.n	800535e <_strtod_l+0xabe>
 80052a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052a2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d103      	bne.n	80052b2 <_strtod_l+0xa12>
 80052aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052ac:	3301      	adds	r3, #1
 80052ae:	f43f ad43 	beq.w	8004d38 <_strtod_l+0x498>
 80052b2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80054b0 <_strtod_l+0xc10>
 80052b6:	f04f 3aff 	mov.w	sl, #4294967295
 80052ba:	991e      	ldr	r1, [sp, #120]	; 0x78
 80052bc:	4620      	mov	r0, r4
 80052be:	f001 fbe3 	bl	8006a88 <_Bfree>
 80052c2:	9907      	ldr	r1, [sp, #28]
 80052c4:	4620      	mov	r0, r4
 80052c6:	f001 fbdf 	bl	8006a88 <_Bfree>
 80052ca:	4631      	mov	r1, r6
 80052cc:	4620      	mov	r0, r4
 80052ce:	f001 fbdb 	bl	8006a88 <_Bfree>
 80052d2:	4629      	mov	r1, r5
 80052d4:	4620      	mov	r0, r4
 80052d6:	f001 fbd7 	bl	8006a88 <_Bfree>
 80052da:	e613      	b.n	8004f04 <_strtod_l+0x664>
 80052dc:	f1ba 0f00 	cmp.w	sl, #0
 80052e0:	d11b      	bne.n	800531a <_strtod_l+0xa7a>
 80052e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80052e6:	b9f3      	cbnz	r3, 8005326 <_strtod_l+0xa86>
 80052e8:	4b6b      	ldr	r3, [pc, #428]	; (8005498 <_strtod_l+0xbf8>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	4640      	mov	r0, r8
 80052ee:	4649      	mov	r1, r9
 80052f0:	f7fb fc04 	bl	8000afc <__aeabi_dcmplt>
 80052f4:	b9d0      	cbnz	r0, 800532c <_strtod_l+0xa8c>
 80052f6:	4640      	mov	r0, r8
 80052f8:	4649      	mov	r1, r9
 80052fa:	4b6b      	ldr	r3, [pc, #428]	; (80054a8 <_strtod_l+0xc08>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	f7fb f98b 	bl	8000618 <__aeabi_dmul>
 8005302:	4680      	mov	r8, r0
 8005304:	4689      	mov	r9, r1
 8005306:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800530a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800530e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005310:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8005314:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005318:	e79b      	b.n	8005252 <_strtod_l+0x9b2>
 800531a:	f1ba 0f01 	cmp.w	sl, #1
 800531e:	d102      	bne.n	8005326 <_strtod_l+0xa86>
 8005320:	2f00      	cmp	r7, #0
 8005322:	f43f ad7e 	beq.w	8004e22 <_strtod_l+0x582>
 8005326:	4b61      	ldr	r3, [pc, #388]	; (80054ac <_strtod_l+0xc0c>)
 8005328:	2200      	movs	r2, #0
 800532a:	e78c      	b.n	8005246 <_strtod_l+0x9a6>
 800532c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80054a8 <_strtod_l+0xc08>
 8005330:	f04f 0800 	mov.w	r8, #0
 8005334:	e7e7      	b.n	8005306 <_strtod_l+0xa66>
 8005336:	4b5c      	ldr	r3, [pc, #368]	; (80054a8 <_strtod_l+0xc08>)
 8005338:	4640      	mov	r0, r8
 800533a:	4649      	mov	r1, r9
 800533c:	2200      	movs	r2, #0
 800533e:	f7fb f96b 	bl	8000618 <__aeabi_dmul>
 8005342:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005344:	4680      	mov	r8, r0
 8005346:	4689      	mov	r9, r1
 8005348:	b933      	cbnz	r3, 8005358 <_strtod_l+0xab8>
 800534a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800534e:	9012      	str	r0, [sp, #72]	; 0x48
 8005350:	9313      	str	r3, [sp, #76]	; 0x4c
 8005352:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005356:	e7dd      	b.n	8005314 <_strtod_l+0xa74>
 8005358:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800535c:	e7f9      	b.n	8005352 <_strtod_l+0xab2>
 800535e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005362:	9b04      	ldr	r3, [sp, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1a8      	bne.n	80052ba <_strtod_l+0xa1a>
 8005368:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800536c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800536e:	0d1b      	lsrs	r3, r3, #20
 8005370:	051b      	lsls	r3, r3, #20
 8005372:	429a      	cmp	r2, r3
 8005374:	d1a1      	bne.n	80052ba <_strtod_l+0xa1a>
 8005376:	4640      	mov	r0, r8
 8005378:	4649      	mov	r1, r9
 800537a:	f7fb fc95 	bl	8000ca8 <__aeabi_d2lz>
 800537e:	f7fb f91d 	bl	80005bc <__aeabi_l2d>
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	4640      	mov	r0, r8
 8005388:	4649      	mov	r1, r9
 800538a:	f7fa ff8d 	bl	80002a8 <__aeabi_dsub>
 800538e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005390:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005394:	ea43 030a 	orr.w	r3, r3, sl
 8005398:	4313      	orrs	r3, r2
 800539a:	4680      	mov	r8, r0
 800539c:	4689      	mov	r9, r1
 800539e:	d053      	beq.n	8005448 <_strtod_l+0xba8>
 80053a0:	a335      	add	r3, pc, #212	; (adr r3, 8005478 <_strtod_l+0xbd8>)
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	f7fb fba9 	bl	8000afc <__aeabi_dcmplt>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	f47f acce 	bne.w	8004d4c <_strtod_l+0x4ac>
 80053b0:	a333      	add	r3, pc, #204	; (adr r3, 8005480 <_strtod_l+0xbe0>)
 80053b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b6:	4640      	mov	r0, r8
 80053b8:	4649      	mov	r1, r9
 80053ba:	f7fb fbbd 	bl	8000b38 <__aeabi_dcmpgt>
 80053be:	2800      	cmp	r0, #0
 80053c0:	f43f af7b 	beq.w	80052ba <_strtod_l+0xa1a>
 80053c4:	e4c2      	b.n	8004d4c <_strtod_l+0x4ac>
 80053c6:	9b04      	ldr	r3, [sp, #16]
 80053c8:	b333      	cbz	r3, 8005418 <_strtod_l+0xb78>
 80053ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80053d0:	d822      	bhi.n	8005418 <_strtod_l+0xb78>
 80053d2:	a32d      	add	r3, pc, #180	; (adr r3, 8005488 <_strtod_l+0xbe8>)
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	4640      	mov	r0, r8
 80053da:	4649      	mov	r1, r9
 80053dc:	f7fb fb98 	bl	8000b10 <__aeabi_dcmple>
 80053e0:	b1a0      	cbz	r0, 800540c <_strtod_l+0xb6c>
 80053e2:	4649      	mov	r1, r9
 80053e4:	4640      	mov	r0, r8
 80053e6:	f7fb fbef 	bl	8000bc8 <__aeabi_d2uiz>
 80053ea:	2801      	cmp	r0, #1
 80053ec:	bf38      	it	cc
 80053ee:	2001      	movcc	r0, #1
 80053f0:	f7fb f898 	bl	8000524 <__aeabi_ui2d>
 80053f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053f6:	4680      	mov	r8, r0
 80053f8:	4689      	mov	r9, r1
 80053fa:	bb13      	cbnz	r3, 8005442 <_strtod_l+0xba2>
 80053fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005400:	9014      	str	r0, [sp, #80]	; 0x50
 8005402:	9315      	str	r3, [sp, #84]	; 0x54
 8005404:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005408:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800540c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800540e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005410:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005414:	1a9b      	subs	r3, r3, r2
 8005416:	930d      	str	r3, [sp, #52]	; 0x34
 8005418:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800541c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005420:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005424:	f001 fe5c 	bl	80070e0 <__ulp>
 8005428:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800542c:	ec53 2b10 	vmov	r2, r3, d0
 8005430:	f7fb f8f2 	bl	8000618 <__aeabi_dmul>
 8005434:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005438:	f7fa ff38 	bl	80002ac <__adddf3>
 800543c:	4682      	mov	sl, r0
 800543e:	468b      	mov	fp, r1
 8005440:	e78f      	b.n	8005362 <_strtod_l+0xac2>
 8005442:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8005446:	e7dd      	b.n	8005404 <_strtod_l+0xb64>
 8005448:	a311      	add	r3, pc, #68	; (adr r3, 8005490 <_strtod_l+0xbf0>)
 800544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544e:	f7fb fb55 	bl	8000afc <__aeabi_dcmplt>
 8005452:	e7b4      	b.n	80053be <_strtod_l+0xb1e>
 8005454:	2300      	movs	r3, #0
 8005456:	930e      	str	r3, [sp, #56]	; 0x38
 8005458:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800545a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	f7ff ba65 	b.w	800492c <_strtod_l+0x8c>
 8005462:	2b65      	cmp	r3, #101	; 0x65
 8005464:	f43f ab5d 	beq.w	8004b22 <_strtod_l+0x282>
 8005468:	2b45      	cmp	r3, #69	; 0x45
 800546a:	f43f ab5a 	beq.w	8004b22 <_strtod_l+0x282>
 800546e:	2201      	movs	r2, #1
 8005470:	f7ff bb92 	b.w	8004b98 <_strtod_l+0x2f8>
 8005474:	f3af 8000 	nop.w
 8005478:	94a03595 	.word	0x94a03595
 800547c:	3fdfffff 	.word	0x3fdfffff
 8005480:	35afe535 	.word	0x35afe535
 8005484:	3fe00000 	.word	0x3fe00000
 8005488:	ffc00000 	.word	0xffc00000
 800548c:	41dfffff 	.word	0x41dfffff
 8005490:	94a03595 	.word	0x94a03595
 8005494:	3fcfffff 	.word	0x3fcfffff
 8005498:	3ff00000 	.word	0x3ff00000
 800549c:	7ff00000 	.word	0x7ff00000
 80054a0:	7fe00000 	.word	0x7fe00000
 80054a4:	7c9fffff 	.word	0x7c9fffff
 80054a8:	3fe00000 	.word	0x3fe00000
 80054ac:	bff00000 	.word	0xbff00000
 80054b0:	7fefffff 	.word	0x7fefffff

080054b4 <_strtod_r>:
 80054b4:	4b01      	ldr	r3, [pc, #4]	; (80054bc <_strtod_r+0x8>)
 80054b6:	f7ff b9f3 	b.w	80048a0 <_strtod_l>
 80054ba:	bf00      	nop
 80054bc:	2000006c 	.word	0x2000006c

080054c0 <_strtol_l.isra.0>:
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c6:	d001      	beq.n	80054cc <_strtol_l.isra.0+0xc>
 80054c8:	2b24      	cmp	r3, #36	; 0x24
 80054ca:	d906      	bls.n	80054da <_strtol_l.isra.0+0x1a>
 80054cc:	f7fe fad8 	bl	8003a80 <__errno>
 80054d0:	2316      	movs	r3, #22
 80054d2:	6003      	str	r3, [r0, #0]
 80054d4:	2000      	movs	r0, #0
 80054d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054da:	4f3a      	ldr	r7, [pc, #232]	; (80055c4 <_strtol_l.isra.0+0x104>)
 80054dc:	468e      	mov	lr, r1
 80054de:	4676      	mov	r6, lr
 80054e0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80054e4:	5de5      	ldrb	r5, [r4, r7]
 80054e6:	f015 0508 	ands.w	r5, r5, #8
 80054ea:	d1f8      	bne.n	80054de <_strtol_l.isra.0+0x1e>
 80054ec:	2c2d      	cmp	r4, #45	; 0x2d
 80054ee:	d134      	bne.n	800555a <_strtol_l.isra.0+0x9a>
 80054f0:	f89e 4000 	ldrb.w	r4, [lr]
 80054f4:	f04f 0801 	mov.w	r8, #1
 80054f8:	f106 0e02 	add.w	lr, r6, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d05c      	beq.n	80055ba <_strtol_l.isra.0+0xfa>
 8005500:	2b10      	cmp	r3, #16
 8005502:	d10c      	bne.n	800551e <_strtol_l.isra.0+0x5e>
 8005504:	2c30      	cmp	r4, #48	; 0x30
 8005506:	d10a      	bne.n	800551e <_strtol_l.isra.0+0x5e>
 8005508:	f89e 4000 	ldrb.w	r4, [lr]
 800550c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005510:	2c58      	cmp	r4, #88	; 0x58
 8005512:	d14d      	bne.n	80055b0 <_strtol_l.isra.0+0xf0>
 8005514:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005518:	2310      	movs	r3, #16
 800551a:	f10e 0e02 	add.w	lr, lr, #2
 800551e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005522:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005526:	2600      	movs	r6, #0
 8005528:	fbbc f9f3 	udiv	r9, ip, r3
 800552c:	4635      	mov	r5, r6
 800552e:	fb03 ca19 	mls	sl, r3, r9, ip
 8005532:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005536:	2f09      	cmp	r7, #9
 8005538:	d818      	bhi.n	800556c <_strtol_l.isra.0+0xac>
 800553a:	463c      	mov	r4, r7
 800553c:	42a3      	cmp	r3, r4
 800553e:	dd24      	ble.n	800558a <_strtol_l.isra.0+0xca>
 8005540:	2e00      	cmp	r6, #0
 8005542:	db1f      	blt.n	8005584 <_strtol_l.isra.0+0xc4>
 8005544:	45a9      	cmp	r9, r5
 8005546:	d31d      	bcc.n	8005584 <_strtol_l.isra.0+0xc4>
 8005548:	d101      	bne.n	800554e <_strtol_l.isra.0+0x8e>
 800554a:	45a2      	cmp	sl, r4
 800554c:	db1a      	blt.n	8005584 <_strtol_l.isra.0+0xc4>
 800554e:	fb05 4503 	mla	r5, r5, r3, r4
 8005552:	2601      	movs	r6, #1
 8005554:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005558:	e7eb      	b.n	8005532 <_strtol_l.isra.0+0x72>
 800555a:	2c2b      	cmp	r4, #43	; 0x2b
 800555c:	bf08      	it	eq
 800555e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005562:	46a8      	mov	r8, r5
 8005564:	bf08      	it	eq
 8005566:	f106 0e02 	addeq.w	lr, r6, #2
 800556a:	e7c7      	b.n	80054fc <_strtol_l.isra.0+0x3c>
 800556c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005570:	2f19      	cmp	r7, #25
 8005572:	d801      	bhi.n	8005578 <_strtol_l.isra.0+0xb8>
 8005574:	3c37      	subs	r4, #55	; 0x37
 8005576:	e7e1      	b.n	800553c <_strtol_l.isra.0+0x7c>
 8005578:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800557c:	2f19      	cmp	r7, #25
 800557e:	d804      	bhi.n	800558a <_strtol_l.isra.0+0xca>
 8005580:	3c57      	subs	r4, #87	; 0x57
 8005582:	e7db      	b.n	800553c <_strtol_l.isra.0+0x7c>
 8005584:	f04f 36ff 	mov.w	r6, #4294967295
 8005588:	e7e4      	b.n	8005554 <_strtol_l.isra.0+0x94>
 800558a:	2e00      	cmp	r6, #0
 800558c:	da05      	bge.n	800559a <_strtol_l.isra.0+0xda>
 800558e:	2322      	movs	r3, #34	; 0x22
 8005590:	6003      	str	r3, [r0, #0]
 8005592:	4665      	mov	r5, ip
 8005594:	b942      	cbnz	r2, 80055a8 <_strtol_l.isra.0+0xe8>
 8005596:	4628      	mov	r0, r5
 8005598:	e79d      	b.n	80054d6 <_strtol_l.isra.0+0x16>
 800559a:	f1b8 0f00 	cmp.w	r8, #0
 800559e:	d000      	beq.n	80055a2 <_strtol_l.isra.0+0xe2>
 80055a0:	426d      	negs	r5, r5
 80055a2:	2a00      	cmp	r2, #0
 80055a4:	d0f7      	beq.n	8005596 <_strtol_l.isra.0+0xd6>
 80055a6:	b10e      	cbz	r6, 80055ac <_strtol_l.isra.0+0xec>
 80055a8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80055ac:	6011      	str	r1, [r2, #0]
 80055ae:	e7f2      	b.n	8005596 <_strtol_l.isra.0+0xd6>
 80055b0:	2430      	movs	r4, #48	; 0x30
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1b3      	bne.n	800551e <_strtol_l.isra.0+0x5e>
 80055b6:	2308      	movs	r3, #8
 80055b8:	e7b1      	b.n	800551e <_strtol_l.isra.0+0x5e>
 80055ba:	2c30      	cmp	r4, #48	; 0x30
 80055bc:	d0a4      	beq.n	8005508 <_strtol_l.isra.0+0x48>
 80055be:	230a      	movs	r3, #10
 80055c0:	e7ad      	b.n	800551e <_strtol_l.isra.0+0x5e>
 80055c2:	bf00      	nop
 80055c4:	080084b1 	.word	0x080084b1

080055c8 <_strtol_r>:
 80055c8:	f7ff bf7a 	b.w	80054c0 <_strtol_l.isra.0>

080055cc <strtol>:
 80055cc:	4613      	mov	r3, r2
 80055ce:	460a      	mov	r2, r1
 80055d0:	4601      	mov	r1, r0
 80055d2:	4802      	ldr	r0, [pc, #8]	; (80055dc <strtol+0x10>)
 80055d4:	6800      	ldr	r0, [r0, #0]
 80055d6:	f7ff bf73 	b.w	80054c0 <_strtol_l.isra.0>
 80055da:	bf00      	nop
 80055dc:	20000004 	.word	0x20000004

080055e0 <quorem>:
 80055e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e4:	6903      	ldr	r3, [r0, #16]
 80055e6:	690c      	ldr	r4, [r1, #16]
 80055e8:	42a3      	cmp	r3, r4
 80055ea:	4607      	mov	r7, r0
 80055ec:	f2c0 8081 	blt.w	80056f2 <quorem+0x112>
 80055f0:	3c01      	subs	r4, #1
 80055f2:	f101 0814 	add.w	r8, r1, #20
 80055f6:	f100 0514 	add.w	r5, r0, #20
 80055fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005604:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005608:	3301      	adds	r3, #1
 800560a:	429a      	cmp	r2, r3
 800560c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005610:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005614:	fbb2 f6f3 	udiv	r6, r2, r3
 8005618:	d331      	bcc.n	800567e <quorem+0x9e>
 800561a:	f04f 0e00 	mov.w	lr, #0
 800561e:	4640      	mov	r0, r8
 8005620:	46ac      	mov	ip, r5
 8005622:	46f2      	mov	sl, lr
 8005624:	f850 2b04 	ldr.w	r2, [r0], #4
 8005628:	b293      	uxth	r3, r2
 800562a:	fb06 e303 	mla	r3, r6, r3, lr
 800562e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005632:	b29b      	uxth	r3, r3
 8005634:	ebaa 0303 	sub.w	r3, sl, r3
 8005638:	0c12      	lsrs	r2, r2, #16
 800563a:	f8dc a000 	ldr.w	sl, [ip]
 800563e:	fb06 e202 	mla	r2, r6, r2, lr
 8005642:	fa13 f38a 	uxtah	r3, r3, sl
 8005646:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800564a:	fa1f fa82 	uxth.w	sl, r2
 800564e:	f8dc 2000 	ldr.w	r2, [ip]
 8005652:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005656:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800565a:	b29b      	uxth	r3, r3
 800565c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005660:	4581      	cmp	r9, r0
 8005662:	f84c 3b04 	str.w	r3, [ip], #4
 8005666:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800566a:	d2db      	bcs.n	8005624 <quorem+0x44>
 800566c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005670:	b92b      	cbnz	r3, 800567e <quorem+0x9e>
 8005672:	9b01      	ldr	r3, [sp, #4]
 8005674:	3b04      	subs	r3, #4
 8005676:	429d      	cmp	r5, r3
 8005678:	461a      	mov	r2, r3
 800567a:	d32e      	bcc.n	80056da <quorem+0xfa>
 800567c:	613c      	str	r4, [r7, #16]
 800567e:	4638      	mov	r0, r7
 8005680:	f001 fc8a 	bl	8006f98 <__mcmp>
 8005684:	2800      	cmp	r0, #0
 8005686:	db24      	blt.n	80056d2 <quorem+0xf2>
 8005688:	3601      	adds	r6, #1
 800568a:	4628      	mov	r0, r5
 800568c:	f04f 0c00 	mov.w	ip, #0
 8005690:	f858 2b04 	ldr.w	r2, [r8], #4
 8005694:	f8d0 e000 	ldr.w	lr, [r0]
 8005698:	b293      	uxth	r3, r2
 800569a:	ebac 0303 	sub.w	r3, ip, r3
 800569e:	0c12      	lsrs	r2, r2, #16
 80056a0:	fa13 f38e 	uxtah	r3, r3, lr
 80056a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80056a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056b2:	45c1      	cmp	r9, r8
 80056b4:	f840 3b04 	str.w	r3, [r0], #4
 80056b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80056bc:	d2e8      	bcs.n	8005690 <quorem+0xb0>
 80056be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056c6:	b922      	cbnz	r2, 80056d2 <quorem+0xf2>
 80056c8:	3b04      	subs	r3, #4
 80056ca:	429d      	cmp	r5, r3
 80056cc:	461a      	mov	r2, r3
 80056ce:	d30a      	bcc.n	80056e6 <quorem+0x106>
 80056d0:	613c      	str	r4, [r7, #16]
 80056d2:	4630      	mov	r0, r6
 80056d4:	b003      	add	sp, #12
 80056d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056da:	6812      	ldr	r2, [r2, #0]
 80056dc:	3b04      	subs	r3, #4
 80056de:	2a00      	cmp	r2, #0
 80056e0:	d1cc      	bne.n	800567c <quorem+0x9c>
 80056e2:	3c01      	subs	r4, #1
 80056e4:	e7c7      	b.n	8005676 <quorem+0x96>
 80056e6:	6812      	ldr	r2, [r2, #0]
 80056e8:	3b04      	subs	r3, #4
 80056ea:	2a00      	cmp	r2, #0
 80056ec:	d1f0      	bne.n	80056d0 <quorem+0xf0>
 80056ee:	3c01      	subs	r4, #1
 80056f0:	e7eb      	b.n	80056ca <quorem+0xea>
 80056f2:	2000      	movs	r0, #0
 80056f4:	e7ee      	b.n	80056d4 <quorem+0xf4>
	...

080056f8 <_dtoa_r>:
 80056f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056fc:	ed2d 8b02 	vpush	{d8}
 8005700:	ec57 6b10 	vmov	r6, r7, d0
 8005704:	b095      	sub	sp, #84	; 0x54
 8005706:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005708:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800570c:	9105      	str	r1, [sp, #20]
 800570e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005712:	4604      	mov	r4, r0
 8005714:	9209      	str	r2, [sp, #36]	; 0x24
 8005716:	930f      	str	r3, [sp, #60]	; 0x3c
 8005718:	b975      	cbnz	r5, 8005738 <_dtoa_r+0x40>
 800571a:	2010      	movs	r0, #16
 800571c:	f001 f94c 	bl	80069b8 <malloc>
 8005720:	4602      	mov	r2, r0
 8005722:	6260      	str	r0, [r4, #36]	; 0x24
 8005724:	b920      	cbnz	r0, 8005730 <_dtoa_r+0x38>
 8005726:	4bb2      	ldr	r3, [pc, #712]	; (80059f0 <_dtoa_r+0x2f8>)
 8005728:	21ea      	movs	r1, #234	; 0xea
 800572a:	48b2      	ldr	r0, [pc, #712]	; (80059f4 <_dtoa_r+0x2fc>)
 800572c:	f002 f862 	bl	80077f4 <__assert_func>
 8005730:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005734:	6005      	str	r5, [r0, #0]
 8005736:	60c5      	str	r5, [r0, #12]
 8005738:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800573a:	6819      	ldr	r1, [r3, #0]
 800573c:	b151      	cbz	r1, 8005754 <_dtoa_r+0x5c>
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	604a      	str	r2, [r1, #4]
 8005742:	2301      	movs	r3, #1
 8005744:	4093      	lsls	r3, r2
 8005746:	608b      	str	r3, [r1, #8]
 8005748:	4620      	mov	r0, r4
 800574a:	f001 f99d 	bl	8006a88 <_Bfree>
 800574e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	1e3b      	subs	r3, r7, #0
 8005756:	bfb9      	ittee	lt
 8005758:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800575c:	9303      	strlt	r3, [sp, #12]
 800575e:	2300      	movge	r3, #0
 8005760:	f8c8 3000 	strge.w	r3, [r8]
 8005764:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005768:	4ba3      	ldr	r3, [pc, #652]	; (80059f8 <_dtoa_r+0x300>)
 800576a:	bfbc      	itt	lt
 800576c:	2201      	movlt	r2, #1
 800576e:	f8c8 2000 	strlt.w	r2, [r8]
 8005772:	ea33 0309 	bics.w	r3, r3, r9
 8005776:	d11b      	bne.n	80057b0 <_dtoa_r+0xb8>
 8005778:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800577a:	f242 730f 	movw	r3, #9999	; 0x270f
 800577e:	6013      	str	r3, [r2, #0]
 8005780:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005784:	4333      	orrs	r3, r6
 8005786:	f000 857a 	beq.w	800627e <_dtoa_r+0xb86>
 800578a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800578c:	b963      	cbnz	r3, 80057a8 <_dtoa_r+0xb0>
 800578e:	4b9b      	ldr	r3, [pc, #620]	; (80059fc <_dtoa_r+0x304>)
 8005790:	e024      	b.n	80057dc <_dtoa_r+0xe4>
 8005792:	4b9b      	ldr	r3, [pc, #620]	; (8005a00 <_dtoa_r+0x308>)
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	3308      	adds	r3, #8
 8005798:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	9800      	ldr	r0, [sp, #0]
 800579e:	b015      	add	sp, #84	; 0x54
 80057a0:	ecbd 8b02 	vpop	{d8}
 80057a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a8:	4b94      	ldr	r3, [pc, #592]	; (80059fc <_dtoa_r+0x304>)
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	3303      	adds	r3, #3
 80057ae:	e7f3      	b.n	8005798 <_dtoa_r+0xa0>
 80057b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80057b4:	2200      	movs	r2, #0
 80057b6:	ec51 0b17 	vmov	r0, r1, d7
 80057ba:	2300      	movs	r3, #0
 80057bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80057c0:	f7fb f992 	bl	8000ae8 <__aeabi_dcmpeq>
 80057c4:	4680      	mov	r8, r0
 80057c6:	b158      	cbz	r0, 80057e0 <_dtoa_r+0xe8>
 80057c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057ca:	2301      	movs	r3, #1
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 8551 	beq.w	8006278 <_dtoa_r+0xb80>
 80057d6:	488b      	ldr	r0, [pc, #556]	; (8005a04 <_dtoa_r+0x30c>)
 80057d8:	6018      	str	r0, [r3, #0]
 80057da:	1e43      	subs	r3, r0, #1
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	e7dd      	b.n	800579c <_dtoa_r+0xa4>
 80057e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80057e4:	aa12      	add	r2, sp, #72	; 0x48
 80057e6:	a913      	add	r1, sp, #76	; 0x4c
 80057e8:	4620      	mov	r0, r4
 80057ea:	f001 fcf5 	bl	80071d8 <__d2b>
 80057ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80057f2:	4683      	mov	fp, r0
 80057f4:	2d00      	cmp	r5, #0
 80057f6:	d07c      	beq.n	80058f2 <_dtoa_r+0x1fa>
 80057f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80057fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005802:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005806:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800580a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800580e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005812:	4b7d      	ldr	r3, [pc, #500]	; (8005a08 <_dtoa_r+0x310>)
 8005814:	2200      	movs	r2, #0
 8005816:	4630      	mov	r0, r6
 8005818:	4639      	mov	r1, r7
 800581a:	f7fa fd45 	bl	80002a8 <__aeabi_dsub>
 800581e:	a36e      	add	r3, pc, #440	; (adr r3, 80059d8 <_dtoa_r+0x2e0>)
 8005820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005824:	f7fa fef8 	bl	8000618 <__aeabi_dmul>
 8005828:	a36d      	add	r3, pc, #436	; (adr r3, 80059e0 <_dtoa_r+0x2e8>)
 800582a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582e:	f7fa fd3d 	bl	80002ac <__adddf3>
 8005832:	4606      	mov	r6, r0
 8005834:	4628      	mov	r0, r5
 8005836:	460f      	mov	r7, r1
 8005838:	f7fa fe84 	bl	8000544 <__aeabi_i2d>
 800583c:	a36a      	add	r3, pc, #424	; (adr r3, 80059e8 <_dtoa_r+0x2f0>)
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	f7fa fee9 	bl	8000618 <__aeabi_dmul>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4630      	mov	r0, r6
 800584c:	4639      	mov	r1, r7
 800584e:	f7fa fd2d 	bl	80002ac <__adddf3>
 8005852:	4606      	mov	r6, r0
 8005854:	460f      	mov	r7, r1
 8005856:	f7fb f98f 	bl	8000b78 <__aeabi_d2iz>
 800585a:	2200      	movs	r2, #0
 800585c:	4682      	mov	sl, r0
 800585e:	2300      	movs	r3, #0
 8005860:	4630      	mov	r0, r6
 8005862:	4639      	mov	r1, r7
 8005864:	f7fb f94a 	bl	8000afc <__aeabi_dcmplt>
 8005868:	b148      	cbz	r0, 800587e <_dtoa_r+0x186>
 800586a:	4650      	mov	r0, sl
 800586c:	f7fa fe6a 	bl	8000544 <__aeabi_i2d>
 8005870:	4632      	mov	r2, r6
 8005872:	463b      	mov	r3, r7
 8005874:	f7fb f938 	bl	8000ae8 <__aeabi_dcmpeq>
 8005878:	b908      	cbnz	r0, 800587e <_dtoa_r+0x186>
 800587a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800587e:	f1ba 0f16 	cmp.w	sl, #22
 8005882:	d854      	bhi.n	800592e <_dtoa_r+0x236>
 8005884:	4b61      	ldr	r3, [pc, #388]	; (8005a0c <_dtoa_r+0x314>)
 8005886:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800588a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005892:	f7fb f933 	bl	8000afc <__aeabi_dcmplt>
 8005896:	2800      	cmp	r0, #0
 8005898:	d04b      	beq.n	8005932 <_dtoa_r+0x23a>
 800589a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800589e:	2300      	movs	r3, #0
 80058a0:	930e      	str	r3, [sp, #56]	; 0x38
 80058a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058a4:	1b5d      	subs	r5, r3, r5
 80058a6:	1e6b      	subs	r3, r5, #1
 80058a8:	9304      	str	r3, [sp, #16]
 80058aa:	bf43      	ittte	mi
 80058ac:	2300      	movmi	r3, #0
 80058ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80058b2:	9304      	strmi	r3, [sp, #16]
 80058b4:	f04f 0800 	movpl.w	r8, #0
 80058b8:	f1ba 0f00 	cmp.w	sl, #0
 80058bc:	db3b      	blt.n	8005936 <_dtoa_r+0x23e>
 80058be:	9b04      	ldr	r3, [sp, #16]
 80058c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80058c4:	4453      	add	r3, sl
 80058c6:	9304      	str	r3, [sp, #16]
 80058c8:	2300      	movs	r3, #0
 80058ca:	9306      	str	r3, [sp, #24]
 80058cc:	9b05      	ldr	r3, [sp, #20]
 80058ce:	2b09      	cmp	r3, #9
 80058d0:	d869      	bhi.n	80059a6 <_dtoa_r+0x2ae>
 80058d2:	2b05      	cmp	r3, #5
 80058d4:	bfc4      	itt	gt
 80058d6:	3b04      	subgt	r3, #4
 80058d8:	9305      	strgt	r3, [sp, #20]
 80058da:	9b05      	ldr	r3, [sp, #20]
 80058dc:	f1a3 0302 	sub.w	r3, r3, #2
 80058e0:	bfcc      	ite	gt
 80058e2:	2500      	movgt	r5, #0
 80058e4:	2501      	movle	r5, #1
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d869      	bhi.n	80059be <_dtoa_r+0x2c6>
 80058ea:	e8df f003 	tbb	[pc, r3]
 80058ee:	4e2c      	.short	0x4e2c
 80058f0:	5a4c      	.short	0x5a4c
 80058f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80058f6:	441d      	add	r5, r3
 80058f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80058fc:	2b20      	cmp	r3, #32
 80058fe:	bfc1      	itttt	gt
 8005900:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005904:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005908:	fa09 f303 	lslgt.w	r3, r9, r3
 800590c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005910:	bfda      	itte	le
 8005912:	f1c3 0320 	rsble	r3, r3, #32
 8005916:	fa06 f003 	lslle.w	r0, r6, r3
 800591a:	4318      	orrgt	r0, r3
 800591c:	f7fa fe02 	bl	8000524 <__aeabi_ui2d>
 8005920:	2301      	movs	r3, #1
 8005922:	4606      	mov	r6, r0
 8005924:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005928:	3d01      	subs	r5, #1
 800592a:	9310      	str	r3, [sp, #64]	; 0x40
 800592c:	e771      	b.n	8005812 <_dtoa_r+0x11a>
 800592e:	2301      	movs	r3, #1
 8005930:	e7b6      	b.n	80058a0 <_dtoa_r+0x1a8>
 8005932:	900e      	str	r0, [sp, #56]	; 0x38
 8005934:	e7b5      	b.n	80058a2 <_dtoa_r+0x1aa>
 8005936:	f1ca 0300 	rsb	r3, sl, #0
 800593a:	9306      	str	r3, [sp, #24]
 800593c:	2300      	movs	r3, #0
 800593e:	eba8 080a 	sub.w	r8, r8, sl
 8005942:	930d      	str	r3, [sp, #52]	; 0x34
 8005944:	e7c2      	b.n	80058cc <_dtoa_r+0x1d4>
 8005946:	2300      	movs	r3, #0
 8005948:	9308      	str	r3, [sp, #32]
 800594a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800594c:	2b00      	cmp	r3, #0
 800594e:	dc39      	bgt.n	80059c4 <_dtoa_r+0x2cc>
 8005950:	f04f 0901 	mov.w	r9, #1
 8005954:	f8cd 9004 	str.w	r9, [sp, #4]
 8005958:	464b      	mov	r3, r9
 800595a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800595e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005960:	2200      	movs	r2, #0
 8005962:	6042      	str	r2, [r0, #4]
 8005964:	2204      	movs	r2, #4
 8005966:	f102 0614 	add.w	r6, r2, #20
 800596a:	429e      	cmp	r6, r3
 800596c:	6841      	ldr	r1, [r0, #4]
 800596e:	d92f      	bls.n	80059d0 <_dtoa_r+0x2d8>
 8005970:	4620      	mov	r0, r4
 8005972:	f001 f849 	bl	8006a08 <_Balloc>
 8005976:	9000      	str	r0, [sp, #0]
 8005978:	2800      	cmp	r0, #0
 800597a:	d14b      	bne.n	8005a14 <_dtoa_r+0x31c>
 800597c:	4b24      	ldr	r3, [pc, #144]	; (8005a10 <_dtoa_r+0x318>)
 800597e:	4602      	mov	r2, r0
 8005980:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005984:	e6d1      	b.n	800572a <_dtoa_r+0x32>
 8005986:	2301      	movs	r3, #1
 8005988:	e7de      	b.n	8005948 <_dtoa_r+0x250>
 800598a:	2300      	movs	r3, #0
 800598c:	9308      	str	r3, [sp, #32]
 800598e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005990:	eb0a 0903 	add.w	r9, sl, r3
 8005994:	f109 0301 	add.w	r3, r9, #1
 8005998:	2b01      	cmp	r3, #1
 800599a:	9301      	str	r3, [sp, #4]
 800599c:	bfb8      	it	lt
 800599e:	2301      	movlt	r3, #1
 80059a0:	e7dd      	b.n	800595e <_dtoa_r+0x266>
 80059a2:	2301      	movs	r3, #1
 80059a4:	e7f2      	b.n	800598c <_dtoa_r+0x294>
 80059a6:	2501      	movs	r5, #1
 80059a8:	2300      	movs	r3, #0
 80059aa:	9305      	str	r3, [sp, #20]
 80059ac:	9508      	str	r5, [sp, #32]
 80059ae:	f04f 39ff 	mov.w	r9, #4294967295
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80059b8:	2312      	movs	r3, #18
 80059ba:	9209      	str	r2, [sp, #36]	; 0x24
 80059bc:	e7cf      	b.n	800595e <_dtoa_r+0x266>
 80059be:	2301      	movs	r3, #1
 80059c0:	9308      	str	r3, [sp, #32]
 80059c2:	e7f4      	b.n	80059ae <_dtoa_r+0x2b6>
 80059c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80059c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80059cc:	464b      	mov	r3, r9
 80059ce:	e7c6      	b.n	800595e <_dtoa_r+0x266>
 80059d0:	3101      	adds	r1, #1
 80059d2:	6041      	str	r1, [r0, #4]
 80059d4:	0052      	lsls	r2, r2, #1
 80059d6:	e7c6      	b.n	8005966 <_dtoa_r+0x26e>
 80059d8:	636f4361 	.word	0x636f4361
 80059dc:	3fd287a7 	.word	0x3fd287a7
 80059e0:	8b60c8b3 	.word	0x8b60c8b3
 80059e4:	3fc68a28 	.word	0x3fc68a28
 80059e8:	509f79fb 	.word	0x509f79fb
 80059ec:	3fd34413 	.word	0x3fd34413
 80059f0:	080085be 	.word	0x080085be
 80059f4:	080085d5 	.word	0x080085d5
 80059f8:	7ff00000 	.word	0x7ff00000
 80059fc:	080085ba 	.word	0x080085ba
 8005a00:	080085b1 	.word	0x080085b1
 8005a04:	08008431 	.word	0x08008431
 8005a08:	3ff80000 	.word	0x3ff80000
 8005a0c:	08008750 	.word	0x08008750
 8005a10:	08008634 	.word	0x08008634
 8005a14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a16:	9a00      	ldr	r2, [sp, #0]
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	9b01      	ldr	r3, [sp, #4]
 8005a1c:	2b0e      	cmp	r3, #14
 8005a1e:	f200 80ad 	bhi.w	8005b7c <_dtoa_r+0x484>
 8005a22:	2d00      	cmp	r5, #0
 8005a24:	f000 80aa 	beq.w	8005b7c <_dtoa_r+0x484>
 8005a28:	f1ba 0f00 	cmp.w	sl, #0
 8005a2c:	dd36      	ble.n	8005a9c <_dtoa_r+0x3a4>
 8005a2e:	4ac3      	ldr	r2, [pc, #780]	; (8005d3c <_dtoa_r+0x644>)
 8005a30:	f00a 030f 	and.w	r3, sl, #15
 8005a34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a38:	ed93 7b00 	vldr	d7, [r3]
 8005a3c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005a40:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005a44:	eeb0 8a47 	vmov.f32	s16, s14
 8005a48:	eef0 8a67 	vmov.f32	s17, s15
 8005a4c:	d016      	beq.n	8005a7c <_dtoa_r+0x384>
 8005a4e:	4bbc      	ldr	r3, [pc, #752]	; (8005d40 <_dtoa_r+0x648>)
 8005a50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a58:	f7fa ff08 	bl	800086c <__aeabi_ddiv>
 8005a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a60:	f007 070f 	and.w	r7, r7, #15
 8005a64:	2503      	movs	r5, #3
 8005a66:	4eb6      	ldr	r6, [pc, #728]	; (8005d40 <_dtoa_r+0x648>)
 8005a68:	b957      	cbnz	r7, 8005a80 <_dtoa_r+0x388>
 8005a6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a6e:	ec53 2b18 	vmov	r2, r3, d8
 8005a72:	f7fa fefb 	bl	800086c <__aeabi_ddiv>
 8005a76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a7a:	e029      	b.n	8005ad0 <_dtoa_r+0x3d8>
 8005a7c:	2502      	movs	r5, #2
 8005a7e:	e7f2      	b.n	8005a66 <_dtoa_r+0x36e>
 8005a80:	07f9      	lsls	r1, r7, #31
 8005a82:	d508      	bpl.n	8005a96 <_dtoa_r+0x39e>
 8005a84:	ec51 0b18 	vmov	r0, r1, d8
 8005a88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a8c:	f7fa fdc4 	bl	8000618 <__aeabi_dmul>
 8005a90:	ec41 0b18 	vmov	d8, r0, r1
 8005a94:	3501      	adds	r5, #1
 8005a96:	107f      	asrs	r7, r7, #1
 8005a98:	3608      	adds	r6, #8
 8005a9a:	e7e5      	b.n	8005a68 <_dtoa_r+0x370>
 8005a9c:	f000 80a6 	beq.w	8005bec <_dtoa_r+0x4f4>
 8005aa0:	f1ca 0600 	rsb	r6, sl, #0
 8005aa4:	4ba5      	ldr	r3, [pc, #660]	; (8005d3c <_dtoa_r+0x644>)
 8005aa6:	4fa6      	ldr	r7, [pc, #664]	; (8005d40 <_dtoa_r+0x648>)
 8005aa8:	f006 020f 	and.w	r2, r6, #15
 8005aac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ab8:	f7fa fdae 	bl	8000618 <__aeabi_dmul>
 8005abc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ac0:	1136      	asrs	r6, r6, #4
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	2502      	movs	r5, #2
 8005ac6:	2e00      	cmp	r6, #0
 8005ac8:	f040 8085 	bne.w	8005bd6 <_dtoa_r+0x4de>
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1d2      	bne.n	8005a76 <_dtoa_r+0x37e>
 8005ad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 808c 	beq.w	8005bf0 <_dtoa_r+0x4f8>
 8005ad8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005adc:	4b99      	ldr	r3, [pc, #612]	; (8005d44 <_dtoa_r+0x64c>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	4630      	mov	r0, r6
 8005ae2:	4639      	mov	r1, r7
 8005ae4:	f7fb f80a 	bl	8000afc <__aeabi_dcmplt>
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	f000 8081 	beq.w	8005bf0 <_dtoa_r+0x4f8>
 8005aee:	9b01      	ldr	r3, [sp, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d07d      	beq.n	8005bf0 <_dtoa_r+0x4f8>
 8005af4:	f1b9 0f00 	cmp.w	r9, #0
 8005af8:	dd3c      	ble.n	8005b74 <_dtoa_r+0x47c>
 8005afa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005afe:	9307      	str	r3, [sp, #28]
 8005b00:	2200      	movs	r2, #0
 8005b02:	4b91      	ldr	r3, [pc, #580]	; (8005d48 <_dtoa_r+0x650>)
 8005b04:	4630      	mov	r0, r6
 8005b06:	4639      	mov	r1, r7
 8005b08:	f7fa fd86 	bl	8000618 <__aeabi_dmul>
 8005b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b10:	3501      	adds	r5, #1
 8005b12:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005b16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	f7fa fd12 	bl	8000544 <__aeabi_i2d>
 8005b20:	4632      	mov	r2, r6
 8005b22:	463b      	mov	r3, r7
 8005b24:	f7fa fd78 	bl	8000618 <__aeabi_dmul>
 8005b28:	4b88      	ldr	r3, [pc, #544]	; (8005d4c <_dtoa_r+0x654>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f7fa fbbe 	bl	80002ac <__adddf3>
 8005b30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005b34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b38:	9303      	str	r3, [sp, #12]
 8005b3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d15c      	bne.n	8005bfa <_dtoa_r+0x502>
 8005b40:	4b83      	ldr	r3, [pc, #524]	; (8005d50 <_dtoa_r+0x658>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	4630      	mov	r0, r6
 8005b46:	4639      	mov	r1, r7
 8005b48:	f7fa fbae 	bl	80002a8 <__aeabi_dsub>
 8005b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b50:	4606      	mov	r6, r0
 8005b52:	460f      	mov	r7, r1
 8005b54:	f7fa fff0 	bl	8000b38 <__aeabi_dcmpgt>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	f040 8296 	bne.w	800608a <_dtoa_r+0x992>
 8005b5e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005b62:	4630      	mov	r0, r6
 8005b64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b68:	4639      	mov	r1, r7
 8005b6a:	f7fa ffc7 	bl	8000afc <__aeabi_dcmplt>
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	f040 8288 	bne.w	8006084 <_dtoa_r+0x98c>
 8005b74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f2c0 8158 	blt.w	8005e34 <_dtoa_r+0x73c>
 8005b84:	f1ba 0f0e 	cmp.w	sl, #14
 8005b88:	f300 8154 	bgt.w	8005e34 <_dtoa_r+0x73c>
 8005b8c:	4b6b      	ldr	r3, [pc, #428]	; (8005d3c <_dtoa_r+0x644>)
 8005b8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b92:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f280 80e3 	bge.w	8005d64 <_dtoa_r+0x66c>
 8005b9e:	9b01      	ldr	r3, [sp, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f300 80df 	bgt.w	8005d64 <_dtoa_r+0x66c>
 8005ba6:	f040 826d 	bne.w	8006084 <_dtoa_r+0x98c>
 8005baa:	4b69      	ldr	r3, [pc, #420]	; (8005d50 <_dtoa_r+0x658>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	4640      	mov	r0, r8
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	f7fa fd31 	bl	8000618 <__aeabi_dmul>
 8005bb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bba:	f7fa ffb3 	bl	8000b24 <__aeabi_dcmpge>
 8005bbe:	9e01      	ldr	r6, [sp, #4]
 8005bc0:	4637      	mov	r7, r6
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	f040 8243 	bne.w	800604e <_dtoa_r+0x956>
 8005bc8:	9d00      	ldr	r5, [sp, #0]
 8005bca:	2331      	movs	r3, #49	; 0x31
 8005bcc:	f805 3b01 	strb.w	r3, [r5], #1
 8005bd0:	f10a 0a01 	add.w	sl, sl, #1
 8005bd4:	e23f      	b.n	8006056 <_dtoa_r+0x95e>
 8005bd6:	07f2      	lsls	r2, r6, #31
 8005bd8:	d505      	bpl.n	8005be6 <_dtoa_r+0x4ee>
 8005bda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bde:	f7fa fd1b 	bl	8000618 <__aeabi_dmul>
 8005be2:	3501      	adds	r5, #1
 8005be4:	2301      	movs	r3, #1
 8005be6:	1076      	asrs	r6, r6, #1
 8005be8:	3708      	adds	r7, #8
 8005bea:	e76c      	b.n	8005ac6 <_dtoa_r+0x3ce>
 8005bec:	2502      	movs	r5, #2
 8005bee:	e76f      	b.n	8005ad0 <_dtoa_r+0x3d8>
 8005bf0:	9b01      	ldr	r3, [sp, #4]
 8005bf2:	f8cd a01c 	str.w	sl, [sp, #28]
 8005bf6:	930c      	str	r3, [sp, #48]	; 0x30
 8005bf8:	e78d      	b.n	8005b16 <_dtoa_r+0x41e>
 8005bfa:	9900      	ldr	r1, [sp, #0]
 8005bfc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005bfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c00:	4b4e      	ldr	r3, [pc, #312]	; (8005d3c <_dtoa_r+0x644>)
 8005c02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c06:	4401      	add	r1, r0
 8005c08:	9102      	str	r1, [sp, #8]
 8005c0a:	9908      	ldr	r1, [sp, #32]
 8005c0c:	eeb0 8a47 	vmov.f32	s16, s14
 8005c10:	eef0 8a67 	vmov.f32	s17, s15
 8005c14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c1c:	2900      	cmp	r1, #0
 8005c1e:	d045      	beq.n	8005cac <_dtoa_r+0x5b4>
 8005c20:	494c      	ldr	r1, [pc, #304]	; (8005d54 <_dtoa_r+0x65c>)
 8005c22:	2000      	movs	r0, #0
 8005c24:	f7fa fe22 	bl	800086c <__aeabi_ddiv>
 8005c28:	ec53 2b18 	vmov	r2, r3, d8
 8005c2c:	f7fa fb3c 	bl	80002a8 <__aeabi_dsub>
 8005c30:	9d00      	ldr	r5, [sp, #0]
 8005c32:	ec41 0b18 	vmov	d8, r0, r1
 8005c36:	4639      	mov	r1, r7
 8005c38:	4630      	mov	r0, r6
 8005c3a:	f7fa ff9d 	bl	8000b78 <__aeabi_d2iz>
 8005c3e:	900c      	str	r0, [sp, #48]	; 0x30
 8005c40:	f7fa fc80 	bl	8000544 <__aeabi_i2d>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4630      	mov	r0, r6
 8005c4a:	4639      	mov	r1, r7
 8005c4c:	f7fa fb2c 	bl	80002a8 <__aeabi_dsub>
 8005c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c52:	3330      	adds	r3, #48	; 0x30
 8005c54:	f805 3b01 	strb.w	r3, [r5], #1
 8005c58:	ec53 2b18 	vmov	r2, r3, d8
 8005c5c:	4606      	mov	r6, r0
 8005c5e:	460f      	mov	r7, r1
 8005c60:	f7fa ff4c 	bl	8000afc <__aeabi_dcmplt>
 8005c64:	2800      	cmp	r0, #0
 8005c66:	d165      	bne.n	8005d34 <_dtoa_r+0x63c>
 8005c68:	4632      	mov	r2, r6
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	4935      	ldr	r1, [pc, #212]	; (8005d44 <_dtoa_r+0x64c>)
 8005c6e:	2000      	movs	r0, #0
 8005c70:	f7fa fb1a 	bl	80002a8 <__aeabi_dsub>
 8005c74:	ec53 2b18 	vmov	r2, r3, d8
 8005c78:	f7fa ff40 	bl	8000afc <__aeabi_dcmplt>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	f040 80b9 	bne.w	8005df4 <_dtoa_r+0x6fc>
 8005c82:	9b02      	ldr	r3, [sp, #8]
 8005c84:	429d      	cmp	r5, r3
 8005c86:	f43f af75 	beq.w	8005b74 <_dtoa_r+0x47c>
 8005c8a:	4b2f      	ldr	r3, [pc, #188]	; (8005d48 <_dtoa_r+0x650>)
 8005c8c:	ec51 0b18 	vmov	r0, r1, d8
 8005c90:	2200      	movs	r2, #0
 8005c92:	f7fa fcc1 	bl	8000618 <__aeabi_dmul>
 8005c96:	4b2c      	ldr	r3, [pc, #176]	; (8005d48 <_dtoa_r+0x650>)
 8005c98:	ec41 0b18 	vmov	d8, r0, r1
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	4639      	mov	r1, r7
 8005ca2:	f7fa fcb9 	bl	8000618 <__aeabi_dmul>
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	460f      	mov	r7, r1
 8005caa:	e7c4      	b.n	8005c36 <_dtoa_r+0x53e>
 8005cac:	ec51 0b17 	vmov	r0, r1, d7
 8005cb0:	f7fa fcb2 	bl	8000618 <__aeabi_dmul>
 8005cb4:	9b02      	ldr	r3, [sp, #8]
 8005cb6:	9d00      	ldr	r5, [sp, #0]
 8005cb8:	930c      	str	r3, [sp, #48]	; 0x30
 8005cba:	ec41 0b18 	vmov	d8, r0, r1
 8005cbe:	4639      	mov	r1, r7
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	f7fa ff59 	bl	8000b78 <__aeabi_d2iz>
 8005cc6:	9011      	str	r0, [sp, #68]	; 0x44
 8005cc8:	f7fa fc3c 	bl	8000544 <__aeabi_i2d>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	4639      	mov	r1, r7
 8005cd4:	f7fa fae8 	bl	80002a8 <__aeabi_dsub>
 8005cd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cda:	3330      	adds	r3, #48	; 0x30
 8005cdc:	f805 3b01 	strb.w	r3, [r5], #1
 8005ce0:	9b02      	ldr	r3, [sp, #8]
 8005ce2:	429d      	cmp	r5, r3
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	460f      	mov	r7, r1
 8005ce8:	f04f 0200 	mov.w	r2, #0
 8005cec:	d134      	bne.n	8005d58 <_dtoa_r+0x660>
 8005cee:	4b19      	ldr	r3, [pc, #100]	; (8005d54 <_dtoa_r+0x65c>)
 8005cf0:	ec51 0b18 	vmov	r0, r1, d8
 8005cf4:	f7fa fada 	bl	80002ac <__adddf3>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	4639      	mov	r1, r7
 8005d00:	f7fa ff1a 	bl	8000b38 <__aeabi_dcmpgt>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d175      	bne.n	8005df4 <_dtoa_r+0x6fc>
 8005d08:	ec53 2b18 	vmov	r2, r3, d8
 8005d0c:	4911      	ldr	r1, [pc, #68]	; (8005d54 <_dtoa_r+0x65c>)
 8005d0e:	2000      	movs	r0, #0
 8005d10:	f7fa faca 	bl	80002a8 <__aeabi_dsub>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4630      	mov	r0, r6
 8005d1a:	4639      	mov	r1, r7
 8005d1c:	f7fa feee 	bl	8000afc <__aeabi_dcmplt>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	f43f af27 	beq.w	8005b74 <_dtoa_r+0x47c>
 8005d26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d28:	1e6b      	subs	r3, r5, #1
 8005d2a:	930c      	str	r3, [sp, #48]	; 0x30
 8005d2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d30:	2b30      	cmp	r3, #48	; 0x30
 8005d32:	d0f8      	beq.n	8005d26 <_dtoa_r+0x62e>
 8005d34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005d38:	e04a      	b.n	8005dd0 <_dtoa_r+0x6d8>
 8005d3a:	bf00      	nop
 8005d3c:	08008750 	.word	0x08008750
 8005d40:	08008728 	.word	0x08008728
 8005d44:	3ff00000 	.word	0x3ff00000
 8005d48:	40240000 	.word	0x40240000
 8005d4c:	401c0000 	.word	0x401c0000
 8005d50:	40140000 	.word	0x40140000
 8005d54:	3fe00000 	.word	0x3fe00000
 8005d58:	4baf      	ldr	r3, [pc, #700]	; (8006018 <_dtoa_r+0x920>)
 8005d5a:	f7fa fc5d 	bl	8000618 <__aeabi_dmul>
 8005d5e:	4606      	mov	r6, r0
 8005d60:	460f      	mov	r7, r1
 8005d62:	e7ac      	b.n	8005cbe <_dtoa_r+0x5c6>
 8005d64:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d68:	9d00      	ldr	r5, [sp, #0]
 8005d6a:	4642      	mov	r2, r8
 8005d6c:	464b      	mov	r3, r9
 8005d6e:	4630      	mov	r0, r6
 8005d70:	4639      	mov	r1, r7
 8005d72:	f7fa fd7b 	bl	800086c <__aeabi_ddiv>
 8005d76:	f7fa feff 	bl	8000b78 <__aeabi_d2iz>
 8005d7a:	9002      	str	r0, [sp, #8]
 8005d7c:	f7fa fbe2 	bl	8000544 <__aeabi_i2d>
 8005d80:	4642      	mov	r2, r8
 8005d82:	464b      	mov	r3, r9
 8005d84:	f7fa fc48 	bl	8000618 <__aeabi_dmul>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	4639      	mov	r1, r7
 8005d90:	f7fa fa8a 	bl	80002a8 <__aeabi_dsub>
 8005d94:	9e02      	ldr	r6, [sp, #8]
 8005d96:	9f01      	ldr	r7, [sp, #4]
 8005d98:	3630      	adds	r6, #48	; 0x30
 8005d9a:	f805 6b01 	strb.w	r6, [r5], #1
 8005d9e:	9e00      	ldr	r6, [sp, #0]
 8005da0:	1bae      	subs	r6, r5, r6
 8005da2:	42b7      	cmp	r7, r6
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	d137      	bne.n	8005e1a <_dtoa_r+0x722>
 8005daa:	f7fa fa7f 	bl	80002ac <__adddf3>
 8005dae:	4642      	mov	r2, r8
 8005db0:	464b      	mov	r3, r9
 8005db2:	4606      	mov	r6, r0
 8005db4:	460f      	mov	r7, r1
 8005db6:	f7fa febf 	bl	8000b38 <__aeabi_dcmpgt>
 8005dba:	b9c8      	cbnz	r0, 8005df0 <_dtoa_r+0x6f8>
 8005dbc:	4642      	mov	r2, r8
 8005dbe:	464b      	mov	r3, r9
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	4639      	mov	r1, r7
 8005dc4:	f7fa fe90 	bl	8000ae8 <__aeabi_dcmpeq>
 8005dc8:	b110      	cbz	r0, 8005dd0 <_dtoa_r+0x6d8>
 8005dca:	9b02      	ldr	r3, [sp, #8]
 8005dcc:	07d9      	lsls	r1, r3, #31
 8005dce:	d40f      	bmi.n	8005df0 <_dtoa_r+0x6f8>
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	4659      	mov	r1, fp
 8005dd4:	f000 fe58 	bl	8006a88 <_Bfree>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	702b      	strb	r3, [r5, #0]
 8005ddc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dde:	f10a 0001 	add.w	r0, sl, #1
 8005de2:	6018      	str	r0, [r3, #0]
 8005de4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f43f acd8 	beq.w	800579c <_dtoa_r+0xa4>
 8005dec:	601d      	str	r5, [r3, #0]
 8005dee:	e4d5      	b.n	800579c <_dtoa_r+0xa4>
 8005df0:	f8cd a01c 	str.w	sl, [sp, #28]
 8005df4:	462b      	mov	r3, r5
 8005df6:	461d      	mov	r5, r3
 8005df8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005dfc:	2a39      	cmp	r2, #57	; 0x39
 8005dfe:	d108      	bne.n	8005e12 <_dtoa_r+0x71a>
 8005e00:	9a00      	ldr	r2, [sp, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d1f7      	bne.n	8005df6 <_dtoa_r+0x6fe>
 8005e06:	9a07      	ldr	r2, [sp, #28]
 8005e08:	9900      	ldr	r1, [sp, #0]
 8005e0a:	3201      	adds	r2, #1
 8005e0c:	9207      	str	r2, [sp, #28]
 8005e0e:	2230      	movs	r2, #48	; 0x30
 8005e10:	700a      	strb	r2, [r1, #0]
 8005e12:	781a      	ldrb	r2, [r3, #0]
 8005e14:	3201      	adds	r2, #1
 8005e16:	701a      	strb	r2, [r3, #0]
 8005e18:	e78c      	b.n	8005d34 <_dtoa_r+0x63c>
 8005e1a:	4b7f      	ldr	r3, [pc, #508]	; (8006018 <_dtoa_r+0x920>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f7fa fbfb 	bl	8000618 <__aeabi_dmul>
 8005e22:	2200      	movs	r2, #0
 8005e24:	2300      	movs	r3, #0
 8005e26:	4606      	mov	r6, r0
 8005e28:	460f      	mov	r7, r1
 8005e2a:	f7fa fe5d 	bl	8000ae8 <__aeabi_dcmpeq>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d09b      	beq.n	8005d6a <_dtoa_r+0x672>
 8005e32:	e7cd      	b.n	8005dd0 <_dtoa_r+0x6d8>
 8005e34:	9a08      	ldr	r2, [sp, #32]
 8005e36:	2a00      	cmp	r2, #0
 8005e38:	f000 80c4 	beq.w	8005fc4 <_dtoa_r+0x8cc>
 8005e3c:	9a05      	ldr	r2, [sp, #20]
 8005e3e:	2a01      	cmp	r2, #1
 8005e40:	f300 80a8 	bgt.w	8005f94 <_dtoa_r+0x89c>
 8005e44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e46:	2a00      	cmp	r2, #0
 8005e48:	f000 80a0 	beq.w	8005f8c <_dtoa_r+0x894>
 8005e4c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e50:	9e06      	ldr	r6, [sp, #24]
 8005e52:	4645      	mov	r5, r8
 8005e54:	9a04      	ldr	r2, [sp, #16]
 8005e56:	2101      	movs	r1, #1
 8005e58:	441a      	add	r2, r3
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	4498      	add	r8, r3
 8005e5e:	9204      	str	r2, [sp, #16]
 8005e60:	f000 ff18 	bl	8006c94 <__i2b>
 8005e64:	4607      	mov	r7, r0
 8005e66:	2d00      	cmp	r5, #0
 8005e68:	dd0b      	ble.n	8005e82 <_dtoa_r+0x78a>
 8005e6a:	9b04      	ldr	r3, [sp, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	dd08      	ble.n	8005e82 <_dtoa_r+0x78a>
 8005e70:	42ab      	cmp	r3, r5
 8005e72:	9a04      	ldr	r2, [sp, #16]
 8005e74:	bfa8      	it	ge
 8005e76:	462b      	movge	r3, r5
 8005e78:	eba8 0803 	sub.w	r8, r8, r3
 8005e7c:	1aed      	subs	r5, r5, r3
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	9304      	str	r3, [sp, #16]
 8005e82:	9b06      	ldr	r3, [sp, #24]
 8005e84:	b1fb      	cbz	r3, 8005ec6 <_dtoa_r+0x7ce>
 8005e86:	9b08      	ldr	r3, [sp, #32]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 809f 	beq.w	8005fcc <_dtoa_r+0x8d4>
 8005e8e:	2e00      	cmp	r6, #0
 8005e90:	dd11      	ble.n	8005eb6 <_dtoa_r+0x7be>
 8005e92:	4639      	mov	r1, r7
 8005e94:	4632      	mov	r2, r6
 8005e96:	4620      	mov	r0, r4
 8005e98:	f000 ffb8 	bl	8006e0c <__pow5mult>
 8005e9c:	465a      	mov	r2, fp
 8005e9e:	4601      	mov	r1, r0
 8005ea0:	4607      	mov	r7, r0
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f000 ff0c 	bl	8006cc0 <__multiply>
 8005ea8:	4659      	mov	r1, fp
 8005eaa:	9007      	str	r0, [sp, #28]
 8005eac:	4620      	mov	r0, r4
 8005eae:	f000 fdeb 	bl	8006a88 <_Bfree>
 8005eb2:	9b07      	ldr	r3, [sp, #28]
 8005eb4:	469b      	mov	fp, r3
 8005eb6:	9b06      	ldr	r3, [sp, #24]
 8005eb8:	1b9a      	subs	r2, r3, r6
 8005eba:	d004      	beq.n	8005ec6 <_dtoa_r+0x7ce>
 8005ebc:	4659      	mov	r1, fp
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f000 ffa4 	bl	8006e0c <__pow5mult>
 8005ec4:	4683      	mov	fp, r0
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f000 fee3 	bl	8006c94 <__i2b>
 8005ece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	4606      	mov	r6, r0
 8005ed4:	dd7c      	ble.n	8005fd0 <_dtoa_r+0x8d8>
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	4601      	mov	r1, r0
 8005eda:	4620      	mov	r0, r4
 8005edc:	f000 ff96 	bl	8006e0c <__pow5mult>
 8005ee0:	9b05      	ldr	r3, [sp, #20]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	4606      	mov	r6, r0
 8005ee6:	dd76      	ble.n	8005fd6 <_dtoa_r+0x8de>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	9306      	str	r3, [sp, #24]
 8005eec:	6933      	ldr	r3, [r6, #16]
 8005eee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005ef2:	6918      	ldr	r0, [r3, #16]
 8005ef4:	f000 fe7e 	bl	8006bf4 <__hi0bits>
 8005ef8:	f1c0 0020 	rsb	r0, r0, #32
 8005efc:	9b04      	ldr	r3, [sp, #16]
 8005efe:	4418      	add	r0, r3
 8005f00:	f010 001f 	ands.w	r0, r0, #31
 8005f04:	f000 8086 	beq.w	8006014 <_dtoa_r+0x91c>
 8005f08:	f1c0 0320 	rsb	r3, r0, #32
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	dd7f      	ble.n	8006010 <_dtoa_r+0x918>
 8005f10:	f1c0 001c 	rsb	r0, r0, #28
 8005f14:	9b04      	ldr	r3, [sp, #16]
 8005f16:	4403      	add	r3, r0
 8005f18:	4480      	add	r8, r0
 8005f1a:	4405      	add	r5, r0
 8005f1c:	9304      	str	r3, [sp, #16]
 8005f1e:	f1b8 0f00 	cmp.w	r8, #0
 8005f22:	dd05      	ble.n	8005f30 <_dtoa_r+0x838>
 8005f24:	4659      	mov	r1, fp
 8005f26:	4642      	mov	r2, r8
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f000 ffc9 	bl	8006ec0 <__lshift>
 8005f2e:	4683      	mov	fp, r0
 8005f30:	9b04      	ldr	r3, [sp, #16]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	dd05      	ble.n	8005f42 <_dtoa_r+0x84a>
 8005f36:	4631      	mov	r1, r6
 8005f38:	461a      	mov	r2, r3
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f000 ffc0 	bl	8006ec0 <__lshift>
 8005f40:	4606      	mov	r6, r0
 8005f42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d069      	beq.n	800601c <_dtoa_r+0x924>
 8005f48:	4631      	mov	r1, r6
 8005f4a:	4658      	mov	r0, fp
 8005f4c:	f001 f824 	bl	8006f98 <__mcmp>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	da63      	bge.n	800601c <_dtoa_r+0x924>
 8005f54:	2300      	movs	r3, #0
 8005f56:	4659      	mov	r1, fp
 8005f58:	220a      	movs	r2, #10
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f000 fdb6 	bl	8006acc <__multadd>
 8005f60:	9b08      	ldr	r3, [sp, #32]
 8005f62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f66:	4683      	mov	fp, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 818f 	beq.w	800628c <_dtoa_r+0xb94>
 8005f6e:	4639      	mov	r1, r7
 8005f70:	2300      	movs	r3, #0
 8005f72:	220a      	movs	r2, #10
 8005f74:	4620      	mov	r0, r4
 8005f76:	f000 fda9 	bl	8006acc <__multadd>
 8005f7a:	f1b9 0f00 	cmp.w	r9, #0
 8005f7e:	4607      	mov	r7, r0
 8005f80:	f300 808e 	bgt.w	80060a0 <_dtoa_r+0x9a8>
 8005f84:	9b05      	ldr	r3, [sp, #20]
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	dc50      	bgt.n	800602c <_dtoa_r+0x934>
 8005f8a:	e089      	b.n	80060a0 <_dtoa_r+0x9a8>
 8005f8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f92:	e75d      	b.n	8005e50 <_dtoa_r+0x758>
 8005f94:	9b01      	ldr	r3, [sp, #4]
 8005f96:	1e5e      	subs	r6, r3, #1
 8005f98:	9b06      	ldr	r3, [sp, #24]
 8005f9a:	42b3      	cmp	r3, r6
 8005f9c:	bfbf      	itttt	lt
 8005f9e:	9b06      	ldrlt	r3, [sp, #24]
 8005fa0:	9606      	strlt	r6, [sp, #24]
 8005fa2:	1af2      	sublt	r2, r6, r3
 8005fa4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005fa6:	bfb6      	itet	lt
 8005fa8:	189b      	addlt	r3, r3, r2
 8005faa:	1b9e      	subge	r6, r3, r6
 8005fac:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005fae:	9b01      	ldr	r3, [sp, #4]
 8005fb0:	bfb8      	it	lt
 8005fb2:	2600      	movlt	r6, #0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	bfb5      	itete	lt
 8005fb8:	eba8 0503 	sublt.w	r5, r8, r3
 8005fbc:	9b01      	ldrge	r3, [sp, #4]
 8005fbe:	2300      	movlt	r3, #0
 8005fc0:	4645      	movge	r5, r8
 8005fc2:	e747      	b.n	8005e54 <_dtoa_r+0x75c>
 8005fc4:	9e06      	ldr	r6, [sp, #24]
 8005fc6:	9f08      	ldr	r7, [sp, #32]
 8005fc8:	4645      	mov	r5, r8
 8005fca:	e74c      	b.n	8005e66 <_dtoa_r+0x76e>
 8005fcc:	9a06      	ldr	r2, [sp, #24]
 8005fce:	e775      	b.n	8005ebc <_dtoa_r+0x7c4>
 8005fd0:	9b05      	ldr	r3, [sp, #20]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	dc18      	bgt.n	8006008 <_dtoa_r+0x910>
 8005fd6:	9b02      	ldr	r3, [sp, #8]
 8005fd8:	b9b3      	cbnz	r3, 8006008 <_dtoa_r+0x910>
 8005fda:	9b03      	ldr	r3, [sp, #12]
 8005fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fe0:	b9a3      	cbnz	r3, 800600c <_dtoa_r+0x914>
 8005fe2:	9b03      	ldr	r3, [sp, #12]
 8005fe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fe8:	0d1b      	lsrs	r3, r3, #20
 8005fea:	051b      	lsls	r3, r3, #20
 8005fec:	b12b      	cbz	r3, 8005ffa <_dtoa_r+0x902>
 8005fee:	9b04      	ldr	r3, [sp, #16]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	9304      	str	r3, [sp, #16]
 8005ff4:	f108 0801 	add.w	r8, r8, #1
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	9306      	str	r3, [sp, #24]
 8005ffc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f47f af74 	bne.w	8005eec <_dtoa_r+0x7f4>
 8006004:	2001      	movs	r0, #1
 8006006:	e779      	b.n	8005efc <_dtoa_r+0x804>
 8006008:	2300      	movs	r3, #0
 800600a:	e7f6      	b.n	8005ffa <_dtoa_r+0x902>
 800600c:	9b02      	ldr	r3, [sp, #8]
 800600e:	e7f4      	b.n	8005ffa <_dtoa_r+0x902>
 8006010:	d085      	beq.n	8005f1e <_dtoa_r+0x826>
 8006012:	4618      	mov	r0, r3
 8006014:	301c      	adds	r0, #28
 8006016:	e77d      	b.n	8005f14 <_dtoa_r+0x81c>
 8006018:	40240000 	.word	0x40240000
 800601c:	9b01      	ldr	r3, [sp, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	dc38      	bgt.n	8006094 <_dtoa_r+0x99c>
 8006022:	9b05      	ldr	r3, [sp, #20]
 8006024:	2b02      	cmp	r3, #2
 8006026:	dd35      	ble.n	8006094 <_dtoa_r+0x99c>
 8006028:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800602c:	f1b9 0f00 	cmp.w	r9, #0
 8006030:	d10d      	bne.n	800604e <_dtoa_r+0x956>
 8006032:	4631      	mov	r1, r6
 8006034:	464b      	mov	r3, r9
 8006036:	2205      	movs	r2, #5
 8006038:	4620      	mov	r0, r4
 800603a:	f000 fd47 	bl	8006acc <__multadd>
 800603e:	4601      	mov	r1, r0
 8006040:	4606      	mov	r6, r0
 8006042:	4658      	mov	r0, fp
 8006044:	f000 ffa8 	bl	8006f98 <__mcmp>
 8006048:	2800      	cmp	r0, #0
 800604a:	f73f adbd 	bgt.w	8005bc8 <_dtoa_r+0x4d0>
 800604e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006050:	9d00      	ldr	r5, [sp, #0]
 8006052:	ea6f 0a03 	mvn.w	sl, r3
 8006056:	f04f 0800 	mov.w	r8, #0
 800605a:	4631      	mov	r1, r6
 800605c:	4620      	mov	r0, r4
 800605e:	f000 fd13 	bl	8006a88 <_Bfree>
 8006062:	2f00      	cmp	r7, #0
 8006064:	f43f aeb4 	beq.w	8005dd0 <_dtoa_r+0x6d8>
 8006068:	f1b8 0f00 	cmp.w	r8, #0
 800606c:	d005      	beq.n	800607a <_dtoa_r+0x982>
 800606e:	45b8      	cmp	r8, r7
 8006070:	d003      	beq.n	800607a <_dtoa_r+0x982>
 8006072:	4641      	mov	r1, r8
 8006074:	4620      	mov	r0, r4
 8006076:	f000 fd07 	bl	8006a88 <_Bfree>
 800607a:	4639      	mov	r1, r7
 800607c:	4620      	mov	r0, r4
 800607e:	f000 fd03 	bl	8006a88 <_Bfree>
 8006082:	e6a5      	b.n	8005dd0 <_dtoa_r+0x6d8>
 8006084:	2600      	movs	r6, #0
 8006086:	4637      	mov	r7, r6
 8006088:	e7e1      	b.n	800604e <_dtoa_r+0x956>
 800608a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800608c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006090:	4637      	mov	r7, r6
 8006092:	e599      	b.n	8005bc8 <_dtoa_r+0x4d0>
 8006094:	9b08      	ldr	r3, [sp, #32]
 8006096:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 80fd 	beq.w	800629a <_dtoa_r+0xba2>
 80060a0:	2d00      	cmp	r5, #0
 80060a2:	dd05      	ble.n	80060b0 <_dtoa_r+0x9b8>
 80060a4:	4639      	mov	r1, r7
 80060a6:	462a      	mov	r2, r5
 80060a8:	4620      	mov	r0, r4
 80060aa:	f000 ff09 	bl	8006ec0 <__lshift>
 80060ae:	4607      	mov	r7, r0
 80060b0:	9b06      	ldr	r3, [sp, #24]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d05c      	beq.n	8006170 <_dtoa_r+0xa78>
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	4620      	mov	r0, r4
 80060ba:	f000 fca5 	bl	8006a08 <_Balloc>
 80060be:	4605      	mov	r5, r0
 80060c0:	b928      	cbnz	r0, 80060ce <_dtoa_r+0x9d6>
 80060c2:	4b80      	ldr	r3, [pc, #512]	; (80062c4 <_dtoa_r+0xbcc>)
 80060c4:	4602      	mov	r2, r0
 80060c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80060ca:	f7ff bb2e 	b.w	800572a <_dtoa_r+0x32>
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	3202      	adds	r2, #2
 80060d2:	0092      	lsls	r2, r2, #2
 80060d4:	f107 010c 	add.w	r1, r7, #12
 80060d8:	300c      	adds	r0, #12
 80060da:	f000 fc87 	bl	80069ec <memcpy>
 80060de:	2201      	movs	r2, #1
 80060e0:	4629      	mov	r1, r5
 80060e2:	4620      	mov	r0, r4
 80060e4:	f000 feec 	bl	8006ec0 <__lshift>
 80060e8:	9b00      	ldr	r3, [sp, #0]
 80060ea:	3301      	adds	r3, #1
 80060ec:	9301      	str	r3, [sp, #4]
 80060ee:	9b00      	ldr	r3, [sp, #0]
 80060f0:	444b      	add	r3, r9
 80060f2:	9307      	str	r3, [sp, #28]
 80060f4:	9b02      	ldr	r3, [sp, #8]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	46b8      	mov	r8, r7
 80060fc:	9306      	str	r3, [sp, #24]
 80060fe:	4607      	mov	r7, r0
 8006100:	9b01      	ldr	r3, [sp, #4]
 8006102:	4631      	mov	r1, r6
 8006104:	3b01      	subs	r3, #1
 8006106:	4658      	mov	r0, fp
 8006108:	9302      	str	r3, [sp, #8]
 800610a:	f7ff fa69 	bl	80055e0 <quorem>
 800610e:	4603      	mov	r3, r0
 8006110:	3330      	adds	r3, #48	; 0x30
 8006112:	9004      	str	r0, [sp, #16]
 8006114:	4641      	mov	r1, r8
 8006116:	4658      	mov	r0, fp
 8006118:	9308      	str	r3, [sp, #32]
 800611a:	f000 ff3d 	bl	8006f98 <__mcmp>
 800611e:	463a      	mov	r2, r7
 8006120:	4681      	mov	r9, r0
 8006122:	4631      	mov	r1, r6
 8006124:	4620      	mov	r0, r4
 8006126:	f000 ff53 	bl	8006fd0 <__mdiff>
 800612a:	68c2      	ldr	r2, [r0, #12]
 800612c:	9b08      	ldr	r3, [sp, #32]
 800612e:	4605      	mov	r5, r0
 8006130:	bb02      	cbnz	r2, 8006174 <_dtoa_r+0xa7c>
 8006132:	4601      	mov	r1, r0
 8006134:	4658      	mov	r0, fp
 8006136:	f000 ff2f 	bl	8006f98 <__mcmp>
 800613a:	9b08      	ldr	r3, [sp, #32]
 800613c:	4602      	mov	r2, r0
 800613e:	4629      	mov	r1, r5
 8006140:	4620      	mov	r0, r4
 8006142:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006146:	f000 fc9f 	bl	8006a88 <_Bfree>
 800614a:	9b05      	ldr	r3, [sp, #20]
 800614c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800614e:	9d01      	ldr	r5, [sp, #4]
 8006150:	ea43 0102 	orr.w	r1, r3, r2
 8006154:	9b06      	ldr	r3, [sp, #24]
 8006156:	430b      	orrs	r3, r1
 8006158:	9b08      	ldr	r3, [sp, #32]
 800615a:	d10d      	bne.n	8006178 <_dtoa_r+0xa80>
 800615c:	2b39      	cmp	r3, #57	; 0x39
 800615e:	d029      	beq.n	80061b4 <_dtoa_r+0xabc>
 8006160:	f1b9 0f00 	cmp.w	r9, #0
 8006164:	dd01      	ble.n	800616a <_dtoa_r+0xa72>
 8006166:	9b04      	ldr	r3, [sp, #16]
 8006168:	3331      	adds	r3, #49	; 0x31
 800616a:	9a02      	ldr	r2, [sp, #8]
 800616c:	7013      	strb	r3, [r2, #0]
 800616e:	e774      	b.n	800605a <_dtoa_r+0x962>
 8006170:	4638      	mov	r0, r7
 8006172:	e7b9      	b.n	80060e8 <_dtoa_r+0x9f0>
 8006174:	2201      	movs	r2, #1
 8006176:	e7e2      	b.n	800613e <_dtoa_r+0xa46>
 8006178:	f1b9 0f00 	cmp.w	r9, #0
 800617c:	db06      	blt.n	800618c <_dtoa_r+0xa94>
 800617e:	9905      	ldr	r1, [sp, #20]
 8006180:	ea41 0909 	orr.w	r9, r1, r9
 8006184:	9906      	ldr	r1, [sp, #24]
 8006186:	ea59 0101 	orrs.w	r1, r9, r1
 800618a:	d120      	bne.n	80061ce <_dtoa_r+0xad6>
 800618c:	2a00      	cmp	r2, #0
 800618e:	ddec      	ble.n	800616a <_dtoa_r+0xa72>
 8006190:	4659      	mov	r1, fp
 8006192:	2201      	movs	r2, #1
 8006194:	4620      	mov	r0, r4
 8006196:	9301      	str	r3, [sp, #4]
 8006198:	f000 fe92 	bl	8006ec0 <__lshift>
 800619c:	4631      	mov	r1, r6
 800619e:	4683      	mov	fp, r0
 80061a0:	f000 fefa 	bl	8006f98 <__mcmp>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	9b01      	ldr	r3, [sp, #4]
 80061a8:	dc02      	bgt.n	80061b0 <_dtoa_r+0xab8>
 80061aa:	d1de      	bne.n	800616a <_dtoa_r+0xa72>
 80061ac:	07da      	lsls	r2, r3, #31
 80061ae:	d5dc      	bpl.n	800616a <_dtoa_r+0xa72>
 80061b0:	2b39      	cmp	r3, #57	; 0x39
 80061b2:	d1d8      	bne.n	8006166 <_dtoa_r+0xa6e>
 80061b4:	9a02      	ldr	r2, [sp, #8]
 80061b6:	2339      	movs	r3, #57	; 0x39
 80061b8:	7013      	strb	r3, [r2, #0]
 80061ba:	462b      	mov	r3, r5
 80061bc:	461d      	mov	r5, r3
 80061be:	3b01      	subs	r3, #1
 80061c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80061c4:	2a39      	cmp	r2, #57	; 0x39
 80061c6:	d050      	beq.n	800626a <_dtoa_r+0xb72>
 80061c8:	3201      	adds	r2, #1
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	e745      	b.n	800605a <_dtoa_r+0x962>
 80061ce:	2a00      	cmp	r2, #0
 80061d0:	dd03      	ble.n	80061da <_dtoa_r+0xae2>
 80061d2:	2b39      	cmp	r3, #57	; 0x39
 80061d4:	d0ee      	beq.n	80061b4 <_dtoa_r+0xabc>
 80061d6:	3301      	adds	r3, #1
 80061d8:	e7c7      	b.n	800616a <_dtoa_r+0xa72>
 80061da:	9a01      	ldr	r2, [sp, #4]
 80061dc:	9907      	ldr	r1, [sp, #28]
 80061de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80061e2:	428a      	cmp	r2, r1
 80061e4:	d02a      	beq.n	800623c <_dtoa_r+0xb44>
 80061e6:	4659      	mov	r1, fp
 80061e8:	2300      	movs	r3, #0
 80061ea:	220a      	movs	r2, #10
 80061ec:	4620      	mov	r0, r4
 80061ee:	f000 fc6d 	bl	8006acc <__multadd>
 80061f2:	45b8      	cmp	r8, r7
 80061f4:	4683      	mov	fp, r0
 80061f6:	f04f 0300 	mov.w	r3, #0
 80061fa:	f04f 020a 	mov.w	r2, #10
 80061fe:	4641      	mov	r1, r8
 8006200:	4620      	mov	r0, r4
 8006202:	d107      	bne.n	8006214 <_dtoa_r+0xb1c>
 8006204:	f000 fc62 	bl	8006acc <__multadd>
 8006208:	4680      	mov	r8, r0
 800620a:	4607      	mov	r7, r0
 800620c:	9b01      	ldr	r3, [sp, #4]
 800620e:	3301      	adds	r3, #1
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	e775      	b.n	8006100 <_dtoa_r+0xa08>
 8006214:	f000 fc5a 	bl	8006acc <__multadd>
 8006218:	4639      	mov	r1, r7
 800621a:	4680      	mov	r8, r0
 800621c:	2300      	movs	r3, #0
 800621e:	220a      	movs	r2, #10
 8006220:	4620      	mov	r0, r4
 8006222:	f000 fc53 	bl	8006acc <__multadd>
 8006226:	4607      	mov	r7, r0
 8006228:	e7f0      	b.n	800620c <_dtoa_r+0xb14>
 800622a:	f1b9 0f00 	cmp.w	r9, #0
 800622e:	9a00      	ldr	r2, [sp, #0]
 8006230:	bfcc      	ite	gt
 8006232:	464d      	movgt	r5, r9
 8006234:	2501      	movle	r5, #1
 8006236:	4415      	add	r5, r2
 8006238:	f04f 0800 	mov.w	r8, #0
 800623c:	4659      	mov	r1, fp
 800623e:	2201      	movs	r2, #1
 8006240:	4620      	mov	r0, r4
 8006242:	9301      	str	r3, [sp, #4]
 8006244:	f000 fe3c 	bl	8006ec0 <__lshift>
 8006248:	4631      	mov	r1, r6
 800624a:	4683      	mov	fp, r0
 800624c:	f000 fea4 	bl	8006f98 <__mcmp>
 8006250:	2800      	cmp	r0, #0
 8006252:	dcb2      	bgt.n	80061ba <_dtoa_r+0xac2>
 8006254:	d102      	bne.n	800625c <_dtoa_r+0xb64>
 8006256:	9b01      	ldr	r3, [sp, #4]
 8006258:	07db      	lsls	r3, r3, #31
 800625a:	d4ae      	bmi.n	80061ba <_dtoa_r+0xac2>
 800625c:	462b      	mov	r3, r5
 800625e:	461d      	mov	r5, r3
 8006260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006264:	2a30      	cmp	r2, #48	; 0x30
 8006266:	d0fa      	beq.n	800625e <_dtoa_r+0xb66>
 8006268:	e6f7      	b.n	800605a <_dtoa_r+0x962>
 800626a:	9a00      	ldr	r2, [sp, #0]
 800626c:	429a      	cmp	r2, r3
 800626e:	d1a5      	bne.n	80061bc <_dtoa_r+0xac4>
 8006270:	f10a 0a01 	add.w	sl, sl, #1
 8006274:	2331      	movs	r3, #49	; 0x31
 8006276:	e779      	b.n	800616c <_dtoa_r+0xa74>
 8006278:	4b13      	ldr	r3, [pc, #76]	; (80062c8 <_dtoa_r+0xbd0>)
 800627a:	f7ff baaf 	b.w	80057dc <_dtoa_r+0xe4>
 800627e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006280:	2b00      	cmp	r3, #0
 8006282:	f47f aa86 	bne.w	8005792 <_dtoa_r+0x9a>
 8006286:	4b11      	ldr	r3, [pc, #68]	; (80062cc <_dtoa_r+0xbd4>)
 8006288:	f7ff baa8 	b.w	80057dc <_dtoa_r+0xe4>
 800628c:	f1b9 0f00 	cmp.w	r9, #0
 8006290:	dc03      	bgt.n	800629a <_dtoa_r+0xba2>
 8006292:	9b05      	ldr	r3, [sp, #20]
 8006294:	2b02      	cmp	r3, #2
 8006296:	f73f aec9 	bgt.w	800602c <_dtoa_r+0x934>
 800629a:	9d00      	ldr	r5, [sp, #0]
 800629c:	4631      	mov	r1, r6
 800629e:	4658      	mov	r0, fp
 80062a0:	f7ff f99e 	bl	80055e0 <quorem>
 80062a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80062a8:	f805 3b01 	strb.w	r3, [r5], #1
 80062ac:	9a00      	ldr	r2, [sp, #0]
 80062ae:	1aaa      	subs	r2, r5, r2
 80062b0:	4591      	cmp	r9, r2
 80062b2:	ddba      	ble.n	800622a <_dtoa_r+0xb32>
 80062b4:	4659      	mov	r1, fp
 80062b6:	2300      	movs	r3, #0
 80062b8:	220a      	movs	r2, #10
 80062ba:	4620      	mov	r0, r4
 80062bc:	f000 fc06 	bl	8006acc <__multadd>
 80062c0:	4683      	mov	fp, r0
 80062c2:	e7eb      	b.n	800629c <_dtoa_r+0xba4>
 80062c4:	08008634 	.word	0x08008634
 80062c8:	08008430 	.word	0x08008430
 80062cc:	080085b1 	.word	0x080085b1

080062d0 <rshift>:
 80062d0:	6903      	ldr	r3, [r0, #16]
 80062d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80062d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062da:	ea4f 1261 	mov.w	r2, r1, asr #5
 80062de:	f100 0414 	add.w	r4, r0, #20
 80062e2:	dd45      	ble.n	8006370 <rshift+0xa0>
 80062e4:	f011 011f 	ands.w	r1, r1, #31
 80062e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80062ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80062f0:	d10c      	bne.n	800630c <rshift+0x3c>
 80062f2:	f100 0710 	add.w	r7, r0, #16
 80062f6:	4629      	mov	r1, r5
 80062f8:	42b1      	cmp	r1, r6
 80062fa:	d334      	bcc.n	8006366 <rshift+0x96>
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	1eea      	subs	r2, r5, #3
 8006302:	4296      	cmp	r6, r2
 8006304:	bf38      	it	cc
 8006306:	2300      	movcc	r3, #0
 8006308:	4423      	add	r3, r4
 800630a:	e015      	b.n	8006338 <rshift+0x68>
 800630c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006310:	f1c1 0820 	rsb	r8, r1, #32
 8006314:	40cf      	lsrs	r7, r1
 8006316:	f105 0e04 	add.w	lr, r5, #4
 800631a:	46a1      	mov	r9, r4
 800631c:	4576      	cmp	r6, lr
 800631e:	46f4      	mov	ip, lr
 8006320:	d815      	bhi.n	800634e <rshift+0x7e>
 8006322:	1a9b      	subs	r3, r3, r2
 8006324:	009a      	lsls	r2, r3, #2
 8006326:	3a04      	subs	r2, #4
 8006328:	3501      	adds	r5, #1
 800632a:	42ae      	cmp	r6, r5
 800632c:	bf38      	it	cc
 800632e:	2200      	movcc	r2, #0
 8006330:	18a3      	adds	r3, r4, r2
 8006332:	50a7      	str	r7, [r4, r2]
 8006334:	b107      	cbz	r7, 8006338 <rshift+0x68>
 8006336:	3304      	adds	r3, #4
 8006338:	1b1a      	subs	r2, r3, r4
 800633a:	42a3      	cmp	r3, r4
 800633c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006340:	bf08      	it	eq
 8006342:	2300      	moveq	r3, #0
 8006344:	6102      	str	r2, [r0, #16]
 8006346:	bf08      	it	eq
 8006348:	6143      	streq	r3, [r0, #20]
 800634a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800634e:	f8dc c000 	ldr.w	ip, [ip]
 8006352:	fa0c fc08 	lsl.w	ip, ip, r8
 8006356:	ea4c 0707 	orr.w	r7, ip, r7
 800635a:	f849 7b04 	str.w	r7, [r9], #4
 800635e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006362:	40cf      	lsrs	r7, r1
 8006364:	e7da      	b.n	800631c <rshift+0x4c>
 8006366:	f851 cb04 	ldr.w	ip, [r1], #4
 800636a:	f847 cf04 	str.w	ip, [r7, #4]!
 800636e:	e7c3      	b.n	80062f8 <rshift+0x28>
 8006370:	4623      	mov	r3, r4
 8006372:	e7e1      	b.n	8006338 <rshift+0x68>

08006374 <__hexdig_fun>:
 8006374:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006378:	2b09      	cmp	r3, #9
 800637a:	d802      	bhi.n	8006382 <__hexdig_fun+0xe>
 800637c:	3820      	subs	r0, #32
 800637e:	b2c0      	uxtb	r0, r0
 8006380:	4770      	bx	lr
 8006382:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006386:	2b05      	cmp	r3, #5
 8006388:	d801      	bhi.n	800638e <__hexdig_fun+0x1a>
 800638a:	3847      	subs	r0, #71	; 0x47
 800638c:	e7f7      	b.n	800637e <__hexdig_fun+0xa>
 800638e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006392:	2b05      	cmp	r3, #5
 8006394:	d801      	bhi.n	800639a <__hexdig_fun+0x26>
 8006396:	3827      	subs	r0, #39	; 0x27
 8006398:	e7f1      	b.n	800637e <__hexdig_fun+0xa>
 800639a:	2000      	movs	r0, #0
 800639c:	4770      	bx	lr
	...

080063a0 <__gethex>:
 80063a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a4:	ed2d 8b02 	vpush	{d8}
 80063a8:	b089      	sub	sp, #36	; 0x24
 80063aa:	ee08 0a10 	vmov	s16, r0
 80063ae:	9304      	str	r3, [sp, #16]
 80063b0:	4bbc      	ldr	r3, [pc, #752]	; (80066a4 <__gethex+0x304>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	9301      	str	r3, [sp, #4]
 80063b6:	4618      	mov	r0, r3
 80063b8:	468b      	mov	fp, r1
 80063ba:	4690      	mov	r8, r2
 80063bc:	f7f9 ff12 	bl	80001e4 <strlen>
 80063c0:	9b01      	ldr	r3, [sp, #4]
 80063c2:	f8db 2000 	ldr.w	r2, [fp]
 80063c6:	4403      	add	r3, r0
 80063c8:	4682      	mov	sl, r0
 80063ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80063ce:	9305      	str	r3, [sp, #20]
 80063d0:	1c93      	adds	r3, r2, #2
 80063d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80063d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80063da:	32fe      	adds	r2, #254	; 0xfe
 80063dc:	18d1      	adds	r1, r2, r3
 80063de:	461f      	mov	r7, r3
 80063e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80063e4:	9100      	str	r1, [sp, #0]
 80063e6:	2830      	cmp	r0, #48	; 0x30
 80063e8:	d0f8      	beq.n	80063dc <__gethex+0x3c>
 80063ea:	f7ff ffc3 	bl	8006374 <__hexdig_fun>
 80063ee:	4604      	mov	r4, r0
 80063f0:	2800      	cmp	r0, #0
 80063f2:	d13a      	bne.n	800646a <__gethex+0xca>
 80063f4:	9901      	ldr	r1, [sp, #4]
 80063f6:	4652      	mov	r2, sl
 80063f8:	4638      	mov	r0, r7
 80063fa:	f7fe fa22 	bl	8004842 <strncmp>
 80063fe:	4605      	mov	r5, r0
 8006400:	2800      	cmp	r0, #0
 8006402:	d168      	bne.n	80064d6 <__gethex+0x136>
 8006404:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006408:	eb07 060a 	add.w	r6, r7, sl
 800640c:	f7ff ffb2 	bl	8006374 <__hexdig_fun>
 8006410:	2800      	cmp	r0, #0
 8006412:	d062      	beq.n	80064da <__gethex+0x13a>
 8006414:	4633      	mov	r3, r6
 8006416:	7818      	ldrb	r0, [r3, #0]
 8006418:	2830      	cmp	r0, #48	; 0x30
 800641a:	461f      	mov	r7, r3
 800641c:	f103 0301 	add.w	r3, r3, #1
 8006420:	d0f9      	beq.n	8006416 <__gethex+0x76>
 8006422:	f7ff ffa7 	bl	8006374 <__hexdig_fun>
 8006426:	2301      	movs	r3, #1
 8006428:	fab0 f480 	clz	r4, r0
 800642c:	0964      	lsrs	r4, r4, #5
 800642e:	4635      	mov	r5, r6
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	463a      	mov	r2, r7
 8006434:	4616      	mov	r6, r2
 8006436:	3201      	adds	r2, #1
 8006438:	7830      	ldrb	r0, [r6, #0]
 800643a:	f7ff ff9b 	bl	8006374 <__hexdig_fun>
 800643e:	2800      	cmp	r0, #0
 8006440:	d1f8      	bne.n	8006434 <__gethex+0x94>
 8006442:	9901      	ldr	r1, [sp, #4]
 8006444:	4652      	mov	r2, sl
 8006446:	4630      	mov	r0, r6
 8006448:	f7fe f9fb 	bl	8004842 <strncmp>
 800644c:	b980      	cbnz	r0, 8006470 <__gethex+0xd0>
 800644e:	b94d      	cbnz	r5, 8006464 <__gethex+0xc4>
 8006450:	eb06 050a 	add.w	r5, r6, sl
 8006454:	462a      	mov	r2, r5
 8006456:	4616      	mov	r6, r2
 8006458:	3201      	adds	r2, #1
 800645a:	7830      	ldrb	r0, [r6, #0]
 800645c:	f7ff ff8a 	bl	8006374 <__hexdig_fun>
 8006460:	2800      	cmp	r0, #0
 8006462:	d1f8      	bne.n	8006456 <__gethex+0xb6>
 8006464:	1bad      	subs	r5, r5, r6
 8006466:	00ad      	lsls	r5, r5, #2
 8006468:	e004      	b.n	8006474 <__gethex+0xd4>
 800646a:	2400      	movs	r4, #0
 800646c:	4625      	mov	r5, r4
 800646e:	e7e0      	b.n	8006432 <__gethex+0x92>
 8006470:	2d00      	cmp	r5, #0
 8006472:	d1f7      	bne.n	8006464 <__gethex+0xc4>
 8006474:	7833      	ldrb	r3, [r6, #0]
 8006476:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800647a:	2b50      	cmp	r3, #80	; 0x50
 800647c:	d13b      	bne.n	80064f6 <__gethex+0x156>
 800647e:	7873      	ldrb	r3, [r6, #1]
 8006480:	2b2b      	cmp	r3, #43	; 0x2b
 8006482:	d02c      	beq.n	80064de <__gethex+0x13e>
 8006484:	2b2d      	cmp	r3, #45	; 0x2d
 8006486:	d02e      	beq.n	80064e6 <__gethex+0x146>
 8006488:	1c71      	adds	r1, r6, #1
 800648a:	f04f 0900 	mov.w	r9, #0
 800648e:	7808      	ldrb	r0, [r1, #0]
 8006490:	f7ff ff70 	bl	8006374 <__hexdig_fun>
 8006494:	1e43      	subs	r3, r0, #1
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b18      	cmp	r3, #24
 800649a:	d82c      	bhi.n	80064f6 <__gethex+0x156>
 800649c:	f1a0 0210 	sub.w	r2, r0, #16
 80064a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80064a4:	f7ff ff66 	bl	8006374 <__hexdig_fun>
 80064a8:	1e43      	subs	r3, r0, #1
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b18      	cmp	r3, #24
 80064ae:	d91d      	bls.n	80064ec <__gethex+0x14c>
 80064b0:	f1b9 0f00 	cmp.w	r9, #0
 80064b4:	d000      	beq.n	80064b8 <__gethex+0x118>
 80064b6:	4252      	negs	r2, r2
 80064b8:	4415      	add	r5, r2
 80064ba:	f8cb 1000 	str.w	r1, [fp]
 80064be:	b1e4      	cbz	r4, 80064fa <__gethex+0x15a>
 80064c0:	9b00      	ldr	r3, [sp, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	bf14      	ite	ne
 80064c6:	2700      	movne	r7, #0
 80064c8:	2706      	moveq	r7, #6
 80064ca:	4638      	mov	r0, r7
 80064cc:	b009      	add	sp, #36	; 0x24
 80064ce:	ecbd 8b02 	vpop	{d8}
 80064d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d6:	463e      	mov	r6, r7
 80064d8:	4625      	mov	r5, r4
 80064da:	2401      	movs	r4, #1
 80064dc:	e7ca      	b.n	8006474 <__gethex+0xd4>
 80064de:	f04f 0900 	mov.w	r9, #0
 80064e2:	1cb1      	adds	r1, r6, #2
 80064e4:	e7d3      	b.n	800648e <__gethex+0xee>
 80064e6:	f04f 0901 	mov.w	r9, #1
 80064ea:	e7fa      	b.n	80064e2 <__gethex+0x142>
 80064ec:	230a      	movs	r3, #10
 80064ee:	fb03 0202 	mla	r2, r3, r2, r0
 80064f2:	3a10      	subs	r2, #16
 80064f4:	e7d4      	b.n	80064a0 <__gethex+0x100>
 80064f6:	4631      	mov	r1, r6
 80064f8:	e7df      	b.n	80064ba <__gethex+0x11a>
 80064fa:	1bf3      	subs	r3, r6, r7
 80064fc:	3b01      	subs	r3, #1
 80064fe:	4621      	mov	r1, r4
 8006500:	2b07      	cmp	r3, #7
 8006502:	dc0b      	bgt.n	800651c <__gethex+0x17c>
 8006504:	ee18 0a10 	vmov	r0, s16
 8006508:	f000 fa7e 	bl	8006a08 <_Balloc>
 800650c:	4604      	mov	r4, r0
 800650e:	b940      	cbnz	r0, 8006522 <__gethex+0x182>
 8006510:	4b65      	ldr	r3, [pc, #404]	; (80066a8 <__gethex+0x308>)
 8006512:	4602      	mov	r2, r0
 8006514:	21de      	movs	r1, #222	; 0xde
 8006516:	4865      	ldr	r0, [pc, #404]	; (80066ac <__gethex+0x30c>)
 8006518:	f001 f96c 	bl	80077f4 <__assert_func>
 800651c:	3101      	adds	r1, #1
 800651e:	105b      	asrs	r3, r3, #1
 8006520:	e7ee      	b.n	8006500 <__gethex+0x160>
 8006522:	f100 0914 	add.w	r9, r0, #20
 8006526:	f04f 0b00 	mov.w	fp, #0
 800652a:	f1ca 0301 	rsb	r3, sl, #1
 800652e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006532:	f8cd b000 	str.w	fp, [sp]
 8006536:	9306      	str	r3, [sp, #24]
 8006538:	42b7      	cmp	r7, r6
 800653a:	d340      	bcc.n	80065be <__gethex+0x21e>
 800653c:	9802      	ldr	r0, [sp, #8]
 800653e:	9b00      	ldr	r3, [sp, #0]
 8006540:	f840 3b04 	str.w	r3, [r0], #4
 8006544:	eba0 0009 	sub.w	r0, r0, r9
 8006548:	1080      	asrs	r0, r0, #2
 800654a:	0146      	lsls	r6, r0, #5
 800654c:	6120      	str	r0, [r4, #16]
 800654e:	4618      	mov	r0, r3
 8006550:	f000 fb50 	bl	8006bf4 <__hi0bits>
 8006554:	1a30      	subs	r0, r6, r0
 8006556:	f8d8 6000 	ldr.w	r6, [r8]
 800655a:	42b0      	cmp	r0, r6
 800655c:	dd63      	ble.n	8006626 <__gethex+0x286>
 800655e:	1b87      	subs	r7, r0, r6
 8006560:	4639      	mov	r1, r7
 8006562:	4620      	mov	r0, r4
 8006564:	f000 feea 	bl	800733c <__any_on>
 8006568:	4682      	mov	sl, r0
 800656a:	b1a8      	cbz	r0, 8006598 <__gethex+0x1f8>
 800656c:	1e7b      	subs	r3, r7, #1
 800656e:	1159      	asrs	r1, r3, #5
 8006570:	f003 021f 	and.w	r2, r3, #31
 8006574:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006578:	f04f 0a01 	mov.w	sl, #1
 800657c:	fa0a f202 	lsl.w	r2, sl, r2
 8006580:	420a      	tst	r2, r1
 8006582:	d009      	beq.n	8006598 <__gethex+0x1f8>
 8006584:	4553      	cmp	r3, sl
 8006586:	dd05      	ble.n	8006594 <__gethex+0x1f4>
 8006588:	1eb9      	subs	r1, r7, #2
 800658a:	4620      	mov	r0, r4
 800658c:	f000 fed6 	bl	800733c <__any_on>
 8006590:	2800      	cmp	r0, #0
 8006592:	d145      	bne.n	8006620 <__gethex+0x280>
 8006594:	f04f 0a02 	mov.w	sl, #2
 8006598:	4639      	mov	r1, r7
 800659a:	4620      	mov	r0, r4
 800659c:	f7ff fe98 	bl	80062d0 <rshift>
 80065a0:	443d      	add	r5, r7
 80065a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80065a6:	42ab      	cmp	r3, r5
 80065a8:	da4c      	bge.n	8006644 <__gethex+0x2a4>
 80065aa:	ee18 0a10 	vmov	r0, s16
 80065ae:	4621      	mov	r1, r4
 80065b0:	f000 fa6a 	bl	8006a88 <_Bfree>
 80065b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80065b6:	2300      	movs	r3, #0
 80065b8:	6013      	str	r3, [r2, #0]
 80065ba:	27a3      	movs	r7, #163	; 0xa3
 80065bc:	e785      	b.n	80064ca <__gethex+0x12a>
 80065be:	1e73      	subs	r3, r6, #1
 80065c0:	9a05      	ldr	r2, [sp, #20]
 80065c2:	9303      	str	r3, [sp, #12]
 80065c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d019      	beq.n	8006600 <__gethex+0x260>
 80065cc:	f1bb 0f20 	cmp.w	fp, #32
 80065d0:	d107      	bne.n	80065e2 <__gethex+0x242>
 80065d2:	9b02      	ldr	r3, [sp, #8]
 80065d4:	9a00      	ldr	r2, [sp, #0]
 80065d6:	f843 2b04 	str.w	r2, [r3], #4
 80065da:	9302      	str	r3, [sp, #8]
 80065dc:	2300      	movs	r3, #0
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	469b      	mov	fp, r3
 80065e2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80065e6:	f7ff fec5 	bl	8006374 <__hexdig_fun>
 80065ea:	9b00      	ldr	r3, [sp, #0]
 80065ec:	f000 000f 	and.w	r0, r0, #15
 80065f0:	fa00 f00b 	lsl.w	r0, r0, fp
 80065f4:	4303      	orrs	r3, r0
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	f10b 0b04 	add.w	fp, fp, #4
 80065fc:	9b03      	ldr	r3, [sp, #12]
 80065fe:	e00d      	b.n	800661c <__gethex+0x27c>
 8006600:	9b03      	ldr	r3, [sp, #12]
 8006602:	9a06      	ldr	r2, [sp, #24]
 8006604:	4413      	add	r3, r2
 8006606:	42bb      	cmp	r3, r7
 8006608:	d3e0      	bcc.n	80065cc <__gethex+0x22c>
 800660a:	4618      	mov	r0, r3
 800660c:	9901      	ldr	r1, [sp, #4]
 800660e:	9307      	str	r3, [sp, #28]
 8006610:	4652      	mov	r2, sl
 8006612:	f7fe f916 	bl	8004842 <strncmp>
 8006616:	9b07      	ldr	r3, [sp, #28]
 8006618:	2800      	cmp	r0, #0
 800661a:	d1d7      	bne.n	80065cc <__gethex+0x22c>
 800661c:	461e      	mov	r6, r3
 800661e:	e78b      	b.n	8006538 <__gethex+0x198>
 8006620:	f04f 0a03 	mov.w	sl, #3
 8006624:	e7b8      	b.n	8006598 <__gethex+0x1f8>
 8006626:	da0a      	bge.n	800663e <__gethex+0x29e>
 8006628:	1a37      	subs	r7, r6, r0
 800662a:	4621      	mov	r1, r4
 800662c:	ee18 0a10 	vmov	r0, s16
 8006630:	463a      	mov	r2, r7
 8006632:	f000 fc45 	bl	8006ec0 <__lshift>
 8006636:	1bed      	subs	r5, r5, r7
 8006638:	4604      	mov	r4, r0
 800663a:	f100 0914 	add.w	r9, r0, #20
 800663e:	f04f 0a00 	mov.w	sl, #0
 8006642:	e7ae      	b.n	80065a2 <__gethex+0x202>
 8006644:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006648:	42a8      	cmp	r0, r5
 800664a:	dd72      	ble.n	8006732 <__gethex+0x392>
 800664c:	1b45      	subs	r5, r0, r5
 800664e:	42ae      	cmp	r6, r5
 8006650:	dc36      	bgt.n	80066c0 <__gethex+0x320>
 8006652:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006656:	2b02      	cmp	r3, #2
 8006658:	d02a      	beq.n	80066b0 <__gethex+0x310>
 800665a:	2b03      	cmp	r3, #3
 800665c:	d02c      	beq.n	80066b8 <__gethex+0x318>
 800665e:	2b01      	cmp	r3, #1
 8006660:	d115      	bne.n	800668e <__gethex+0x2ee>
 8006662:	42ae      	cmp	r6, r5
 8006664:	d113      	bne.n	800668e <__gethex+0x2ee>
 8006666:	2e01      	cmp	r6, #1
 8006668:	d10b      	bne.n	8006682 <__gethex+0x2e2>
 800666a:	9a04      	ldr	r2, [sp, #16]
 800666c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006670:	6013      	str	r3, [r2, #0]
 8006672:	2301      	movs	r3, #1
 8006674:	6123      	str	r3, [r4, #16]
 8006676:	f8c9 3000 	str.w	r3, [r9]
 800667a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800667c:	2762      	movs	r7, #98	; 0x62
 800667e:	601c      	str	r4, [r3, #0]
 8006680:	e723      	b.n	80064ca <__gethex+0x12a>
 8006682:	1e71      	subs	r1, r6, #1
 8006684:	4620      	mov	r0, r4
 8006686:	f000 fe59 	bl	800733c <__any_on>
 800668a:	2800      	cmp	r0, #0
 800668c:	d1ed      	bne.n	800666a <__gethex+0x2ca>
 800668e:	ee18 0a10 	vmov	r0, s16
 8006692:	4621      	mov	r1, r4
 8006694:	f000 f9f8 	bl	8006a88 <_Bfree>
 8006698:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800669a:	2300      	movs	r3, #0
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	2750      	movs	r7, #80	; 0x50
 80066a0:	e713      	b.n	80064ca <__gethex+0x12a>
 80066a2:	bf00      	nop
 80066a4:	080086b0 	.word	0x080086b0
 80066a8:	08008634 	.word	0x08008634
 80066ac:	08008645 	.word	0x08008645
 80066b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1eb      	bne.n	800668e <__gethex+0x2ee>
 80066b6:	e7d8      	b.n	800666a <__gethex+0x2ca>
 80066b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1d5      	bne.n	800666a <__gethex+0x2ca>
 80066be:	e7e6      	b.n	800668e <__gethex+0x2ee>
 80066c0:	1e6f      	subs	r7, r5, #1
 80066c2:	f1ba 0f00 	cmp.w	sl, #0
 80066c6:	d131      	bne.n	800672c <__gethex+0x38c>
 80066c8:	b127      	cbz	r7, 80066d4 <__gethex+0x334>
 80066ca:	4639      	mov	r1, r7
 80066cc:	4620      	mov	r0, r4
 80066ce:	f000 fe35 	bl	800733c <__any_on>
 80066d2:	4682      	mov	sl, r0
 80066d4:	117b      	asrs	r3, r7, #5
 80066d6:	2101      	movs	r1, #1
 80066d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80066dc:	f007 071f 	and.w	r7, r7, #31
 80066e0:	fa01 f707 	lsl.w	r7, r1, r7
 80066e4:	421f      	tst	r7, r3
 80066e6:	4629      	mov	r1, r5
 80066e8:	4620      	mov	r0, r4
 80066ea:	bf18      	it	ne
 80066ec:	f04a 0a02 	orrne.w	sl, sl, #2
 80066f0:	1b76      	subs	r6, r6, r5
 80066f2:	f7ff fded 	bl	80062d0 <rshift>
 80066f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80066fa:	2702      	movs	r7, #2
 80066fc:	f1ba 0f00 	cmp.w	sl, #0
 8006700:	d048      	beq.n	8006794 <__gethex+0x3f4>
 8006702:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d015      	beq.n	8006736 <__gethex+0x396>
 800670a:	2b03      	cmp	r3, #3
 800670c:	d017      	beq.n	800673e <__gethex+0x39e>
 800670e:	2b01      	cmp	r3, #1
 8006710:	d109      	bne.n	8006726 <__gethex+0x386>
 8006712:	f01a 0f02 	tst.w	sl, #2
 8006716:	d006      	beq.n	8006726 <__gethex+0x386>
 8006718:	f8d9 0000 	ldr.w	r0, [r9]
 800671c:	ea4a 0a00 	orr.w	sl, sl, r0
 8006720:	f01a 0f01 	tst.w	sl, #1
 8006724:	d10e      	bne.n	8006744 <__gethex+0x3a4>
 8006726:	f047 0710 	orr.w	r7, r7, #16
 800672a:	e033      	b.n	8006794 <__gethex+0x3f4>
 800672c:	f04f 0a01 	mov.w	sl, #1
 8006730:	e7d0      	b.n	80066d4 <__gethex+0x334>
 8006732:	2701      	movs	r7, #1
 8006734:	e7e2      	b.n	80066fc <__gethex+0x35c>
 8006736:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006738:	f1c3 0301 	rsb	r3, r3, #1
 800673c:	9315      	str	r3, [sp, #84]	; 0x54
 800673e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006740:	2b00      	cmp	r3, #0
 8006742:	d0f0      	beq.n	8006726 <__gethex+0x386>
 8006744:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006748:	f104 0314 	add.w	r3, r4, #20
 800674c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006750:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006754:	f04f 0c00 	mov.w	ip, #0
 8006758:	4618      	mov	r0, r3
 800675a:	f853 2b04 	ldr.w	r2, [r3], #4
 800675e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006762:	d01c      	beq.n	800679e <__gethex+0x3fe>
 8006764:	3201      	adds	r2, #1
 8006766:	6002      	str	r2, [r0, #0]
 8006768:	2f02      	cmp	r7, #2
 800676a:	f104 0314 	add.w	r3, r4, #20
 800676e:	d13f      	bne.n	80067f0 <__gethex+0x450>
 8006770:	f8d8 2000 	ldr.w	r2, [r8]
 8006774:	3a01      	subs	r2, #1
 8006776:	42b2      	cmp	r2, r6
 8006778:	d10a      	bne.n	8006790 <__gethex+0x3f0>
 800677a:	1171      	asrs	r1, r6, #5
 800677c:	2201      	movs	r2, #1
 800677e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006782:	f006 061f 	and.w	r6, r6, #31
 8006786:	fa02 f606 	lsl.w	r6, r2, r6
 800678a:	421e      	tst	r6, r3
 800678c:	bf18      	it	ne
 800678e:	4617      	movne	r7, r2
 8006790:	f047 0720 	orr.w	r7, r7, #32
 8006794:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006796:	601c      	str	r4, [r3, #0]
 8006798:	9b04      	ldr	r3, [sp, #16]
 800679a:	601d      	str	r5, [r3, #0]
 800679c:	e695      	b.n	80064ca <__gethex+0x12a>
 800679e:	4299      	cmp	r1, r3
 80067a0:	f843 cc04 	str.w	ip, [r3, #-4]
 80067a4:	d8d8      	bhi.n	8006758 <__gethex+0x3b8>
 80067a6:	68a3      	ldr	r3, [r4, #8]
 80067a8:	459b      	cmp	fp, r3
 80067aa:	db19      	blt.n	80067e0 <__gethex+0x440>
 80067ac:	6861      	ldr	r1, [r4, #4]
 80067ae:	ee18 0a10 	vmov	r0, s16
 80067b2:	3101      	adds	r1, #1
 80067b4:	f000 f928 	bl	8006a08 <_Balloc>
 80067b8:	4681      	mov	r9, r0
 80067ba:	b918      	cbnz	r0, 80067c4 <__gethex+0x424>
 80067bc:	4b1a      	ldr	r3, [pc, #104]	; (8006828 <__gethex+0x488>)
 80067be:	4602      	mov	r2, r0
 80067c0:	2184      	movs	r1, #132	; 0x84
 80067c2:	e6a8      	b.n	8006516 <__gethex+0x176>
 80067c4:	6922      	ldr	r2, [r4, #16]
 80067c6:	3202      	adds	r2, #2
 80067c8:	f104 010c 	add.w	r1, r4, #12
 80067cc:	0092      	lsls	r2, r2, #2
 80067ce:	300c      	adds	r0, #12
 80067d0:	f000 f90c 	bl	80069ec <memcpy>
 80067d4:	4621      	mov	r1, r4
 80067d6:	ee18 0a10 	vmov	r0, s16
 80067da:	f000 f955 	bl	8006a88 <_Bfree>
 80067de:	464c      	mov	r4, r9
 80067e0:	6923      	ldr	r3, [r4, #16]
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80067e8:	6122      	str	r2, [r4, #16]
 80067ea:	2201      	movs	r2, #1
 80067ec:	615a      	str	r2, [r3, #20]
 80067ee:	e7bb      	b.n	8006768 <__gethex+0x3c8>
 80067f0:	6922      	ldr	r2, [r4, #16]
 80067f2:	455a      	cmp	r2, fp
 80067f4:	dd0b      	ble.n	800680e <__gethex+0x46e>
 80067f6:	2101      	movs	r1, #1
 80067f8:	4620      	mov	r0, r4
 80067fa:	f7ff fd69 	bl	80062d0 <rshift>
 80067fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006802:	3501      	adds	r5, #1
 8006804:	42ab      	cmp	r3, r5
 8006806:	f6ff aed0 	blt.w	80065aa <__gethex+0x20a>
 800680a:	2701      	movs	r7, #1
 800680c:	e7c0      	b.n	8006790 <__gethex+0x3f0>
 800680e:	f016 061f 	ands.w	r6, r6, #31
 8006812:	d0fa      	beq.n	800680a <__gethex+0x46a>
 8006814:	449a      	add	sl, r3
 8006816:	f1c6 0620 	rsb	r6, r6, #32
 800681a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800681e:	f000 f9e9 	bl	8006bf4 <__hi0bits>
 8006822:	42b0      	cmp	r0, r6
 8006824:	dbe7      	blt.n	80067f6 <__gethex+0x456>
 8006826:	e7f0      	b.n	800680a <__gethex+0x46a>
 8006828:	08008634 	.word	0x08008634

0800682c <L_shift>:
 800682c:	f1c2 0208 	rsb	r2, r2, #8
 8006830:	0092      	lsls	r2, r2, #2
 8006832:	b570      	push	{r4, r5, r6, lr}
 8006834:	f1c2 0620 	rsb	r6, r2, #32
 8006838:	6843      	ldr	r3, [r0, #4]
 800683a:	6804      	ldr	r4, [r0, #0]
 800683c:	fa03 f506 	lsl.w	r5, r3, r6
 8006840:	432c      	orrs	r4, r5
 8006842:	40d3      	lsrs	r3, r2
 8006844:	6004      	str	r4, [r0, #0]
 8006846:	f840 3f04 	str.w	r3, [r0, #4]!
 800684a:	4288      	cmp	r0, r1
 800684c:	d3f4      	bcc.n	8006838 <L_shift+0xc>
 800684e:	bd70      	pop	{r4, r5, r6, pc}

08006850 <__match>:
 8006850:	b530      	push	{r4, r5, lr}
 8006852:	6803      	ldr	r3, [r0, #0]
 8006854:	3301      	adds	r3, #1
 8006856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800685a:	b914      	cbnz	r4, 8006862 <__match+0x12>
 800685c:	6003      	str	r3, [r0, #0]
 800685e:	2001      	movs	r0, #1
 8006860:	bd30      	pop	{r4, r5, pc}
 8006862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006866:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800686a:	2d19      	cmp	r5, #25
 800686c:	bf98      	it	ls
 800686e:	3220      	addls	r2, #32
 8006870:	42a2      	cmp	r2, r4
 8006872:	d0f0      	beq.n	8006856 <__match+0x6>
 8006874:	2000      	movs	r0, #0
 8006876:	e7f3      	b.n	8006860 <__match+0x10>

08006878 <__hexnan>:
 8006878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687c:	680b      	ldr	r3, [r1, #0]
 800687e:	6801      	ldr	r1, [r0, #0]
 8006880:	115e      	asrs	r6, r3, #5
 8006882:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006886:	f013 031f 	ands.w	r3, r3, #31
 800688a:	b087      	sub	sp, #28
 800688c:	bf18      	it	ne
 800688e:	3604      	addne	r6, #4
 8006890:	2500      	movs	r5, #0
 8006892:	1f37      	subs	r7, r6, #4
 8006894:	4682      	mov	sl, r0
 8006896:	4690      	mov	r8, r2
 8006898:	9301      	str	r3, [sp, #4]
 800689a:	f846 5c04 	str.w	r5, [r6, #-4]
 800689e:	46b9      	mov	r9, r7
 80068a0:	463c      	mov	r4, r7
 80068a2:	9502      	str	r5, [sp, #8]
 80068a4:	46ab      	mov	fp, r5
 80068a6:	784a      	ldrb	r2, [r1, #1]
 80068a8:	1c4b      	adds	r3, r1, #1
 80068aa:	9303      	str	r3, [sp, #12]
 80068ac:	b342      	cbz	r2, 8006900 <__hexnan+0x88>
 80068ae:	4610      	mov	r0, r2
 80068b0:	9105      	str	r1, [sp, #20]
 80068b2:	9204      	str	r2, [sp, #16]
 80068b4:	f7ff fd5e 	bl	8006374 <__hexdig_fun>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d14f      	bne.n	800695c <__hexnan+0xe4>
 80068bc:	9a04      	ldr	r2, [sp, #16]
 80068be:	9905      	ldr	r1, [sp, #20]
 80068c0:	2a20      	cmp	r2, #32
 80068c2:	d818      	bhi.n	80068f6 <__hexnan+0x7e>
 80068c4:	9b02      	ldr	r3, [sp, #8]
 80068c6:	459b      	cmp	fp, r3
 80068c8:	dd13      	ble.n	80068f2 <__hexnan+0x7a>
 80068ca:	454c      	cmp	r4, r9
 80068cc:	d206      	bcs.n	80068dc <__hexnan+0x64>
 80068ce:	2d07      	cmp	r5, #7
 80068d0:	dc04      	bgt.n	80068dc <__hexnan+0x64>
 80068d2:	462a      	mov	r2, r5
 80068d4:	4649      	mov	r1, r9
 80068d6:	4620      	mov	r0, r4
 80068d8:	f7ff ffa8 	bl	800682c <L_shift>
 80068dc:	4544      	cmp	r4, r8
 80068de:	d950      	bls.n	8006982 <__hexnan+0x10a>
 80068e0:	2300      	movs	r3, #0
 80068e2:	f1a4 0904 	sub.w	r9, r4, #4
 80068e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80068ea:	f8cd b008 	str.w	fp, [sp, #8]
 80068ee:	464c      	mov	r4, r9
 80068f0:	461d      	mov	r5, r3
 80068f2:	9903      	ldr	r1, [sp, #12]
 80068f4:	e7d7      	b.n	80068a6 <__hexnan+0x2e>
 80068f6:	2a29      	cmp	r2, #41	; 0x29
 80068f8:	d156      	bne.n	80069a8 <__hexnan+0x130>
 80068fa:	3102      	adds	r1, #2
 80068fc:	f8ca 1000 	str.w	r1, [sl]
 8006900:	f1bb 0f00 	cmp.w	fp, #0
 8006904:	d050      	beq.n	80069a8 <__hexnan+0x130>
 8006906:	454c      	cmp	r4, r9
 8006908:	d206      	bcs.n	8006918 <__hexnan+0xa0>
 800690a:	2d07      	cmp	r5, #7
 800690c:	dc04      	bgt.n	8006918 <__hexnan+0xa0>
 800690e:	462a      	mov	r2, r5
 8006910:	4649      	mov	r1, r9
 8006912:	4620      	mov	r0, r4
 8006914:	f7ff ff8a 	bl	800682c <L_shift>
 8006918:	4544      	cmp	r4, r8
 800691a:	d934      	bls.n	8006986 <__hexnan+0x10e>
 800691c:	f1a8 0204 	sub.w	r2, r8, #4
 8006920:	4623      	mov	r3, r4
 8006922:	f853 1b04 	ldr.w	r1, [r3], #4
 8006926:	f842 1f04 	str.w	r1, [r2, #4]!
 800692a:	429f      	cmp	r7, r3
 800692c:	d2f9      	bcs.n	8006922 <__hexnan+0xaa>
 800692e:	1b3b      	subs	r3, r7, r4
 8006930:	f023 0303 	bic.w	r3, r3, #3
 8006934:	3304      	adds	r3, #4
 8006936:	3401      	adds	r4, #1
 8006938:	3e03      	subs	r6, #3
 800693a:	42b4      	cmp	r4, r6
 800693c:	bf88      	it	hi
 800693e:	2304      	movhi	r3, #4
 8006940:	4443      	add	r3, r8
 8006942:	2200      	movs	r2, #0
 8006944:	f843 2b04 	str.w	r2, [r3], #4
 8006948:	429f      	cmp	r7, r3
 800694a:	d2fb      	bcs.n	8006944 <__hexnan+0xcc>
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	b91b      	cbnz	r3, 8006958 <__hexnan+0xe0>
 8006950:	4547      	cmp	r7, r8
 8006952:	d127      	bne.n	80069a4 <__hexnan+0x12c>
 8006954:	2301      	movs	r3, #1
 8006956:	603b      	str	r3, [r7, #0]
 8006958:	2005      	movs	r0, #5
 800695a:	e026      	b.n	80069aa <__hexnan+0x132>
 800695c:	3501      	adds	r5, #1
 800695e:	2d08      	cmp	r5, #8
 8006960:	f10b 0b01 	add.w	fp, fp, #1
 8006964:	dd06      	ble.n	8006974 <__hexnan+0xfc>
 8006966:	4544      	cmp	r4, r8
 8006968:	d9c3      	bls.n	80068f2 <__hexnan+0x7a>
 800696a:	2300      	movs	r3, #0
 800696c:	f844 3c04 	str.w	r3, [r4, #-4]
 8006970:	2501      	movs	r5, #1
 8006972:	3c04      	subs	r4, #4
 8006974:	6822      	ldr	r2, [r4, #0]
 8006976:	f000 000f 	and.w	r0, r0, #15
 800697a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800697e:	6022      	str	r2, [r4, #0]
 8006980:	e7b7      	b.n	80068f2 <__hexnan+0x7a>
 8006982:	2508      	movs	r5, #8
 8006984:	e7b5      	b.n	80068f2 <__hexnan+0x7a>
 8006986:	9b01      	ldr	r3, [sp, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d0df      	beq.n	800694c <__hexnan+0xd4>
 800698c:	f04f 32ff 	mov.w	r2, #4294967295
 8006990:	f1c3 0320 	rsb	r3, r3, #32
 8006994:	fa22 f303 	lsr.w	r3, r2, r3
 8006998:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800699c:	401a      	ands	r2, r3
 800699e:	f846 2c04 	str.w	r2, [r6, #-4]
 80069a2:	e7d3      	b.n	800694c <__hexnan+0xd4>
 80069a4:	3f04      	subs	r7, #4
 80069a6:	e7d1      	b.n	800694c <__hexnan+0xd4>
 80069a8:	2004      	movs	r0, #4
 80069aa:	b007      	add	sp, #28
 80069ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080069b0 <_localeconv_r>:
 80069b0:	4800      	ldr	r0, [pc, #0]	; (80069b4 <_localeconv_r+0x4>)
 80069b2:	4770      	bx	lr
 80069b4:	2000015c 	.word	0x2000015c

080069b8 <malloc>:
 80069b8:	4b02      	ldr	r3, [pc, #8]	; (80069c4 <malloc+0xc>)
 80069ba:	4601      	mov	r1, r0
 80069bc:	6818      	ldr	r0, [r3, #0]
 80069be:	f000 bd3d 	b.w	800743c <_malloc_r>
 80069c2:	bf00      	nop
 80069c4:	20000004 	.word	0x20000004

080069c8 <__ascii_mbtowc>:
 80069c8:	b082      	sub	sp, #8
 80069ca:	b901      	cbnz	r1, 80069ce <__ascii_mbtowc+0x6>
 80069cc:	a901      	add	r1, sp, #4
 80069ce:	b142      	cbz	r2, 80069e2 <__ascii_mbtowc+0x1a>
 80069d0:	b14b      	cbz	r3, 80069e6 <__ascii_mbtowc+0x1e>
 80069d2:	7813      	ldrb	r3, [r2, #0]
 80069d4:	600b      	str	r3, [r1, #0]
 80069d6:	7812      	ldrb	r2, [r2, #0]
 80069d8:	1e10      	subs	r0, r2, #0
 80069da:	bf18      	it	ne
 80069dc:	2001      	movne	r0, #1
 80069de:	b002      	add	sp, #8
 80069e0:	4770      	bx	lr
 80069e2:	4610      	mov	r0, r2
 80069e4:	e7fb      	b.n	80069de <__ascii_mbtowc+0x16>
 80069e6:	f06f 0001 	mvn.w	r0, #1
 80069ea:	e7f8      	b.n	80069de <__ascii_mbtowc+0x16>

080069ec <memcpy>:
 80069ec:	440a      	add	r2, r1
 80069ee:	4291      	cmp	r1, r2
 80069f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80069f4:	d100      	bne.n	80069f8 <memcpy+0xc>
 80069f6:	4770      	bx	lr
 80069f8:	b510      	push	{r4, lr}
 80069fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a02:	4291      	cmp	r1, r2
 8006a04:	d1f9      	bne.n	80069fa <memcpy+0xe>
 8006a06:	bd10      	pop	{r4, pc}

08006a08 <_Balloc>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a0c:	4604      	mov	r4, r0
 8006a0e:	460d      	mov	r5, r1
 8006a10:	b976      	cbnz	r6, 8006a30 <_Balloc+0x28>
 8006a12:	2010      	movs	r0, #16
 8006a14:	f7ff ffd0 	bl	80069b8 <malloc>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	6260      	str	r0, [r4, #36]	; 0x24
 8006a1c:	b920      	cbnz	r0, 8006a28 <_Balloc+0x20>
 8006a1e:	4b18      	ldr	r3, [pc, #96]	; (8006a80 <_Balloc+0x78>)
 8006a20:	4818      	ldr	r0, [pc, #96]	; (8006a84 <_Balloc+0x7c>)
 8006a22:	2166      	movs	r1, #102	; 0x66
 8006a24:	f000 fee6 	bl	80077f4 <__assert_func>
 8006a28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a2c:	6006      	str	r6, [r0, #0]
 8006a2e:	60c6      	str	r6, [r0, #12]
 8006a30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006a32:	68f3      	ldr	r3, [r6, #12]
 8006a34:	b183      	cbz	r3, 8006a58 <_Balloc+0x50>
 8006a36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a3e:	b9b8      	cbnz	r0, 8006a70 <_Balloc+0x68>
 8006a40:	2101      	movs	r1, #1
 8006a42:	fa01 f605 	lsl.w	r6, r1, r5
 8006a46:	1d72      	adds	r2, r6, #5
 8006a48:	0092      	lsls	r2, r2, #2
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f000 fc97 	bl	800737e <_calloc_r>
 8006a50:	b160      	cbz	r0, 8006a6c <_Balloc+0x64>
 8006a52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a56:	e00e      	b.n	8006a76 <_Balloc+0x6e>
 8006a58:	2221      	movs	r2, #33	; 0x21
 8006a5a:	2104      	movs	r1, #4
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f000 fc8e 	bl	800737e <_calloc_r>
 8006a62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a64:	60f0      	str	r0, [r6, #12]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e4      	bne.n	8006a36 <_Balloc+0x2e>
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
 8006a70:	6802      	ldr	r2, [r0, #0]
 8006a72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a76:	2300      	movs	r3, #0
 8006a78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a7c:	e7f7      	b.n	8006a6e <_Balloc+0x66>
 8006a7e:	bf00      	nop
 8006a80:	080085be 	.word	0x080085be
 8006a84:	080086c4 	.word	0x080086c4

08006a88 <_Bfree>:
 8006a88:	b570      	push	{r4, r5, r6, lr}
 8006a8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a8c:	4605      	mov	r5, r0
 8006a8e:	460c      	mov	r4, r1
 8006a90:	b976      	cbnz	r6, 8006ab0 <_Bfree+0x28>
 8006a92:	2010      	movs	r0, #16
 8006a94:	f7ff ff90 	bl	80069b8 <malloc>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	6268      	str	r0, [r5, #36]	; 0x24
 8006a9c:	b920      	cbnz	r0, 8006aa8 <_Bfree+0x20>
 8006a9e:	4b09      	ldr	r3, [pc, #36]	; (8006ac4 <_Bfree+0x3c>)
 8006aa0:	4809      	ldr	r0, [pc, #36]	; (8006ac8 <_Bfree+0x40>)
 8006aa2:	218a      	movs	r1, #138	; 0x8a
 8006aa4:	f000 fea6 	bl	80077f4 <__assert_func>
 8006aa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006aac:	6006      	str	r6, [r0, #0]
 8006aae:	60c6      	str	r6, [r0, #12]
 8006ab0:	b13c      	cbz	r4, 8006ac2 <_Bfree+0x3a>
 8006ab2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ab4:	6862      	ldr	r2, [r4, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006abc:	6021      	str	r1, [r4, #0]
 8006abe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ac2:	bd70      	pop	{r4, r5, r6, pc}
 8006ac4:	080085be 	.word	0x080085be
 8006ac8:	080086c4 	.word	0x080086c4

08006acc <__multadd>:
 8006acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad0:	690e      	ldr	r6, [r1, #16]
 8006ad2:	4607      	mov	r7, r0
 8006ad4:	4698      	mov	r8, r3
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	f101 0014 	add.w	r0, r1, #20
 8006adc:	2300      	movs	r3, #0
 8006ade:	6805      	ldr	r5, [r0, #0]
 8006ae0:	b2a9      	uxth	r1, r5
 8006ae2:	fb02 8101 	mla	r1, r2, r1, r8
 8006ae6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006aea:	0c2d      	lsrs	r5, r5, #16
 8006aec:	fb02 c505 	mla	r5, r2, r5, ip
 8006af0:	b289      	uxth	r1, r1
 8006af2:	3301      	adds	r3, #1
 8006af4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006af8:	429e      	cmp	r6, r3
 8006afa:	f840 1b04 	str.w	r1, [r0], #4
 8006afe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006b02:	dcec      	bgt.n	8006ade <__multadd+0x12>
 8006b04:	f1b8 0f00 	cmp.w	r8, #0
 8006b08:	d022      	beq.n	8006b50 <__multadd+0x84>
 8006b0a:	68a3      	ldr	r3, [r4, #8]
 8006b0c:	42b3      	cmp	r3, r6
 8006b0e:	dc19      	bgt.n	8006b44 <__multadd+0x78>
 8006b10:	6861      	ldr	r1, [r4, #4]
 8006b12:	4638      	mov	r0, r7
 8006b14:	3101      	adds	r1, #1
 8006b16:	f7ff ff77 	bl	8006a08 <_Balloc>
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	b928      	cbnz	r0, 8006b2a <__multadd+0x5e>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	4b0d      	ldr	r3, [pc, #52]	; (8006b58 <__multadd+0x8c>)
 8006b22:	480e      	ldr	r0, [pc, #56]	; (8006b5c <__multadd+0x90>)
 8006b24:	21b5      	movs	r1, #181	; 0xb5
 8006b26:	f000 fe65 	bl	80077f4 <__assert_func>
 8006b2a:	6922      	ldr	r2, [r4, #16]
 8006b2c:	3202      	adds	r2, #2
 8006b2e:	f104 010c 	add.w	r1, r4, #12
 8006b32:	0092      	lsls	r2, r2, #2
 8006b34:	300c      	adds	r0, #12
 8006b36:	f7ff ff59 	bl	80069ec <memcpy>
 8006b3a:	4621      	mov	r1, r4
 8006b3c:	4638      	mov	r0, r7
 8006b3e:	f7ff ffa3 	bl	8006a88 <_Bfree>
 8006b42:	462c      	mov	r4, r5
 8006b44:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006b48:	3601      	adds	r6, #1
 8006b4a:	f8c3 8014 	str.w	r8, [r3, #20]
 8006b4e:	6126      	str	r6, [r4, #16]
 8006b50:	4620      	mov	r0, r4
 8006b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b56:	bf00      	nop
 8006b58:	08008634 	.word	0x08008634
 8006b5c:	080086c4 	.word	0x080086c4

08006b60 <__s2b>:
 8006b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b64:	460c      	mov	r4, r1
 8006b66:	4615      	mov	r5, r2
 8006b68:	461f      	mov	r7, r3
 8006b6a:	2209      	movs	r2, #9
 8006b6c:	3308      	adds	r3, #8
 8006b6e:	4606      	mov	r6, r0
 8006b70:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b74:	2100      	movs	r1, #0
 8006b76:	2201      	movs	r2, #1
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	db09      	blt.n	8006b90 <__s2b+0x30>
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	f7ff ff43 	bl	8006a08 <_Balloc>
 8006b82:	b940      	cbnz	r0, 8006b96 <__s2b+0x36>
 8006b84:	4602      	mov	r2, r0
 8006b86:	4b19      	ldr	r3, [pc, #100]	; (8006bec <__s2b+0x8c>)
 8006b88:	4819      	ldr	r0, [pc, #100]	; (8006bf0 <__s2b+0x90>)
 8006b8a:	21ce      	movs	r1, #206	; 0xce
 8006b8c:	f000 fe32 	bl	80077f4 <__assert_func>
 8006b90:	0052      	lsls	r2, r2, #1
 8006b92:	3101      	adds	r1, #1
 8006b94:	e7f0      	b.n	8006b78 <__s2b+0x18>
 8006b96:	9b08      	ldr	r3, [sp, #32]
 8006b98:	6143      	str	r3, [r0, #20]
 8006b9a:	2d09      	cmp	r5, #9
 8006b9c:	f04f 0301 	mov.w	r3, #1
 8006ba0:	6103      	str	r3, [r0, #16]
 8006ba2:	dd16      	ble.n	8006bd2 <__s2b+0x72>
 8006ba4:	f104 0909 	add.w	r9, r4, #9
 8006ba8:	46c8      	mov	r8, r9
 8006baa:	442c      	add	r4, r5
 8006bac:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006bb0:	4601      	mov	r1, r0
 8006bb2:	3b30      	subs	r3, #48	; 0x30
 8006bb4:	220a      	movs	r2, #10
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f7ff ff88 	bl	8006acc <__multadd>
 8006bbc:	45a0      	cmp	r8, r4
 8006bbe:	d1f5      	bne.n	8006bac <__s2b+0x4c>
 8006bc0:	f1a5 0408 	sub.w	r4, r5, #8
 8006bc4:	444c      	add	r4, r9
 8006bc6:	1b2d      	subs	r5, r5, r4
 8006bc8:	1963      	adds	r3, r4, r5
 8006bca:	42bb      	cmp	r3, r7
 8006bcc:	db04      	blt.n	8006bd8 <__s2b+0x78>
 8006bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bd2:	340a      	adds	r4, #10
 8006bd4:	2509      	movs	r5, #9
 8006bd6:	e7f6      	b.n	8006bc6 <__s2b+0x66>
 8006bd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006bdc:	4601      	mov	r1, r0
 8006bde:	3b30      	subs	r3, #48	; 0x30
 8006be0:	220a      	movs	r2, #10
 8006be2:	4630      	mov	r0, r6
 8006be4:	f7ff ff72 	bl	8006acc <__multadd>
 8006be8:	e7ee      	b.n	8006bc8 <__s2b+0x68>
 8006bea:	bf00      	nop
 8006bec:	08008634 	.word	0x08008634
 8006bf0:	080086c4 	.word	0x080086c4

08006bf4 <__hi0bits>:
 8006bf4:	0c03      	lsrs	r3, r0, #16
 8006bf6:	041b      	lsls	r3, r3, #16
 8006bf8:	b9d3      	cbnz	r3, 8006c30 <__hi0bits+0x3c>
 8006bfa:	0400      	lsls	r0, r0, #16
 8006bfc:	2310      	movs	r3, #16
 8006bfe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006c02:	bf04      	itt	eq
 8006c04:	0200      	lsleq	r0, r0, #8
 8006c06:	3308      	addeq	r3, #8
 8006c08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006c0c:	bf04      	itt	eq
 8006c0e:	0100      	lsleq	r0, r0, #4
 8006c10:	3304      	addeq	r3, #4
 8006c12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006c16:	bf04      	itt	eq
 8006c18:	0080      	lsleq	r0, r0, #2
 8006c1a:	3302      	addeq	r3, #2
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	db05      	blt.n	8006c2c <__hi0bits+0x38>
 8006c20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006c24:	f103 0301 	add.w	r3, r3, #1
 8006c28:	bf08      	it	eq
 8006c2a:	2320      	moveq	r3, #32
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	4770      	bx	lr
 8006c30:	2300      	movs	r3, #0
 8006c32:	e7e4      	b.n	8006bfe <__hi0bits+0xa>

08006c34 <__lo0bits>:
 8006c34:	6803      	ldr	r3, [r0, #0]
 8006c36:	f013 0207 	ands.w	r2, r3, #7
 8006c3a:	4601      	mov	r1, r0
 8006c3c:	d00b      	beq.n	8006c56 <__lo0bits+0x22>
 8006c3e:	07da      	lsls	r2, r3, #31
 8006c40:	d424      	bmi.n	8006c8c <__lo0bits+0x58>
 8006c42:	0798      	lsls	r0, r3, #30
 8006c44:	bf49      	itett	mi
 8006c46:	085b      	lsrmi	r3, r3, #1
 8006c48:	089b      	lsrpl	r3, r3, #2
 8006c4a:	2001      	movmi	r0, #1
 8006c4c:	600b      	strmi	r3, [r1, #0]
 8006c4e:	bf5c      	itt	pl
 8006c50:	600b      	strpl	r3, [r1, #0]
 8006c52:	2002      	movpl	r0, #2
 8006c54:	4770      	bx	lr
 8006c56:	b298      	uxth	r0, r3
 8006c58:	b9b0      	cbnz	r0, 8006c88 <__lo0bits+0x54>
 8006c5a:	0c1b      	lsrs	r3, r3, #16
 8006c5c:	2010      	movs	r0, #16
 8006c5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006c62:	bf04      	itt	eq
 8006c64:	0a1b      	lsreq	r3, r3, #8
 8006c66:	3008      	addeq	r0, #8
 8006c68:	071a      	lsls	r2, r3, #28
 8006c6a:	bf04      	itt	eq
 8006c6c:	091b      	lsreq	r3, r3, #4
 8006c6e:	3004      	addeq	r0, #4
 8006c70:	079a      	lsls	r2, r3, #30
 8006c72:	bf04      	itt	eq
 8006c74:	089b      	lsreq	r3, r3, #2
 8006c76:	3002      	addeq	r0, #2
 8006c78:	07da      	lsls	r2, r3, #31
 8006c7a:	d403      	bmi.n	8006c84 <__lo0bits+0x50>
 8006c7c:	085b      	lsrs	r3, r3, #1
 8006c7e:	f100 0001 	add.w	r0, r0, #1
 8006c82:	d005      	beq.n	8006c90 <__lo0bits+0x5c>
 8006c84:	600b      	str	r3, [r1, #0]
 8006c86:	4770      	bx	lr
 8006c88:	4610      	mov	r0, r2
 8006c8a:	e7e8      	b.n	8006c5e <__lo0bits+0x2a>
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	4770      	bx	lr
 8006c90:	2020      	movs	r0, #32
 8006c92:	4770      	bx	lr

08006c94 <__i2b>:
 8006c94:	b510      	push	{r4, lr}
 8006c96:	460c      	mov	r4, r1
 8006c98:	2101      	movs	r1, #1
 8006c9a:	f7ff feb5 	bl	8006a08 <_Balloc>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	b928      	cbnz	r0, 8006cae <__i2b+0x1a>
 8006ca2:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <__i2b+0x24>)
 8006ca4:	4805      	ldr	r0, [pc, #20]	; (8006cbc <__i2b+0x28>)
 8006ca6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006caa:	f000 fda3 	bl	80077f4 <__assert_func>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	6144      	str	r4, [r0, #20]
 8006cb2:	6103      	str	r3, [r0, #16]
 8006cb4:	bd10      	pop	{r4, pc}
 8006cb6:	bf00      	nop
 8006cb8:	08008634 	.word	0x08008634
 8006cbc:	080086c4 	.word	0x080086c4

08006cc0 <__multiply>:
 8006cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc4:	4614      	mov	r4, r2
 8006cc6:	690a      	ldr	r2, [r1, #16]
 8006cc8:	6923      	ldr	r3, [r4, #16]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	bfb8      	it	lt
 8006cce:	460b      	movlt	r3, r1
 8006cd0:	460d      	mov	r5, r1
 8006cd2:	bfbc      	itt	lt
 8006cd4:	4625      	movlt	r5, r4
 8006cd6:	461c      	movlt	r4, r3
 8006cd8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006cdc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006ce0:	68ab      	ldr	r3, [r5, #8]
 8006ce2:	6869      	ldr	r1, [r5, #4]
 8006ce4:	eb0a 0709 	add.w	r7, sl, r9
 8006ce8:	42bb      	cmp	r3, r7
 8006cea:	b085      	sub	sp, #20
 8006cec:	bfb8      	it	lt
 8006cee:	3101      	addlt	r1, #1
 8006cf0:	f7ff fe8a 	bl	8006a08 <_Balloc>
 8006cf4:	b930      	cbnz	r0, 8006d04 <__multiply+0x44>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	4b42      	ldr	r3, [pc, #264]	; (8006e04 <__multiply+0x144>)
 8006cfa:	4843      	ldr	r0, [pc, #268]	; (8006e08 <__multiply+0x148>)
 8006cfc:	f240 115d 	movw	r1, #349	; 0x15d
 8006d00:	f000 fd78 	bl	80077f4 <__assert_func>
 8006d04:	f100 0614 	add.w	r6, r0, #20
 8006d08:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006d0c:	4633      	mov	r3, r6
 8006d0e:	2200      	movs	r2, #0
 8006d10:	4543      	cmp	r3, r8
 8006d12:	d31e      	bcc.n	8006d52 <__multiply+0x92>
 8006d14:	f105 0c14 	add.w	ip, r5, #20
 8006d18:	f104 0314 	add.w	r3, r4, #20
 8006d1c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006d20:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006d24:	9202      	str	r2, [sp, #8]
 8006d26:	ebac 0205 	sub.w	r2, ip, r5
 8006d2a:	3a15      	subs	r2, #21
 8006d2c:	f022 0203 	bic.w	r2, r2, #3
 8006d30:	3204      	adds	r2, #4
 8006d32:	f105 0115 	add.w	r1, r5, #21
 8006d36:	458c      	cmp	ip, r1
 8006d38:	bf38      	it	cc
 8006d3a:	2204      	movcc	r2, #4
 8006d3c:	9201      	str	r2, [sp, #4]
 8006d3e:	9a02      	ldr	r2, [sp, #8]
 8006d40:	9303      	str	r3, [sp, #12]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d808      	bhi.n	8006d58 <__multiply+0x98>
 8006d46:	2f00      	cmp	r7, #0
 8006d48:	dc55      	bgt.n	8006df6 <__multiply+0x136>
 8006d4a:	6107      	str	r7, [r0, #16]
 8006d4c:	b005      	add	sp, #20
 8006d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d52:	f843 2b04 	str.w	r2, [r3], #4
 8006d56:	e7db      	b.n	8006d10 <__multiply+0x50>
 8006d58:	f8b3 a000 	ldrh.w	sl, [r3]
 8006d5c:	f1ba 0f00 	cmp.w	sl, #0
 8006d60:	d020      	beq.n	8006da4 <__multiply+0xe4>
 8006d62:	f105 0e14 	add.w	lr, r5, #20
 8006d66:	46b1      	mov	r9, r6
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006d6e:	f8d9 b000 	ldr.w	fp, [r9]
 8006d72:	b2a1      	uxth	r1, r4
 8006d74:	fa1f fb8b 	uxth.w	fp, fp
 8006d78:	fb0a b101 	mla	r1, sl, r1, fp
 8006d7c:	4411      	add	r1, r2
 8006d7e:	f8d9 2000 	ldr.w	r2, [r9]
 8006d82:	0c24      	lsrs	r4, r4, #16
 8006d84:	0c12      	lsrs	r2, r2, #16
 8006d86:	fb0a 2404 	mla	r4, sl, r4, r2
 8006d8a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006d8e:	b289      	uxth	r1, r1
 8006d90:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006d94:	45f4      	cmp	ip, lr
 8006d96:	f849 1b04 	str.w	r1, [r9], #4
 8006d9a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006d9e:	d8e4      	bhi.n	8006d6a <__multiply+0xaa>
 8006da0:	9901      	ldr	r1, [sp, #4]
 8006da2:	5072      	str	r2, [r6, r1]
 8006da4:	9a03      	ldr	r2, [sp, #12]
 8006da6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006daa:	3304      	adds	r3, #4
 8006dac:	f1b9 0f00 	cmp.w	r9, #0
 8006db0:	d01f      	beq.n	8006df2 <__multiply+0x132>
 8006db2:	6834      	ldr	r4, [r6, #0]
 8006db4:	f105 0114 	add.w	r1, r5, #20
 8006db8:	46b6      	mov	lr, r6
 8006dba:	f04f 0a00 	mov.w	sl, #0
 8006dbe:	880a      	ldrh	r2, [r1, #0]
 8006dc0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006dc4:	fb09 b202 	mla	r2, r9, r2, fp
 8006dc8:	4492      	add	sl, r2
 8006dca:	b2a4      	uxth	r4, r4
 8006dcc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006dd0:	f84e 4b04 	str.w	r4, [lr], #4
 8006dd4:	f851 4b04 	ldr.w	r4, [r1], #4
 8006dd8:	f8be 2000 	ldrh.w	r2, [lr]
 8006ddc:	0c24      	lsrs	r4, r4, #16
 8006dde:	fb09 2404 	mla	r4, r9, r4, r2
 8006de2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006de6:	458c      	cmp	ip, r1
 8006de8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006dec:	d8e7      	bhi.n	8006dbe <__multiply+0xfe>
 8006dee:	9a01      	ldr	r2, [sp, #4]
 8006df0:	50b4      	str	r4, [r6, r2]
 8006df2:	3604      	adds	r6, #4
 8006df4:	e7a3      	b.n	8006d3e <__multiply+0x7e>
 8006df6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1a5      	bne.n	8006d4a <__multiply+0x8a>
 8006dfe:	3f01      	subs	r7, #1
 8006e00:	e7a1      	b.n	8006d46 <__multiply+0x86>
 8006e02:	bf00      	nop
 8006e04:	08008634 	.word	0x08008634
 8006e08:	080086c4 	.word	0x080086c4

08006e0c <__pow5mult>:
 8006e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e10:	4615      	mov	r5, r2
 8006e12:	f012 0203 	ands.w	r2, r2, #3
 8006e16:	4606      	mov	r6, r0
 8006e18:	460f      	mov	r7, r1
 8006e1a:	d007      	beq.n	8006e2c <__pow5mult+0x20>
 8006e1c:	4c25      	ldr	r4, [pc, #148]	; (8006eb4 <__pow5mult+0xa8>)
 8006e1e:	3a01      	subs	r2, #1
 8006e20:	2300      	movs	r3, #0
 8006e22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e26:	f7ff fe51 	bl	8006acc <__multadd>
 8006e2a:	4607      	mov	r7, r0
 8006e2c:	10ad      	asrs	r5, r5, #2
 8006e2e:	d03d      	beq.n	8006eac <__pow5mult+0xa0>
 8006e30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006e32:	b97c      	cbnz	r4, 8006e54 <__pow5mult+0x48>
 8006e34:	2010      	movs	r0, #16
 8006e36:	f7ff fdbf 	bl	80069b8 <malloc>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	6270      	str	r0, [r6, #36]	; 0x24
 8006e3e:	b928      	cbnz	r0, 8006e4c <__pow5mult+0x40>
 8006e40:	4b1d      	ldr	r3, [pc, #116]	; (8006eb8 <__pow5mult+0xac>)
 8006e42:	481e      	ldr	r0, [pc, #120]	; (8006ebc <__pow5mult+0xb0>)
 8006e44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006e48:	f000 fcd4 	bl	80077f4 <__assert_func>
 8006e4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e50:	6004      	str	r4, [r0, #0]
 8006e52:	60c4      	str	r4, [r0, #12]
 8006e54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006e58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e5c:	b94c      	cbnz	r4, 8006e72 <__pow5mult+0x66>
 8006e5e:	f240 2171 	movw	r1, #625	; 0x271
 8006e62:	4630      	mov	r0, r6
 8006e64:	f7ff ff16 	bl	8006c94 <__i2b>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e6e:	4604      	mov	r4, r0
 8006e70:	6003      	str	r3, [r0, #0]
 8006e72:	f04f 0900 	mov.w	r9, #0
 8006e76:	07eb      	lsls	r3, r5, #31
 8006e78:	d50a      	bpl.n	8006e90 <__pow5mult+0x84>
 8006e7a:	4639      	mov	r1, r7
 8006e7c:	4622      	mov	r2, r4
 8006e7e:	4630      	mov	r0, r6
 8006e80:	f7ff ff1e 	bl	8006cc0 <__multiply>
 8006e84:	4639      	mov	r1, r7
 8006e86:	4680      	mov	r8, r0
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f7ff fdfd 	bl	8006a88 <_Bfree>
 8006e8e:	4647      	mov	r7, r8
 8006e90:	106d      	asrs	r5, r5, #1
 8006e92:	d00b      	beq.n	8006eac <__pow5mult+0xa0>
 8006e94:	6820      	ldr	r0, [r4, #0]
 8006e96:	b938      	cbnz	r0, 8006ea8 <__pow5mult+0x9c>
 8006e98:	4622      	mov	r2, r4
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	f7ff ff0f 	bl	8006cc0 <__multiply>
 8006ea2:	6020      	str	r0, [r4, #0]
 8006ea4:	f8c0 9000 	str.w	r9, [r0]
 8006ea8:	4604      	mov	r4, r0
 8006eaa:	e7e4      	b.n	8006e76 <__pow5mult+0x6a>
 8006eac:	4638      	mov	r0, r7
 8006eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eb2:	bf00      	nop
 8006eb4:	08008818 	.word	0x08008818
 8006eb8:	080085be 	.word	0x080085be
 8006ebc:	080086c4 	.word	0x080086c4

08006ec0 <__lshift>:
 8006ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ec4:	460c      	mov	r4, r1
 8006ec6:	6849      	ldr	r1, [r1, #4]
 8006ec8:	6923      	ldr	r3, [r4, #16]
 8006eca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ece:	68a3      	ldr	r3, [r4, #8]
 8006ed0:	4607      	mov	r7, r0
 8006ed2:	4691      	mov	r9, r2
 8006ed4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ed8:	f108 0601 	add.w	r6, r8, #1
 8006edc:	42b3      	cmp	r3, r6
 8006ede:	db0b      	blt.n	8006ef8 <__lshift+0x38>
 8006ee0:	4638      	mov	r0, r7
 8006ee2:	f7ff fd91 	bl	8006a08 <_Balloc>
 8006ee6:	4605      	mov	r5, r0
 8006ee8:	b948      	cbnz	r0, 8006efe <__lshift+0x3e>
 8006eea:	4602      	mov	r2, r0
 8006eec:	4b28      	ldr	r3, [pc, #160]	; (8006f90 <__lshift+0xd0>)
 8006eee:	4829      	ldr	r0, [pc, #164]	; (8006f94 <__lshift+0xd4>)
 8006ef0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006ef4:	f000 fc7e 	bl	80077f4 <__assert_func>
 8006ef8:	3101      	adds	r1, #1
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	e7ee      	b.n	8006edc <__lshift+0x1c>
 8006efe:	2300      	movs	r3, #0
 8006f00:	f100 0114 	add.w	r1, r0, #20
 8006f04:	f100 0210 	add.w	r2, r0, #16
 8006f08:	4618      	mov	r0, r3
 8006f0a:	4553      	cmp	r3, sl
 8006f0c:	db33      	blt.n	8006f76 <__lshift+0xb6>
 8006f0e:	6920      	ldr	r0, [r4, #16]
 8006f10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f14:	f104 0314 	add.w	r3, r4, #20
 8006f18:	f019 091f 	ands.w	r9, r9, #31
 8006f1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f24:	d02b      	beq.n	8006f7e <__lshift+0xbe>
 8006f26:	f1c9 0e20 	rsb	lr, r9, #32
 8006f2a:	468a      	mov	sl, r1
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	6818      	ldr	r0, [r3, #0]
 8006f30:	fa00 f009 	lsl.w	r0, r0, r9
 8006f34:	4302      	orrs	r2, r0
 8006f36:	f84a 2b04 	str.w	r2, [sl], #4
 8006f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f3e:	459c      	cmp	ip, r3
 8006f40:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f44:	d8f3      	bhi.n	8006f2e <__lshift+0x6e>
 8006f46:	ebac 0304 	sub.w	r3, ip, r4
 8006f4a:	3b15      	subs	r3, #21
 8006f4c:	f023 0303 	bic.w	r3, r3, #3
 8006f50:	3304      	adds	r3, #4
 8006f52:	f104 0015 	add.w	r0, r4, #21
 8006f56:	4584      	cmp	ip, r0
 8006f58:	bf38      	it	cc
 8006f5a:	2304      	movcc	r3, #4
 8006f5c:	50ca      	str	r2, [r1, r3]
 8006f5e:	b10a      	cbz	r2, 8006f64 <__lshift+0xa4>
 8006f60:	f108 0602 	add.w	r6, r8, #2
 8006f64:	3e01      	subs	r6, #1
 8006f66:	4638      	mov	r0, r7
 8006f68:	612e      	str	r6, [r5, #16]
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	f7ff fd8c 	bl	8006a88 <_Bfree>
 8006f70:	4628      	mov	r0, r5
 8006f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f76:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	e7c5      	b.n	8006f0a <__lshift+0x4a>
 8006f7e:	3904      	subs	r1, #4
 8006f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f84:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f88:	459c      	cmp	ip, r3
 8006f8a:	d8f9      	bhi.n	8006f80 <__lshift+0xc0>
 8006f8c:	e7ea      	b.n	8006f64 <__lshift+0xa4>
 8006f8e:	bf00      	nop
 8006f90:	08008634 	.word	0x08008634
 8006f94:	080086c4 	.word	0x080086c4

08006f98 <__mcmp>:
 8006f98:	b530      	push	{r4, r5, lr}
 8006f9a:	6902      	ldr	r2, [r0, #16]
 8006f9c:	690c      	ldr	r4, [r1, #16]
 8006f9e:	1b12      	subs	r2, r2, r4
 8006fa0:	d10e      	bne.n	8006fc0 <__mcmp+0x28>
 8006fa2:	f100 0314 	add.w	r3, r0, #20
 8006fa6:	3114      	adds	r1, #20
 8006fa8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006fac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006fb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006fb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006fb8:	42a5      	cmp	r5, r4
 8006fba:	d003      	beq.n	8006fc4 <__mcmp+0x2c>
 8006fbc:	d305      	bcc.n	8006fca <__mcmp+0x32>
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	bd30      	pop	{r4, r5, pc}
 8006fc4:	4283      	cmp	r3, r0
 8006fc6:	d3f3      	bcc.n	8006fb0 <__mcmp+0x18>
 8006fc8:	e7fa      	b.n	8006fc0 <__mcmp+0x28>
 8006fca:	f04f 32ff 	mov.w	r2, #4294967295
 8006fce:	e7f7      	b.n	8006fc0 <__mcmp+0x28>

08006fd0 <__mdiff>:
 8006fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd4:	460c      	mov	r4, r1
 8006fd6:	4606      	mov	r6, r0
 8006fd8:	4611      	mov	r1, r2
 8006fda:	4620      	mov	r0, r4
 8006fdc:	4617      	mov	r7, r2
 8006fde:	f7ff ffdb 	bl	8006f98 <__mcmp>
 8006fe2:	1e05      	subs	r5, r0, #0
 8006fe4:	d110      	bne.n	8007008 <__mdiff+0x38>
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	4630      	mov	r0, r6
 8006fea:	f7ff fd0d 	bl	8006a08 <_Balloc>
 8006fee:	b930      	cbnz	r0, 8006ffe <__mdiff+0x2e>
 8006ff0:	4b39      	ldr	r3, [pc, #228]	; (80070d8 <__mdiff+0x108>)
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	f240 2132 	movw	r1, #562	; 0x232
 8006ff8:	4838      	ldr	r0, [pc, #224]	; (80070dc <__mdiff+0x10c>)
 8006ffa:	f000 fbfb 	bl	80077f4 <__assert_func>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007004:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007008:	bfa4      	itt	ge
 800700a:	463b      	movge	r3, r7
 800700c:	4627      	movge	r7, r4
 800700e:	4630      	mov	r0, r6
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	bfa6      	itte	ge
 8007014:	461c      	movge	r4, r3
 8007016:	2500      	movge	r5, #0
 8007018:	2501      	movlt	r5, #1
 800701a:	f7ff fcf5 	bl	8006a08 <_Balloc>
 800701e:	b920      	cbnz	r0, 800702a <__mdiff+0x5a>
 8007020:	4b2d      	ldr	r3, [pc, #180]	; (80070d8 <__mdiff+0x108>)
 8007022:	4602      	mov	r2, r0
 8007024:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007028:	e7e6      	b.n	8006ff8 <__mdiff+0x28>
 800702a:	693e      	ldr	r6, [r7, #16]
 800702c:	60c5      	str	r5, [r0, #12]
 800702e:	6925      	ldr	r5, [r4, #16]
 8007030:	f107 0114 	add.w	r1, r7, #20
 8007034:	f104 0914 	add.w	r9, r4, #20
 8007038:	f100 0e14 	add.w	lr, r0, #20
 800703c:	f107 0210 	add.w	r2, r7, #16
 8007040:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007044:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007048:	46f2      	mov	sl, lr
 800704a:	2700      	movs	r7, #0
 800704c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007050:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007054:	fa1f f883 	uxth.w	r8, r3
 8007058:	fa17 f78b 	uxtah	r7, r7, fp
 800705c:	0c1b      	lsrs	r3, r3, #16
 800705e:	eba7 0808 	sub.w	r8, r7, r8
 8007062:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007066:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800706a:	fa1f f888 	uxth.w	r8, r8
 800706e:	141f      	asrs	r7, r3, #16
 8007070:	454d      	cmp	r5, r9
 8007072:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007076:	f84a 3b04 	str.w	r3, [sl], #4
 800707a:	d8e7      	bhi.n	800704c <__mdiff+0x7c>
 800707c:	1b2b      	subs	r3, r5, r4
 800707e:	3b15      	subs	r3, #21
 8007080:	f023 0303 	bic.w	r3, r3, #3
 8007084:	3304      	adds	r3, #4
 8007086:	3415      	adds	r4, #21
 8007088:	42a5      	cmp	r5, r4
 800708a:	bf38      	it	cc
 800708c:	2304      	movcc	r3, #4
 800708e:	4419      	add	r1, r3
 8007090:	4473      	add	r3, lr
 8007092:	469e      	mov	lr, r3
 8007094:	460d      	mov	r5, r1
 8007096:	4565      	cmp	r5, ip
 8007098:	d30e      	bcc.n	80070b8 <__mdiff+0xe8>
 800709a:	f10c 0203 	add.w	r2, ip, #3
 800709e:	1a52      	subs	r2, r2, r1
 80070a0:	f022 0203 	bic.w	r2, r2, #3
 80070a4:	3903      	subs	r1, #3
 80070a6:	458c      	cmp	ip, r1
 80070a8:	bf38      	it	cc
 80070aa:	2200      	movcc	r2, #0
 80070ac:	441a      	add	r2, r3
 80070ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80070b2:	b17b      	cbz	r3, 80070d4 <__mdiff+0x104>
 80070b4:	6106      	str	r6, [r0, #16]
 80070b6:	e7a5      	b.n	8007004 <__mdiff+0x34>
 80070b8:	f855 8b04 	ldr.w	r8, [r5], #4
 80070bc:	fa17 f488 	uxtah	r4, r7, r8
 80070c0:	1422      	asrs	r2, r4, #16
 80070c2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80070c6:	b2a4      	uxth	r4, r4
 80070c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80070cc:	f84e 4b04 	str.w	r4, [lr], #4
 80070d0:	1417      	asrs	r7, r2, #16
 80070d2:	e7e0      	b.n	8007096 <__mdiff+0xc6>
 80070d4:	3e01      	subs	r6, #1
 80070d6:	e7ea      	b.n	80070ae <__mdiff+0xde>
 80070d8:	08008634 	.word	0x08008634
 80070dc:	080086c4 	.word	0x080086c4

080070e0 <__ulp>:
 80070e0:	b082      	sub	sp, #8
 80070e2:	ed8d 0b00 	vstr	d0, [sp]
 80070e6:	9b01      	ldr	r3, [sp, #4]
 80070e8:	4912      	ldr	r1, [pc, #72]	; (8007134 <__ulp+0x54>)
 80070ea:	4019      	ands	r1, r3
 80070ec:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80070f0:	2900      	cmp	r1, #0
 80070f2:	dd05      	ble.n	8007100 <__ulp+0x20>
 80070f4:	2200      	movs	r2, #0
 80070f6:	460b      	mov	r3, r1
 80070f8:	ec43 2b10 	vmov	d0, r2, r3
 80070fc:	b002      	add	sp, #8
 80070fe:	4770      	bx	lr
 8007100:	4249      	negs	r1, r1
 8007102:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007106:	ea4f 5021 	mov.w	r0, r1, asr #20
 800710a:	f04f 0200 	mov.w	r2, #0
 800710e:	f04f 0300 	mov.w	r3, #0
 8007112:	da04      	bge.n	800711e <__ulp+0x3e>
 8007114:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007118:	fa41 f300 	asr.w	r3, r1, r0
 800711c:	e7ec      	b.n	80070f8 <__ulp+0x18>
 800711e:	f1a0 0114 	sub.w	r1, r0, #20
 8007122:	291e      	cmp	r1, #30
 8007124:	bfda      	itte	le
 8007126:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800712a:	fa20 f101 	lsrle.w	r1, r0, r1
 800712e:	2101      	movgt	r1, #1
 8007130:	460a      	mov	r2, r1
 8007132:	e7e1      	b.n	80070f8 <__ulp+0x18>
 8007134:	7ff00000 	.word	0x7ff00000

08007138 <__b2d>:
 8007138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713a:	6905      	ldr	r5, [r0, #16]
 800713c:	f100 0714 	add.w	r7, r0, #20
 8007140:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007144:	1f2e      	subs	r6, r5, #4
 8007146:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800714a:	4620      	mov	r0, r4
 800714c:	f7ff fd52 	bl	8006bf4 <__hi0bits>
 8007150:	f1c0 0320 	rsb	r3, r0, #32
 8007154:	280a      	cmp	r0, #10
 8007156:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80071d4 <__b2d+0x9c>
 800715a:	600b      	str	r3, [r1, #0]
 800715c:	dc14      	bgt.n	8007188 <__b2d+0x50>
 800715e:	f1c0 0e0b 	rsb	lr, r0, #11
 8007162:	fa24 f10e 	lsr.w	r1, r4, lr
 8007166:	42b7      	cmp	r7, r6
 8007168:	ea41 030c 	orr.w	r3, r1, ip
 800716c:	bf34      	ite	cc
 800716e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007172:	2100      	movcs	r1, #0
 8007174:	3015      	adds	r0, #21
 8007176:	fa04 f000 	lsl.w	r0, r4, r0
 800717a:	fa21 f10e 	lsr.w	r1, r1, lr
 800717e:	ea40 0201 	orr.w	r2, r0, r1
 8007182:	ec43 2b10 	vmov	d0, r2, r3
 8007186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007188:	42b7      	cmp	r7, r6
 800718a:	bf3a      	itte	cc
 800718c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007190:	f1a5 0608 	subcc.w	r6, r5, #8
 8007194:	2100      	movcs	r1, #0
 8007196:	380b      	subs	r0, #11
 8007198:	d017      	beq.n	80071ca <__b2d+0x92>
 800719a:	f1c0 0c20 	rsb	ip, r0, #32
 800719e:	fa04 f500 	lsl.w	r5, r4, r0
 80071a2:	42be      	cmp	r6, r7
 80071a4:	fa21 f40c 	lsr.w	r4, r1, ip
 80071a8:	ea45 0504 	orr.w	r5, r5, r4
 80071ac:	bf8c      	ite	hi
 80071ae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80071b2:	2400      	movls	r4, #0
 80071b4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80071b8:	fa01 f000 	lsl.w	r0, r1, r0
 80071bc:	fa24 f40c 	lsr.w	r4, r4, ip
 80071c0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80071c4:	ea40 0204 	orr.w	r2, r0, r4
 80071c8:	e7db      	b.n	8007182 <__b2d+0x4a>
 80071ca:	ea44 030c 	orr.w	r3, r4, ip
 80071ce:	460a      	mov	r2, r1
 80071d0:	e7d7      	b.n	8007182 <__b2d+0x4a>
 80071d2:	bf00      	nop
 80071d4:	3ff00000 	.word	0x3ff00000

080071d8 <__d2b>:
 80071d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80071dc:	4689      	mov	r9, r1
 80071de:	2101      	movs	r1, #1
 80071e0:	ec57 6b10 	vmov	r6, r7, d0
 80071e4:	4690      	mov	r8, r2
 80071e6:	f7ff fc0f 	bl	8006a08 <_Balloc>
 80071ea:	4604      	mov	r4, r0
 80071ec:	b930      	cbnz	r0, 80071fc <__d2b+0x24>
 80071ee:	4602      	mov	r2, r0
 80071f0:	4b25      	ldr	r3, [pc, #148]	; (8007288 <__d2b+0xb0>)
 80071f2:	4826      	ldr	r0, [pc, #152]	; (800728c <__d2b+0xb4>)
 80071f4:	f240 310a 	movw	r1, #778	; 0x30a
 80071f8:	f000 fafc 	bl	80077f4 <__assert_func>
 80071fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007200:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007204:	bb35      	cbnz	r5, 8007254 <__d2b+0x7c>
 8007206:	2e00      	cmp	r6, #0
 8007208:	9301      	str	r3, [sp, #4]
 800720a:	d028      	beq.n	800725e <__d2b+0x86>
 800720c:	4668      	mov	r0, sp
 800720e:	9600      	str	r6, [sp, #0]
 8007210:	f7ff fd10 	bl	8006c34 <__lo0bits>
 8007214:	9900      	ldr	r1, [sp, #0]
 8007216:	b300      	cbz	r0, 800725a <__d2b+0x82>
 8007218:	9a01      	ldr	r2, [sp, #4]
 800721a:	f1c0 0320 	rsb	r3, r0, #32
 800721e:	fa02 f303 	lsl.w	r3, r2, r3
 8007222:	430b      	orrs	r3, r1
 8007224:	40c2      	lsrs	r2, r0
 8007226:	6163      	str	r3, [r4, #20]
 8007228:	9201      	str	r2, [sp, #4]
 800722a:	9b01      	ldr	r3, [sp, #4]
 800722c:	61a3      	str	r3, [r4, #24]
 800722e:	2b00      	cmp	r3, #0
 8007230:	bf14      	ite	ne
 8007232:	2202      	movne	r2, #2
 8007234:	2201      	moveq	r2, #1
 8007236:	6122      	str	r2, [r4, #16]
 8007238:	b1d5      	cbz	r5, 8007270 <__d2b+0x98>
 800723a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800723e:	4405      	add	r5, r0
 8007240:	f8c9 5000 	str.w	r5, [r9]
 8007244:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007248:	f8c8 0000 	str.w	r0, [r8]
 800724c:	4620      	mov	r0, r4
 800724e:	b003      	add	sp, #12
 8007250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007258:	e7d5      	b.n	8007206 <__d2b+0x2e>
 800725a:	6161      	str	r1, [r4, #20]
 800725c:	e7e5      	b.n	800722a <__d2b+0x52>
 800725e:	a801      	add	r0, sp, #4
 8007260:	f7ff fce8 	bl	8006c34 <__lo0bits>
 8007264:	9b01      	ldr	r3, [sp, #4]
 8007266:	6163      	str	r3, [r4, #20]
 8007268:	2201      	movs	r2, #1
 800726a:	6122      	str	r2, [r4, #16]
 800726c:	3020      	adds	r0, #32
 800726e:	e7e3      	b.n	8007238 <__d2b+0x60>
 8007270:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007274:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007278:	f8c9 0000 	str.w	r0, [r9]
 800727c:	6918      	ldr	r0, [r3, #16]
 800727e:	f7ff fcb9 	bl	8006bf4 <__hi0bits>
 8007282:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007286:	e7df      	b.n	8007248 <__d2b+0x70>
 8007288:	08008634 	.word	0x08008634
 800728c:	080086c4 	.word	0x080086c4

08007290 <__ratio>:
 8007290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007294:	4688      	mov	r8, r1
 8007296:	4669      	mov	r1, sp
 8007298:	4681      	mov	r9, r0
 800729a:	f7ff ff4d 	bl	8007138 <__b2d>
 800729e:	a901      	add	r1, sp, #4
 80072a0:	4640      	mov	r0, r8
 80072a2:	ec55 4b10 	vmov	r4, r5, d0
 80072a6:	f7ff ff47 	bl	8007138 <__b2d>
 80072aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072ae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80072b2:	eba3 0c02 	sub.w	ip, r3, r2
 80072b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80072ba:	1a9b      	subs	r3, r3, r2
 80072bc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80072c0:	ec51 0b10 	vmov	r0, r1, d0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	bfd6      	itet	le
 80072c8:	460a      	movle	r2, r1
 80072ca:	462a      	movgt	r2, r5
 80072cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80072d0:	468b      	mov	fp, r1
 80072d2:	462f      	mov	r7, r5
 80072d4:	bfd4      	ite	le
 80072d6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80072da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80072de:	4620      	mov	r0, r4
 80072e0:	ee10 2a10 	vmov	r2, s0
 80072e4:	465b      	mov	r3, fp
 80072e6:	4639      	mov	r1, r7
 80072e8:	f7f9 fac0 	bl	800086c <__aeabi_ddiv>
 80072ec:	ec41 0b10 	vmov	d0, r0, r1
 80072f0:	b003      	add	sp, #12
 80072f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080072f6 <__copybits>:
 80072f6:	3901      	subs	r1, #1
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	1149      	asrs	r1, r1, #5
 80072fc:	6914      	ldr	r4, [r2, #16]
 80072fe:	3101      	adds	r1, #1
 8007300:	f102 0314 	add.w	r3, r2, #20
 8007304:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007308:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800730c:	1f05      	subs	r5, r0, #4
 800730e:	42a3      	cmp	r3, r4
 8007310:	d30c      	bcc.n	800732c <__copybits+0x36>
 8007312:	1aa3      	subs	r3, r4, r2
 8007314:	3b11      	subs	r3, #17
 8007316:	f023 0303 	bic.w	r3, r3, #3
 800731a:	3211      	adds	r2, #17
 800731c:	42a2      	cmp	r2, r4
 800731e:	bf88      	it	hi
 8007320:	2300      	movhi	r3, #0
 8007322:	4418      	add	r0, r3
 8007324:	2300      	movs	r3, #0
 8007326:	4288      	cmp	r0, r1
 8007328:	d305      	bcc.n	8007336 <__copybits+0x40>
 800732a:	bd70      	pop	{r4, r5, r6, pc}
 800732c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007330:	f845 6f04 	str.w	r6, [r5, #4]!
 8007334:	e7eb      	b.n	800730e <__copybits+0x18>
 8007336:	f840 3b04 	str.w	r3, [r0], #4
 800733a:	e7f4      	b.n	8007326 <__copybits+0x30>

0800733c <__any_on>:
 800733c:	f100 0214 	add.w	r2, r0, #20
 8007340:	6900      	ldr	r0, [r0, #16]
 8007342:	114b      	asrs	r3, r1, #5
 8007344:	4298      	cmp	r0, r3
 8007346:	b510      	push	{r4, lr}
 8007348:	db11      	blt.n	800736e <__any_on+0x32>
 800734a:	dd0a      	ble.n	8007362 <__any_on+0x26>
 800734c:	f011 011f 	ands.w	r1, r1, #31
 8007350:	d007      	beq.n	8007362 <__any_on+0x26>
 8007352:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007356:	fa24 f001 	lsr.w	r0, r4, r1
 800735a:	fa00 f101 	lsl.w	r1, r0, r1
 800735e:	428c      	cmp	r4, r1
 8007360:	d10b      	bne.n	800737a <__any_on+0x3e>
 8007362:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007366:	4293      	cmp	r3, r2
 8007368:	d803      	bhi.n	8007372 <__any_on+0x36>
 800736a:	2000      	movs	r0, #0
 800736c:	bd10      	pop	{r4, pc}
 800736e:	4603      	mov	r3, r0
 8007370:	e7f7      	b.n	8007362 <__any_on+0x26>
 8007372:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007376:	2900      	cmp	r1, #0
 8007378:	d0f5      	beq.n	8007366 <__any_on+0x2a>
 800737a:	2001      	movs	r0, #1
 800737c:	e7f6      	b.n	800736c <__any_on+0x30>

0800737e <_calloc_r>:
 800737e:	b513      	push	{r0, r1, r4, lr}
 8007380:	434a      	muls	r2, r1
 8007382:	4611      	mov	r1, r2
 8007384:	9201      	str	r2, [sp, #4]
 8007386:	f000 f859 	bl	800743c <_malloc_r>
 800738a:	4604      	mov	r4, r0
 800738c:	b118      	cbz	r0, 8007396 <_calloc_r+0x18>
 800738e:	9a01      	ldr	r2, [sp, #4]
 8007390:	2100      	movs	r1, #0
 8007392:	f7fc fb9f 	bl	8003ad4 <memset>
 8007396:	4620      	mov	r0, r4
 8007398:	b002      	add	sp, #8
 800739a:	bd10      	pop	{r4, pc}

0800739c <_free_r>:
 800739c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800739e:	2900      	cmp	r1, #0
 80073a0:	d048      	beq.n	8007434 <_free_r+0x98>
 80073a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073a6:	9001      	str	r0, [sp, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f1a1 0404 	sub.w	r4, r1, #4
 80073ae:	bfb8      	it	lt
 80073b0:	18e4      	addlt	r4, r4, r3
 80073b2:	f000 fa69 	bl	8007888 <__malloc_lock>
 80073b6:	4a20      	ldr	r2, [pc, #128]	; (8007438 <_free_r+0x9c>)
 80073b8:	9801      	ldr	r0, [sp, #4]
 80073ba:	6813      	ldr	r3, [r2, #0]
 80073bc:	4615      	mov	r5, r2
 80073be:	b933      	cbnz	r3, 80073ce <_free_r+0x32>
 80073c0:	6063      	str	r3, [r4, #4]
 80073c2:	6014      	str	r4, [r2, #0]
 80073c4:	b003      	add	sp, #12
 80073c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073ca:	f000 ba63 	b.w	8007894 <__malloc_unlock>
 80073ce:	42a3      	cmp	r3, r4
 80073d0:	d90b      	bls.n	80073ea <_free_r+0x4e>
 80073d2:	6821      	ldr	r1, [r4, #0]
 80073d4:	1862      	adds	r2, r4, r1
 80073d6:	4293      	cmp	r3, r2
 80073d8:	bf04      	itt	eq
 80073da:	681a      	ldreq	r2, [r3, #0]
 80073dc:	685b      	ldreq	r3, [r3, #4]
 80073de:	6063      	str	r3, [r4, #4]
 80073e0:	bf04      	itt	eq
 80073e2:	1852      	addeq	r2, r2, r1
 80073e4:	6022      	streq	r2, [r4, #0]
 80073e6:	602c      	str	r4, [r5, #0]
 80073e8:	e7ec      	b.n	80073c4 <_free_r+0x28>
 80073ea:	461a      	mov	r2, r3
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	b10b      	cbz	r3, 80073f4 <_free_r+0x58>
 80073f0:	42a3      	cmp	r3, r4
 80073f2:	d9fa      	bls.n	80073ea <_free_r+0x4e>
 80073f4:	6811      	ldr	r1, [r2, #0]
 80073f6:	1855      	adds	r5, r2, r1
 80073f8:	42a5      	cmp	r5, r4
 80073fa:	d10b      	bne.n	8007414 <_free_r+0x78>
 80073fc:	6824      	ldr	r4, [r4, #0]
 80073fe:	4421      	add	r1, r4
 8007400:	1854      	adds	r4, r2, r1
 8007402:	42a3      	cmp	r3, r4
 8007404:	6011      	str	r1, [r2, #0]
 8007406:	d1dd      	bne.n	80073c4 <_free_r+0x28>
 8007408:	681c      	ldr	r4, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	6053      	str	r3, [r2, #4]
 800740e:	4421      	add	r1, r4
 8007410:	6011      	str	r1, [r2, #0]
 8007412:	e7d7      	b.n	80073c4 <_free_r+0x28>
 8007414:	d902      	bls.n	800741c <_free_r+0x80>
 8007416:	230c      	movs	r3, #12
 8007418:	6003      	str	r3, [r0, #0]
 800741a:	e7d3      	b.n	80073c4 <_free_r+0x28>
 800741c:	6825      	ldr	r5, [r4, #0]
 800741e:	1961      	adds	r1, r4, r5
 8007420:	428b      	cmp	r3, r1
 8007422:	bf04      	itt	eq
 8007424:	6819      	ldreq	r1, [r3, #0]
 8007426:	685b      	ldreq	r3, [r3, #4]
 8007428:	6063      	str	r3, [r4, #4]
 800742a:	bf04      	itt	eq
 800742c:	1949      	addeq	r1, r1, r5
 800742e:	6021      	streq	r1, [r4, #0]
 8007430:	6054      	str	r4, [r2, #4]
 8007432:	e7c7      	b.n	80073c4 <_free_r+0x28>
 8007434:	b003      	add	sp, #12
 8007436:	bd30      	pop	{r4, r5, pc}
 8007438:	20000224 	.word	0x20000224

0800743c <_malloc_r>:
 800743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743e:	1ccd      	adds	r5, r1, #3
 8007440:	f025 0503 	bic.w	r5, r5, #3
 8007444:	3508      	adds	r5, #8
 8007446:	2d0c      	cmp	r5, #12
 8007448:	bf38      	it	cc
 800744a:	250c      	movcc	r5, #12
 800744c:	2d00      	cmp	r5, #0
 800744e:	4606      	mov	r6, r0
 8007450:	db01      	blt.n	8007456 <_malloc_r+0x1a>
 8007452:	42a9      	cmp	r1, r5
 8007454:	d903      	bls.n	800745e <_malloc_r+0x22>
 8007456:	230c      	movs	r3, #12
 8007458:	6033      	str	r3, [r6, #0]
 800745a:	2000      	movs	r0, #0
 800745c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800745e:	f000 fa13 	bl	8007888 <__malloc_lock>
 8007462:	4921      	ldr	r1, [pc, #132]	; (80074e8 <_malloc_r+0xac>)
 8007464:	680a      	ldr	r2, [r1, #0]
 8007466:	4614      	mov	r4, r2
 8007468:	b99c      	cbnz	r4, 8007492 <_malloc_r+0x56>
 800746a:	4f20      	ldr	r7, [pc, #128]	; (80074ec <_malloc_r+0xb0>)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	b923      	cbnz	r3, 800747a <_malloc_r+0x3e>
 8007470:	4621      	mov	r1, r4
 8007472:	4630      	mov	r0, r6
 8007474:	f000 f9a0 	bl	80077b8 <_sbrk_r>
 8007478:	6038      	str	r0, [r7, #0]
 800747a:	4629      	mov	r1, r5
 800747c:	4630      	mov	r0, r6
 800747e:	f000 f99b 	bl	80077b8 <_sbrk_r>
 8007482:	1c43      	adds	r3, r0, #1
 8007484:	d123      	bne.n	80074ce <_malloc_r+0x92>
 8007486:	230c      	movs	r3, #12
 8007488:	6033      	str	r3, [r6, #0]
 800748a:	4630      	mov	r0, r6
 800748c:	f000 fa02 	bl	8007894 <__malloc_unlock>
 8007490:	e7e3      	b.n	800745a <_malloc_r+0x1e>
 8007492:	6823      	ldr	r3, [r4, #0]
 8007494:	1b5b      	subs	r3, r3, r5
 8007496:	d417      	bmi.n	80074c8 <_malloc_r+0x8c>
 8007498:	2b0b      	cmp	r3, #11
 800749a:	d903      	bls.n	80074a4 <_malloc_r+0x68>
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	441c      	add	r4, r3
 80074a0:	6025      	str	r5, [r4, #0]
 80074a2:	e004      	b.n	80074ae <_malloc_r+0x72>
 80074a4:	6863      	ldr	r3, [r4, #4]
 80074a6:	42a2      	cmp	r2, r4
 80074a8:	bf0c      	ite	eq
 80074aa:	600b      	streq	r3, [r1, #0]
 80074ac:	6053      	strne	r3, [r2, #4]
 80074ae:	4630      	mov	r0, r6
 80074b0:	f000 f9f0 	bl	8007894 <__malloc_unlock>
 80074b4:	f104 000b 	add.w	r0, r4, #11
 80074b8:	1d23      	adds	r3, r4, #4
 80074ba:	f020 0007 	bic.w	r0, r0, #7
 80074be:	1ac2      	subs	r2, r0, r3
 80074c0:	d0cc      	beq.n	800745c <_malloc_r+0x20>
 80074c2:	1a1b      	subs	r3, r3, r0
 80074c4:	50a3      	str	r3, [r4, r2]
 80074c6:	e7c9      	b.n	800745c <_malloc_r+0x20>
 80074c8:	4622      	mov	r2, r4
 80074ca:	6864      	ldr	r4, [r4, #4]
 80074cc:	e7cc      	b.n	8007468 <_malloc_r+0x2c>
 80074ce:	1cc4      	adds	r4, r0, #3
 80074d0:	f024 0403 	bic.w	r4, r4, #3
 80074d4:	42a0      	cmp	r0, r4
 80074d6:	d0e3      	beq.n	80074a0 <_malloc_r+0x64>
 80074d8:	1a21      	subs	r1, r4, r0
 80074da:	4630      	mov	r0, r6
 80074dc:	f000 f96c 	bl	80077b8 <_sbrk_r>
 80074e0:	3001      	adds	r0, #1
 80074e2:	d1dd      	bne.n	80074a0 <_malloc_r+0x64>
 80074e4:	e7cf      	b.n	8007486 <_malloc_r+0x4a>
 80074e6:	bf00      	nop
 80074e8:	20000224 	.word	0x20000224
 80074ec:	20000228 	.word	0x20000228

080074f0 <__ssputs_r>:
 80074f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f4:	688e      	ldr	r6, [r1, #8]
 80074f6:	429e      	cmp	r6, r3
 80074f8:	4682      	mov	sl, r0
 80074fa:	460c      	mov	r4, r1
 80074fc:	4690      	mov	r8, r2
 80074fe:	461f      	mov	r7, r3
 8007500:	d838      	bhi.n	8007574 <__ssputs_r+0x84>
 8007502:	898a      	ldrh	r2, [r1, #12]
 8007504:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007508:	d032      	beq.n	8007570 <__ssputs_r+0x80>
 800750a:	6825      	ldr	r5, [r4, #0]
 800750c:	6909      	ldr	r1, [r1, #16]
 800750e:	eba5 0901 	sub.w	r9, r5, r1
 8007512:	6965      	ldr	r5, [r4, #20]
 8007514:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007518:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800751c:	3301      	adds	r3, #1
 800751e:	444b      	add	r3, r9
 8007520:	106d      	asrs	r5, r5, #1
 8007522:	429d      	cmp	r5, r3
 8007524:	bf38      	it	cc
 8007526:	461d      	movcc	r5, r3
 8007528:	0553      	lsls	r3, r2, #21
 800752a:	d531      	bpl.n	8007590 <__ssputs_r+0xa0>
 800752c:	4629      	mov	r1, r5
 800752e:	f7ff ff85 	bl	800743c <_malloc_r>
 8007532:	4606      	mov	r6, r0
 8007534:	b950      	cbnz	r0, 800754c <__ssputs_r+0x5c>
 8007536:	230c      	movs	r3, #12
 8007538:	f8ca 3000 	str.w	r3, [sl]
 800753c:	89a3      	ldrh	r3, [r4, #12]
 800753e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007542:	81a3      	strh	r3, [r4, #12]
 8007544:	f04f 30ff 	mov.w	r0, #4294967295
 8007548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800754c:	6921      	ldr	r1, [r4, #16]
 800754e:	464a      	mov	r2, r9
 8007550:	f7ff fa4c 	bl	80069ec <memcpy>
 8007554:	89a3      	ldrh	r3, [r4, #12]
 8007556:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800755a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800755e:	81a3      	strh	r3, [r4, #12]
 8007560:	6126      	str	r6, [r4, #16]
 8007562:	6165      	str	r5, [r4, #20]
 8007564:	444e      	add	r6, r9
 8007566:	eba5 0509 	sub.w	r5, r5, r9
 800756a:	6026      	str	r6, [r4, #0]
 800756c:	60a5      	str	r5, [r4, #8]
 800756e:	463e      	mov	r6, r7
 8007570:	42be      	cmp	r6, r7
 8007572:	d900      	bls.n	8007576 <__ssputs_r+0x86>
 8007574:	463e      	mov	r6, r7
 8007576:	4632      	mov	r2, r6
 8007578:	6820      	ldr	r0, [r4, #0]
 800757a:	4641      	mov	r1, r8
 800757c:	f000 f96a 	bl	8007854 <memmove>
 8007580:	68a3      	ldr	r3, [r4, #8]
 8007582:	6822      	ldr	r2, [r4, #0]
 8007584:	1b9b      	subs	r3, r3, r6
 8007586:	4432      	add	r2, r6
 8007588:	60a3      	str	r3, [r4, #8]
 800758a:	6022      	str	r2, [r4, #0]
 800758c:	2000      	movs	r0, #0
 800758e:	e7db      	b.n	8007548 <__ssputs_r+0x58>
 8007590:	462a      	mov	r2, r5
 8007592:	f000 f985 	bl	80078a0 <_realloc_r>
 8007596:	4606      	mov	r6, r0
 8007598:	2800      	cmp	r0, #0
 800759a:	d1e1      	bne.n	8007560 <__ssputs_r+0x70>
 800759c:	6921      	ldr	r1, [r4, #16]
 800759e:	4650      	mov	r0, sl
 80075a0:	f7ff fefc 	bl	800739c <_free_r>
 80075a4:	e7c7      	b.n	8007536 <__ssputs_r+0x46>
	...

080075a8 <_svfiprintf_r>:
 80075a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	4698      	mov	r8, r3
 80075ae:	898b      	ldrh	r3, [r1, #12]
 80075b0:	061b      	lsls	r3, r3, #24
 80075b2:	b09d      	sub	sp, #116	; 0x74
 80075b4:	4607      	mov	r7, r0
 80075b6:	460d      	mov	r5, r1
 80075b8:	4614      	mov	r4, r2
 80075ba:	d50e      	bpl.n	80075da <_svfiprintf_r+0x32>
 80075bc:	690b      	ldr	r3, [r1, #16]
 80075be:	b963      	cbnz	r3, 80075da <_svfiprintf_r+0x32>
 80075c0:	2140      	movs	r1, #64	; 0x40
 80075c2:	f7ff ff3b 	bl	800743c <_malloc_r>
 80075c6:	6028      	str	r0, [r5, #0]
 80075c8:	6128      	str	r0, [r5, #16]
 80075ca:	b920      	cbnz	r0, 80075d6 <_svfiprintf_r+0x2e>
 80075cc:	230c      	movs	r3, #12
 80075ce:	603b      	str	r3, [r7, #0]
 80075d0:	f04f 30ff 	mov.w	r0, #4294967295
 80075d4:	e0d1      	b.n	800777a <_svfiprintf_r+0x1d2>
 80075d6:	2340      	movs	r3, #64	; 0x40
 80075d8:	616b      	str	r3, [r5, #20]
 80075da:	2300      	movs	r3, #0
 80075dc:	9309      	str	r3, [sp, #36]	; 0x24
 80075de:	2320      	movs	r3, #32
 80075e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80075e8:	2330      	movs	r3, #48	; 0x30
 80075ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007794 <_svfiprintf_r+0x1ec>
 80075ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075f2:	f04f 0901 	mov.w	r9, #1
 80075f6:	4623      	mov	r3, r4
 80075f8:	469a      	mov	sl, r3
 80075fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075fe:	b10a      	cbz	r2, 8007604 <_svfiprintf_r+0x5c>
 8007600:	2a25      	cmp	r2, #37	; 0x25
 8007602:	d1f9      	bne.n	80075f8 <_svfiprintf_r+0x50>
 8007604:	ebba 0b04 	subs.w	fp, sl, r4
 8007608:	d00b      	beq.n	8007622 <_svfiprintf_r+0x7a>
 800760a:	465b      	mov	r3, fp
 800760c:	4622      	mov	r2, r4
 800760e:	4629      	mov	r1, r5
 8007610:	4638      	mov	r0, r7
 8007612:	f7ff ff6d 	bl	80074f0 <__ssputs_r>
 8007616:	3001      	adds	r0, #1
 8007618:	f000 80aa 	beq.w	8007770 <_svfiprintf_r+0x1c8>
 800761c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800761e:	445a      	add	r2, fp
 8007620:	9209      	str	r2, [sp, #36]	; 0x24
 8007622:	f89a 3000 	ldrb.w	r3, [sl]
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 80a2 	beq.w	8007770 <_svfiprintf_r+0x1c8>
 800762c:	2300      	movs	r3, #0
 800762e:	f04f 32ff 	mov.w	r2, #4294967295
 8007632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007636:	f10a 0a01 	add.w	sl, sl, #1
 800763a:	9304      	str	r3, [sp, #16]
 800763c:	9307      	str	r3, [sp, #28]
 800763e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007642:	931a      	str	r3, [sp, #104]	; 0x68
 8007644:	4654      	mov	r4, sl
 8007646:	2205      	movs	r2, #5
 8007648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800764c:	4851      	ldr	r0, [pc, #324]	; (8007794 <_svfiprintf_r+0x1ec>)
 800764e:	f7f8 fdd7 	bl	8000200 <memchr>
 8007652:	9a04      	ldr	r2, [sp, #16]
 8007654:	b9d8      	cbnz	r0, 800768e <_svfiprintf_r+0xe6>
 8007656:	06d0      	lsls	r0, r2, #27
 8007658:	bf44      	itt	mi
 800765a:	2320      	movmi	r3, #32
 800765c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007660:	0711      	lsls	r1, r2, #28
 8007662:	bf44      	itt	mi
 8007664:	232b      	movmi	r3, #43	; 0x2b
 8007666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800766a:	f89a 3000 	ldrb.w	r3, [sl]
 800766e:	2b2a      	cmp	r3, #42	; 0x2a
 8007670:	d015      	beq.n	800769e <_svfiprintf_r+0xf6>
 8007672:	9a07      	ldr	r2, [sp, #28]
 8007674:	4654      	mov	r4, sl
 8007676:	2000      	movs	r0, #0
 8007678:	f04f 0c0a 	mov.w	ip, #10
 800767c:	4621      	mov	r1, r4
 800767e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007682:	3b30      	subs	r3, #48	; 0x30
 8007684:	2b09      	cmp	r3, #9
 8007686:	d94e      	bls.n	8007726 <_svfiprintf_r+0x17e>
 8007688:	b1b0      	cbz	r0, 80076b8 <_svfiprintf_r+0x110>
 800768a:	9207      	str	r2, [sp, #28]
 800768c:	e014      	b.n	80076b8 <_svfiprintf_r+0x110>
 800768e:	eba0 0308 	sub.w	r3, r0, r8
 8007692:	fa09 f303 	lsl.w	r3, r9, r3
 8007696:	4313      	orrs	r3, r2
 8007698:	9304      	str	r3, [sp, #16]
 800769a:	46a2      	mov	sl, r4
 800769c:	e7d2      	b.n	8007644 <_svfiprintf_r+0x9c>
 800769e:	9b03      	ldr	r3, [sp, #12]
 80076a0:	1d19      	adds	r1, r3, #4
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	9103      	str	r1, [sp, #12]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	bfbb      	ittet	lt
 80076aa:	425b      	neglt	r3, r3
 80076ac:	f042 0202 	orrlt.w	r2, r2, #2
 80076b0:	9307      	strge	r3, [sp, #28]
 80076b2:	9307      	strlt	r3, [sp, #28]
 80076b4:	bfb8      	it	lt
 80076b6:	9204      	strlt	r2, [sp, #16]
 80076b8:	7823      	ldrb	r3, [r4, #0]
 80076ba:	2b2e      	cmp	r3, #46	; 0x2e
 80076bc:	d10c      	bne.n	80076d8 <_svfiprintf_r+0x130>
 80076be:	7863      	ldrb	r3, [r4, #1]
 80076c0:	2b2a      	cmp	r3, #42	; 0x2a
 80076c2:	d135      	bne.n	8007730 <_svfiprintf_r+0x188>
 80076c4:	9b03      	ldr	r3, [sp, #12]
 80076c6:	1d1a      	adds	r2, r3, #4
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	9203      	str	r2, [sp, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	bfb8      	it	lt
 80076d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80076d4:	3402      	adds	r4, #2
 80076d6:	9305      	str	r3, [sp, #20]
 80076d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80077a4 <_svfiprintf_r+0x1fc>
 80076dc:	7821      	ldrb	r1, [r4, #0]
 80076de:	2203      	movs	r2, #3
 80076e0:	4650      	mov	r0, sl
 80076e2:	f7f8 fd8d 	bl	8000200 <memchr>
 80076e6:	b140      	cbz	r0, 80076fa <_svfiprintf_r+0x152>
 80076e8:	2340      	movs	r3, #64	; 0x40
 80076ea:	eba0 000a 	sub.w	r0, r0, sl
 80076ee:	fa03 f000 	lsl.w	r0, r3, r0
 80076f2:	9b04      	ldr	r3, [sp, #16]
 80076f4:	4303      	orrs	r3, r0
 80076f6:	3401      	adds	r4, #1
 80076f8:	9304      	str	r3, [sp, #16]
 80076fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076fe:	4826      	ldr	r0, [pc, #152]	; (8007798 <_svfiprintf_r+0x1f0>)
 8007700:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007704:	2206      	movs	r2, #6
 8007706:	f7f8 fd7b 	bl	8000200 <memchr>
 800770a:	2800      	cmp	r0, #0
 800770c:	d038      	beq.n	8007780 <_svfiprintf_r+0x1d8>
 800770e:	4b23      	ldr	r3, [pc, #140]	; (800779c <_svfiprintf_r+0x1f4>)
 8007710:	bb1b      	cbnz	r3, 800775a <_svfiprintf_r+0x1b2>
 8007712:	9b03      	ldr	r3, [sp, #12]
 8007714:	3307      	adds	r3, #7
 8007716:	f023 0307 	bic.w	r3, r3, #7
 800771a:	3308      	adds	r3, #8
 800771c:	9303      	str	r3, [sp, #12]
 800771e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007720:	4433      	add	r3, r6
 8007722:	9309      	str	r3, [sp, #36]	; 0x24
 8007724:	e767      	b.n	80075f6 <_svfiprintf_r+0x4e>
 8007726:	fb0c 3202 	mla	r2, ip, r2, r3
 800772a:	460c      	mov	r4, r1
 800772c:	2001      	movs	r0, #1
 800772e:	e7a5      	b.n	800767c <_svfiprintf_r+0xd4>
 8007730:	2300      	movs	r3, #0
 8007732:	3401      	adds	r4, #1
 8007734:	9305      	str	r3, [sp, #20]
 8007736:	4619      	mov	r1, r3
 8007738:	f04f 0c0a 	mov.w	ip, #10
 800773c:	4620      	mov	r0, r4
 800773e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007742:	3a30      	subs	r2, #48	; 0x30
 8007744:	2a09      	cmp	r2, #9
 8007746:	d903      	bls.n	8007750 <_svfiprintf_r+0x1a8>
 8007748:	2b00      	cmp	r3, #0
 800774a:	d0c5      	beq.n	80076d8 <_svfiprintf_r+0x130>
 800774c:	9105      	str	r1, [sp, #20]
 800774e:	e7c3      	b.n	80076d8 <_svfiprintf_r+0x130>
 8007750:	fb0c 2101 	mla	r1, ip, r1, r2
 8007754:	4604      	mov	r4, r0
 8007756:	2301      	movs	r3, #1
 8007758:	e7f0      	b.n	800773c <_svfiprintf_r+0x194>
 800775a:	ab03      	add	r3, sp, #12
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	462a      	mov	r2, r5
 8007760:	4b0f      	ldr	r3, [pc, #60]	; (80077a0 <_svfiprintf_r+0x1f8>)
 8007762:	a904      	add	r1, sp, #16
 8007764:	4638      	mov	r0, r7
 8007766:	f7fc fa5d 	bl	8003c24 <_printf_float>
 800776a:	1c42      	adds	r2, r0, #1
 800776c:	4606      	mov	r6, r0
 800776e:	d1d6      	bne.n	800771e <_svfiprintf_r+0x176>
 8007770:	89ab      	ldrh	r3, [r5, #12]
 8007772:	065b      	lsls	r3, r3, #25
 8007774:	f53f af2c 	bmi.w	80075d0 <_svfiprintf_r+0x28>
 8007778:	9809      	ldr	r0, [sp, #36]	; 0x24
 800777a:	b01d      	add	sp, #116	; 0x74
 800777c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007780:	ab03      	add	r3, sp, #12
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	462a      	mov	r2, r5
 8007786:	4b06      	ldr	r3, [pc, #24]	; (80077a0 <_svfiprintf_r+0x1f8>)
 8007788:	a904      	add	r1, sp, #16
 800778a:	4638      	mov	r0, r7
 800778c:	f7fc fcee 	bl	800416c <_printf_i>
 8007790:	e7eb      	b.n	800776a <_svfiprintf_r+0x1c2>
 8007792:	bf00      	nop
 8007794:	08008824 	.word	0x08008824
 8007798:	0800882e 	.word	0x0800882e
 800779c:	08003c25 	.word	0x08003c25
 80077a0:	080074f1 	.word	0x080074f1
 80077a4:	0800882a 	.word	0x0800882a

080077a8 <nan>:
 80077a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80077b0 <nan+0x8>
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	00000000 	.word	0x00000000
 80077b4:	7ff80000 	.word	0x7ff80000

080077b8 <_sbrk_r>:
 80077b8:	b538      	push	{r3, r4, r5, lr}
 80077ba:	4d06      	ldr	r5, [pc, #24]	; (80077d4 <_sbrk_r+0x1c>)
 80077bc:	2300      	movs	r3, #0
 80077be:	4604      	mov	r4, r0
 80077c0:	4608      	mov	r0, r1
 80077c2:	602b      	str	r3, [r5, #0]
 80077c4:	f7fa f8a2 	bl	800190c <_sbrk>
 80077c8:	1c43      	adds	r3, r0, #1
 80077ca:	d102      	bne.n	80077d2 <_sbrk_r+0x1a>
 80077cc:	682b      	ldr	r3, [r5, #0]
 80077ce:	b103      	cbz	r3, 80077d2 <_sbrk_r+0x1a>
 80077d0:	6023      	str	r3, [r4, #0]
 80077d2:	bd38      	pop	{r3, r4, r5, pc}
 80077d4:	200002f8 	.word	0x200002f8

080077d8 <__ascii_wctomb>:
 80077d8:	b149      	cbz	r1, 80077ee <__ascii_wctomb+0x16>
 80077da:	2aff      	cmp	r2, #255	; 0xff
 80077dc:	bf85      	ittet	hi
 80077de:	238a      	movhi	r3, #138	; 0x8a
 80077e0:	6003      	strhi	r3, [r0, #0]
 80077e2:	700a      	strbls	r2, [r1, #0]
 80077e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80077e8:	bf98      	it	ls
 80077ea:	2001      	movls	r0, #1
 80077ec:	4770      	bx	lr
 80077ee:	4608      	mov	r0, r1
 80077f0:	4770      	bx	lr
	...

080077f4 <__assert_func>:
 80077f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077f6:	4614      	mov	r4, r2
 80077f8:	461a      	mov	r2, r3
 80077fa:	4b09      	ldr	r3, [pc, #36]	; (8007820 <__assert_func+0x2c>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4605      	mov	r5, r0
 8007800:	68d8      	ldr	r0, [r3, #12]
 8007802:	b14c      	cbz	r4, 8007818 <__assert_func+0x24>
 8007804:	4b07      	ldr	r3, [pc, #28]	; (8007824 <__assert_func+0x30>)
 8007806:	9100      	str	r1, [sp, #0]
 8007808:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800780c:	4906      	ldr	r1, [pc, #24]	; (8007828 <__assert_func+0x34>)
 800780e:	462b      	mov	r3, r5
 8007810:	f000 f80e 	bl	8007830 <fiprintf>
 8007814:	f000 fa84 	bl	8007d20 <abort>
 8007818:	4b04      	ldr	r3, [pc, #16]	; (800782c <__assert_func+0x38>)
 800781a:	461c      	mov	r4, r3
 800781c:	e7f3      	b.n	8007806 <__assert_func+0x12>
 800781e:	bf00      	nop
 8007820:	20000004 	.word	0x20000004
 8007824:	08008835 	.word	0x08008835
 8007828:	08008842 	.word	0x08008842
 800782c:	08008870 	.word	0x08008870

08007830 <fiprintf>:
 8007830:	b40e      	push	{r1, r2, r3}
 8007832:	b503      	push	{r0, r1, lr}
 8007834:	4601      	mov	r1, r0
 8007836:	ab03      	add	r3, sp, #12
 8007838:	4805      	ldr	r0, [pc, #20]	; (8007850 <fiprintf+0x20>)
 800783a:	f853 2b04 	ldr.w	r2, [r3], #4
 800783e:	6800      	ldr	r0, [r0, #0]
 8007840:	9301      	str	r3, [sp, #4]
 8007842:	f000 f87d 	bl	8007940 <_vfiprintf_r>
 8007846:	b002      	add	sp, #8
 8007848:	f85d eb04 	ldr.w	lr, [sp], #4
 800784c:	b003      	add	sp, #12
 800784e:	4770      	bx	lr
 8007850:	20000004 	.word	0x20000004

08007854 <memmove>:
 8007854:	4288      	cmp	r0, r1
 8007856:	b510      	push	{r4, lr}
 8007858:	eb01 0402 	add.w	r4, r1, r2
 800785c:	d902      	bls.n	8007864 <memmove+0x10>
 800785e:	4284      	cmp	r4, r0
 8007860:	4623      	mov	r3, r4
 8007862:	d807      	bhi.n	8007874 <memmove+0x20>
 8007864:	1e43      	subs	r3, r0, #1
 8007866:	42a1      	cmp	r1, r4
 8007868:	d008      	beq.n	800787c <memmove+0x28>
 800786a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800786e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007872:	e7f8      	b.n	8007866 <memmove+0x12>
 8007874:	4402      	add	r2, r0
 8007876:	4601      	mov	r1, r0
 8007878:	428a      	cmp	r2, r1
 800787a:	d100      	bne.n	800787e <memmove+0x2a>
 800787c:	bd10      	pop	{r4, pc}
 800787e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007882:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007886:	e7f7      	b.n	8007878 <memmove+0x24>

08007888 <__malloc_lock>:
 8007888:	4801      	ldr	r0, [pc, #4]	; (8007890 <__malloc_lock+0x8>)
 800788a:	f000 bc09 	b.w	80080a0 <__retarget_lock_acquire_recursive>
 800788e:	bf00      	nop
 8007890:	20000300 	.word	0x20000300

08007894 <__malloc_unlock>:
 8007894:	4801      	ldr	r0, [pc, #4]	; (800789c <__malloc_unlock+0x8>)
 8007896:	f000 bc04 	b.w	80080a2 <__retarget_lock_release_recursive>
 800789a:	bf00      	nop
 800789c:	20000300 	.word	0x20000300

080078a0 <_realloc_r>:
 80078a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a2:	4607      	mov	r7, r0
 80078a4:	4614      	mov	r4, r2
 80078a6:	460e      	mov	r6, r1
 80078a8:	b921      	cbnz	r1, 80078b4 <_realloc_r+0x14>
 80078aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80078ae:	4611      	mov	r1, r2
 80078b0:	f7ff bdc4 	b.w	800743c <_malloc_r>
 80078b4:	b922      	cbnz	r2, 80078c0 <_realloc_r+0x20>
 80078b6:	f7ff fd71 	bl	800739c <_free_r>
 80078ba:	4625      	mov	r5, r4
 80078bc:	4628      	mov	r0, r5
 80078be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078c0:	f000 fc54 	bl	800816c <_malloc_usable_size_r>
 80078c4:	42a0      	cmp	r0, r4
 80078c6:	d20f      	bcs.n	80078e8 <_realloc_r+0x48>
 80078c8:	4621      	mov	r1, r4
 80078ca:	4638      	mov	r0, r7
 80078cc:	f7ff fdb6 	bl	800743c <_malloc_r>
 80078d0:	4605      	mov	r5, r0
 80078d2:	2800      	cmp	r0, #0
 80078d4:	d0f2      	beq.n	80078bc <_realloc_r+0x1c>
 80078d6:	4631      	mov	r1, r6
 80078d8:	4622      	mov	r2, r4
 80078da:	f7ff f887 	bl	80069ec <memcpy>
 80078de:	4631      	mov	r1, r6
 80078e0:	4638      	mov	r0, r7
 80078e2:	f7ff fd5b 	bl	800739c <_free_r>
 80078e6:	e7e9      	b.n	80078bc <_realloc_r+0x1c>
 80078e8:	4635      	mov	r5, r6
 80078ea:	e7e7      	b.n	80078bc <_realloc_r+0x1c>

080078ec <__sfputc_r>:
 80078ec:	6893      	ldr	r3, [r2, #8]
 80078ee:	3b01      	subs	r3, #1
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	b410      	push	{r4}
 80078f4:	6093      	str	r3, [r2, #8]
 80078f6:	da08      	bge.n	800790a <__sfputc_r+0x1e>
 80078f8:	6994      	ldr	r4, [r2, #24]
 80078fa:	42a3      	cmp	r3, r4
 80078fc:	db01      	blt.n	8007902 <__sfputc_r+0x16>
 80078fe:	290a      	cmp	r1, #10
 8007900:	d103      	bne.n	800790a <__sfputc_r+0x1e>
 8007902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007906:	f000 b94b 	b.w	8007ba0 <__swbuf_r>
 800790a:	6813      	ldr	r3, [r2, #0]
 800790c:	1c58      	adds	r0, r3, #1
 800790e:	6010      	str	r0, [r2, #0]
 8007910:	7019      	strb	r1, [r3, #0]
 8007912:	4608      	mov	r0, r1
 8007914:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007918:	4770      	bx	lr

0800791a <__sfputs_r>:
 800791a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791c:	4606      	mov	r6, r0
 800791e:	460f      	mov	r7, r1
 8007920:	4614      	mov	r4, r2
 8007922:	18d5      	adds	r5, r2, r3
 8007924:	42ac      	cmp	r4, r5
 8007926:	d101      	bne.n	800792c <__sfputs_r+0x12>
 8007928:	2000      	movs	r0, #0
 800792a:	e007      	b.n	800793c <__sfputs_r+0x22>
 800792c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007930:	463a      	mov	r2, r7
 8007932:	4630      	mov	r0, r6
 8007934:	f7ff ffda 	bl	80078ec <__sfputc_r>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	d1f3      	bne.n	8007924 <__sfputs_r+0xa>
 800793c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007940 <_vfiprintf_r>:
 8007940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007944:	460d      	mov	r5, r1
 8007946:	b09d      	sub	sp, #116	; 0x74
 8007948:	4614      	mov	r4, r2
 800794a:	4698      	mov	r8, r3
 800794c:	4606      	mov	r6, r0
 800794e:	b118      	cbz	r0, 8007958 <_vfiprintf_r+0x18>
 8007950:	6983      	ldr	r3, [r0, #24]
 8007952:	b90b      	cbnz	r3, 8007958 <_vfiprintf_r+0x18>
 8007954:	f000 fb06 	bl	8007f64 <__sinit>
 8007958:	4b89      	ldr	r3, [pc, #548]	; (8007b80 <_vfiprintf_r+0x240>)
 800795a:	429d      	cmp	r5, r3
 800795c:	d11b      	bne.n	8007996 <_vfiprintf_r+0x56>
 800795e:	6875      	ldr	r5, [r6, #4]
 8007960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007962:	07d9      	lsls	r1, r3, #31
 8007964:	d405      	bmi.n	8007972 <_vfiprintf_r+0x32>
 8007966:	89ab      	ldrh	r3, [r5, #12]
 8007968:	059a      	lsls	r2, r3, #22
 800796a:	d402      	bmi.n	8007972 <_vfiprintf_r+0x32>
 800796c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800796e:	f000 fb97 	bl	80080a0 <__retarget_lock_acquire_recursive>
 8007972:	89ab      	ldrh	r3, [r5, #12]
 8007974:	071b      	lsls	r3, r3, #28
 8007976:	d501      	bpl.n	800797c <_vfiprintf_r+0x3c>
 8007978:	692b      	ldr	r3, [r5, #16]
 800797a:	b9eb      	cbnz	r3, 80079b8 <_vfiprintf_r+0x78>
 800797c:	4629      	mov	r1, r5
 800797e:	4630      	mov	r0, r6
 8007980:	f000 f960 	bl	8007c44 <__swsetup_r>
 8007984:	b1c0      	cbz	r0, 80079b8 <_vfiprintf_r+0x78>
 8007986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007988:	07dc      	lsls	r4, r3, #31
 800798a:	d50e      	bpl.n	80079aa <_vfiprintf_r+0x6a>
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
 8007990:	b01d      	add	sp, #116	; 0x74
 8007992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007996:	4b7b      	ldr	r3, [pc, #492]	; (8007b84 <_vfiprintf_r+0x244>)
 8007998:	429d      	cmp	r5, r3
 800799a:	d101      	bne.n	80079a0 <_vfiprintf_r+0x60>
 800799c:	68b5      	ldr	r5, [r6, #8]
 800799e:	e7df      	b.n	8007960 <_vfiprintf_r+0x20>
 80079a0:	4b79      	ldr	r3, [pc, #484]	; (8007b88 <_vfiprintf_r+0x248>)
 80079a2:	429d      	cmp	r5, r3
 80079a4:	bf08      	it	eq
 80079a6:	68f5      	ldreq	r5, [r6, #12]
 80079a8:	e7da      	b.n	8007960 <_vfiprintf_r+0x20>
 80079aa:	89ab      	ldrh	r3, [r5, #12]
 80079ac:	0598      	lsls	r0, r3, #22
 80079ae:	d4ed      	bmi.n	800798c <_vfiprintf_r+0x4c>
 80079b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079b2:	f000 fb76 	bl	80080a2 <__retarget_lock_release_recursive>
 80079b6:	e7e9      	b.n	800798c <_vfiprintf_r+0x4c>
 80079b8:	2300      	movs	r3, #0
 80079ba:	9309      	str	r3, [sp, #36]	; 0x24
 80079bc:	2320      	movs	r3, #32
 80079be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80079c6:	2330      	movs	r3, #48	; 0x30
 80079c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007b8c <_vfiprintf_r+0x24c>
 80079cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079d0:	f04f 0901 	mov.w	r9, #1
 80079d4:	4623      	mov	r3, r4
 80079d6:	469a      	mov	sl, r3
 80079d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079dc:	b10a      	cbz	r2, 80079e2 <_vfiprintf_r+0xa2>
 80079de:	2a25      	cmp	r2, #37	; 0x25
 80079e0:	d1f9      	bne.n	80079d6 <_vfiprintf_r+0x96>
 80079e2:	ebba 0b04 	subs.w	fp, sl, r4
 80079e6:	d00b      	beq.n	8007a00 <_vfiprintf_r+0xc0>
 80079e8:	465b      	mov	r3, fp
 80079ea:	4622      	mov	r2, r4
 80079ec:	4629      	mov	r1, r5
 80079ee:	4630      	mov	r0, r6
 80079f0:	f7ff ff93 	bl	800791a <__sfputs_r>
 80079f4:	3001      	adds	r0, #1
 80079f6:	f000 80aa 	beq.w	8007b4e <_vfiprintf_r+0x20e>
 80079fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079fc:	445a      	add	r2, fp
 80079fe:	9209      	str	r2, [sp, #36]	; 0x24
 8007a00:	f89a 3000 	ldrb.w	r3, [sl]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f000 80a2 	beq.w	8007b4e <_vfiprintf_r+0x20e>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a14:	f10a 0a01 	add.w	sl, sl, #1
 8007a18:	9304      	str	r3, [sp, #16]
 8007a1a:	9307      	str	r3, [sp, #28]
 8007a1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a20:	931a      	str	r3, [sp, #104]	; 0x68
 8007a22:	4654      	mov	r4, sl
 8007a24:	2205      	movs	r2, #5
 8007a26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a2a:	4858      	ldr	r0, [pc, #352]	; (8007b8c <_vfiprintf_r+0x24c>)
 8007a2c:	f7f8 fbe8 	bl	8000200 <memchr>
 8007a30:	9a04      	ldr	r2, [sp, #16]
 8007a32:	b9d8      	cbnz	r0, 8007a6c <_vfiprintf_r+0x12c>
 8007a34:	06d1      	lsls	r1, r2, #27
 8007a36:	bf44      	itt	mi
 8007a38:	2320      	movmi	r3, #32
 8007a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a3e:	0713      	lsls	r3, r2, #28
 8007a40:	bf44      	itt	mi
 8007a42:	232b      	movmi	r3, #43	; 0x2b
 8007a44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a48:	f89a 3000 	ldrb.w	r3, [sl]
 8007a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8007a4e:	d015      	beq.n	8007a7c <_vfiprintf_r+0x13c>
 8007a50:	9a07      	ldr	r2, [sp, #28]
 8007a52:	4654      	mov	r4, sl
 8007a54:	2000      	movs	r0, #0
 8007a56:	f04f 0c0a 	mov.w	ip, #10
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a60:	3b30      	subs	r3, #48	; 0x30
 8007a62:	2b09      	cmp	r3, #9
 8007a64:	d94e      	bls.n	8007b04 <_vfiprintf_r+0x1c4>
 8007a66:	b1b0      	cbz	r0, 8007a96 <_vfiprintf_r+0x156>
 8007a68:	9207      	str	r2, [sp, #28]
 8007a6a:	e014      	b.n	8007a96 <_vfiprintf_r+0x156>
 8007a6c:	eba0 0308 	sub.w	r3, r0, r8
 8007a70:	fa09 f303 	lsl.w	r3, r9, r3
 8007a74:	4313      	orrs	r3, r2
 8007a76:	9304      	str	r3, [sp, #16]
 8007a78:	46a2      	mov	sl, r4
 8007a7a:	e7d2      	b.n	8007a22 <_vfiprintf_r+0xe2>
 8007a7c:	9b03      	ldr	r3, [sp, #12]
 8007a7e:	1d19      	adds	r1, r3, #4
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	9103      	str	r1, [sp, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	bfbb      	ittet	lt
 8007a88:	425b      	neglt	r3, r3
 8007a8a:	f042 0202 	orrlt.w	r2, r2, #2
 8007a8e:	9307      	strge	r3, [sp, #28]
 8007a90:	9307      	strlt	r3, [sp, #28]
 8007a92:	bfb8      	it	lt
 8007a94:	9204      	strlt	r2, [sp, #16]
 8007a96:	7823      	ldrb	r3, [r4, #0]
 8007a98:	2b2e      	cmp	r3, #46	; 0x2e
 8007a9a:	d10c      	bne.n	8007ab6 <_vfiprintf_r+0x176>
 8007a9c:	7863      	ldrb	r3, [r4, #1]
 8007a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8007aa0:	d135      	bne.n	8007b0e <_vfiprintf_r+0x1ce>
 8007aa2:	9b03      	ldr	r3, [sp, #12]
 8007aa4:	1d1a      	adds	r2, r3, #4
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	9203      	str	r2, [sp, #12]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	bfb8      	it	lt
 8007aae:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ab2:	3402      	adds	r4, #2
 8007ab4:	9305      	str	r3, [sp, #20]
 8007ab6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007b9c <_vfiprintf_r+0x25c>
 8007aba:	7821      	ldrb	r1, [r4, #0]
 8007abc:	2203      	movs	r2, #3
 8007abe:	4650      	mov	r0, sl
 8007ac0:	f7f8 fb9e 	bl	8000200 <memchr>
 8007ac4:	b140      	cbz	r0, 8007ad8 <_vfiprintf_r+0x198>
 8007ac6:	2340      	movs	r3, #64	; 0x40
 8007ac8:	eba0 000a 	sub.w	r0, r0, sl
 8007acc:	fa03 f000 	lsl.w	r0, r3, r0
 8007ad0:	9b04      	ldr	r3, [sp, #16]
 8007ad2:	4303      	orrs	r3, r0
 8007ad4:	3401      	adds	r4, #1
 8007ad6:	9304      	str	r3, [sp, #16]
 8007ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007adc:	482c      	ldr	r0, [pc, #176]	; (8007b90 <_vfiprintf_r+0x250>)
 8007ade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ae2:	2206      	movs	r2, #6
 8007ae4:	f7f8 fb8c 	bl	8000200 <memchr>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d03f      	beq.n	8007b6c <_vfiprintf_r+0x22c>
 8007aec:	4b29      	ldr	r3, [pc, #164]	; (8007b94 <_vfiprintf_r+0x254>)
 8007aee:	bb1b      	cbnz	r3, 8007b38 <_vfiprintf_r+0x1f8>
 8007af0:	9b03      	ldr	r3, [sp, #12]
 8007af2:	3307      	adds	r3, #7
 8007af4:	f023 0307 	bic.w	r3, r3, #7
 8007af8:	3308      	adds	r3, #8
 8007afa:	9303      	str	r3, [sp, #12]
 8007afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007afe:	443b      	add	r3, r7
 8007b00:	9309      	str	r3, [sp, #36]	; 0x24
 8007b02:	e767      	b.n	80079d4 <_vfiprintf_r+0x94>
 8007b04:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b08:	460c      	mov	r4, r1
 8007b0a:	2001      	movs	r0, #1
 8007b0c:	e7a5      	b.n	8007a5a <_vfiprintf_r+0x11a>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	3401      	adds	r4, #1
 8007b12:	9305      	str	r3, [sp, #20]
 8007b14:	4619      	mov	r1, r3
 8007b16:	f04f 0c0a 	mov.w	ip, #10
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b20:	3a30      	subs	r2, #48	; 0x30
 8007b22:	2a09      	cmp	r2, #9
 8007b24:	d903      	bls.n	8007b2e <_vfiprintf_r+0x1ee>
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d0c5      	beq.n	8007ab6 <_vfiprintf_r+0x176>
 8007b2a:	9105      	str	r1, [sp, #20]
 8007b2c:	e7c3      	b.n	8007ab6 <_vfiprintf_r+0x176>
 8007b2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b32:	4604      	mov	r4, r0
 8007b34:	2301      	movs	r3, #1
 8007b36:	e7f0      	b.n	8007b1a <_vfiprintf_r+0x1da>
 8007b38:	ab03      	add	r3, sp, #12
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	462a      	mov	r2, r5
 8007b3e:	4b16      	ldr	r3, [pc, #88]	; (8007b98 <_vfiprintf_r+0x258>)
 8007b40:	a904      	add	r1, sp, #16
 8007b42:	4630      	mov	r0, r6
 8007b44:	f7fc f86e 	bl	8003c24 <_printf_float>
 8007b48:	4607      	mov	r7, r0
 8007b4a:	1c78      	adds	r0, r7, #1
 8007b4c:	d1d6      	bne.n	8007afc <_vfiprintf_r+0x1bc>
 8007b4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b50:	07d9      	lsls	r1, r3, #31
 8007b52:	d405      	bmi.n	8007b60 <_vfiprintf_r+0x220>
 8007b54:	89ab      	ldrh	r3, [r5, #12]
 8007b56:	059a      	lsls	r2, r3, #22
 8007b58:	d402      	bmi.n	8007b60 <_vfiprintf_r+0x220>
 8007b5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b5c:	f000 faa1 	bl	80080a2 <__retarget_lock_release_recursive>
 8007b60:	89ab      	ldrh	r3, [r5, #12]
 8007b62:	065b      	lsls	r3, r3, #25
 8007b64:	f53f af12 	bmi.w	800798c <_vfiprintf_r+0x4c>
 8007b68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b6a:	e711      	b.n	8007990 <_vfiprintf_r+0x50>
 8007b6c:	ab03      	add	r3, sp, #12
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	462a      	mov	r2, r5
 8007b72:	4b09      	ldr	r3, [pc, #36]	; (8007b98 <_vfiprintf_r+0x258>)
 8007b74:	a904      	add	r1, sp, #16
 8007b76:	4630      	mov	r0, r6
 8007b78:	f7fc faf8 	bl	800416c <_printf_i>
 8007b7c:	e7e4      	b.n	8007b48 <_vfiprintf_r+0x208>
 8007b7e:	bf00      	nop
 8007b80:	08008894 	.word	0x08008894
 8007b84:	080088b4 	.word	0x080088b4
 8007b88:	08008874 	.word	0x08008874
 8007b8c:	08008824 	.word	0x08008824
 8007b90:	0800882e 	.word	0x0800882e
 8007b94:	08003c25 	.word	0x08003c25
 8007b98:	0800791b 	.word	0x0800791b
 8007b9c:	0800882a 	.word	0x0800882a

08007ba0 <__swbuf_r>:
 8007ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba2:	460e      	mov	r6, r1
 8007ba4:	4614      	mov	r4, r2
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	b118      	cbz	r0, 8007bb2 <__swbuf_r+0x12>
 8007baa:	6983      	ldr	r3, [r0, #24]
 8007bac:	b90b      	cbnz	r3, 8007bb2 <__swbuf_r+0x12>
 8007bae:	f000 f9d9 	bl	8007f64 <__sinit>
 8007bb2:	4b21      	ldr	r3, [pc, #132]	; (8007c38 <__swbuf_r+0x98>)
 8007bb4:	429c      	cmp	r4, r3
 8007bb6:	d12b      	bne.n	8007c10 <__swbuf_r+0x70>
 8007bb8:	686c      	ldr	r4, [r5, #4]
 8007bba:	69a3      	ldr	r3, [r4, #24]
 8007bbc:	60a3      	str	r3, [r4, #8]
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	071a      	lsls	r2, r3, #28
 8007bc2:	d52f      	bpl.n	8007c24 <__swbuf_r+0x84>
 8007bc4:	6923      	ldr	r3, [r4, #16]
 8007bc6:	b36b      	cbz	r3, 8007c24 <__swbuf_r+0x84>
 8007bc8:	6923      	ldr	r3, [r4, #16]
 8007bca:	6820      	ldr	r0, [r4, #0]
 8007bcc:	1ac0      	subs	r0, r0, r3
 8007bce:	6963      	ldr	r3, [r4, #20]
 8007bd0:	b2f6      	uxtb	r6, r6
 8007bd2:	4283      	cmp	r3, r0
 8007bd4:	4637      	mov	r7, r6
 8007bd6:	dc04      	bgt.n	8007be2 <__swbuf_r+0x42>
 8007bd8:	4621      	mov	r1, r4
 8007bda:	4628      	mov	r0, r5
 8007bdc:	f000 f92e 	bl	8007e3c <_fflush_r>
 8007be0:	bb30      	cbnz	r0, 8007c30 <__swbuf_r+0x90>
 8007be2:	68a3      	ldr	r3, [r4, #8]
 8007be4:	3b01      	subs	r3, #1
 8007be6:	60a3      	str	r3, [r4, #8]
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	6022      	str	r2, [r4, #0]
 8007bee:	701e      	strb	r6, [r3, #0]
 8007bf0:	6963      	ldr	r3, [r4, #20]
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	4283      	cmp	r3, r0
 8007bf6:	d004      	beq.n	8007c02 <__swbuf_r+0x62>
 8007bf8:	89a3      	ldrh	r3, [r4, #12]
 8007bfa:	07db      	lsls	r3, r3, #31
 8007bfc:	d506      	bpl.n	8007c0c <__swbuf_r+0x6c>
 8007bfe:	2e0a      	cmp	r6, #10
 8007c00:	d104      	bne.n	8007c0c <__swbuf_r+0x6c>
 8007c02:	4621      	mov	r1, r4
 8007c04:	4628      	mov	r0, r5
 8007c06:	f000 f919 	bl	8007e3c <_fflush_r>
 8007c0a:	b988      	cbnz	r0, 8007c30 <__swbuf_r+0x90>
 8007c0c:	4638      	mov	r0, r7
 8007c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c10:	4b0a      	ldr	r3, [pc, #40]	; (8007c3c <__swbuf_r+0x9c>)
 8007c12:	429c      	cmp	r4, r3
 8007c14:	d101      	bne.n	8007c1a <__swbuf_r+0x7a>
 8007c16:	68ac      	ldr	r4, [r5, #8]
 8007c18:	e7cf      	b.n	8007bba <__swbuf_r+0x1a>
 8007c1a:	4b09      	ldr	r3, [pc, #36]	; (8007c40 <__swbuf_r+0xa0>)
 8007c1c:	429c      	cmp	r4, r3
 8007c1e:	bf08      	it	eq
 8007c20:	68ec      	ldreq	r4, [r5, #12]
 8007c22:	e7ca      	b.n	8007bba <__swbuf_r+0x1a>
 8007c24:	4621      	mov	r1, r4
 8007c26:	4628      	mov	r0, r5
 8007c28:	f000 f80c 	bl	8007c44 <__swsetup_r>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d0cb      	beq.n	8007bc8 <__swbuf_r+0x28>
 8007c30:	f04f 37ff 	mov.w	r7, #4294967295
 8007c34:	e7ea      	b.n	8007c0c <__swbuf_r+0x6c>
 8007c36:	bf00      	nop
 8007c38:	08008894 	.word	0x08008894
 8007c3c:	080088b4 	.word	0x080088b4
 8007c40:	08008874 	.word	0x08008874

08007c44 <__swsetup_r>:
 8007c44:	4b32      	ldr	r3, [pc, #200]	; (8007d10 <__swsetup_r+0xcc>)
 8007c46:	b570      	push	{r4, r5, r6, lr}
 8007c48:	681d      	ldr	r5, [r3, #0]
 8007c4a:	4606      	mov	r6, r0
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	b125      	cbz	r5, 8007c5a <__swsetup_r+0x16>
 8007c50:	69ab      	ldr	r3, [r5, #24]
 8007c52:	b913      	cbnz	r3, 8007c5a <__swsetup_r+0x16>
 8007c54:	4628      	mov	r0, r5
 8007c56:	f000 f985 	bl	8007f64 <__sinit>
 8007c5a:	4b2e      	ldr	r3, [pc, #184]	; (8007d14 <__swsetup_r+0xd0>)
 8007c5c:	429c      	cmp	r4, r3
 8007c5e:	d10f      	bne.n	8007c80 <__swsetup_r+0x3c>
 8007c60:	686c      	ldr	r4, [r5, #4]
 8007c62:	89a3      	ldrh	r3, [r4, #12]
 8007c64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c68:	0719      	lsls	r1, r3, #28
 8007c6a:	d42c      	bmi.n	8007cc6 <__swsetup_r+0x82>
 8007c6c:	06dd      	lsls	r5, r3, #27
 8007c6e:	d411      	bmi.n	8007c94 <__swsetup_r+0x50>
 8007c70:	2309      	movs	r3, #9
 8007c72:	6033      	str	r3, [r6, #0]
 8007c74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c78:	81a3      	strh	r3, [r4, #12]
 8007c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7e:	e03e      	b.n	8007cfe <__swsetup_r+0xba>
 8007c80:	4b25      	ldr	r3, [pc, #148]	; (8007d18 <__swsetup_r+0xd4>)
 8007c82:	429c      	cmp	r4, r3
 8007c84:	d101      	bne.n	8007c8a <__swsetup_r+0x46>
 8007c86:	68ac      	ldr	r4, [r5, #8]
 8007c88:	e7eb      	b.n	8007c62 <__swsetup_r+0x1e>
 8007c8a:	4b24      	ldr	r3, [pc, #144]	; (8007d1c <__swsetup_r+0xd8>)
 8007c8c:	429c      	cmp	r4, r3
 8007c8e:	bf08      	it	eq
 8007c90:	68ec      	ldreq	r4, [r5, #12]
 8007c92:	e7e6      	b.n	8007c62 <__swsetup_r+0x1e>
 8007c94:	0758      	lsls	r0, r3, #29
 8007c96:	d512      	bpl.n	8007cbe <__swsetup_r+0x7a>
 8007c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c9a:	b141      	cbz	r1, 8007cae <__swsetup_r+0x6a>
 8007c9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ca0:	4299      	cmp	r1, r3
 8007ca2:	d002      	beq.n	8007caa <__swsetup_r+0x66>
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	f7ff fb79 	bl	800739c <_free_r>
 8007caa:	2300      	movs	r3, #0
 8007cac:	6363      	str	r3, [r4, #52]	; 0x34
 8007cae:	89a3      	ldrh	r3, [r4, #12]
 8007cb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cb4:	81a3      	strh	r3, [r4, #12]
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	6063      	str	r3, [r4, #4]
 8007cba:	6923      	ldr	r3, [r4, #16]
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	f043 0308 	orr.w	r3, r3, #8
 8007cc4:	81a3      	strh	r3, [r4, #12]
 8007cc6:	6923      	ldr	r3, [r4, #16]
 8007cc8:	b94b      	cbnz	r3, 8007cde <__swsetup_r+0x9a>
 8007cca:	89a3      	ldrh	r3, [r4, #12]
 8007ccc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cd4:	d003      	beq.n	8007cde <__swsetup_r+0x9a>
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	4630      	mov	r0, r6
 8007cda:	f000 fa07 	bl	80080ec <__smakebuf_r>
 8007cde:	89a0      	ldrh	r0, [r4, #12]
 8007ce0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ce4:	f010 0301 	ands.w	r3, r0, #1
 8007ce8:	d00a      	beq.n	8007d00 <__swsetup_r+0xbc>
 8007cea:	2300      	movs	r3, #0
 8007cec:	60a3      	str	r3, [r4, #8]
 8007cee:	6963      	ldr	r3, [r4, #20]
 8007cf0:	425b      	negs	r3, r3
 8007cf2:	61a3      	str	r3, [r4, #24]
 8007cf4:	6923      	ldr	r3, [r4, #16]
 8007cf6:	b943      	cbnz	r3, 8007d0a <__swsetup_r+0xc6>
 8007cf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cfc:	d1ba      	bne.n	8007c74 <__swsetup_r+0x30>
 8007cfe:	bd70      	pop	{r4, r5, r6, pc}
 8007d00:	0781      	lsls	r1, r0, #30
 8007d02:	bf58      	it	pl
 8007d04:	6963      	ldrpl	r3, [r4, #20]
 8007d06:	60a3      	str	r3, [r4, #8]
 8007d08:	e7f4      	b.n	8007cf4 <__swsetup_r+0xb0>
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	e7f7      	b.n	8007cfe <__swsetup_r+0xba>
 8007d0e:	bf00      	nop
 8007d10:	20000004 	.word	0x20000004
 8007d14:	08008894 	.word	0x08008894
 8007d18:	080088b4 	.word	0x080088b4
 8007d1c:	08008874 	.word	0x08008874

08007d20 <abort>:
 8007d20:	b508      	push	{r3, lr}
 8007d22:	2006      	movs	r0, #6
 8007d24:	f000 fa52 	bl	80081cc <raise>
 8007d28:	2001      	movs	r0, #1
 8007d2a:	f7f9 fd77 	bl	800181c <_exit>
	...

08007d30 <__sflush_r>:
 8007d30:	898a      	ldrh	r2, [r1, #12]
 8007d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d36:	4605      	mov	r5, r0
 8007d38:	0710      	lsls	r0, r2, #28
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	d458      	bmi.n	8007df0 <__sflush_r+0xc0>
 8007d3e:	684b      	ldr	r3, [r1, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	dc05      	bgt.n	8007d50 <__sflush_r+0x20>
 8007d44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	dc02      	bgt.n	8007d50 <__sflush_r+0x20>
 8007d4a:	2000      	movs	r0, #0
 8007d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d52:	2e00      	cmp	r6, #0
 8007d54:	d0f9      	beq.n	8007d4a <__sflush_r+0x1a>
 8007d56:	2300      	movs	r3, #0
 8007d58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d5c:	682f      	ldr	r7, [r5, #0]
 8007d5e:	602b      	str	r3, [r5, #0]
 8007d60:	d032      	beq.n	8007dc8 <__sflush_r+0x98>
 8007d62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d64:	89a3      	ldrh	r3, [r4, #12]
 8007d66:	075a      	lsls	r2, r3, #29
 8007d68:	d505      	bpl.n	8007d76 <__sflush_r+0x46>
 8007d6a:	6863      	ldr	r3, [r4, #4]
 8007d6c:	1ac0      	subs	r0, r0, r3
 8007d6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d70:	b10b      	cbz	r3, 8007d76 <__sflush_r+0x46>
 8007d72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d74:	1ac0      	subs	r0, r0, r3
 8007d76:	2300      	movs	r3, #0
 8007d78:	4602      	mov	r2, r0
 8007d7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d7c:	6a21      	ldr	r1, [r4, #32]
 8007d7e:	4628      	mov	r0, r5
 8007d80:	47b0      	blx	r6
 8007d82:	1c43      	adds	r3, r0, #1
 8007d84:	89a3      	ldrh	r3, [r4, #12]
 8007d86:	d106      	bne.n	8007d96 <__sflush_r+0x66>
 8007d88:	6829      	ldr	r1, [r5, #0]
 8007d8a:	291d      	cmp	r1, #29
 8007d8c:	d82c      	bhi.n	8007de8 <__sflush_r+0xb8>
 8007d8e:	4a2a      	ldr	r2, [pc, #168]	; (8007e38 <__sflush_r+0x108>)
 8007d90:	40ca      	lsrs	r2, r1
 8007d92:	07d6      	lsls	r6, r2, #31
 8007d94:	d528      	bpl.n	8007de8 <__sflush_r+0xb8>
 8007d96:	2200      	movs	r2, #0
 8007d98:	6062      	str	r2, [r4, #4]
 8007d9a:	04d9      	lsls	r1, r3, #19
 8007d9c:	6922      	ldr	r2, [r4, #16]
 8007d9e:	6022      	str	r2, [r4, #0]
 8007da0:	d504      	bpl.n	8007dac <__sflush_r+0x7c>
 8007da2:	1c42      	adds	r2, r0, #1
 8007da4:	d101      	bne.n	8007daa <__sflush_r+0x7a>
 8007da6:	682b      	ldr	r3, [r5, #0]
 8007da8:	b903      	cbnz	r3, 8007dac <__sflush_r+0x7c>
 8007daa:	6560      	str	r0, [r4, #84]	; 0x54
 8007dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dae:	602f      	str	r7, [r5, #0]
 8007db0:	2900      	cmp	r1, #0
 8007db2:	d0ca      	beq.n	8007d4a <__sflush_r+0x1a>
 8007db4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007db8:	4299      	cmp	r1, r3
 8007dba:	d002      	beq.n	8007dc2 <__sflush_r+0x92>
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	f7ff faed 	bl	800739c <_free_r>
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	6360      	str	r0, [r4, #52]	; 0x34
 8007dc6:	e7c1      	b.n	8007d4c <__sflush_r+0x1c>
 8007dc8:	6a21      	ldr	r1, [r4, #32]
 8007dca:	2301      	movs	r3, #1
 8007dcc:	4628      	mov	r0, r5
 8007dce:	47b0      	blx	r6
 8007dd0:	1c41      	adds	r1, r0, #1
 8007dd2:	d1c7      	bne.n	8007d64 <__sflush_r+0x34>
 8007dd4:	682b      	ldr	r3, [r5, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d0c4      	beq.n	8007d64 <__sflush_r+0x34>
 8007dda:	2b1d      	cmp	r3, #29
 8007ddc:	d001      	beq.n	8007de2 <__sflush_r+0xb2>
 8007dde:	2b16      	cmp	r3, #22
 8007de0:	d101      	bne.n	8007de6 <__sflush_r+0xb6>
 8007de2:	602f      	str	r7, [r5, #0]
 8007de4:	e7b1      	b.n	8007d4a <__sflush_r+0x1a>
 8007de6:	89a3      	ldrh	r3, [r4, #12]
 8007de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dec:	81a3      	strh	r3, [r4, #12]
 8007dee:	e7ad      	b.n	8007d4c <__sflush_r+0x1c>
 8007df0:	690f      	ldr	r7, [r1, #16]
 8007df2:	2f00      	cmp	r7, #0
 8007df4:	d0a9      	beq.n	8007d4a <__sflush_r+0x1a>
 8007df6:	0793      	lsls	r3, r2, #30
 8007df8:	680e      	ldr	r6, [r1, #0]
 8007dfa:	bf08      	it	eq
 8007dfc:	694b      	ldreq	r3, [r1, #20]
 8007dfe:	600f      	str	r7, [r1, #0]
 8007e00:	bf18      	it	ne
 8007e02:	2300      	movne	r3, #0
 8007e04:	eba6 0807 	sub.w	r8, r6, r7
 8007e08:	608b      	str	r3, [r1, #8]
 8007e0a:	f1b8 0f00 	cmp.w	r8, #0
 8007e0e:	dd9c      	ble.n	8007d4a <__sflush_r+0x1a>
 8007e10:	6a21      	ldr	r1, [r4, #32]
 8007e12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e14:	4643      	mov	r3, r8
 8007e16:	463a      	mov	r2, r7
 8007e18:	4628      	mov	r0, r5
 8007e1a:	47b0      	blx	r6
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	dc06      	bgt.n	8007e2e <__sflush_r+0xfe>
 8007e20:	89a3      	ldrh	r3, [r4, #12]
 8007e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e26:	81a3      	strh	r3, [r4, #12]
 8007e28:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2c:	e78e      	b.n	8007d4c <__sflush_r+0x1c>
 8007e2e:	4407      	add	r7, r0
 8007e30:	eba8 0800 	sub.w	r8, r8, r0
 8007e34:	e7e9      	b.n	8007e0a <__sflush_r+0xda>
 8007e36:	bf00      	nop
 8007e38:	20400001 	.word	0x20400001

08007e3c <_fflush_r>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	690b      	ldr	r3, [r1, #16]
 8007e40:	4605      	mov	r5, r0
 8007e42:	460c      	mov	r4, r1
 8007e44:	b913      	cbnz	r3, 8007e4c <_fflush_r+0x10>
 8007e46:	2500      	movs	r5, #0
 8007e48:	4628      	mov	r0, r5
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	b118      	cbz	r0, 8007e56 <_fflush_r+0x1a>
 8007e4e:	6983      	ldr	r3, [r0, #24]
 8007e50:	b90b      	cbnz	r3, 8007e56 <_fflush_r+0x1a>
 8007e52:	f000 f887 	bl	8007f64 <__sinit>
 8007e56:	4b14      	ldr	r3, [pc, #80]	; (8007ea8 <_fflush_r+0x6c>)
 8007e58:	429c      	cmp	r4, r3
 8007e5a:	d11b      	bne.n	8007e94 <_fflush_r+0x58>
 8007e5c:	686c      	ldr	r4, [r5, #4]
 8007e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d0ef      	beq.n	8007e46 <_fflush_r+0xa>
 8007e66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e68:	07d0      	lsls	r0, r2, #31
 8007e6a:	d404      	bmi.n	8007e76 <_fflush_r+0x3a>
 8007e6c:	0599      	lsls	r1, r3, #22
 8007e6e:	d402      	bmi.n	8007e76 <_fflush_r+0x3a>
 8007e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e72:	f000 f915 	bl	80080a0 <__retarget_lock_acquire_recursive>
 8007e76:	4628      	mov	r0, r5
 8007e78:	4621      	mov	r1, r4
 8007e7a:	f7ff ff59 	bl	8007d30 <__sflush_r>
 8007e7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e80:	07da      	lsls	r2, r3, #31
 8007e82:	4605      	mov	r5, r0
 8007e84:	d4e0      	bmi.n	8007e48 <_fflush_r+0xc>
 8007e86:	89a3      	ldrh	r3, [r4, #12]
 8007e88:	059b      	lsls	r3, r3, #22
 8007e8a:	d4dd      	bmi.n	8007e48 <_fflush_r+0xc>
 8007e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e8e:	f000 f908 	bl	80080a2 <__retarget_lock_release_recursive>
 8007e92:	e7d9      	b.n	8007e48 <_fflush_r+0xc>
 8007e94:	4b05      	ldr	r3, [pc, #20]	; (8007eac <_fflush_r+0x70>)
 8007e96:	429c      	cmp	r4, r3
 8007e98:	d101      	bne.n	8007e9e <_fflush_r+0x62>
 8007e9a:	68ac      	ldr	r4, [r5, #8]
 8007e9c:	e7df      	b.n	8007e5e <_fflush_r+0x22>
 8007e9e:	4b04      	ldr	r3, [pc, #16]	; (8007eb0 <_fflush_r+0x74>)
 8007ea0:	429c      	cmp	r4, r3
 8007ea2:	bf08      	it	eq
 8007ea4:	68ec      	ldreq	r4, [r5, #12]
 8007ea6:	e7da      	b.n	8007e5e <_fflush_r+0x22>
 8007ea8:	08008894 	.word	0x08008894
 8007eac:	080088b4 	.word	0x080088b4
 8007eb0:	08008874 	.word	0x08008874

08007eb4 <std>:
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	b510      	push	{r4, lr}
 8007eb8:	4604      	mov	r4, r0
 8007eba:	e9c0 3300 	strd	r3, r3, [r0]
 8007ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ec2:	6083      	str	r3, [r0, #8]
 8007ec4:	8181      	strh	r1, [r0, #12]
 8007ec6:	6643      	str	r3, [r0, #100]	; 0x64
 8007ec8:	81c2      	strh	r2, [r0, #14]
 8007eca:	6183      	str	r3, [r0, #24]
 8007ecc:	4619      	mov	r1, r3
 8007ece:	2208      	movs	r2, #8
 8007ed0:	305c      	adds	r0, #92	; 0x5c
 8007ed2:	f7fb fdff 	bl	8003ad4 <memset>
 8007ed6:	4b05      	ldr	r3, [pc, #20]	; (8007eec <std+0x38>)
 8007ed8:	6263      	str	r3, [r4, #36]	; 0x24
 8007eda:	4b05      	ldr	r3, [pc, #20]	; (8007ef0 <std+0x3c>)
 8007edc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ede:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <std+0x40>)
 8007ee0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ee2:	4b05      	ldr	r3, [pc, #20]	; (8007ef8 <std+0x44>)
 8007ee4:	6224      	str	r4, [r4, #32]
 8007ee6:	6323      	str	r3, [r4, #48]	; 0x30
 8007ee8:	bd10      	pop	{r4, pc}
 8007eea:	bf00      	nop
 8007eec:	08008205 	.word	0x08008205
 8007ef0:	08008227 	.word	0x08008227
 8007ef4:	0800825f 	.word	0x0800825f
 8007ef8:	08008283 	.word	0x08008283

08007efc <_cleanup_r>:
 8007efc:	4901      	ldr	r1, [pc, #4]	; (8007f04 <_cleanup_r+0x8>)
 8007efe:	f000 b8af 	b.w	8008060 <_fwalk_reent>
 8007f02:	bf00      	nop
 8007f04:	08007e3d 	.word	0x08007e3d

08007f08 <__sfmoreglue>:
 8007f08:	b570      	push	{r4, r5, r6, lr}
 8007f0a:	1e4a      	subs	r2, r1, #1
 8007f0c:	2568      	movs	r5, #104	; 0x68
 8007f0e:	4355      	muls	r5, r2
 8007f10:	460e      	mov	r6, r1
 8007f12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f16:	f7ff fa91 	bl	800743c <_malloc_r>
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	b140      	cbz	r0, 8007f30 <__sfmoreglue+0x28>
 8007f1e:	2100      	movs	r1, #0
 8007f20:	e9c0 1600 	strd	r1, r6, [r0]
 8007f24:	300c      	adds	r0, #12
 8007f26:	60a0      	str	r0, [r4, #8]
 8007f28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f2c:	f7fb fdd2 	bl	8003ad4 <memset>
 8007f30:	4620      	mov	r0, r4
 8007f32:	bd70      	pop	{r4, r5, r6, pc}

08007f34 <__sfp_lock_acquire>:
 8007f34:	4801      	ldr	r0, [pc, #4]	; (8007f3c <__sfp_lock_acquire+0x8>)
 8007f36:	f000 b8b3 	b.w	80080a0 <__retarget_lock_acquire_recursive>
 8007f3a:	bf00      	nop
 8007f3c:	20000304 	.word	0x20000304

08007f40 <__sfp_lock_release>:
 8007f40:	4801      	ldr	r0, [pc, #4]	; (8007f48 <__sfp_lock_release+0x8>)
 8007f42:	f000 b8ae 	b.w	80080a2 <__retarget_lock_release_recursive>
 8007f46:	bf00      	nop
 8007f48:	20000304 	.word	0x20000304

08007f4c <__sinit_lock_acquire>:
 8007f4c:	4801      	ldr	r0, [pc, #4]	; (8007f54 <__sinit_lock_acquire+0x8>)
 8007f4e:	f000 b8a7 	b.w	80080a0 <__retarget_lock_acquire_recursive>
 8007f52:	bf00      	nop
 8007f54:	200002ff 	.word	0x200002ff

08007f58 <__sinit_lock_release>:
 8007f58:	4801      	ldr	r0, [pc, #4]	; (8007f60 <__sinit_lock_release+0x8>)
 8007f5a:	f000 b8a2 	b.w	80080a2 <__retarget_lock_release_recursive>
 8007f5e:	bf00      	nop
 8007f60:	200002ff 	.word	0x200002ff

08007f64 <__sinit>:
 8007f64:	b510      	push	{r4, lr}
 8007f66:	4604      	mov	r4, r0
 8007f68:	f7ff fff0 	bl	8007f4c <__sinit_lock_acquire>
 8007f6c:	69a3      	ldr	r3, [r4, #24]
 8007f6e:	b11b      	cbz	r3, 8007f78 <__sinit+0x14>
 8007f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f74:	f7ff bff0 	b.w	8007f58 <__sinit_lock_release>
 8007f78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f7c:	6523      	str	r3, [r4, #80]	; 0x50
 8007f7e:	4b13      	ldr	r3, [pc, #76]	; (8007fcc <__sinit+0x68>)
 8007f80:	4a13      	ldr	r2, [pc, #76]	; (8007fd0 <__sinit+0x6c>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f86:	42a3      	cmp	r3, r4
 8007f88:	bf04      	itt	eq
 8007f8a:	2301      	moveq	r3, #1
 8007f8c:	61a3      	streq	r3, [r4, #24]
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f000 f820 	bl	8007fd4 <__sfp>
 8007f94:	6060      	str	r0, [r4, #4]
 8007f96:	4620      	mov	r0, r4
 8007f98:	f000 f81c 	bl	8007fd4 <__sfp>
 8007f9c:	60a0      	str	r0, [r4, #8]
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f000 f818 	bl	8007fd4 <__sfp>
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	60e0      	str	r0, [r4, #12]
 8007fa8:	2104      	movs	r1, #4
 8007faa:	6860      	ldr	r0, [r4, #4]
 8007fac:	f7ff ff82 	bl	8007eb4 <std>
 8007fb0:	68a0      	ldr	r0, [r4, #8]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	2109      	movs	r1, #9
 8007fb6:	f7ff ff7d 	bl	8007eb4 <std>
 8007fba:	68e0      	ldr	r0, [r4, #12]
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	2112      	movs	r1, #18
 8007fc0:	f7ff ff78 	bl	8007eb4 <std>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	61a3      	str	r3, [r4, #24]
 8007fc8:	e7d2      	b.n	8007f70 <__sinit+0xc>
 8007fca:	bf00      	nop
 8007fcc:	0800841c 	.word	0x0800841c
 8007fd0:	08007efd 	.word	0x08007efd

08007fd4 <__sfp>:
 8007fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd6:	4607      	mov	r7, r0
 8007fd8:	f7ff ffac 	bl	8007f34 <__sfp_lock_acquire>
 8007fdc:	4b1e      	ldr	r3, [pc, #120]	; (8008058 <__sfp+0x84>)
 8007fde:	681e      	ldr	r6, [r3, #0]
 8007fe0:	69b3      	ldr	r3, [r6, #24]
 8007fe2:	b913      	cbnz	r3, 8007fea <__sfp+0x16>
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f7ff ffbd 	bl	8007f64 <__sinit>
 8007fea:	3648      	adds	r6, #72	; 0x48
 8007fec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	d503      	bpl.n	8007ffc <__sfp+0x28>
 8007ff4:	6833      	ldr	r3, [r6, #0]
 8007ff6:	b30b      	cbz	r3, 800803c <__sfp+0x68>
 8007ff8:	6836      	ldr	r6, [r6, #0]
 8007ffa:	e7f7      	b.n	8007fec <__sfp+0x18>
 8007ffc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008000:	b9d5      	cbnz	r5, 8008038 <__sfp+0x64>
 8008002:	4b16      	ldr	r3, [pc, #88]	; (800805c <__sfp+0x88>)
 8008004:	60e3      	str	r3, [r4, #12]
 8008006:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800800a:	6665      	str	r5, [r4, #100]	; 0x64
 800800c:	f000 f847 	bl	800809e <__retarget_lock_init_recursive>
 8008010:	f7ff ff96 	bl	8007f40 <__sfp_lock_release>
 8008014:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008018:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800801c:	6025      	str	r5, [r4, #0]
 800801e:	61a5      	str	r5, [r4, #24]
 8008020:	2208      	movs	r2, #8
 8008022:	4629      	mov	r1, r5
 8008024:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008028:	f7fb fd54 	bl	8003ad4 <memset>
 800802c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008030:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008034:	4620      	mov	r0, r4
 8008036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008038:	3468      	adds	r4, #104	; 0x68
 800803a:	e7d9      	b.n	8007ff0 <__sfp+0x1c>
 800803c:	2104      	movs	r1, #4
 800803e:	4638      	mov	r0, r7
 8008040:	f7ff ff62 	bl	8007f08 <__sfmoreglue>
 8008044:	4604      	mov	r4, r0
 8008046:	6030      	str	r0, [r6, #0]
 8008048:	2800      	cmp	r0, #0
 800804a:	d1d5      	bne.n	8007ff8 <__sfp+0x24>
 800804c:	f7ff ff78 	bl	8007f40 <__sfp_lock_release>
 8008050:	230c      	movs	r3, #12
 8008052:	603b      	str	r3, [r7, #0]
 8008054:	e7ee      	b.n	8008034 <__sfp+0x60>
 8008056:	bf00      	nop
 8008058:	0800841c 	.word	0x0800841c
 800805c:	ffff0001 	.word	0xffff0001

08008060 <_fwalk_reent>:
 8008060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008064:	4606      	mov	r6, r0
 8008066:	4688      	mov	r8, r1
 8008068:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800806c:	2700      	movs	r7, #0
 800806e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008072:	f1b9 0901 	subs.w	r9, r9, #1
 8008076:	d505      	bpl.n	8008084 <_fwalk_reent+0x24>
 8008078:	6824      	ldr	r4, [r4, #0]
 800807a:	2c00      	cmp	r4, #0
 800807c:	d1f7      	bne.n	800806e <_fwalk_reent+0xe>
 800807e:	4638      	mov	r0, r7
 8008080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008084:	89ab      	ldrh	r3, [r5, #12]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d907      	bls.n	800809a <_fwalk_reent+0x3a>
 800808a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800808e:	3301      	adds	r3, #1
 8008090:	d003      	beq.n	800809a <_fwalk_reent+0x3a>
 8008092:	4629      	mov	r1, r5
 8008094:	4630      	mov	r0, r6
 8008096:	47c0      	blx	r8
 8008098:	4307      	orrs	r7, r0
 800809a:	3568      	adds	r5, #104	; 0x68
 800809c:	e7e9      	b.n	8008072 <_fwalk_reent+0x12>

0800809e <__retarget_lock_init_recursive>:
 800809e:	4770      	bx	lr

080080a0 <__retarget_lock_acquire_recursive>:
 80080a0:	4770      	bx	lr

080080a2 <__retarget_lock_release_recursive>:
 80080a2:	4770      	bx	lr

080080a4 <__swhatbuf_r>:
 80080a4:	b570      	push	{r4, r5, r6, lr}
 80080a6:	460e      	mov	r6, r1
 80080a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ac:	2900      	cmp	r1, #0
 80080ae:	b096      	sub	sp, #88	; 0x58
 80080b0:	4614      	mov	r4, r2
 80080b2:	461d      	mov	r5, r3
 80080b4:	da07      	bge.n	80080c6 <__swhatbuf_r+0x22>
 80080b6:	2300      	movs	r3, #0
 80080b8:	602b      	str	r3, [r5, #0]
 80080ba:	89b3      	ldrh	r3, [r6, #12]
 80080bc:	061a      	lsls	r2, r3, #24
 80080be:	d410      	bmi.n	80080e2 <__swhatbuf_r+0x3e>
 80080c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080c4:	e00e      	b.n	80080e4 <__swhatbuf_r+0x40>
 80080c6:	466a      	mov	r2, sp
 80080c8:	f000 f902 	bl	80082d0 <_fstat_r>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	dbf2      	blt.n	80080b6 <__swhatbuf_r+0x12>
 80080d0:	9a01      	ldr	r2, [sp, #4]
 80080d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080da:	425a      	negs	r2, r3
 80080dc:	415a      	adcs	r2, r3
 80080de:	602a      	str	r2, [r5, #0]
 80080e0:	e7ee      	b.n	80080c0 <__swhatbuf_r+0x1c>
 80080e2:	2340      	movs	r3, #64	; 0x40
 80080e4:	2000      	movs	r0, #0
 80080e6:	6023      	str	r3, [r4, #0]
 80080e8:	b016      	add	sp, #88	; 0x58
 80080ea:	bd70      	pop	{r4, r5, r6, pc}

080080ec <__smakebuf_r>:
 80080ec:	898b      	ldrh	r3, [r1, #12]
 80080ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080f0:	079d      	lsls	r5, r3, #30
 80080f2:	4606      	mov	r6, r0
 80080f4:	460c      	mov	r4, r1
 80080f6:	d507      	bpl.n	8008108 <__smakebuf_r+0x1c>
 80080f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080fc:	6023      	str	r3, [r4, #0]
 80080fe:	6123      	str	r3, [r4, #16]
 8008100:	2301      	movs	r3, #1
 8008102:	6163      	str	r3, [r4, #20]
 8008104:	b002      	add	sp, #8
 8008106:	bd70      	pop	{r4, r5, r6, pc}
 8008108:	ab01      	add	r3, sp, #4
 800810a:	466a      	mov	r2, sp
 800810c:	f7ff ffca 	bl	80080a4 <__swhatbuf_r>
 8008110:	9900      	ldr	r1, [sp, #0]
 8008112:	4605      	mov	r5, r0
 8008114:	4630      	mov	r0, r6
 8008116:	f7ff f991 	bl	800743c <_malloc_r>
 800811a:	b948      	cbnz	r0, 8008130 <__smakebuf_r+0x44>
 800811c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008120:	059a      	lsls	r2, r3, #22
 8008122:	d4ef      	bmi.n	8008104 <__smakebuf_r+0x18>
 8008124:	f023 0303 	bic.w	r3, r3, #3
 8008128:	f043 0302 	orr.w	r3, r3, #2
 800812c:	81a3      	strh	r3, [r4, #12]
 800812e:	e7e3      	b.n	80080f8 <__smakebuf_r+0xc>
 8008130:	4b0d      	ldr	r3, [pc, #52]	; (8008168 <__smakebuf_r+0x7c>)
 8008132:	62b3      	str	r3, [r6, #40]	; 0x28
 8008134:	89a3      	ldrh	r3, [r4, #12]
 8008136:	6020      	str	r0, [r4, #0]
 8008138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800813c:	81a3      	strh	r3, [r4, #12]
 800813e:	9b00      	ldr	r3, [sp, #0]
 8008140:	6163      	str	r3, [r4, #20]
 8008142:	9b01      	ldr	r3, [sp, #4]
 8008144:	6120      	str	r0, [r4, #16]
 8008146:	b15b      	cbz	r3, 8008160 <__smakebuf_r+0x74>
 8008148:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800814c:	4630      	mov	r0, r6
 800814e:	f000 f8d1 	bl	80082f4 <_isatty_r>
 8008152:	b128      	cbz	r0, 8008160 <__smakebuf_r+0x74>
 8008154:	89a3      	ldrh	r3, [r4, #12]
 8008156:	f023 0303 	bic.w	r3, r3, #3
 800815a:	f043 0301 	orr.w	r3, r3, #1
 800815e:	81a3      	strh	r3, [r4, #12]
 8008160:	89a0      	ldrh	r0, [r4, #12]
 8008162:	4305      	orrs	r5, r0
 8008164:	81a5      	strh	r5, [r4, #12]
 8008166:	e7cd      	b.n	8008104 <__smakebuf_r+0x18>
 8008168:	08007efd 	.word	0x08007efd

0800816c <_malloc_usable_size_r>:
 800816c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008170:	1f18      	subs	r0, r3, #4
 8008172:	2b00      	cmp	r3, #0
 8008174:	bfbc      	itt	lt
 8008176:	580b      	ldrlt	r3, [r1, r0]
 8008178:	18c0      	addlt	r0, r0, r3
 800817a:	4770      	bx	lr

0800817c <_raise_r>:
 800817c:	291f      	cmp	r1, #31
 800817e:	b538      	push	{r3, r4, r5, lr}
 8008180:	4604      	mov	r4, r0
 8008182:	460d      	mov	r5, r1
 8008184:	d904      	bls.n	8008190 <_raise_r+0x14>
 8008186:	2316      	movs	r3, #22
 8008188:	6003      	str	r3, [r0, #0]
 800818a:	f04f 30ff 	mov.w	r0, #4294967295
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008192:	b112      	cbz	r2, 800819a <_raise_r+0x1e>
 8008194:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008198:	b94b      	cbnz	r3, 80081ae <_raise_r+0x32>
 800819a:	4620      	mov	r0, r4
 800819c:	f000 f830 	bl	8008200 <_getpid_r>
 80081a0:	462a      	mov	r2, r5
 80081a2:	4601      	mov	r1, r0
 80081a4:	4620      	mov	r0, r4
 80081a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081aa:	f000 b817 	b.w	80081dc <_kill_r>
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d00a      	beq.n	80081c8 <_raise_r+0x4c>
 80081b2:	1c59      	adds	r1, r3, #1
 80081b4:	d103      	bne.n	80081be <_raise_r+0x42>
 80081b6:	2316      	movs	r3, #22
 80081b8:	6003      	str	r3, [r0, #0]
 80081ba:	2001      	movs	r0, #1
 80081bc:	e7e7      	b.n	800818e <_raise_r+0x12>
 80081be:	2400      	movs	r4, #0
 80081c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081c4:	4628      	mov	r0, r5
 80081c6:	4798      	blx	r3
 80081c8:	2000      	movs	r0, #0
 80081ca:	e7e0      	b.n	800818e <_raise_r+0x12>

080081cc <raise>:
 80081cc:	4b02      	ldr	r3, [pc, #8]	; (80081d8 <raise+0xc>)
 80081ce:	4601      	mov	r1, r0
 80081d0:	6818      	ldr	r0, [r3, #0]
 80081d2:	f7ff bfd3 	b.w	800817c <_raise_r>
 80081d6:	bf00      	nop
 80081d8:	20000004 	.word	0x20000004

080081dc <_kill_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	4d07      	ldr	r5, [pc, #28]	; (80081fc <_kill_r+0x20>)
 80081e0:	2300      	movs	r3, #0
 80081e2:	4604      	mov	r4, r0
 80081e4:	4608      	mov	r0, r1
 80081e6:	4611      	mov	r1, r2
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	f7f9 fb07 	bl	80017fc <_kill>
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	d102      	bne.n	80081f8 <_kill_r+0x1c>
 80081f2:	682b      	ldr	r3, [r5, #0]
 80081f4:	b103      	cbz	r3, 80081f8 <_kill_r+0x1c>
 80081f6:	6023      	str	r3, [r4, #0]
 80081f8:	bd38      	pop	{r3, r4, r5, pc}
 80081fa:	bf00      	nop
 80081fc:	200002f8 	.word	0x200002f8

08008200 <_getpid_r>:
 8008200:	f7f9 baf4 	b.w	80017ec <_getpid>

08008204 <__sread>:
 8008204:	b510      	push	{r4, lr}
 8008206:	460c      	mov	r4, r1
 8008208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800820c:	f000 f894 	bl	8008338 <_read_r>
 8008210:	2800      	cmp	r0, #0
 8008212:	bfab      	itete	ge
 8008214:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008216:	89a3      	ldrhlt	r3, [r4, #12]
 8008218:	181b      	addge	r3, r3, r0
 800821a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800821e:	bfac      	ite	ge
 8008220:	6563      	strge	r3, [r4, #84]	; 0x54
 8008222:	81a3      	strhlt	r3, [r4, #12]
 8008224:	bd10      	pop	{r4, pc}

08008226 <__swrite>:
 8008226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800822a:	461f      	mov	r7, r3
 800822c:	898b      	ldrh	r3, [r1, #12]
 800822e:	05db      	lsls	r3, r3, #23
 8008230:	4605      	mov	r5, r0
 8008232:	460c      	mov	r4, r1
 8008234:	4616      	mov	r6, r2
 8008236:	d505      	bpl.n	8008244 <__swrite+0x1e>
 8008238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800823c:	2302      	movs	r3, #2
 800823e:	2200      	movs	r2, #0
 8008240:	f000 f868 	bl	8008314 <_lseek_r>
 8008244:	89a3      	ldrh	r3, [r4, #12]
 8008246:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800824a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800824e:	81a3      	strh	r3, [r4, #12]
 8008250:	4632      	mov	r2, r6
 8008252:	463b      	mov	r3, r7
 8008254:	4628      	mov	r0, r5
 8008256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800825a:	f000 b817 	b.w	800828c <_write_r>

0800825e <__sseek>:
 800825e:	b510      	push	{r4, lr}
 8008260:	460c      	mov	r4, r1
 8008262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008266:	f000 f855 	bl	8008314 <_lseek_r>
 800826a:	1c43      	adds	r3, r0, #1
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	bf15      	itete	ne
 8008270:	6560      	strne	r0, [r4, #84]	; 0x54
 8008272:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008276:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800827a:	81a3      	strheq	r3, [r4, #12]
 800827c:	bf18      	it	ne
 800827e:	81a3      	strhne	r3, [r4, #12]
 8008280:	bd10      	pop	{r4, pc}

08008282 <__sclose>:
 8008282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008286:	f000 b813 	b.w	80082b0 <_close_r>
	...

0800828c <_write_r>:
 800828c:	b538      	push	{r3, r4, r5, lr}
 800828e:	4d07      	ldr	r5, [pc, #28]	; (80082ac <_write_r+0x20>)
 8008290:	4604      	mov	r4, r0
 8008292:	4608      	mov	r0, r1
 8008294:	4611      	mov	r1, r2
 8008296:	2200      	movs	r2, #0
 8008298:	602a      	str	r2, [r5, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	f7f9 fae5 	bl	800186a <_write>
 80082a0:	1c43      	adds	r3, r0, #1
 80082a2:	d102      	bne.n	80082aa <_write_r+0x1e>
 80082a4:	682b      	ldr	r3, [r5, #0]
 80082a6:	b103      	cbz	r3, 80082aa <_write_r+0x1e>
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	bd38      	pop	{r3, r4, r5, pc}
 80082ac:	200002f8 	.word	0x200002f8

080082b0 <_close_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	4d06      	ldr	r5, [pc, #24]	; (80082cc <_close_r+0x1c>)
 80082b4:	2300      	movs	r3, #0
 80082b6:	4604      	mov	r4, r0
 80082b8:	4608      	mov	r0, r1
 80082ba:	602b      	str	r3, [r5, #0]
 80082bc:	f7f9 faf1 	bl	80018a2 <_close>
 80082c0:	1c43      	adds	r3, r0, #1
 80082c2:	d102      	bne.n	80082ca <_close_r+0x1a>
 80082c4:	682b      	ldr	r3, [r5, #0]
 80082c6:	b103      	cbz	r3, 80082ca <_close_r+0x1a>
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	200002f8 	.word	0x200002f8

080082d0 <_fstat_r>:
 80082d0:	b538      	push	{r3, r4, r5, lr}
 80082d2:	4d07      	ldr	r5, [pc, #28]	; (80082f0 <_fstat_r+0x20>)
 80082d4:	2300      	movs	r3, #0
 80082d6:	4604      	mov	r4, r0
 80082d8:	4608      	mov	r0, r1
 80082da:	4611      	mov	r1, r2
 80082dc:	602b      	str	r3, [r5, #0]
 80082de:	f7f9 faec 	bl	80018ba <_fstat>
 80082e2:	1c43      	adds	r3, r0, #1
 80082e4:	d102      	bne.n	80082ec <_fstat_r+0x1c>
 80082e6:	682b      	ldr	r3, [r5, #0]
 80082e8:	b103      	cbz	r3, 80082ec <_fstat_r+0x1c>
 80082ea:	6023      	str	r3, [r4, #0]
 80082ec:	bd38      	pop	{r3, r4, r5, pc}
 80082ee:	bf00      	nop
 80082f0:	200002f8 	.word	0x200002f8

080082f4 <_isatty_r>:
 80082f4:	b538      	push	{r3, r4, r5, lr}
 80082f6:	4d06      	ldr	r5, [pc, #24]	; (8008310 <_isatty_r+0x1c>)
 80082f8:	2300      	movs	r3, #0
 80082fa:	4604      	mov	r4, r0
 80082fc:	4608      	mov	r0, r1
 80082fe:	602b      	str	r3, [r5, #0]
 8008300:	f7f9 faeb 	bl	80018da <_isatty>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d102      	bne.n	800830e <_isatty_r+0x1a>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	b103      	cbz	r3, 800830e <_isatty_r+0x1a>
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	200002f8 	.word	0x200002f8

08008314 <_lseek_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	4d07      	ldr	r5, [pc, #28]	; (8008334 <_lseek_r+0x20>)
 8008318:	4604      	mov	r4, r0
 800831a:	4608      	mov	r0, r1
 800831c:	4611      	mov	r1, r2
 800831e:	2200      	movs	r2, #0
 8008320:	602a      	str	r2, [r5, #0]
 8008322:	461a      	mov	r2, r3
 8008324:	f7f9 fae4 	bl	80018f0 <_lseek>
 8008328:	1c43      	adds	r3, r0, #1
 800832a:	d102      	bne.n	8008332 <_lseek_r+0x1e>
 800832c:	682b      	ldr	r3, [r5, #0]
 800832e:	b103      	cbz	r3, 8008332 <_lseek_r+0x1e>
 8008330:	6023      	str	r3, [r4, #0]
 8008332:	bd38      	pop	{r3, r4, r5, pc}
 8008334:	200002f8 	.word	0x200002f8

08008338 <_read_r>:
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	4d07      	ldr	r5, [pc, #28]	; (8008358 <_read_r+0x20>)
 800833c:	4604      	mov	r4, r0
 800833e:	4608      	mov	r0, r1
 8008340:	4611      	mov	r1, r2
 8008342:	2200      	movs	r2, #0
 8008344:	602a      	str	r2, [r5, #0]
 8008346:	461a      	mov	r2, r3
 8008348:	f7f9 fa72 	bl	8001830 <_read>
 800834c:	1c43      	adds	r3, r0, #1
 800834e:	d102      	bne.n	8008356 <_read_r+0x1e>
 8008350:	682b      	ldr	r3, [r5, #0]
 8008352:	b103      	cbz	r3, 8008356 <_read_r+0x1e>
 8008354:	6023      	str	r3, [r4, #0]
 8008356:	bd38      	pop	{r3, r4, r5, pc}
 8008358:	200002f8 	.word	0x200002f8

0800835c <_init>:
 800835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800835e:	bf00      	nop
 8008360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008362:	bc08      	pop	{r3}
 8008364:	469e      	mov	lr, r3
 8008366:	4770      	bx	lr

08008368 <_fini>:
 8008368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836a:	bf00      	nop
 800836c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800836e:	bc08      	pop	{r3}
 8008370:	469e      	mov	lr, r3
 8008372:	4770      	bx	lr
